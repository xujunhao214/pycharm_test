{
  "uid" : "ff97fa81ee8ac243",
  "name" : "数据库校验-VPS分配下单-持仓检查",
  "fullName" : "test_foundation.test_masOrderSend_copy.TestMasordersendcopy#test_dbquery_order_detail",
  "historyId" : "8bdcf3ba02cf5d60b4b8bbc3797d8d21",
  "time" : {
    "start" : 1751621338643,
    "stop" : 1751621370941,
    "duration" : 32298
  },
  "status" : "broken",
  "statusMessage" : "TimeoutError: 数据库查询超时，未找到记录 (SQL: \n            SELECT * \n            FROM follow_order_detail \n            WHERE symbol LIKE %s \n              AND send_no = %s \n              AND type = %s \n              AND trader_id = %s\n            , PARAMS: ('%XAUUSD%', '8068547340187', '0', 5824))",
  "statusTrace" : "self = <lingkuan_704.test_foundation.test_masOrderSend_copy.TestMasordersendcopy object at 0x0000026708D41CD0>\nvar_manager = <lingkuan_704.commons.variable_manager.VariableManager object at 0x0000026708D593D0>\ndb_transaction = <pymysql.connections.Connection object at 0x0000026708DAC880>\n\n    @allure.title(\"数据库校验-VPS分配下单-持仓检查\")\n    def test_dbquery_order_detail(self, var_manager, db_transaction):\n        with allure.step(\"1. 根据下单指令仓库的order_no字段获取跟单账号订单数据\"):\n            order_no = var_manager.get_variable(\"order_no\")\n            trader_ordersend = var_manager.get_variable(\"trader_ordersend\")\n            vps_addslave_id = var_manager.get_variable(\"vps_addslave_id\")\n            masOrderSend = var_manager.get_variable(\"masOrderSend\")\n    \n            table_name = masOrderSend[\"table_detail\"]\n            symbol = masOrderSend[\"symbol\"]\n    \n            sql = f\"\"\"\n            SELECT *\n            FROM {table_name}\n            WHERE symbol LIKE %s\n              AND send_no = %s\n              AND type = %s\n              AND trader_id = %s\n            \"\"\"\n            params = (\n                f\"%{symbol}%\",\n                order_no,\n                masOrderSend[\"type\"],\n                vps_addslave_id\n            )\n    \n>           db_data = self.wait_for_database_record(\n                db_transaction,\n                sql,\n                params,\n                time_field=\"create_time\",\n                time_range=MYSQL_TIME\n            )\n\ntest_foundation\\test_masOrderSend_copy.py:137: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommons\\api_base.py:169: in wait_for_database_record\n    return wait_for_condition(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncondition = <function APITestBase.wait_for_database_record.<locals>.check_db at 0x0000026708D57B80>\ntimeout = 30, poll_interval = 2\nerror_message = \"数据库查询超时，未找到记录 (SQL: \\n            SELECT * \\n            FROM follow_order_detail \\n            WHERE symbol LIKE %s ...     AND type = %s \\n              AND trader_id = %s\\n            , PARAMS: ('%XAUUSD%', '8068547340187', '0', 5824))\"\nstep_title = '等待数据库记录出现'\n\n    def wait_for_condition(\n            condition: Callable[[], Any],\n            timeout: int = 30,\n            poll_interval: float = 1.0,\n            error_message: str = \"等待条件超时未满足\",\n            step_title: Optional[str] = None\n    ) -> Any:\n        \"\"\"\n        智能等待条件满足，同时记录Allure步骤\n    \n        Args:\n            condition: 检查条件的函数，返回结果表示条件是否满足\n            timeout: 最长等待时间（秒）\n            poll_interval: 轮询间隔（秒）\n            error_message: 超时错误信息\n            step_title: Allure步骤标题，默认为\"等待条件满足\"\n    \n        Returns:\n            条件函数的返回值\n        \"\"\"\n        step_title = step_title or f\"等待条件满足 (超时: {timeout}秒)\"\n    \n        with allure.step(step_title):\n            start_time = time.time()\n            elapsed_time = 0\n            last_result = None\n    \n            while elapsed_time < timeout:\n                try:\n                    last_result = condition()\n                    allure.attach(\n                        f\"轮询检查结果 (已等待 {elapsed_time:.1f}秒): {last_result}\",\n                        name=\"条件检查日志\",\n                        attachment_type=allure.attachment_type.TEXT\n                    )\n    \n                    if last_result:\n                        allure.attach(\n                            f\"条件满足，耗时: {elapsed_time:.1f}秒\",\n                            name=\"最终结果\",\n                            attachment_type=allure.attachment_type.TEXT\n                        )\n                        return last_result\n                except Exception as e:\n                    allure.attach(\n                        f\"轮询异常 (已等待 {elapsed_time:.1f}秒): {str(e)}\",\n                        name=\"异常信息\",\n                        attachment_type=allure.attachment_type.TEXT\n                    )\n                    raise\n    \n                time.sleep(poll_interval)\n                elapsed_time = time.time() - start_time\n    \n            # 超时处理\n            allure.attach(\n                f\"等待超时 ({timeout}秒)，最终检查结果: {last_result}\",\n                name=\"超时信息\",\n                attachment_type=allure.attachment_type.TEXT\n            )\n>           raise TimeoutError(error_message)\nE           TimeoutError: 数据库查询超时，未找到记录 (SQL: \nE                       SELECT * \nE                       FROM follow_order_detail \nE                       WHERE symbol LIKE %s \nE                         AND send_no = %s \nE                         AND type = %s \nE                         AND trader_id = %s\nE                       , PARAMS: ('%XAUUSD%', '8068547340187', '0', 5824))\n\ncommons\\wait_utils.py:70: TimeoutError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "environment",
    "time" : {
      "start" : 1751621337339,
      "stop" : 1751621337339,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "db_transaction",
    "time" : {
      "start" : 1751621338599,
      "stop" : 1751621338643,
      "duration" : 44
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "db",
    "time" : {
      "start" : 1751621338022,
      "stop" : 1751621338241,
      "duration" : 219
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "db_config",
    "time" : {
      "start" : 1751621338022,
      "stop" : 1751621338022,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "var_manager",
    "time" : {
      "start" : 1751621337339,
      "stop" : 1751621337340,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "TimeoutError: 数据库查询超时，未找到记录 (SQL: \n            SELECT * \n            FROM follow_order_detail \n            WHERE symbol LIKE %s \n              AND send_no = %s \n              AND type = %s \n              AND trader_id = %s\n            , PARAMS: ('%XAUUSD%', '8068547340187', '0', 5824))",
    "statusTrace" : "self = <lingkuan_704.test_foundation.test_masOrderSend_copy.TestMasordersendcopy object at 0x0000026708D41CD0>\nvar_manager = <lingkuan_704.commons.variable_manager.VariableManager object at 0x0000026708D593D0>\ndb_transaction = <pymysql.connections.Connection object at 0x0000026708DAC880>\n\n    @allure.title(\"数据库校验-VPS分配下单-持仓检查\")\n    def test_dbquery_order_detail(self, var_manager, db_transaction):\n        with allure.step(\"1. 根据下单指令仓库的order_no字段获取跟单账号订单数据\"):\n            order_no = var_manager.get_variable(\"order_no\")\n            trader_ordersend = var_manager.get_variable(\"trader_ordersend\")\n            vps_addslave_id = var_manager.get_variable(\"vps_addslave_id\")\n            masOrderSend = var_manager.get_variable(\"masOrderSend\")\n    \n            table_name = masOrderSend[\"table_detail\"]\n            symbol = masOrderSend[\"symbol\"]\n    \n            sql = f\"\"\"\n            SELECT *\n            FROM {table_name}\n            WHERE symbol LIKE %s\n              AND send_no = %s\n              AND type = %s\n              AND trader_id = %s\n            \"\"\"\n            params = (\n                f\"%{symbol}%\",\n                order_no,\n                masOrderSend[\"type\"],\n                vps_addslave_id\n            )\n    \n>           db_data = self.wait_for_database_record(\n                db_transaction,\n                sql,\n                params,\n                time_field=\"create_time\",\n                time_range=MYSQL_TIME\n            )\n\ntest_foundation\\test_masOrderSend_copy.py:137: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommons\\api_base.py:169: in wait_for_database_record\n    return wait_for_condition(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncondition = <function APITestBase.wait_for_database_record.<locals>.check_db at 0x0000026708D57B80>\ntimeout = 30, poll_interval = 2\nerror_message = \"数据库查询超时，未找到记录 (SQL: \\n            SELECT * \\n            FROM follow_order_detail \\n            WHERE symbol LIKE %s ...     AND type = %s \\n              AND trader_id = %s\\n            , PARAMS: ('%XAUUSD%', '8068547340187', '0', 5824))\"\nstep_title = '等待数据库记录出现'\n\n    def wait_for_condition(\n            condition: Callable[[], Any],\n            timeout: int = 30,\n            poll_interval: float = 1.0,\n            error_message: str = \"等待条件超时未满足\",\n            step_title: Optional[str] = None\n    ) -> Any:\n        \"\"\"\n        智能等待条件满足，同时记录Allure步骤\n    \n        Args:\n            condition: 检查条件的函数，返回结果表示条件是否满足\n            timeout: 最长等待时间（秒）\n            poll_interval: 轮询间隔（秒）\n            error_message: 超时错误信息\n            step_title: Allure步骤标题，默认为\"等待条件满足\"\n    \n        Returns:\n            条件函数的返回值\n        \"\"\"\n        step_title = step_title or f\"等待条件满足 (超时: {timeout}秒)\"\n    \n        with allure.step(step_title):\n            start_time = time.time()\n            elapsed_time = 0\n            last_result = None\n    \n            while elapsed_time < timeout:\n                try:\n                    last_result = condition()\n                    allure.attach(\n                        f\"轮询检查结果 (已等待 {elapsed_time:.1f}秒): {last_result}\",\n                        name=\"条件检查日志\",\n                        attachment_type=allure.attachment_type.TEXT\n                    )\n    \n                    if last_result:\n                        allure.attach(\n                            f\"条件满足，耗时: {elapsed_time:.1f}秒\",\n                            name=\"最终结果\",\n                            attachment_type=allure.attachment_type.TEXT\n                        )\n                        return last_result\n                except Exception as e:\n                    allure.attach(\n                        f\"轮询异常 (已等待 {elapsed_time:.1f}秒): {str(e)}\",\n                        name=\"异常信息\",\n                        attachment_type=allure.attachment_type.TEXT\n                    )\n                    raise\n    \n                time.sleep(poll_interval)\n                elapsed_time = time.time() - start_time\n    \n            # 超时处理\n            allure.attach(\n                f\"等待超时 ({timeout}秒)，最终检查结果: {last_result}\",\n                name=\"超时信息\",\n                attachment_type=allure.attachment_type.TEXT\n            )\n>           raise TimeoutError(error_message)\nE           TimeoutError: 数据库查询超时，未找到记录 (SQL: \nE                       SELECT * \nE                       FROM follow_order_detail \nE                       WHERE symbol LIKE %s \nE                         AND send_no = %s \nE                         AND type = %s \nE                         AND trader_id = %s\nE                       , PARAMS: ('%XAUUSD%', '8068547340187', '0', 5824))\n\ncommons\\wait_utils.py:70: TimeoutError",
    "steps" : [ {
      "name" : "1. 根据下单指令仓库的order_no字段获取跟单账号订单数据",
      "time" : {
        "start" : 1751621338643,
        "stop" : 1751621370941,
        "duration" : 32298
      },
      "status" : "broken",
      "statusMessage" : "TimeoutError: 数据库查询超时，未找到记录 (SQL: \n            SELECT * \n            FROM follow_order_detail \n            WHERE symbol LIKE %s \n              AND send_no = %s \n              AND type = %s \n              AND trader_id = %s\n            , PARAMS: ('%XAUUSD%', '8068547340187', '0', 5824))\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\lingkuan_704\\test_foundation\\test_masOrderSend_copy.py\", line 137, in test_dbquery_order_detail\n    db_data = self.wait_for_database_record(\n  File \"D:\\pycharm_test\\lingkuan_704\\commons\\api_base.py\", line 169, in wait_for_database_record\n    return wait_for_condition(\n  File \"D:\\pycharm_test\\lingkuan_704\\commons\\wait_utils.py\", line 70, in wait_for_condition\n    raise TimeoutError(error_message)\n",
      "steps" : [ {
        "name" : "等待数据库记录出现",
        "time" : {
          "start" : 1751621338643,
          "stop" : 1751621370940,
          "duration" : 32297
        },
        "status" : "broken",
        "statusMessage" : "TimeoutError: 数据库查询超时，未找到记录 (SQL: \n            SELECT * \n            FROM follow_order_detail \n            WHERE symbol LIKE %s \n              AND send_no = %s \n              AND type = %s \n              AND trader_id = %s\n            , PARAMS: ('%XAUUSD%', '8068547340187', '0', 5824))\n",
        "statusTrace" : "  File \"D:\\pycharm_test\\lingkuan_704\\commons\\wait_utils.py\", line 70, in wait_for_condition\n    raise TimeoutError(error_message)\n",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "92015a674ad503cd",
          "name" : "条件检查日志",
          "source" : "92015a674ad503cd.txt",
          "type" : "text/plain",
          "size" : 41
        }, {
          "uid" : "8f93dab86aeaddae",
          "name" : "条件检查日志",
          "source" : "8f93dab86aeaddae.txt",
          "type" : "text/plain",
          "size" : 41
        }, {
          "uid" : "959a8ad20f8af278",
          "name" : "条件检查日志",
          "source" : "959a8ad20f8af278.txt",
          "type" : "text/plain",
          "size" : 41
        }, {
          "uid" : "2f2e175416e51bf4",
          "name" : "条件检查日志",
          "source" : "2f2e175416e51bf4.txt",
          "type" : "text/plain",
          "size" : 41
        }, {
          "uid" : "e8e9baecaa74bb85",
          "name" : "条件检查日志",
          "source" : "e8e9baecaa74bb85.txt",
          "type" : "text/plain",
          "size" : 41
        }, {
          "uid" : "79a3bd2ab4a74517",
          "name" : "条件检查日志",
          "source" : "79a3bd2ab4a74517.txt",
          "type" : "text/plain",
          "size" : 42
        }, {
          "uid" : "cbc762be68c242d2",
          "name" : "条件检查日志",
          "source" : "cbc762be68c242d2.txt",
          "type" : "text/plain",
          "size" : 42
        }, {
          "uid" : "890f8422d545a8ed",
          "name" : "条件检查日志",
          "source" : "890f8422d545a8ed.txt",
          "type" : "text/plain",
          "size" : 42
        }, {
          "uid" : "530bbddbff5e6690",
          "name" : "条件检查日志",
          "source" : "530bbddbff5e6690.txt",
          "type" : "text/plain",
          "size" : 42
        }, {
          "uid" : "bdaeddf493e1c06d",
          "name" : "条件检查日志",
          "source" : "bdaeddf493e1c06d.txt",
          "type" : "text/plain",
          "size" : 42
        }, {
          "uid" : "dd92b65e5ac7d5c3",
          "name" : "条件检查日志",
          "source" : "dd92b65e5ac7d5c3.txt",
          "type" : "text/plain",
          "size" : 42
        }, {
          "uid" : "d601ef6c022b7781",
          "name" : "条件检查日志",
          "source" : "d601ef6c022b7781.txt",
          "type" : "text/plain",
          "size" : 42
        }, {
          "uid" : "64d81720332666d1",
          "name" : "条件检查日志",
          "source" : "64d81720332666d1.txt",
          "type" : "text/plain",
          "size" : 42
        }, {
          "uid" : "c1393df1fab91f79",
          "name" : "条件检查日志",
          "source" : "c1393df1fab91f79.txt",
          "type" : "text/plain",
          "size" : 42
        }, {
          "uid" : "f88744a644b0be28",
          "name" : "超时信息",
          "source" : "f88744a644b0be28.txt",
          "type" : "text/plain",
          "size" : 45
        } ],
        "parameters" : [ ],
        "hasContent" : true,
        "stepsCount" : 0,
        "attachmentsCount" : 15,
        "shouldDisplayMessage" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 1,
      "attachmentsCount" : 15,
      "shouldDisplayMessage" : false
    } ],
    "attachments" : [ {
      "uid" : "ef9e3f93acaf45ae",
      "name" : "log",
      "source" : "ef9e3f93acaf45ae.txt",
      "type" : "text/plain",
      "size" : 6481
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 2,
    "attachmentsCount" : 16,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "db_transaction::0",
    "time" : {
      "start" : 1751621371042,
      "stop" : 1751621371085,
      "duration" : 43
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "db::0",
    "time" : {
      "start" : 1751621407739,
      "stop" : 1751621407739,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "var_manager::0",
    "time" : {
      "start" : 1751621407741,
      "stop" : 1751621407741,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "VPS交易下单-复制下单"
  }, {
    "name" : "parentSuite",
    "value" : "test_foundation"
  }, {
    "name" : "suite",
    "value" : "test_masOrderSend_copy"
  }, {
    "name" : "subSuite",
    "value" : "TestMasordersendcopy"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "13632-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_foundation.test_masOrderSend_copy"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "ff97fa81ee8ac243.json",
  "parameterValues" : [ ]
}