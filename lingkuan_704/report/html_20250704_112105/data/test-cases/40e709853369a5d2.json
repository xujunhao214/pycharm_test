{
  "uid" : "40e709853369a5d2",
  "name" : "数据库校验-策略开仓-修改币种@",
  "fullName" : "test_foundation.test_vps_money.TestVPSOrderSend_money#test_dbtrader_cfda",
  "historyId" : "ac742620867ddebdf88bcf6f98298d03",
  "time" : {
    "start" : 1751600499988,
    "stop" : 1751600531806,
    "duration" : 31818
  },
  "status" : "broken",
  "statusMessage" : "TimeoutError: 数据库查询超时，未找到记录 (SQL: \n                SELECT * \n                FROM follow_order_detail \n                WHERE source_user = %s\n                  AND account = %s\n                , PARAMS: ('119999305', '119999355'))",
  "statusTrace" : "self = <lingkuan_704.test_foundation.test_vps_money.TestVPSOrderSend_money object at 0x0000028DAED21310>\nvar_manager = <lingkuan_704.commons.variable_manager.VariableManager object at 0x0000028DAF7BC730>\ndb_transaction = <pymysql.connections.Connection object at 0x0000028DAED1E700>\n\n    @allure.title(\"数据库校验-策略开仓-修改币种@\")\n    def test_dbtrader_cfda(self, var_manager, db_transaction):\n        with allure.step(\"1. 获取订单详情界面跟单账号数据\"):\n            trader_ordersend = var_manager.get_variable(\"trader_ordersend\")\n            vps_trader = var_manager.get_variable(\"vps_trader\")\n            table_name = trader_ordersend[\"table_detail\"]\n            user_accounts_5 = var_manager.get_variable(\"user_accounts_5\")\n    \n            sql = f\"\"\"\n                SELECT *\n                FROM {table_name}\n                WHERE source_user = %s\n                  AND account = %s\n                \"\"\"\n            params = (\n                vps_trader[\"account\"],\n                user_accounts_5,\n            )\n    \n            # 使用智能等待查询\n>           db_data = self.wait_for_database_record(\n                db_transaction,\n                sql,\n                params,\n                time_field=\"create_time\",\n                time_range=MYSQL_TIME,\n                timeout=WAIT_TIMEOUT,\n                poll_interval=POLL_INTERVAL,\n                order_by=\"create_time DESC\"\n            )\n\ntest_foundation\\test_vps_money.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommons\\api_base.py:169: in wait_for_database_record\n    return wait_for_condition(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncondition = <function APITestBase.wait_for_database_record.<locals>.check_db at 0x0000028DAEC938B0>\ntimeout = 30, poll_interval = 2\nerror_message = \"数据库查询超时，未找到记录 (SQL: \\n                SELECT * \\n                FROM follow_order_detail \\n                WHERE source_user = %s\\n                  AND account = %s\\n                , PARAMS: ('119999305', '119999355'))\"\nstep_title = '等待数据库记录出现'\n\n    def wait_for_condition(\n            condition: Callable[[], Any],\n            timeout: int = 30,\n            poll_interval: float = 1.0,\n            error_message: str = \"等待条件超时未满足\",\n            step_title: Optional[str] = None\n    ) -> Any:\n        \"\"\"\n        智能等待条件满足，同时记录Allure步骤\n    \n        Args:\n            condition: 检查条件的函数，返回结果表示条件是否满足\n            timeout: 最长等待时间（秒）\n            poll_interval: 轮询间隔（秒）\n            error_message: 超时错误信息\n            step_title: Allure步骤标题，默认为\"等待条件满足\"\n    \n        Returns:\n            条件函数的返回值\n        \"\"\"\n        step_title = step_title or f\"等待条件满足 (超时: {timeout}秒)\"\n    \n        with allure.step(step_title):\n            start_time = time.time()\n            elapsed_time = 0\n            last_result = None\n    \n            while elapsed_time < timeout:\n                try:\n                    last_result = condition()\n                    allure.attach(\n                        f\"轮询检查结果 (已等待 {elapsed_time:.1f}秒): {last_result}\",\n                        name=\"条件检查日志\",\n                        attachment_type=allure.attachment_type.TEXT\n                    )\n    \n                    if last_result:\n                        allure.attach(\n                            f\"条件满足，耗时: {elapsed_time:.1f}秒\",\n                            name=\"最终结果\",\n                            attachment_type=allure.attachment_type.TEXT\n                        )\n                        return last_result\n                except Exception as e:\n                    allure.attach(\n                        f\"轮询异常 (已等待 {elapsed_time:.1f}秒): {str(e)}\",\n                        name=\"异常信息\",\n                        attachment_type=allure.attachment_type.TEXT\n                    )\n                    raise\n    \n                time.sleep(poll_interval)\n                elapsed_time = time.time() - start_time\n    \n            # 超时处理\n            allure.attach(\n                f\"等待超时 ({timeout}秒)，最终检查结果: {last_result}\",\n                name=\"超时信息\",\n                attachment_type=allure.attachment_type.TEXT\n            )\n>           raise TimeoutError(error_message)\nE           TimeoutError: 数据库查询超时，未找到记录 (SQL: \nE                           SELECT * \nE                           FROM follow_order_detail \nE                           WHERE source_user = %s\nE                             AND account = %s\nE                           , PARAMS: ('119999305', '119999355'))\n\ncommons\\wait_utils.py:70: TimeoutError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "var_manager",
    "time" : {
      "start" : 1751600495839,
      "stop" : 1751600495839,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "environment",
    "time" : {
      "start" : 1751599445702,
      "stop" : 1751599445703,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "db_transaction",
    "time" : {
      "start" : 1751600499942,
      "stop" : 1751600499988,
      "duration" : 46
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "db",
    "time" : {
      "start" : 1751599445703,
      "stop" : 1751599445934,
      "duration" : 231
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "db_config",
    "time" : {
      "start" : 1751599445703,
      "stop" : 1751599445703,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "TimeoutError: 数据库查询超时，未找到记录 (SQL: \n                SELECT * \n                FROM follow_order_detail \n                WHERE source_user = %s\n                  AND account = %s\n                , PARAMS: ('119999305', '119999355'))",
    "statusTrace" : "self = <lingkuan_704.test_foundation.test_vps_money.TestVPSOrderSend_money object at 0x0000028DAED21310>\nvar_manager = <lingkuan_704.commons.variable_manager.VariableManager object at 0x0000028DAF7BC730>\ndb_transaction = <pymysql.connections.Connection object at 0x0000028DAED1E700>\n\n    @allure.title(\"数据库校验-策略开仓-修改币种@\")\n    def test_dbtrader_cfda(self, var_manager, db_transaction):\n        with allure.step(\"1. 获取订单详情界面跟单账号数据\"):\n            trader_ordersend = var_manager.get_variable(\"trader_ordersend\")\n            vps_trader = var_manager.get_variable(\"vps_trader\")\n            table_name = trader_ordersend[\"table_detail\"]\n            user_accounts_5 = var_manager.get_variable(\"user_accounts_5\")\n    \n            sql = f\"\"\"\n                SELECT *\n                FROM {table_name}\n                WHERE source_user = %s\n                  AND account = %s\n                \"\"\"\n            params = (\n                vps_trader[\"account\"],\n                user_accounts_5,\n            )\n    \n            # 使用智能等待查询\n>           db_data = self.wait_for_database_record(\n                db_transaction,\n                sql,\n                params,\n                time_field=\"create_time\",\n                time_range=MYSQL_TIME,\n                timeout=WAIT_TIMEOUT,\n                poll_interval=POLL_INTERVAL,\n                order_by=\"create_time DESC\"\n            )\n\ntest_foundation\\test_vps_money.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommons\\api_base.py:169: in wait_for_database_record\n    return wait_for_condition(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncondition = <function APITestBase.wait_for_database_record.<locals>.check_db at 0x0000028DAEC938B0>\ntimeout = 30, poll_interval = 2\nerror_message = \"数据库查询超时，未找到记录 (SQL: \\n                SELECT * \\n                FROM follow_order_detail \\n                WHERE source_user = %s\\n                  AND account = %s\\n                , PARAMS: ('119999305', '119999355'))\"\nstep_title = '等待数据库记录出现'\n\n    def wait_for_condition(\n            condition: Callable[[], Any],\n            timeout: int = 30,\n            poll_interval: float = 1.0,\n            error_message: str = \"等待条件超时未满足\",\n            step_title: Optional[str] = None\n    ) -> Any:\n        \"\"\"\n        智能等待条件满足，同时记录Allure步骤\n    \n        Args:\n            condition: 检查条件的函数，返回结果表示条件是否满足\n            timeout: 最长等待时间（秒）\n            poll_interval: 轮询间隔（秒）\n            error_message: 超时错误信息\n            step_title: Allure步骤标题，默认为\"等待条件满足\"\n    \n        Returns:\n            条件函数的返回值\n        \"\"\"\n        step_title = step_title or f\"等待条件满足 (超时: {timeout}秒)\"\n    \n        with allure.step(step_title):\n            start_time = time.time()\n            elapsed_time = 0\n            last_result = None\n    \n            while elapsed_time < timeout:\n                try:\n                    last_result = condition()\n                    allure.attach(\n                        f\"轮询检查结果 (已等待 {elapsed_time:.1f}秒): {last_result}\",\n                        name=\"条件检查日志\",\n                        attachment_type=allure.attachment_type.TEXT\n                    )\n    \n                    if last_result:\n                        allure.attach(\n                            f\"条件满足，耗时: {elapsed_time:.1f}秒\",\n                            name=\"最终结果\",\n                            attachment_type=allure.attachment_type.TEXT\n                        )\n                        return last_result\n                except Exception as e:\n                    allure.attach(\n                        f\"轮询异常 (已等待 {elapsed_time:.1f}秒): {str(e)}\",\n                        name=\"异常信息\",\n                        attachment_type=allure.attachment_type.TEXT\n                    )\n                    raise\n    \n                time.sleep(poll_interval)\n                elapsed_time = time.time() - start_time\n    \n            # 超时处理\n            allure.attach(\n                f\"等待超时 ({timeout}秒)，最终检查结果: {last_result}\",\n                name=\"超时信息\",\n                attachment_type=allure.attachment_type.TEXT\n            )\n>           raise TimeoutError(error_message)\nE           TimeoutError: 数据库查询超时，未找到记录 (SQL: \nE                           SELECT * \nE                           FROM follow_order_detail \nE                           WHERE source_user = %s\nE                             AND account = %s\nE                           , PARAMS: ('119999305', '119999355'))\n\ncommons\\wait_utils.py:70: TimeoutError",
    "steps" : [ {
      "name" : "1. 获取订单详情界面跟单账号数据",
      "time" : {
        "start" : 1751600499988,
        "stop" : 1751600531806,
        "duration" : 31818
      },
      "status" : "broken",
      "statusMessage" : "TimeoutError: 数据库查询超时，未找到记录 (SQL: \n                SELECT * \n                FROM follow_order_detail \n                WHERE source_user = %s\n                  AND account = %s\n                , PARAMS: ('119999305', '119999355'))\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\lingkuan_704\\test_foundation\\test_vps_money.py\", line 173, in test_dbtrader_cfda\n    db_data = self.wait_for_database_record(\n  File \"D:\\pycharm_test\\lingkuan_704\\commons\\api_base.py\", line 169, in wait_for_database_record\n    return wait_for_condition(\n  File \"D:\\pycharm_test\\lingkuan_704\\commons\\wait_utils.py\", line 70, in wait_for_condition\n    raise TimeoutError(error_message)\n",
      "steps" : [ {
        "name" : "等待数据库记录出现",
        "time" : {
          "start" : 1751600499988,
          "stop" : 1751600531805,
          "duration" : 31817
        },
        "status" : "broken",
        "statusMessage" : "TimeoutError: 数据库查询超时，未找到记录 (SQL: \n                SELECT * \n                FROM follow_order_detail \n                WHERE source_user = %s\n                  AND account = %s\n                , PARAMS: ('119999305', '119999355'))\n",
        "statusTrace" : "  File \"D:\\pycharm_test\\lingkuan_704\\commons\\wait_utils.py\", line 70, in wait_for_condition\n    raise TimeoutError(error_message)\n",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "7fcca3e5b9b4ddae",
          "name" : "条件检查日志",
          "source" : "7fcca3e5b9b4ddae.txt",
          "type" : "text/plain",
          "size" : 41
        }, {
          "uid" : "4fcbb8743ef75575",
          "name" : "条件检查日志",
          "source" : "4fcbb8743ef75575.txt",
          "type" : "text/plain",
          "size" : 41
        }, {
          "uid" : "22dd4f9a4216982e",
          "name" : "条件检查日志",
          "source" : "22dd4f9a4216982e.txt",
          "type" : "text/plain",
          "size" : 41
        }, {
          "uid" : "1a4daafed007e622",
          "name" : "条件检查日志",
          "source" : "1a4daafed007e622.txt",
          "type" : "text/plain",
          "size" : 42
        }, {
          "uid" : "eb3bec3b43ad57cf",
          "name" : "条件检查日志",
          "source" : "eb3bec3b43ad57cf.txt",
          "type" : "text/plain",
          "size" : 42
        }, {
          "uid" : "50f18655c7c21647",
          "name" : "条件检查日志",
          "source" : "50f18655c7c21647.txt",
          "type" : "text/plain",
          "size" : 42
        }, {
          "uid" : "c0c0981d3ab3d60d",
          "name" : "条件检查日志",
          "source" : "c0c0981d3ab3d60d.txt",
          "type" : "text/plain",
          "size" : 42
        }, {
          "uid" : "3c1d757ea1b1359b",
          "name" : "条件检查日志",
          "source" : "3c1d757ea1b1359b.txt",
          "type" : "text/plain",
          "size" : 42
        }, {
          "uid" : "4d28460aab0bb0d7",
          "name" : "条件检查日志",
          "source" : "4d28460aab0bb0d7.txt",
          "type" : "text/plain",
          "size" : 42
        }, {
          "uid" : "96e627b511dff7d0",
          "name" : "超时信息",
          "source" : "96e627b511dff7d0.txt",
          "type" : "text/plain",
          "size" : 45
        } ],
        "parameters" : [ ],
        "attachmentsCount" : 10,
        "shouldDisplayMessage" : true,
        "stepsCount" : 0,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 10,
      "shouldDisplayMessage" : false,
      "stepsCount" : 1,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "b9e7cbdff6c597ed",
      "name" : "log",
      "source" : "b9e7cbdff6c597ed.txt",
      "type" : "text/plain",
      "size" : 3788
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 11,
    "shouldDisplayMessage" : true,
    "stepsCount" : 2,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "var_manager::0",
    "time" : {
      "start" : 1751600691207,
      "stop" : 1751600691208,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "db_transaction::0",
    "time" : {
      "start" : 1751600531814,
      "stop" : 1751600531861,
      "duration" : 47
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "db::0",
    "time" : {
      "start" : 1751600691197,
      "stop" : 1751600691197,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "VPS策略下单-跟单修改币种"
  }, {
    "name" : "parentSuite",
    "value" : "test_foundation"
  }, {
    "name" : "suite",
    "value" : "test_vps_money"
  }, {
    "name" : "subSuite",
    "value" : "TestVPSOrderSend_money"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "30528-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_foundation.test_vps_money"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "40e709853369a5d2.json",
  "parameterValues" : [ ]
}