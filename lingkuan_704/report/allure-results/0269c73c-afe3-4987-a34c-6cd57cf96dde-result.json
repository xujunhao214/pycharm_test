{"name": "数据库校验-交易平仓-持仓检查跟单账号数据", "status": "broken", "statusDetails": {"message": "TimeoutError: 数据库查询超时，未找到记录 (SQL: \n                SELECT * \n                FROM follow_order_detail \n                WHERE source_user = %s\n                  AND account = %s\n                  AND close_status = %s\n                  AND close_no = %s\n                , PARAMS: ('119999356', '119999356', '1', '6795690430720'))", "trace": "self = <lingkuan_704.test_foundation.test_masOrderSend_copy.TestMasordersendcopy object at 0x0000026708D591F0>\nvar_manager = <lingkuan_704.commons.variable_manager.VariableManager object at 0x0000026708D593D0>\ndb_transaction = <pymysql.connections.Connection object at 0x0000026708DAC880>\n\n    @allure.title(\"数据库校验-交易平仓-持仓检查跟单账号数据\")\n    def test_dbquery_addsalve_clsesdetail(self, var_manager, db_transaction):\n        with allure.step(\"1. 获取订单详情界面跟单账号数据\"):\n            trader_ordersend = var_manager.get_variable(\"trader_ordersend\")\n            user_accounts_1 = var_manager.get_variable(\"user_accounts_1\")\n            table_name = trader_ordersend[\"table_detail\"]\n            close_send_nos = var_manager.get_variable(\"close_send_nos\")\n    \n            sql = f\"\"\"\n                SELECT *\n                FROM {table_name}\n                WHERE source_user = %s\n                  AND account = %s\n                  AND close_status = %s\n                  AND close_no = %s\n                \"\"\"\n            params = (\n                user_accounts_1,\n                user_accounts_1,\n                \"1\",\n                close_send_nos\n    \n            )\n    \n            # 使用智能等待查询\n>           db_data = self.wait_for_database_record(\n                db_transaction,\n                sql,\n                params,\n                time_field=\"create_time\",\n                time_range=MYSQL_TIME,\n                timeout=WAIT_TIMEOUT,\n                poll_interval=POLL_INTERVAL,\n                order_by=\"create_time DESC\"\n            )\n\ntest_foundation\\test_masOrderSend_copy.py:249: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommons\\api_base.py:169: in wait_for_database_record\n    return wait_for_condition(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncondition = <function APITestBase.wait_for_database_record.<locals>.check_db at 0x0000026708E368B0>\ntimeout = 30, poll_interval = 2\nerror_message = \"数据库查询超时，未找到记录 (SQL: \\n                SELECT * \\n                FROM follow_order_detail \\n                WHERE sou...= %s\\n                  AND close_no = %s\\n                , PARAMS: ('119999356', '119999356', '1', '6795690430720'))\"\nstep_title = '等待数据库记录出现'\n\n    def wait_for_condition(\n            condition: Callable[[], Any],\n            timeout: int = 30,\n            poll_interval: float = 1.0,\n            error_message: str = \"等待条件超时未满足\",\n            step_title: Optional[str] = None\n    ) -> Any:\n        \"\"\"\n        智能等待条件满足，同时记录Allure步骤\n    \n        Args:\n            condition: 检查条件的函数，返回结果表示条件是否满足\n            timeout: 最长等待时间（秒）\n            poll_interval: 轮询间隔（秒）\n            error_message: 超时错误信息\n            step_title: Allure步骤标题，默认为\"等待条件满足\"\n    \n        Returns:\n            条件函数的返回值\n        \"\"\"\n        step_title = step_title or f\"等待条件满足 (超时: {timeout}秒)\"\n    \n        with allure.step(step_title):\n            start_time = time.time()\n            elapsed_time = 0\n            last_result = None\n    \n            while elapsed_time < timeout:\n                try:\n                    last_result = condition()\n                    allure.attach(\n                        f\"轮询检查结果 (已等待 {elapsed_time:.1f}秒): {last_result}\",\n                        name=\"条件检查日志\",\n                        attachment_type=allure.attachment_type.TEXT\n                    )\n    \n                    if last_result:\n                        allure.attach(\n                            f\"条件满足，耗时: {elapsed_time:.1f}秒\",\n                            name=\"最终结果\",\n                            attachment_type=allure.attachment_type.TEXT\n                        )\n                        return last_result\n                except Exception as e:\n                    allure.attach(\n                        f\"轮询异常 (已等待 {elapsed_time:.1f}秒): {str(e)}\",\n                        name=\"异常信息\",\n                        attachment_type=allure.attachment_type.TEXT\n                    )\n                    raise\n    \n                time.sleep(poll_interval)\n                elapsed_time = time.time() - start_time\n    \n            # 超时处理\n            allure.attach(\n                f\"等待超时 ({timeout}秒)，最终检查结果: {last_result}\",\n                name=\"超时信息\",\n                attachment_type=allure.attachment_type.TEXT\n            )\n>           raise TimeoutError(error_message)\nE           TimeoutError: 数据库查询超时，未找到记录 (SQL: \nE                           SELECT * \nE                           FROM follow_order_detail \nE                           WHERE source_user = %s\nE                             AND account = %s\nE                             AND close_status = %s\nE                             AND close_no = %s\nE                           , PARAMS: ('119999356', '119999356', '1', '6795690430720'))\n\ncommons\\wait_utils.py:70: TimeoutError"}, "steps": [{"name": "1. 获取订单详情界面跟单账号数据", "status": "broken", "statusDetails": {"message": "TimeoutError: 数据库查询超时，未找到记录 (SQL: \n                SELECT * \n                FROM follow_order_detail \n                WHERE source_user = %s\n                  AND account = %s\n                  AND close_status = %s\n                  AND close_no = %s\n                , PARAMS: ('119999356', '119999356', '1', '6795690430720'))\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_704\\test_foundation\\test_masOrderSend_copy.py\", line 249, in test_dbquery_addsalve_clsesdetail\n    db_data = self.wait_for_database_record(\n  File \"D:\\pycharm_test\\lingkuan_704\\commons\\api_base.py\", line 169, in wait_for_database_record\n    return wait_for_condition(\n  File \"D:\\pycharm_test\\lingkuan_704\\commons\\wait_utils.py\", line 70, in wait_for_condition\n    raise TimeoutError(error_message)\n"}, "steps": [{"name": "等待数据库记录出现", "status": "broken", "statusDetails": {"message": "TimeoutError: 数据库查询超时，未找到记录 (SQL: \n                SELECT * \n                FROM follow_order_detail \n                WHERE source_user = %s\n                  AND account = %s\n                  AND close_status = %s\n                  AND close_no = %s\n                , PARAMS: ('119999356', '119999356', '1', '6795690430720'))\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_704\\commons\\wait_utils.py\", line 70, in wait_for_condition\n    raise TimeoutError(error_message)\n"}, "attachments": [{"name": "条件检查日志", "source": "e4ce2a7d-4b6f-4ba4-ba78-725bacc313f1-attachment.txt", "type": "text/plain"}, {"name": "条件检查日志", "source": "191fbbda-d511-447f-9588-16da2e1902a4-attachment.txt", "type": "text/plain"}, {"name": "条件检查日志", "source": "fc9b8c20-a647-4965-a123-33e38bd5a778-attachment.txt", "type": "text/plain"}, {"name": "条件检查日志", "source": "2fc1bee1-b8e9-446f-afc5-79a90a13c2fd-attachment.txt", "type": "text/plain"}, {"name": "条件检查日志", "source": "a15080d4-d097-4bb0-b319-a2d023c13189-attachment.txt", "type": "text/plain"}, {"name": "条件检查日志", "source": "8538de08-9e8a-4351-acfa-b3ae8d94285e-attachment.txt", "type": "text/plain"}, {"name": "条件检查日志", "source": "7920ce4c-2aa3-4fd1-a4fd-ec5b15266c39-attachment.txt", "type": "text/plain"}, {"name": "条件检查日志", "source": "9784fa28-ce63-4357-bf90-ca339729a4dd-attachment.txt", "type": "text/plain"}, {"name": "条件检查日志", "source": "c6e36e69-ac79-4a3b-95a1-02d0981aac6a-attachment.txt", "type": "text/plain"}, {"name": "条件检查日志", "source": "3cdd6399-f802-49dc-9912-b4d74aae94a7-attachment.txt", "type": "text/plain"}, {"name": "条件检查日志", "source": "6dd56bbb-0ae6-4179-977a-470f9fd99b60-attachment.txt", "type": "text/plain"}, {"name": "条件检查日志", "source": "96aa5857-fb6e-4508-b078-3b3f9dcbedd5-attachment.txt", "type": "text/plain"}, {"name": "条件检查日志", "source": "02a3cf41-9b75-4f22-a0a8-e5e1f9094ae2-attachment.txt", "type": "text/plain"}, {"name": "超时信息", "source": "8ed8d2b9-79d6-4b5d-b99b-4184ddffc850-attachment.txt", "type": "text/plain"}], "start": 1751621376762, "stop": 1751621407681}], "start": 1751621376762, "stop": 1751621407681}], "attachments": [{"name": "log", "source": "8c640156-dbd3-4c29-be32-80d1fbd5169c-attachment.txt", "type": "text/plain"}], "start": 1751621376762, "stop": 1751621407683, "uuid": "5279e17f-f77a-4e96-871e-110497af8f7f", "historyId": "d424f2411a0fc1ca92d5b1c181d75bcf", "testCaseId": "d424f2411a0fc1ca92d5b1c181d75bcf", "fullName": "test_foundation.test_masOrderSend_copy.TestMasordersendcopy#test_dbquery_addsalve_clsesdetail", "labels": [{"name": "feature", "value": "VPS交易下单-复制下单"}, {"name": "parentSuite", "value": "test_foundation"}, {"name": "suite", "value": "test_masOrderSend_copy"}, {"name": "subSuite", "value": "TestMasordersendcopy"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "13632-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_foundation.test_masOrderSend_copy"}]}