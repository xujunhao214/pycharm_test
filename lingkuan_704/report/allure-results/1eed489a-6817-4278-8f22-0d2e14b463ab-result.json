{"name": "数据库校验-VPS分配下单-持仓检查", "status": "broken", "statusDetails": {"message": "TimeoutError: 数据库查询超时，未找到记录 (SQL: \n            SELECT * \n            FROM follow_order_detail \n            WHERE symbol LIKE %s \n              AND send_no = %s \n              AND type = %s \n              AND trader_id = %s\n            , PARAMS: ('%XAUUSD%', '8068547340187', '0', 5824))", "trace": "self = <lingkuan_704.test_foundation.test_masOrderSend_copy.TestMasordersendcopy object at 0x0000026708D41CD0>\nvar_manager = <lingkuan_704.commons.variable_manager.VariableManager object at 0x0000026708D593D0>\ndb_transaction = <pymysql.connections.Connection object at 0x0000026708DAC880>\n\n    @allure.title(\"数据库校验-VPS分配下单-持仓检查\")\n    def test_dbquery_order_detail(self, var_manager, db_transaction):\n        with allure.step(\"1. 根据下单指令仓库的order_no字段获取跟单账号订单数据\"):\n            order_no = var_manager.get_variable(\"order_no\")\n            trader_ordersend = var_manager.get_variable(\"trader_ordersend\")\n            vps_addslave_id = var_manager.get_variable(\"vps_addslave_id\")\n            masOrderSend = var_manager.get_variable(\"masOrderSend\")\n    \n            table_name = masOrderSend[\"table_detail\"]\n            symbol = masOrderSend[\"symbol\"]\n    \n            sql = f\"\"\"\n            SELECT *\n            FROM {table_name}\n            WHERE symbol LIKE %s\n              AND send_no = %s\n              AND type = %s\n              AND trader_id = %s\n            \"\"\"\n            params = (\n                f\"%{symbol}%\",\n                order_no,\n                masOrderSend[\"type\"],\n                vps_addslave_id\n            )\n    \n>           db_data = self.wait_for_database_record(\n                db_transaction,\n                sql,\n                params,\n                time_field=\"create_time\",\n                time_range=MYSQL_TIME\n            )\n\ntest_foundation\\test_masOrderSend_copy.py:137: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommons\\api_base.py:169: in wait_for_database_record\n    return wait_for_condition(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncondition = <function APITestBase.wait_for_database_record.<locals>.check_db at 0x0000026708D57B80>\ntimeout = 30, poll_interval = 2\nerror_message = \"数据库查询超时，未找到记录 (SQL: \\n            SELECT * \\n            FROM follow_order_detail \\n            WHERE symbol LIKE %s ...     AND type = %s \\n              AND trader_id = %s\\n            , PARAMS: ('%XAUUSD%', '8068547340187', '0', 5824))\"\nstep_title = '等待数据库记录出现'\n\n    def wait_for_condition(\n            condition: Callable[[], Any],\n            timeout: int = 30,\n            poll_interval: float = 1.0,\n            error_message: str = \"等待条件超时未满足\",\n            step_title: Optional[str] = None\n    ) -> Any:\n        \"\"\"\n        智能等待条件满足，同时记录Allure步骤\n    \n        Args:\n            condition: 检查条件的函数，返回结果表示条件是否满足\n            timeout: 最长等待时间（秒）\n            poll_interval: 轮询间隔（秒）\n            error_message: 超时错误信息\n            step_title: Allure步骤标题，默认为\"等待条件满足\"\n    \n        Returns:\n            条件函数的返回值\n        \"\"\"\n        step_title = step_title or f\"等待条件满足 (超时: {timeout}秒)\"\n    \n        with allure.step(step_title):\n            start_time = time.time()\n            elapsed_time = 0\n            last_result = None\n    \n            while elapsed_time < timeout:\n                try:\n                    last_result = condition()\n                    allure.attach(\n                        f\"轮询检查结果 (已等待 {elapsed_time:.1f}秒): {last_result}\",\n                        name=\"条件检查日志\",\n                        attachment_type=allure.attachment_type.TEXT\n                    )\n    \n                    if last_result:\n                        allure.attach(\n                            f\"条件满足，耗时: {elapsed_time:.1f}秒\",\n                            name=\"最终结果\",\n                            attachment_type=allure.attachment_type.TEXT\n                        )\n                        return last_result\n                except Exception as e:\n                    allure.attach(\n                        f\"轮询异常 (已等待 {elapsed_time:.1f}秒): {str(e)}\",\n                        name=\"异常信息\",\n                        attachment_type=allure.attachment_type.TEXT\n                    )\n                    raise\n    \n                time.sleep(poll_interval)\n                elapsed_time = time.time() - start_time\n    \n            # 超时处理\n            allure.attach(\n                f\"等待超时 ({timeout}秒)，最终检查结果: {last_result}\",\n                name=\"超时信息\",\n                attachment_type=allure.attachment_type.TEXT\n            )\n>           raise TimeoutError(error_message)\nE           TimeoutError: 数据库查询超时，未找到记录 (SQL: \nE                       SELECT * \nE                       FROM follow_order_detail \nE                       WHERE symbol LIKE %s \nE                         AND send_no = %s \nE                         AND type = %s \nE                         AND trader_id = %s\nE                       , PARAMS: ('%XAUUSD%', '8068547340187', '0', 5824))\n\ncommons\\wait_utils.py:70: TimeoutError"}, "steps": [{"name": "1. 根据下单指令仓库的order_no字段获取跟单账号订单数据", "status": "broken", "statusDetails": {"message": "TimeoutError: 数据库查询超时，未找到记录 (SQL: \n            SELECT * \n            FROM follow_order_detail \n            WHERE symbol LIKE %s \n              AND send_no = %s \n              AND type = %s \n              AND trader_id = %s\n            , PARAMS: ('%XAUUSD%', '8068547340187', '0', 5824))\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_704\\test_foundation\\test_masOrderSend_copy.py\", line 137, in test_dbquery_order_detail\n    db_data = self.wait_for_database_record(\n  File \"D:\\pycharm_test\\lingkuan_704\\commons\\api_base.py\", line 169, in wait_for_database_record\n    return wait_for_condition(\n  File \"D:\\pycharm_test\\lingkuan_704\\commons\\wait_utils.py\", line 70, in wait_for_condition\n    raise TimeoutError(error_message)\n"}, "steps": [{"name": "等待数据库记录出现", "status": "broken", "statusDetails": {"message": "TimeoutError: 数据库查询超时，未找到记录 (SQL: \n            SELECT * \n            FROM follow_order_detail \n            WHERE symbol LIKE %s \n              AND send_no = %s \n              AND type = %s \n              AND trader_id = %s\n            , PARAMS: ('%XAUUSD%', '8068547340187', '0', 5824))\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_704\\commons\\wait_utils.py\", line 70, in wait_for_condition\n    raise TimeoutError(error_message)\n"}, "attachments": [{"name": "条件检查日志", "source": "8c1a2e22-52ce-449e-a027-397a72aca618-attachment.txt", "type": "text/plain"}, {"name": "条件检查日志", "source": "9dcb4a1f-d647-4d69-ad74-2cdd74122a13-attachment.txt", "type": "text/plain"}, {"name": "条件检查日志", "source": "fd31906c-238d-4598-bea0-634dd1511bc0-attachment.txt", "type": "text/plain"}, {"name": "条件检查日志", "source": "294f7b04-9687-4e13-a944-48190a4ebbd3-attachment.txt", "type": "text/plain"}, {"name": "条件检查日志", "source": "892e14ea-f467-42d1-a667-07089f9b3096-attachment.txt", "type": "text/plain"}, {"name": "条件检查日志", "source": "8bd215e6-f795-4795-8689-fd3eb5cc4f03-attachment.txt", "type": "text/plain"}, {"name": "条件检查日志", "source": "dea4874d-8f5f-4912-9620-6e380f22c342-attachment.txt", "type": "text/plain"}, {"name": "条件检查日志", "source": "d0f132ce-79bd-4a5d-a34d-0afbd9a3ef6b-attachment.txt", "type": "text/plain"}, {"name": "条件检查日志", "source": "1385c5f3-6323-48c5-93cc-c43e2f23601c-attachment.txt", "type": "text/plain"}, {"name": "条件检查日志", "source": "8fabfe0e-4c90-45a6-b0a2-5cd14c7e6413-attachment.txt", "type": "text/plain"}, {"name": "条件检查日志", "source": "ab5def09-47f6-421b-a69d-d5618bc97e9c-attachment.txt", "type": "text/plain"}, {"name": "条件检查日志", "source": "54390b80-c07d-4b3d-bdd5-88551d7ffaa3-attachment.txt", "type": "text/plain"}, {"name": "条件检查日志", "source": "9cce9dd3-8c45-4188-a0c2-a3c8c1e173f7-attachment.txt", "type": "text/plain"}, {"name": "条件检查日志", "source": "623e262d-bc84-4f5e-8eac-eaa1653438a5-attachment.txt", "type": "text/plain"}, {"name": "超时信息", "source": "de804e4f-de19-4cb8-9be6-f7b9d9f9084d-attachment.txt", "type": "text/plain"}], "start": 1751621338643, "stop": 1751621370940}], "start": 1751621338643, "stop": 1751621370941}], "attachments": [{"name": "log", "source": "9d46f20d-4715-46b2-91f8-89aaa92e2e07-attachment.txt", "type": "text/plain"}], "start": 1751621338643, "stop": 1751621370941, "uuid": "e2508aa0-9128-488a-8c55-2647bf12ec26", "historyId": "8bdcf3ba02cf5d60b4b8bbc3797d8d21", "testCaseId": "8bdcf3ba02cf5d60b4b8bbc3797d8d21", "fullName": "test_foundation.test_masOrderSend_copy.TestMasordersendcopy#test_dbquery_order_detail", "labels": [{"name": "feature", "value": "VPS交易下单-复制下单"}, {"name": "parentSuite", "value": "test_foundation"}, {"name": "suite", "value": "test_masOrderSend_copy"}, {"name": "subSuite", "value": "TestMasordersendcopy"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "13632-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_foundation.test_masOrderSend_copy"}]}