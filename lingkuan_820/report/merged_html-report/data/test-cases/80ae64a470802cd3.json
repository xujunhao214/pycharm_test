{
  "uid" : "80ae64a470802cd3",
  "name" : "跟单软件看板-VPS数据-策略开仓",
  "fullName" : "test_vps.test_vps_orderclose.TestVPSOrderSend3#test_trader_orderSend",
  "historyId" : "9d300b7ada78d02aca6835b1b258ae29",
  "time" : {
    "start" : 1755512483925,
    "stop" : 1755512485208,
    "duration" : 1283
  },
  "description" : "\n### 用例说明\n- 前置条件：有vps策略和vps跟单\n- 操作步骤：\n  1. 修改跟单账号的跟单方向为反向，进行开仓\n  2. 跟单账号buy方向进行平仓，平仓失败，给出提示\n  3. 跟单账号shell方向进行平仓，平仓成功\n  4. 策略账号buy方向进行平仓\n- 预期结果：平仓的订单方向功能正确\n",
  "descriptionHtml" : "<h3>用例说明</h3>\n<ul>\n<li>前置条件：有vps策略和vps跟单</li>\n<li>操作步骤：\n<ol>\n<li>修改跟单账号的跟单方向为反向，进行开仓</li>\n<li>跟单账号buy方向进行平仓，平仓失败，给出提示</li>\n<li>跟单账号shell方向进行平仓，平仓成功</li>\n<li>策略账号buy方向进行平仓</li>\n</ol>\n</li>\n<li>预期结果：平仓的订单方向功能正确</li>\n</ul>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: 响应msg字段应为success\nURL: https://39.99.145.155/vps/subcontrol/trader/orderSend\nJSON路径: $.msg\n实际值: 300151下单失败,该账号正在下单中\n期望值: success",
  "statusTrace" : "self = <lingkuan_820.test_vps.test_vps_orderclose.TestVPSOrderSend3 object at 0x000001DFD4674160>\nvar_manager = <lingkuan_817.commons.variable_manager.VariableManager object at 0x000001DFD471C880>\nlogged_session = <lingkuan_820.commons.session.EnvironmentSession object at 0x000001DFD4845EB0>\n\n    @pytest.mark.url(\"vps\")\n    @allure.title(\"跟单软件看板-VPS数据-策略开仓\")\n    def test_trader_orderSend(self, var_manager, logged_session):\n        # 1. 发送策略开仓请求\n        trader_ordersend = var_manager.get_variable(\"trader_ordersend\")\n        vps_trader_id = var_manager.get_variable(\"vps_trader_id\")\n        data = {\n            \"symbol\": trader_ordersend[\"symbol\"],\n            \"placedType\": 0,\n            \"remark\": trader_ordersend[\"remark\"],\n            \"intervalTime\": 100,\n            \"type\": 0,\n            \"totalNum\": trader_ordersend[\"totalNum\"],\n            \"totalSzie\": trader_ordersend[\"totalSzie\"],\n            \"startSize\": trader_ordersend[\"startSize\"],\n            \"endSize\": trader_ordersend[\"endSize\"],\n            \"traderId\": vps_trader_id\n        }\n        response = self.send_post_request(\n            logged_session,\n            '/subcontrol/trader/orderSend',\n            json_data=data,\n        )\n    \n        # 2. 验证响应状态码和内容\n        self.assert_response_status(\n            response,\n            200,\n            \"策略开仓失败\"\n        )\n>       self.assert_json_value(\n            response,\n            \"$.msg\",\n            \"success\",\n            \"响应msg字段应为success\"\n        )\n\ntest_vps\\test_vps_orderclose.py:492: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_820.test_vps.test_vps_orderclose.TestVPSOrderSend3 object at 0x000001DFD4674160>\nresponse = <Response [200]>, json_path = '$.msg', expected_value = 'success'\nerror_msg = '响应msg字段应为success'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg):\n        \"\"\"断言JSON路径对应的值（增强错误处理）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            # 处理列表结果（如果只有一个元素则取单个值）\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n>           assert actual_value == expected_value, (\n                f\"{error_msg}\\n\"\n                f\"URL: {response.url}\\n\"\n                f\"JSON路径: {json_path}\\n\"\n                f\"实际值: {actual_value}\\n\"\n                f\"期望值: {expected_value}\"\n            )\nE           AssertionError: 响应msg字段应为success\nE           URL: https://39.99.145.155/vps/subcontrol/trader/orderSend\nE           JSON路径: $.msg\nE           实际值: 300151下单失败,该账号正在下单中\nE           期望值: success\n\n..\\lingkuan_817\\commons\\api_base.py:342: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "var_manager",
    "time" : {
      "start" : 1755512467285,
      "stop" : 1755512467286,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "api_session",
    "time" : {
      "start" : 1755512482629,
      "stop" : 1755512482629,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "test_group",
    "time" : {
      "start" : 1755512050142,
      "stop" : 1755512050142,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "environment",
    "time" : {
      "start" : 1755512050142,
      "stop" : 1755512050142,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "logged_session",
    "time" : {
      "start" : 1755512482629,
      "stop" : 1755512483925,
      "duration" : 1296
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "description" : "\n### 用例说明\n- 前置条件：有vps策略和vps跟单\n- 操作步骤：\n  1. 修改跟单账号的跟单方向为反向，进行开仓\n  2. 跟单账号buy方向进行平仓，平仓失败，给出提示\n  3. 跟单账号shell方向进行平仓，平仓成功\n  4. 策略账号buy方向进行平仓\n- 预期结果：平仓的订单方向功能正确\n",
    "status" : "failed",
    "statusMessage" : "AssertionError: 响应msg字段应为success\nURL: https://39.99.145.155/vps/subcontrol/trader/orderSend\nJSON路径: $.msg\n实际值: 300151下单失败,该账号正在下单中\n期望值: success",
    "statusTrace" : "self = <lingkuan_820.test_vps.test_vps_orderclose.TestVPSOrderSend3 object at 0x000001DFD4674160>\nvar_manager = <lingkuan_817.commons.variable_manager.VariableManager object at 0x000001DFD471C880>\nlogged_session = <lingkuan_820.commons.session.EnvironmentSession object at 0x000001DFD4845EB0>\n\n    @pytest.mark.url(\"vps\")\n    @allure.title(\"跟单软件看板-VPS数据-策略开仓\")\n    def test_trader_orderSend(self, var_manager, logged_session):\n        # 1. 发送策略开仓请求\n        trader_ordersend = var_manager.get_variable(\"trader_ordersend\")\n        vps_trader_id = var_manager.get_variable(\"vps_trader_id\")\n        data = {\n            \"symbol\": trader_ordersend[\"symbol\"],\n            \"placedType\": 0,\n            \"remark\": trader_ordersend[\"remark\"],\n            \"intervalTime\": 100,\n            \"type\": 0,\n            \"totalNum\": trader_ordersend[\"totalNum\"],\n            \"totalSzie\": trader_ordersend[\"totalSzie\"],\n            \"startSize\": trader_ordersend[\"startSize\"],\n            \"endSize\": trader_ordersend[\"endSize\"],\n            \"traderId\": vps_trader_id\n        }\n        response = self.send_post_request(\n            logged_session,\n            '/subcontrol/trader/orderSend',\n            json_data=data,\n        )\n    \n        # 2. 验证响应状态码和内容\n        self.assert_response_status(\n            response,\n            200,\n            \"策略开仓失败\"\n        )\n>       self.assert_json_value(\n            response,\n            \"$.msg\",\n            \"success\",\n            \"响应msg字段应为success\"\n        )\n\ntest_vps\\test_vps_orderclose.py:492: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_820.test_vps.test_vps_orderclose.TestVPSOrderSend3 object at 0x000001DFD4674160>\nresponse = <Response [200]>, json_path = '$.msg', expected_value = 'success'\nerror_msg = '响应msg字段应为success'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg):\n        \"\"\"断言JSON路径对应的值（增强错误处理）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            # 处理列表结果（如果只有一个元素则取单个值）\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n>           assert actual_value == expected_value, (\n                f\"{error_msg}\\n\"\n                f\"URL: {response.url}\\n\"\n                f\"JSON路径: {json_path}\\n\"\n                f\"实际值: {actual_value}\\n\"\n                f\"期望值: {expected_value}\"\n            )\nE           AssertionError: 响应msg字段应为success\nE           URL: https://39.99.145.155/vps/subcontrol/trader/orderSend\nE           JSON路径: $.msg\nE           实际值: 300151下单失败,该账号正在下单中\nE           期望值: success\n\n..\\lingkuan_817\\commons\\api_base.py:342: AssertionError",
    "steps" : [ {
      "name" : "发送 POST 请求到 /subcontrol/trader/orderSend",
      "time" : {
        "start" : 1755512483926,
        "stop" : 1755512485203,
        "duration" : 1277
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "请求详情",
        "time" : {
          "start" : 1755512483926,
          "stop" : 1755512483927,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "2972231d2bda6696",
          "name" : "请求URL",
          "source" : "2972231d2bda6696.txt",
          "type" : "text/plain",
          "size" : 28
        }, {
          "uid" : "b6b2d5858b1efca4",
          "name" : "请求头",
          "source" : "b6b2d5858b1efca4.json",
          "type" : "application/json",
          "size" : 234
        }, {
          "uid" : "3b9c0b81de921531",
          "name" : "请求体（JSON）",
          "source" : "3b9c0b81de921531.json",
          "type" : "application/json",
          "size" : 204
        } ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "hasContent" : true,
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 3
      }, {
        "name" : "响应详情",
        "time" : {
          "start" : 1755512484200,
          "stop" : 1755512484202,
          "duration" : 2
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "81f9b9edaae8fcb1",
          "name" : "响应状态码",
          "source" : "81f9b9edaae8fcb1.txt",
          "type" : "text/plain",
          "size" : 3
        }, {
          "uid" : "b4b538ef2085c1e0",
          "name" : "响应头",
          "source" : "b4b538ef2085c1e0.json",
          "type" : "application/json",
          "size" : 526
        }, {
          "uid" : "cc828f54080a55ab",
          "name" : "响应体（JSON）",
          "source" : "cc828f54080a55ab.json",
          "type" : "application/json",
          "size" : 89
        } ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "hasContent" : true,
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 3
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 2,
      "hasContent" : true,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 6
    } ],
    "attachments" : [ {
      "uid" : "8c214fc7536c15bb",
      "name" : "log",
      "source" : "8c214fc7536c15bb.txt",
      "type" : "text/plain",
      "size" : 1418
    } ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 7
  },
  "afterStages" : [ {
    "name" : "var_manager::0",
    "time" : {
      "start" : 1755565029962,
      "stop" : 1755565029962,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "api_session::0",
    "time" : {
      "start" : 1755512485233,
      "stop" : 1755512485233,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "logged_session::0",
    "time" : {
      "start" : 1755512485232,
      "stop" : 1755512485232,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "url('vps')"
  }, {
    "name" : "parentSuite",
    "value" : "test_vps"
  }, {
    "name" : "suite",
    "value" : "test_vps_orderclose"
  }, {
    "name" : "subSuite",
    "value" : "TestVPSOrderSend3"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "6824-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_vps.test_vps_orderclose"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "url('vps')" ]
  },
  "source" : "80ae64a470802cd3.json",
  "parameterValues" : [ ]
}