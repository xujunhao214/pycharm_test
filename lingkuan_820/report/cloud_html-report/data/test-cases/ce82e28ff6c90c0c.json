{
  "uid" : "ce82e28ff6c90c0c",
  "name" : "云策略-云策略列表-新增云策略",
  "fullName" : "test_cloudTrader.test_create.TestCreate_cloudTrader#test_create_cloudMaster",
  "historyId" : "cd9b563c694cd53e814a76e953c82b6f",
  "time" : {
    "start" : 1756175631104,
    "stop" : 1756175632172,
    "duration" : 1068
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Failed: 响应msg字段应为success（JSON断言失败）",
  "statusTrace" : "self = <lingkuan_820.test_cloudTrader.test_create.TestCreate_cloudTrader object at 0x00000156ED778C70>\nresponse = <Response [200]>, json_path = '$.msg', expected_value = 'success'\nerror_msg_prefix = '响应msg字段应为success'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n    \n>           assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\nE               AssertionError: Failed: 响应msg字段应为success（JSON路径值不匹配）\n\ncommons\\api_base.py:385: AssertionError\n\nThe above exception was the direct cause of the following exception:\n\nself = <lingkuan_820.test_cloudTrader.test_create.TestCreate_cloudTrader object at 0x00000156ED778C70>\nvar_manager = <lingkuan_820.commons.variable_manager.VariableManager object at 0x00000156ED7866D0>\nlogged_session = <lingkuan_820.commons.session.EnvironmentSession object at 0x00000156ED7E4790>\n\n    @allure.title(\"云策略-云策略列表-新增云策略\")\n    def test_create_cloudMaster(self, var_manager, logged_session):\n        cloudTrader_group_id = var_manager.get_variable(\"cloudTrader_group_id\")\n        with allure.step(\"1. 发送新增云策略的请求接口\"):\n            data = {\n                \"name\": \"自动化测试\",\n                \"type\": 0,\n                \"remark\": \"\",\n                \"status\": 0,\n                \"groupId\": cloudTrader_group_id,\n                \"sort\": 100,\n                \"isMonitorRepair\": 1\n            }\n            response = self.send_post_request(\n                logged_session,\n                '/mascontrol/cloudMaster',\n                json_data=data\n            )\n    \n        with allure.step(\"2. 校验接口请求是否正确\"):\n            # 使用工具类的 assert_value 方法验证响应状态\n>           self.assert_json_value(\n                response,\n                \"$.msg\",\n                \"success\",\n                \"响应msg字段应为success\"\n            )\n\ntest_cloudTrader\\test_create.py:391: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_820.test_cloudTrader.test_create.TestCreate_cloudTrader object at 0x00000156ED778C70>\nresponse = <Response [200]>, json_path = '$.msg', expected_value = 'success'\nerror_msg_prefix = '响应msg字段应为success'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n    \n            assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\n        except Exception as e:\n            with allure.step(f\"JSON断言失败: {json_path}\"):\n                allure.attach(json_path, \"JSON路径\", allure.attachment_type.TEXT)\n                allure.attach(str(expected_value), \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(response.text[:500], \"响应内容\", allure.attachment_type.TEXT)\n            logger.error(\n                f\"[{self._get_current_time()}] JSON断言失败: {str(e)} | 路径: {json_path} | 响应: {response.text[:500]}\")\n>           raise AssertionError(f\"Failed: {error_msg_prefix}（JSON断言失败）\") from e\nE           AssertionError: Failed: 响应msg字段应为success（JSON断言失败）\n\ncommons\\api_base.py:394: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "logged_session",
    "time" : {
      "start" : 1756175630917,
      "stop" : 1756175631103,
      "duration" : 186
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "api_session",
    "time" : {
      "start" : 1756175630917,
      "stop" : 1756175630917,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Failed: 响应msg字段应为success（JSON断言失败）",
    "statusTrace" : "self = <lingkuan_820.test_cloudTrader.test_create.TestCreate_cloudTrader object at 0x00000156ED778C70>\nresponse = <Response [200]>, json_path = '$.msg', expected_value = 'success'\nerror_msg_prefix = '响应msg字段应为success'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n    \n>           assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\nE               AssertionError: Failed: 响应msg字段应为success（JSON路径值不匹配）\n\ncommons\\api_base.py:385: AssertionError\n\nThe above exception was the direct cause of the following exception:\n\nself = <lingkuan_820.test_cloudTrader.test_create.TestCreate_cloudTrader object at 0x00000156ED778C70>\nvar_manager = <lingkuan_820.commons.variable_manager.VariableManager object at 0x00000156ED7866D0>\nlogged_session = <lingkuan_820.commons.session.EnvironmentSession object at 0x00000156ED7E4790>\n\n    @allure.title(\"云策略-云策略列表-新增云策略\")\n    def test_create_cloudMaster(self, var_manager, logged_session):\n        cloudTrader_group_id = var_manager.get_variable(\"cloudTrader_group_id\")\n        with allure.step(\"1. 发送新增云策略的请求接口\"):\n            data = {\n                \"name\": \"自动化测试\",\n                \"type\": 0,\n                \"remark\": \"\",\n                \"status\": 0,\n                \"groupId\": cloudTrader_group_id,\n                \"sort\": 100,\n                \"isMonitorRepair\": 1\n            }\n            response = self.send_post_request(\n                logged_session,\n                '/mascontrol/cloudMaster',\n                json_data=data\n            )\n    \n        with allure.step(\"2. 校验接口请求是否正确\"):\n            # 使用工具类的 assert_value 方法验证响应状态\n>           self.assert_json_value(\n                response,\n                \"$.msg\",\n                \"success\",\n                \"响应msg字段应为success\"\n            )\n\ntest_cloudTrader\\test_create.py:391: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_820.test_cloudTrader.test_create.TestCreate_cloudTrader object at 0x00000156ED778C70>\nresponse = <Response [200]>, json_path = '$.msg', expected_value = 'success'\nerror_msg_prefix = '响应msg字段应为success'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n    \n            assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\n        except Exception as e:\n            with allure.step(f\"JSON断言失败: {json_path}\"):\n                allure.attach(json_path, \"JSON路径\", allure.attachment_type.TEXT)\n                allure.attach(str(expected_value), \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(response.text[:500], \"响应内容\", allure.attachment_type.TEXT)\n            logger.error(\n                f\"[{self._get_current_time()}] JSON断言失败: {str(e)} | 路径: {json_path} | 响应: {response.text[:500]}\")\n>           raise AssertionError(f\"Failed: {error_msg_prefix}（JSON断言失败）\") from e\nE           AssertionError: Failed: 响应msg字段应为success（JSON断言失败）\n\ncommons\\api_base.py:394: AssertionError",
    "steps" : [ {
      "name" : "1. 发送新增云策略的请求接口",
      "time" : {
        "start" : 1756175631104,
        "stop" : 1756175632166,
        "duration" : 1062
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "执行 POST 请求",
        "time" : {
          "start" : 1756175631104,
          "stop" : 1756175632166,
          "duration" : 1062
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "请求详情",
          "time" : {
            "start" : 1756175631104,
            "stop" : 1756175631105,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "80a6242d9ac4c71c",
            "name" : "请求URL",
            "source" : "80a6242d9ac4c71c.txt",
            "type" : "text/plain",
            "size" : 23
          }, {
            "uid" : "adfeb7c1ec6db47d",
            "name" : "请求头",
            "source" : "adfeb7c1ec6db47d.json",
            "type" : "application/json",
            "size" : 234
          }, {
            "uid" : "6ebe7bfa8d8c371",
            "name" : "请求体（JSON）",
            "source" : "6ebe7bfa8d8c371.json",
            "type" : "application/json",
            "size" : 132
          } ],
          "parameters" : [ ],
          "hasContent" : true,
          "stepsCount" : 0,
          "attachmentsCount" : 3,
          "shouldDisplayMessage" : false
        }, {
          "name" : "响应详情",
          "time" : {
            "start" : 1756175631162,
            "stop" : 1756175631163,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "71178194001a7dbe",
            "name" : "响应状态码",
            "source" : "71178194001a7dbe.txt",
            "type" : "text/plain",
            "size" : 3
          }, {
            "uid" : "e3b1835d8feebd76",
            "name" : "响应头",
            "source" : "e3b1835d8feebd76.json",
            "type" : "application/json",
            "size" : 526
          }, {
            "uid" : "654de2b91c2e1a1c",
            "name" : "响应体（JSON）",
            "source" : "654de2b91c2e1a1c.json",
            "type" : "application/json",
            "size" : 91
          } ],
          "parameters" : [ ],
          "hasContent" : true,
          "stepsCount" : 0,
          "attachmentsCount" : 3,
          "shouldDisplayMessage" : false
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "hasContent" : true,
        "stepsCount" : 2,
        "attachmentsCount" : 6,
        "shouldDisplayMessage" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 3,
      "attachmentsCount" : 6,
      "shouldDisplayMessage" : false
    }, {
      "name" : "2. 校验接口请求是否正确",
      "time" : {
        "start" : 1756175632166,
        "stop" : 1756175632172,
        "duration" : 6
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Failed: 响应msg字段应为success（JSON断言失败）\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\lingkuan_820\\test_cloudTrader\\test_create.py\", line 391, in test_create_cloudMaster\n    self.assert_json_value(\n  File \"D:\\pycharm_test\\lingkuan_820\\commons\\api_base.py\", line 394, in assert_json_value\n    raise AssertionError(f\"Failed: {error_msg_prefix}（JSON断言失败）\") from e\n",
      "steps" : [ {
        "name" : "断言JSON路径: $.msg",
        "time" : {
          "start" : 1756175632169,
          "stop" : 1756175632171,
          "duration" : 2
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "dfe76aa6784a3f0",
          "name" : "预期值",
          "source" : "dfe76aa6784a3f0.txt",
          "type" : "text/plain",
          "size" : 20
        }, {
          "uid" : "324f32b1de3c7f13",
          "name" : "实际值",
          "source" : "324f32b1de3c7f13.txt",
          "type" : "text/plain",
          "size" : 58
        }, {
          "uid" : "14394e5a8d25759d",
          "name" : "请求URL",
          "source" : "14394e5a8d25759d.txt",
          "type" : "text/plain",
          "size" : 46
        } ],
        "parameters" : [ ],
        "hasContent" : true,
        "stepsCount" : 0,
        "attachmentsCount" : 3,
        "shouldDisplayMessage" : false
      }, {
        "name" : "JSON断言失败: $.msg",
        "time" : {
          "start" : 1756175632171,
          "stop" : 1756175632172,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "55f853fb79b63efa",
          "name" : "JSON路径",
          "source" : "55f853fb79b63efa.txt",
          "type" : "text/plain",
          "size" : 5
        }, {
          "uid" : "b2fde8e56f9b52de",
          "name" : "预期值",
          "source" : "b2fde8e56f9b52de.txt",
          "type" : "text/plain",
          "size" : 7
        }, {
          "uid" : "68ce74d7f379ddf2",
          "name" : "响应内容",
          "source" : "68ce74d7f379ddf2.txt",
          "type" : "text/plain",
          "size" : 78
        } ],
        "parameters" : [ ],
        "hasContent" : true,
        "stepsCount" : 0,
        "attachmentsCount" : 3,
        "shouldDisplayMessage" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 2,
      "attachmentsCount" : 6,
      "shouldDisplayMessage" : true
    } ],
    "attachments" : [ {
      "uid" : "29a5e73048a9aba2",
      "name" : "log",
      "source" : "29a5e73048a9aba2.txt",
      "type" : "text/plain",
      "size" : 2163
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 7,
    "attachmentsCount" : 13,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "logged_session::0",
    "time" : {
      "start" : 1756175632201,
      "stop" : 1756175632201,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "api_session::0",
    "time" : {
      "start" : 1756175632202,
      "stop" : 1756175632202,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "数据管理-创建数据-为云策略准备"
  }, {
    "name" : "parentSuite",
    "value" : "test_cloudTrader"
  }, {
    "name" : "suite",
    "value" : "test_create"
  }, {
    "name" : "subSuite",
    "value" : "TestCreate_cloudTrader"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "24684-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_cloudTrader.test_create"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "ce82e28ff6c90c0c.json",
  "parameterValues" : [ ]
}