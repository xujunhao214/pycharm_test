{
  "uid" : "2ac11d5e2a533ccc",
  "name" : "云策略-云策略列表-新增manager策略账号",
  "fullName" : "test_cloudTrader.test_create.TestCreate_cloudTrader#test_manager_cloudTrader",
  "historyId" : "61a92e53ca600481c8ddbd6012a36ad1",
  "time" : {
    "start" : 1756175659803,
    "stop" : 1756175660874,
    "duration" : 1071
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Failed: 响应msg字段应为success（JSON断言失败）",
  "statusTrace" : "self = <lingkuan_820.test_cloudTrader.test_create.TestCreate_cloudTrader object at 0x00000156ED77F5B0>\nresponse = <Response [200]>, json_path = '$.msg', expected_value = 'success'\nerror_msg_prefix = '响应msg字段应为success'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n    \n>           assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\nE               AssertionError: Failed: 响应msg字段应为success（JSON路径值不匹配）\n\ncommons\\api_base.py:385: AssertionError\n\nThe above exception was the direct cause of the following exception:\n\nself = <lingkuan_820.test_cloudTrader.test_create.TestCreate_cloudTrader object at 0x00000156ED77F5B0>\nvar_manager = <lingkuan_820.commons.variable_manager.VariableManager object at 0x00000156ED7866D0>\nlogged_session = <lingkuan_820.commons.session.EnvironmentSession object at 0x00000156EDA10940>\n\n    @pytest.mark.retry(n=3, delay=5)\n    @allure.title(\"云策略-云策略列表-新增manager策略账号\")\n    def test_manager_cloudTrader(self, var_manager, logged_session):\n        # 1. 发送新增策略账号请求\n        cloudMaster_id = var_manager.get_variable(\"cloudMaster_id\")\n        cloudTrader_user_accounts_3 = var_manager.get_variable(\"cloudTrader_user_accounts_3\")\n        new_user = var_manager.get_variable(\"new_user\")\n        manager = var_manager.get_variable(\"manager\")\n        data = {\n            \"cloudId\": cloudMaster_id,\n            \"sourceType\": 1,\n            \"remark\": \"新增manager账号\",\n            \"runningStatus\": 0,\n            \"followOrderRemark\": 1,\n            \"traderId\": \"\",\n            \"managerIp\": manager[\"managerIp\"],\n            \"managerAccount\": manager[\"managerAccount\"],\n            \"managerPassword\": manager[\"managerPassword\"],\n            \"account\": cloudTrader_user_accounts_3,\n            \"platform\": new_user[\"platform\"],\n            \"templateId\": 1,\n            \"fixedComment\": new_user[\"fixedComment\"],\n            \"commentType\": \"\",\n            \"digits\": \"\"\n        }\n        response = self.send_post_request(\n            logged_session,\n            '/mascontrol/cloudTrader',\n            json_data=data\n        )\n    \n        # 2. 验证响应状态码\n        self.assert_response_status(\n            response,\n            200,\n            \"新增manager策略账号失败\"\n        )\n    \n        # 3. 验证JSON返回内容\n>       self.assert_json_value(\n            response,\n            \"$.msg\",\n            \"success\",\n            \"响应msg字段应为success\"\n        )\n\ntest_cloudTrader\\test_create.py:520: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_820.test_cloudTrader.test_create.TestCreate_cloudTrader object at 0x00000156ED77F5B0>\nresponse = <Response [200]>, json_path = '$.msg', expected_value = 'success'\nerror_msg_prefix = '响应msg字段应为success'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n    \n            assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\n        except Exception as e:\n            with allure.step(f\"JSON断言失败: {json_path}\"):\n                allure.attach(json_path, \"JSON路径\", allure.attachment_type.TEXT)\n                allure.attach(str(expected_value), \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(response.text[:500], \"响应内容\", allure.attachment_type.TEXT)\n            logger.error(\n                f\"[{self._get_current_time()}] JSON断言失败: {str(e)} | 路径: {json_path} | 响应: {response.text[:500]}\")\n>           raise AssertionError(f\"Failed: {error_msg_prefix}（JSON断言失败）\") from e\nE           AssertionError: Failed: 响应msg字段应为success（JSON断言失败）\n\ncommons\\api_base.py:394: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "logged_session",
    "time" : {
      "start" : 1756175659666,
      "stop" : 1756175659803,
      "duration" : 137
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "api_session",
    "time" : {
      "start" : 1756175659666,
      "stop" : 1756175659666,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Failed: 响应msg字段应为success（JSON断言失败）",
    "statusTrace" : "self = <lingkuan_820.test_cloudTrader.test_create.TestCreate_cloudTrader object at 0x00000156ED77F5B0>\nresponse = <Response [200]>, json_path = '$.msg', expected_value = 'success'\nerror_msg_prefix = '响应msg字段应为success'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n    \n>           assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\nE               AssertionError: Failed: 响应msg字段应为success（JSON路径值不匹配）\n\ncommons\\api_base.py:385: AssertionError\n\nThe above exception was the direct cause of the following exception:\n\nself = <lingkuan_820.test_cloudTrader.test_create.TestCreate_cloudTrader object at 0x00000156ED77F5B0>\nvar_manager = <lingkuan_820.commons.variable_manager.VariableManager object at 0x00000156ED7866D0>\nlogged_session = <lingkuan_820.commons.session.EnvironmentSession object at 0x00000156EDA10940>\n\n    @pytest.mark.retry(n=3, delay=5)\n    @allure.title(\"云策略-云策略列表-新增manager策略账号\")\n    def test_manager_cloudTrader(self, var_manager, logged_session):\n        # 1. 发送新增策略账号请求\n        cloudMaster_id = var_manager.get_variable(\"cloudMaster_id\")\n        cloudTrader_user_accounts_3 = var_manager.get_variable(\"cloudTrader_user_accounts_3\")\n        new_user = var_manager.get_variable(\"new_user\")\n        manager = var_manager.get_variable(\"manager\")\n        data = {\n            \"cloudId\": cloudMaster_id,\n            \"sourceType\": 1,\n            \"remark\": \"新增manager账号\",\n            \"runningStatus\": 0,\n            \"followOrderRemark\": 1,\n            \"traderId\": \"\",\n            \"managerIp\": manager[\"managerIp\"],\n            \"managerAccount\": manager[\"managerAccount\"],\n            \"managerPassword\": manager[\"managerPassword\"],\n            \"account\": cloudTrader_user_accounts_3,\n            \"platform\": new_user[\"platform\"],\n            \"templateId\": 1,\n            \"fixedComment\": new_user[\"fixedComment\"],\n            \"commentType\": \"\",\n            \"digits\": \"\"\n        }\n        response = self.send_post_request(\n            logged_session,\n            '/mascontrol/cloudTrader',\n            json_data=data\n        )\n    \n        # 2. 验证响应状态码\n        self.assert_response_status(\n            response,\n            200,\n            \"新增manager策略账号失败\"\n        )\n    \n        # 3. 验证JSON返回内容\n>       self.assert_json_value(\n            response,\n            \"$.msg\",\n            \"success\",\n            \"响应msg字段应为success\"\n        )\n\ntest_cloudTrader\\test_create.py:520: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_820.test_cloudTrader.test_create.TestCreate_cloudTrader object at 0x00000156ED77F5B0>\nresponse = <Response [200]>, json_path = '$.msg', expected_value = 'success'\nerror_msg_prefix = '响应msg字段应为success'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n    \n            assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\n        except Exception as e:\n            with allure.step(f\"JSON断言失败: {json_path}\"):\n                allure.attach(json_path, \"JSON路径\", allure.attachment_type.TEXT)\n                allure.attach(str(expected_value), \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(response.text[:500], \"响应内容\", allure.attachment_type.TEXT)\n            logger.error(\n                f\"[{self._get_current_time()}] JSON断言失败: {str(e)} | 路径: {json_path} | 响应: {response.text[:500]}\")\n>           raise AssertionError(f\"Failed: {error_msg_prefix}（JSON断言失败）\") from e\nE           AssertionError: Failed: 响应msg字段应为success（JSON断言失败）\n\ncommons\\api_base.py:394: AssertionError",
    "steps" : [ {
      "name" : "执行 POST 请求",
      "time" : {
        "start" : 1756175659804,
        "stop" : 1756175660867,
        "duration" : 1063
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "请求详情",
        "time" : {
          "start" : 1756175659804,
          "stop" : 1756175659805,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "2fdfaea12708520d",
          "name" : "请求URL",
          "source" : "2fdfaea12708520d.txt",
          "type" : "text/plain",
          "size" : 23
        }, {
          "uid" : "bbc63e25b25a0f21",
          "name" : "请求头",
          "source" : "bbc63e25b25a0f21.json",
          "type" : "application/json",
          "size" : 234
        }, {
          "uid" : "9e6e40225caad374",
          "name" : "请求体（JSON）",
          "source" : "9e6e40225caad374.json",
          "type" : "application/json",
          "size" : 413
        } ],
        "parameters" : [ ],
        "hasContent" : true,
        "stepsCount" : 0,
        "attachmentsCount" : 3,
        "shouldDisplayMessage" : false
      }, {
        "name" : "响应详情",
        "time" : {
          "start" : 1756175659860,
          "stop" : 1756175659861,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "1e61c6763858f672",
          "name" : "响应状态码",
          "source" : "1e61c6763858f672.txt",
          "type" : "text/plain",
          "size" : 3
        }, {
          "uid" : "b971c17c54d482c1",
          "name" : "响应头",
          "source" : "b971c17c54d482c1.json",
          "type" : "application/json",
          "size" : 526
        }, {
          "uid" : "562459f18ac0703",
          "name" : "响应体（JSON）",
          "source" : "562459f18ac0703.json",
          "type" : "application/json",
          "size" : 82
        } ],
        "parameters" : [ ],
        "hasContent" : true,
        "stepsCount" : 0,
        "attachmentsCount" : 3,
        "shouldDisplayMessage" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 2,
      "attachmentsCount" : 6,
      "shouldDisplayMessage" : false
    }, {
      "name" : "断言响应状态码",
      "time" : {
        "start" : 1756175660867,
        "stop" : 1756175660868,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "be3ad22448c2ef51",
        "name" : "预期状态码",
        "source" : "be3ad22448c2ef51.txt",
        "type" : "text/plain",
        "size" : 14
      }, {
        "uid" : "de9bb531cc27b9da",
        "name" : "实际状态码",
        "source" : "de9bb531cc27b9da.txt",
        "type" : "text/plain",
        "size" : 14
      }, {
        "uid" : "cd8eb48b83742a5f",
        "name" : "请求URL",
        "source" : "cd8eb48b83742a5f.txt",
        "type" : "text/plain",
        "size" : 46
      }, {
        "uid" : "c029e65b6ce71671",
        "name" : "响应内容",
        "source" : "c029e65b6ce71671.txt",
        "type" : "text/plain",
        "size" : 69
      } ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "attachmentsCount" : 4,
      "shouldDisplayMessage" : false
    }, {
      "name" : "断言JSON路径: $.msg",
      "time" : {
        "start" : 1756175660872,
        "stop" : 1756175660873,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "1d8624241285245f",
        "name" : "预期值",
        "source" : "1d8624241285245f.txt",
        "type" : "text/plain",
        "size" : 20
      }, {
        "uid" : "560428c8c893c6ba",
        "name" : "实际值",
        "source" : "560428c8c893c6ba.txt",
        "type" : "text/plain",
        "size" : 49
      }, {
        "uid" : "2759c1e13f941f82",
        "name" : "请求URL",
        "source" : "2759c1e13f941f82.txt",
        "type" : "text/plain",
        "size" : 46
      } ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "attachmentsCount" : 3,
      "shouldDisplayMessage" : false
    }, {
      "name" : "JSON断言失败: $.msg",
      "time" : {
        "start" : 1756175660873,
        "stop" : 1756175660874,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "252347872670f12b",
        "name" : "JSON路径",
        "source" : "252347872670f12b.txt",
        "type" : "text/plain",
        "size" : 5
      }, {
        "uid" : "a99c5c9beab31904",
        "name" : "预期值",
        "source" : "a99c5c9beab31904.txt",
        "type" : "text/plain",
        "size" : 7
      }, {
        "uid" : "49cc7366f9dc5bac",
        "name" : "响应内容",
        "source" : "49cc7366f9dc5bac.txt",
        "type" : "text/plain",
        "size" : 69
      } ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "attachmentsCount" : 3,
      "shouldDisplayMessage" : false
    } ],
    "attachments" : [ {
      "uid" : "f8f9a1d82f67a741",
      "name" : "log",
      "source" : "f8f9a1d82f67a741.txt",
      "type" : "text/plain",
      "size" : 4016
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 6,
    "attachmentsCount" : 17,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "logged_session::0",
    "time" : {
      "start" : 1756175660902,
      "stop" : 1756175660902,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "api_session::0",
    "time" : {
      "start" : 1756175660902,
      "stop" : 1756175660902,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "数据管理-创建数据-为云策略准备"
  }, {
    "name" : "tag",
    "value" : "retry(n=3, delay=5)"
  }, {
    "name" : "parentSuite",
    "value" : "test_cloudTrader"
  }, {
    "name" : "suite",
    "value" : "test_create"
  }, {
    "name" : "subSuite",
    "value" : "TestCreate_cloudTrader"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "24684-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_cloudTrader.test_create"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "retry(n=3, delay=5)" ]
  },
  "source" : "2ac11d5e2a533ccc.json",
  "parameterValues" : [ ]
}