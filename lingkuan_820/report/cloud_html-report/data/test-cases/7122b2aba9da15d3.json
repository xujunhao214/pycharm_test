{
  "uid" : "7122b2aba9da15d3",
  "name" : "数据库校验-交易平仓-跟单指令及订单详情数据检查-有4个订单",
  "fullName" : "test_cloudTrader.test_lianxi.TestcloudtradingOrders6#test_dbquery_addsalve_orderSendclose2",
  "historyId" : "6c26716955cce5e833477e725ce67b01",
  "time" : {
    "start" : 1756114624543,
    "stop" : 1756114656178,
    "duration" : 31635
  },
  "description" : "\n        ### 测试说明\n        - 前置条件：有云策略和云跟单\n          1. 进行开仓，手数范围：0.1-1，总订单数量4\n          2. 进行平仓-订单数量2\n          3. 校验平仓的订单数，应该等于2\n          4. 进行平仓-订单数量2\n          5. 校验平仓的订单数,等于4\n        - 预期结果：平仓的订单数量功能正确\n        ",
  "descriptionHtml" : "<pre><code>    ### 测试说明\n    - 前置条件：有云策略和云跟单\n      1. 进行开仓，手数范围：0.1-1，总订单数量4\n      2. 进行平仓-订单数量2\n      3. 校验平仓的订单数，应该等于2\n      4. 进行平仓-订单数量2\n      5. 校验平仓的订单数,等于4\n    - 预期结果：平仓的订单数量功能正确\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "TimeoutError: Failed: 等待记录出现超时（30秒）",
  "statusTrace" : "self = <lingkuan_820.test_cloudTrader.test_lianxi.TestVPSMasOrderclose.TestcloudtradingOrders6 object at 0x00000217BC442220>\nvar_manager = <lingkuan_820.commons.variable_manager.VariableManager object at 0x00000217BC41C100>\ndb_transaction = <pymysql.connections.Connection object at 0x00000217BC44B130>\n\n    @allure.title(\"数据库校验-交易平仓-跟单指令及订单详情数据检查-有4个订单\")\n    def test_dbquery_addsalve_orderSendclose2(self, var_manager, db_transaction):\n        with allure.step(\"1. 获取订单详情界面跟单账号数据\"):\n            cloudTrader_user_accounts_4 = var_manager.get_variable(\"cloudTrader_user_accounts_4\")\n            cloudTrader_user_ids_4 = var_manager.get_variable(\"cloudTrader_user_ids_4\")\n            sql = f\"\"\"\n                         SELECT\n                             fod.size,\n                             fod.close_no,\n                             fod.magical,\n                             fod.open_price,\n                             fod.symbol,\n                             fod.order_no,\n                             fod.close_time,\n                             foi.true_total_lots,\n                             foi.order_no,\n                             foi.operation_type,\n                             foi.create_time,\n                             foi.status,\n                             foi.min_lot_size,\n                             foi.max_lot_size,\n                             foi.total_lots,\n                             foi.master_order,\n                             foi.total_orders\n                         FROM\n                             follow_order_detail fod\n                         INNER JOIN\n                             follow_order_instruct foi\n                         ON\n                             foi.order_no = fod.close_no COLLATE utf8mb4_0900_ai_ci\n                         WHERE foi.operation_type = %s\n                             AND fod.account = %s\n                             AND fod.trader_id = %s\n                             \"\"\"\n            params = (\n                '1',\n                cloudTrader_user_accounts_4,\n                cloudTrader_user_ids_4,\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n>           db_data = self.query_database_with_time(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"foi.create_time\"\n            )\n\ntest_cloudTrader\\test_lianxi.py:254: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_820.test_cloudTrader.test_lianxi.TestVPSMasOrderclose.TestcloudtradingOrders6 object at 0x00000217BC442220>\ndb_transaction = <pymysql.connections.Connection object at 0x00000217BC44B130>\nsql = '\\n                             SELECT \\n                                 fod.size,\\n                                 ...      AND fod.account = %s\\n                                 AND fod.trader_id = %s\\n                                 '\nparams = ('1', '300162', 6539), time_field = 'foi.create_time', time_range = 1\norder_by = 'create_time DESC', timeout = 30, poll_interval = 2\nstable_period = 2, attach_to_allure = True\n\n    def query_database_with_time(\n            self,\n            db_transaction: pymysql.connections.Connection,\n            sql: str,\n            params: tuple = (),\n            time_field: Optional[str] = None,\n            time_range: int = MYSQL_TIME,\n            order_by: str = \"create_time DESC\",\n            timeout: int = WAIT_TIMEOUT,\n            poll_interval: int = POLL_INTERVAL,\n            stable_period: int = STBLE_PERIOD,\n            attach_to_allure: bool = True\n    ) -> List[Dict[str, Any]]:\n        \"\"\"轮询等待数据库记录稳定（仅保留此版本）\"\"\"\n        start_time = time.time()\n        last_result = None\n        stable_start_time = None\n        final_result = None\n        has_data = False\n    \n        logger.info(\n            f\"[{self._get_current_time()}] 开始轮询等待数据稳定 | \"\n            f\"SQL: {sql[:200]} | 超时: {timeout}秒 | 稳定期: {stable_period}秒\"\n        )\n        with allure.step(f\"轮询等待数据稳定（超时: {timeout}秒，稳定期: {stable_period}秒）\"):\n            pass\n    \n        while time.time() - start_time < timeout:\n            try:\n                db_transaction.commit()  # 刷新事务\n    \n                # 执行单次查询（带时间范围或不带）\n                result = self._execute_query(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params,\n                    time_field=time_field,\n                    order_by=order_by,\n                    time_range=time_range,\n                    attach_to_allure=False  # 轮询过程中不附加报告\n                )\n    \n                # 检查数据是否稳定\n                if len(result) > 0:\n                    has_data = True\n                    if self._is_result_stable(result, last_result):\n                        if stable_start_time is None:\n                            stable_start_time = time.time()\n                            logger.debug(f\"[{self._get_current_time()}] 数据首次稳定，开始计时\")\n                        elif time.time() - stable_start_time >= stable_period:\n                            final_result = result\n                            logger.info(\n                                f\"[{self._get_current_time()}] 数据已稳定{stable_period}秒（耗时{time.time() - start_time:.1f}秒）| \"\n                                f\"结果数: {len(result)}\"\n                            )\n                            allure.attach(\n                                f\"数据已稳定{stable_period}秒（总耗时{time.time() - start_time:.1f}秒）\",\n                                \"等待结果\",\n                                allure.attachment_type.TEXT\n                            )\n                            break\n                    else:\n                        stable_start_time = None  # 数据变化，重置计时器\n                        logger.debug(f\"[{self._get_current_time()}] 数据仍在变化，重置稳定计时器\")\n                else:\n                    stable_start_time = None\n                    has_data = False\n                    logger.debug(f\"[{self._get_current_time()}] 查询结果为空，继续等待\")\n    \n                last_result = result\n                time.sleep(poll_interval)\n    \n            except Exception as e:\n                logger.warning(f\"[{self._get_current_time()}] 轮询查询异常: {str(e)} | 继续等待...\")\n                time.sleep(poll_interval)\n    \n        # 超时处理：获取最终结果\n        if final_result is None:\n            final_result = self._execute_query(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=time_field,\n                order_by=order_by,\n                time_range=time_range,\n                attach_to_allure=attach_to_allure\n            )\n    \n        # 附加最终结果到报告\n        if attach_to_allure:\n            display_count = min(len(final_result), 50)\n            with allure.step(\"数据库查询结果（最终稳定结果）\"):\n                allure.attach(sql, \"执行SQL\", allure.attachment_type.TEXT)\n                allure.attach(str(params), \"SQL参数\", allure.attachment_type.TEXT)\n                allure.attach(\n                    self.serialize_data(final_result[:display_count]),\n                    f\"查询结果（共{len(final_result)}条，显示前50条）\",\n                    allure.attachment_type.JSON\n                )\n    \n        # 判断超时场景\n        if len(final_result) == 0:\n            error_msg = f\"Failed: 等待记录出现超时（{timeout}秒）\"\n>           raise TimeoutError(error_msg)\nE           TimeoutError: Failed: 等待记录出现超时（30秒）\n\ncommons\\api_base.py:582: TimeoutError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "db",
    "time" : {
      "start" : 1756114624144,
      "stop" : 1756114624543,
      "duration" : 399
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "test_group",
    "time" : {
      "start" : 1756114575821,
      "stop" : 1756114575821,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db_config",
    "time" : {
      "start" : 1756114581610,
      "stop" : 1756114581610,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "environment",
    "time" : {
      "start" : 1756114575821,
      "stop" : 1756114575821,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db_transaction",
    "time" : {
      "start" : 1756114624543,
      "stop" : 1756114624543,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "var_manager",
    "time" : {
      "start" : 1756114575821,
      "stop" : 1756114575821,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "description" : "\n        ### 测试说明\n        - 前置条件：有云策略和云跟单\n          1. 进行开仓，手数范围：0.1-1，总订单数量4\n          2. 进行平仓-订单数量2\n          3. 校验平仓的订单数，应该等于2\n          4. 进行平仓-订单数量2\n          5. 校验平仓的订单数,等于4\n        - 预期结果：平仓的订单数量功能正确\n        ",
    "status" : "broken",
    "statusMessage" : "TimeoutError: Failed: 等待记录出现超时（30秒）",
    "statusTrace" : "self = <lingkuan_820.test_cloudTrader.test_lianxi.TestVPSMasOrderclose.TestcloudtradingOrders6 object at 0x00000217BC442220>\nvar_manager = <lingkuan_820.commons.variable_manager.VariableManager object at 0x00000217BC41C100>\ndb_transaction = <pymysql.connections.Connection object at 0x00000217BC44B130>\n\n    @allure.title(\"数据库校验-交易平仓-跟单指令及订单详情数据检查-有4个订单\")\n    def test_dbquery_addsalve_orderSendclose2(self, var_manager, db_transaction):\n        with allure.step(\"1. 获取订单详情界面跟单账号数据\"):\n            cloudTrader_user_accounts_4 = var_manager.get_variable(\"cloudTrader_user_accounts_4\")\n            cloudTrader_user_ids_4 = var_manager.get_variable(\"cloudTrader_user_ids_4\")\n            sql = f\"\"\"\n                         SELECT\n                             fod.size,\n                             fod.close_no,\n                             fod.magical,\n                             fod.open_price,\n                             fod.symbol,\n                             fod.order_no,\n                             fod.close_time,\n                             foi.true_total_lots,\n                             foi.order_no,\n                             foi.operation_type,\n                             foi.create_time,\n                             foi.status,\n                             foi.min_lot_size,\n                             foi.max_lot_size,\n                             foi.total_lots,\n                             foi.master_order,\n                             foi.total_orders\n                         FROM\n                             follow_order_detail fod\n                         INNER JOIN\n                             follow_order_instruct foi\n                         ON\n                             foi.order_no = fod.close_no COLLATE utf8mb4_0900_ai_ci\n                         WHERE foi.operation_type = %s\n                             AND fod.account = %s\n                             AND fod.trader_id = %s\n                             \"\"\"\n            params = (\n                '1',\n                cloudTrader_user_accounts_4,\n                cloudTrader_user_ids_4,\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n>           db_data = self.query_database_with_time(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"foi.create_time\"\n            )\n\ntest_cloudTrader\\test_lianxi.py:254: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_820.test_cloudTrader.test_lianxi.TestVPSMasOrderclose.TestcloudtradingOrders6 object at 0x00000217BC442220>\ndb_transaction = <pymysql.connections.Connection object at 0x00000217BC44B130>\nsql = '\\n                             SELECT \\n                                 fod.size,\\n                                 ...      AND fod.account = %s\\n                                 AND fod.trader_id = %s\\n                                 '\nparams = ('1', '300162', 6539), time_field = 'foi.create_time', time_range = 1\norder_by = 'create_time DESC', timeout = 30, poll_interval = 2\nstable_period = 2, attach_to_allure = True\n\n    def query_database_with_time(\n            self,\n            db_transaction: pymysql.connections.Connection,\n            sql: str,\n            params: tuple = (),\n            time_field: Optional[str] = None,\n            time_range: int = MYSQL_TIME,\n            order_by: str = \"create_time DESC\",\n            timeout: int = WAIT_TIMEOUT,\n            poll_interval: int = POLL_INTERVAL,\n            stable_period: int = STBLE_PERIOD,\n            attach_to_allure: bool = True\n    ) -> List[Dict[str, Any]]:\n        \"\"\"轮询等待数据库记录稳定（仅保留此版本）\"\"\"\n        start_time = time.time()\n        last_result = None\n        stable_start_time = None\n        final_result = None\n        has_data = False\n    \n        logger.info(\n            f\"[{self._get_current_time()}] 开始轮询等待数据稳定 | \"\n            f\"SQL: {sql[:200]} | 超时: {timeout}秒 | 稳定期: {stable_period}秒\"\n        )\n        with allure.step(f\"轮询等待数据稳定（超时: {timeout}秒，稳定期: {stable_period}秒）\"):\n            pass\n    \n        while time.time() - start_time < timeout:\n            try:\n                db_transaction.commit()  # 刷新事务\n    \n                # 执行单次查询（带时间范围或不带）\n                result = self._execute_query(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params,\n                    time_field=time_field,\n                    order_by=order_by,\n                    time_range=time_range,\n                    attach_to_allure=False  # 轮询过程中不附加报告\n                )\n    \n                # 检查数据是否稳定\n                if len(result) > 0:\n                    has_data = True\n                    if self._is_result_stable(result, last_result):\n                        if stable_start_time is None:\n                            stable_start_time = time.time()\n                            logger.debug(f\"[{self._get_current_time()}] 数据首次稳定，开始计时\")\n                        elif time.time() - stable_start_time >= stable_period:\n                            final_result = result\n                            logger.info(\n                                f\"[{self._get_current_time()}] 数据已稳定{stable_period}秒（耗时{time.time() - start_time:.1f}秒）| \"\n                                f\"结果数: {len(result)}\"\n                            )\n                            allure.attach(\n                                f\"数据已稳定{stable_period}秒（总耗时{time.time() - start_time:.1f}秒）\",\n                                \"等待结果\",\n                                allure.attachment_type.TEXT\n                            )\n                            break\n                    else:\n                        stable_start_time = None  # 数据变化，重置计时器\n                        logger.debug(f\"[{self._get_current_time()}] 数据仍在变化，重置稳定计时器\")\n                else:\n                    stable_start_time = None\n                    has_data = False\n                    logger.debug(f\"[{self._get_current_time()}] 查询结果为空，继续等待\")\n    \n                last_result = result\n                time.sleep(poll_interval)\n    \n            except Exception as e:\n                logger.warning(f\"[{self._get_current_time()}] 轮询查询异常: {str(e)} | 继续等待...\")\n                time.sleep(poll_interval)\n    \n        # 超时处理：获取最终结果\n        if final_result is None:\n            final_result = self._execute_query(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=time_field,\n                order_by=order_by,\n                time_range=time_range,\n                attach_to_allure=attach_to_allure\n            )\n    \n        # 附加最终结果到报告\n        if attach_to_allure:\n            display_count = min(len(final_result), 50)\n            with allure.step(\"数据库查询结果（最终稳定结果）\"):\n                allure.attach(sql, \"执行SQL\", allure.attachment_type.TEXT)\n                allure.attach(str(params), \"SQL参数\", allure.attachment_type.TEXT)\n                allure.attach(\n                    self.serialize_data(final_result[:display_count]),\n                    f\"查询结果（共{len(final_result)}条，显示前50条）\",\n                    allure.attachment_type.JSON\n                )\n    \n        # 判断超时场景\n        if len(final_result) == 0:\n            error_msg = f\"Failed: 等待记录出现超时（{timeout}秒）\"\n>           raise TimeoutError(error_msg)\nE           TimeoutError: Failed: 等待记录出现超时（30秒）\n\ncommons\\api_base.py:582: TimeoutError",
    "steps" : [ {
      "name" : "1. 获取订单详情界面跟单账号数据",
      "time" : {
        "start" : 1756114624543,
        "stop" : 1756114656177,
        "duration" : 31634
      },
      "status" : "broken",
      "statusMessage" : "TimeoutError: Failed: 等待记录出现超时（30秒）\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\lingkuan_820\\test_cloudTrader\\test_lianxi.py\", line 254, in test_dbquery_addsalve_orderSendclose2\n    db_data = self.query_database_with_time(\n  File \"D:\\pycharm_test\\lingkuan_820\\commons\\api_base.py\", line 582, in query_database_with_time\n    raise TimeoutError(error_msg)\n",
      "steps" : [ {
        "name" : "轮询等待数据稳定（超时: 30秒，稳定期: 2秒）",
        "time" : {
          "start" : 1756114624544,
          "stop" : 1756114624544,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "hasContent" : false,
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 0
      }, {
        "name" : "数据库查询结果",
        "time" : {
          "start" : 1756114656175,
          "stop" : 1756114656176,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "440cd03152a5f49a",
          "name" : "执行SQL",
          "source" : "440cd03152a5f49a.txt",
          "type" : "text/plain",
          "size" : 1495
        }, {
          "uid" : "85cb7f3050b73e61",
          "name" : "SQL参数",
          "source" : "85cb7f3050b73e61.txt",
          "type" : "text/plain",
          "size" : 27
        }, {
          "uid" : "b8f58891b5176e46",
          "name" : "查询结果（共0条，显示前50条）",
          "source" : "b8f58891b5176e46.json",
          "type" : "application/json",
          "size" : 2
        } ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "hasContent" : true,
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 3
      }, {
        "name" : "数据库查询结果（最终稳定结果）",
        "time" : {
          "start" : 1756114656176,
          "stop" : 1756114656177,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "55e27134d355f6e",
          "name" : "执行SQL",
          "source" : "55e27134d355f6e.txt",
          "type" : "text/plain",
          "size" : 1381
        }, {
          "uid" : "4b823994490a63f3",
          "name" : "SQL参数",
          "source" : "4b823994490a63f3.txt",
          "type" : "text/plain",
          "size" : 21
        }, {
          "uid" : "64082a3ff326d3f8",
          "name" : "查询结果（共0条，显示前50条）",
          "source" : "64082a3ff326d3f8.json",
          "type" : "application/json",
          "size" : 2
        } ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "hasContent" : true,
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 3
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 3,
      "hasContent" : true,
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 6
    } ],
    "attachments" : [ {
      "uid" : "29320ea9ea47fa00",
      "name" : "log",
      "source" : "29320ea9ea47fa00.txt",
      "type" : "text/plain",
      "size" : 33037
    } ],
    "parameters" : [ ],
    "stepsCount" : 4,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 7
  },
  "afterStages" : [ {
    "name" : "db::0",
    "time" : {
      "start" : 1756114656193,
      "stop" : 1756114656193,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db_transaction::0",
    "time" : {
      "start" : 1756114656192,
      "stop" : 1756114656192,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "var_manager::0",
    "time" : {
      "start" : 1756114656194,
      "stop" : 1756114656195,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "场景6：平仓的订单数量功能校验-4"
  }, {
    "name" : "feature",
    "value" : "云策略-策略账号交易下单-平仓的功能校验"
  }, {
    "name" : "parentSuite",
    "value" : "test_cloudTrader"
  }, {
    "name" : "suite",
    "value" : "test_lianxi"
  }, {
    "name" : "subSuite",
    "value" : "TestVPSMasOrderclose"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "34728-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_cloudTrader.test_lianxi"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "7122b2aba9da15d3.json",
  "parameterValues" : [ ]
}