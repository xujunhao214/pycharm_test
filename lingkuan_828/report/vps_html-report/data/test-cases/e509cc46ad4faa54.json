{
  "uid" : "e509cc46ad4faa54",
  "name" : "自研平台平仓-外部订单-预期成功",
  "fullName" : "test_vps.test_lianxi.TestMT4ExternalOrderClose#test_trader_orderclose2",
  "historyId" : "bd060120f678c8f31e8a5a1e98549744",
  "time" : {
    "start" : 1756711577012,
    "stop" : 1756711578323,
    "duration" : 1311
  },
  "description" : "\n    ### 用例说明\n    - 前置条件：有vps策略和vps跟单\n    - 操作步骤：\n      1. 登录MT4账号\n      2. 使用mt4接口进行开仓\n      3. 在自研平台进行平仓-订单类型-内部订单，平仓失败\n      4. 在自研平台进行平仓-订单类型-外部订单，平仓成功\n    - 预期结果：平仓的订单类型功能正确\n    ",
  "descriptionHtml" : "<pre><code>### 用例说明\n- 前置条件：有vps策略和vps跟单\n- 操作步骤：\n  1. 登录MT4账号\n  2. 使用mt4接口进行开仓\n  3. 在自研平台进行平仓-订单类型-内部订单，平仓失败\n  4. 在自研平台进行平仓-订单类型-外部订单，平仓成功\n- 预期结果：平仓的订单类型功能正确\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: Failed: 响应msg字段应为success（JSON断言失败）",
  "statusTrace" : "self = <lingkuan_828.test_vps.test_lianxi.TestVPSOrderType.TestMT4ExternalOrderClose object at 0x000001E08FE9D550>\nresponse = <Response [200]>, json_path = '$.msg', expected_value = 'success'\nerror_msg_prefix = '响应msg字段应为success'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n    \n>           assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\nE               AssertionError: Failed: 响应msg字段应为success（JSON路径值不匹配）\n\ncommons\\api_base.py:416: AssertionError\n\nThe above exception was the direct cause of the following exception:\n\nself = <lingkuan_828.test_vps.test_lianxi.TestVPSOrderType.TestMT4ExternalOrderClose object at 0x000001E08FE9D550>\nvar_manager = <lingkuan_828.commons.variable_manager.VariableManager object at 0x000001E090014250>\nlogged_session = <lingkuan_828.commons.session.EnvironmentSession object at 0x000001E08FF693D0>\n\n    @pytest.mark.url(\"vps\")\n    @allure.title(\"自研平台平仓-外部订单-预期成功\")\n    def test_trader_orderclose2(self, var_manager, logged_session):\n        with allure.step(\"1. 发送全平订单平仓请求\"):\n            vps_trader_id = var_manager.get_variable(\"vps_trader_id\")\n            new_user = var_manager.get_variable(\"new_user\")\n            data = {\n                \"flag\": 0,\n                \"intervalTime\": 0,\n                \"num\": \"1\",\n                \"closeType\": 1,\n                \"remark\": \"\",\n                \"symbol\": \"XAUUSD\",\n                \"type\": 0,\n                \"traderId\": vps_trader_id,\n                \"account\": new_user[\"account\"]\n            }\n            response = self.send_post_request(\n                logged_session,\n                '/subcontrol/trader/orderClose',\n                json_data=data,\n            )\n        with allure.step(\"2. 验证响应\"):\n            self.assert_response_status(response, 200, \"平仓失败\")\n>           self.assert_json_value(response, \"$.msg\", \"success\", \"响应msg字段应为success\")\n\ntest_vps\\test_lianxi.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_828.test_vps.test_lianxi.TestVPSOrderType.TestMT4ExternalOrderClose object at 0x000001E08FE9D550>\nresponse = <Response [200]>, json_path = '$.msg', expected_value = 'success'\nerror_msg_prefix = '响应msg字段应为success'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n    \n            assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\n        except Exception as e:\n            with allure.step(f\"JSON断言失败: {json_path}\"):\n                allure.attach(json_path, \"JSON路径\", allure.attachment_type.TEXT)\n                allure.attach(str(expected_value), \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(response.text[:500], \"响应内容\", allure.attachment_type.TEXT)\n            logger.error(\n                f\"[{self._get_current_time()}] JSON断言失败: {str(e)} | 路径: {json_path} | 响应: {response.text[:500]}\")\n>           raise AssertionError(f\"Failed: {error_msg_prefix}（JSON断言失败）\") from e\nE           AssertionError: Failed: 响应msg字段应为success（JSON断言失败）\n\ncommons\\api_base.py:425: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "test_group",
    "time" : {
      "start" : 1756711565231,
      "stop" : 1756711565231,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "api_session",
    "time" : {
      "start" : 1756711565231,
      "stop" : 1756711565232,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "environment",
    "time" : {
      "start" : 1756711565231,
      "stop" : 1756711565231,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "logged_session",
    "time" : {
      "start" : 1756711565232,
      "stop" : 1756711577011,
      "duration" : 11779
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "var_manager",
    "time" : {
      "start" : 1756711565231,
      "stop" : 1756711565231,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "description" : "\n    ### 用例说明\n    - 前置条件：有vps策略和vps跟单\n    - 操作步骤：\n      1. 登录MT4账号\n      2. 使用mt4接口进行开仓\n      3. 在自研平台进行平仓-订单类型-内部订单，平仓失败\n      4. 在自研平台进行平仓-订单类型-外部订单，平仓成功\n    - 预期结果：平仓的订单类型功能正确\n    ",
    "status" : "failed",
    "statusMessage" : "AssertionError: Failed: 响应msg字段应为success（JSON断言失败）",
    "statusTrace" : "self = <lingkuan_828.test_vps.test_lianxi.TestVPSOrderType.TestMT4ExternalOrderClose object at 0x000001E08FE9D550>\nresponse = <Response [200]>, json_path = '$.msg', expected_value = 'success'\nerror_msg_prefix = '响应msg字段应为success'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n    \n>           assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\nE               AssertionError: Failed: 响应msg字段应为success（JSON路径值不匹配）\n\ncommons\\api_base.py:416: AssertionError\n\nThe above exception was the direct cause of the following exception:\n\nself = <lingkuan_828.test_vps.test_lianxi.TestVPSOrderType.TestMT4ExternalOrderClose object at 0x000001E08FE9D550>\nvar_manager = <lingkuan_828.commons.variable_manager.VariableManager object at 0x000001E090014250>\nlogged_session = <lingkuan_828.commons.session.EnvironmentSession object at 0x000001E08FF693D0>\n\n    @pytest.mark.url(\"vps\")\n    @allure.title(\"自研平台平仓-外部订单-预期成功\")\n    def test_trader_orderclose2(self, var_manager, logged_session):\n        with allure.step(\"1. 发送全平订单平仓请求\"):\n            vps_trader_id = var_manager.get_variable(\"vps_trader_id\")\n            new_user = var_manager.get_variable(\"new_user\")\n            data = {\n                \"flag\": 0,\n                \"intervalTime\": 0,\n                \"num\": \"1\",\n                \"closeType\": 1,\n                \"remark\": \"\",\n                \"symbol\": \"XAUUSD\",\n                \"type\": 0,\n                \"traderId\": vps_trader_id,\n                \"account\": new_user[\"account\"]\n            }\n            response = self.send_post_request(\n                logged_session,\n                '/subcontrol/trader/orderClose',\n                json_data=data,\n            )\n        with allure.step(\"2. 验证响应\"):\n            self.assert_response_status(response, 200, \"平仓失败\")\n>           self.assert_json_value(response, \"$.msg\", \"success\", \"响应msg字段应为success\")\n\ntest_vps\\test_lianxi.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_828.test_vps.test_lianxi.TestVPSOrderType.TestMT4ExternalOrderClose object at 0x000001E08FE9D550>\nresponse = <Response [200]>, json_path = '$.msg', expected_value = 'success'\nerror_msg_prefix = '响应msg字段应为success'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n    \n            assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\n        except Exception as e:\n            with allure.step(f\"JSON断言失败: {json_path}\"):\n                allure.attach(json_path, \"JSON路径\", allure.attachment_type.TEXT)\n                allure.attach(str(expected_value), \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(response.text[:500], \"响应内容\", allure.attachment_type.TEXT)\n            logger.error(\n                f\"[{self._get_current_time()}] JSON断言失败: {str(e)} | 路径: {json_path} | 响应: {response.text[:500]}\")\n>           raise AssertionError(f\"Failed: {error_msg_prefix}（JSON断言失败）\") from e\nE           AssertionError: Failed: 响应msg字段应为success（JSON断言失败）\n\ncommons\\api_base.py:425: AssertionError",
    "steps" : [ {
      "name" : "1. 发送全平订单平仓请求",
      "time" : {
        "start" : 1756711577012,
        "stop" : 1756711578307,
        "duration" : 1295
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "执行 POST 请求",
        "time" : {
          "start" : 1756711577012,
          "stop" : 1756711578307,
          "duration" : 1295
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "请求详情",
          "time" : {
            "start" : 1756711577012,
            "stop" : 1756711577014,
            "duration" : 2
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "a9a497188382540b",
            "name" : "请求URL",
            "source" : "a9a497188382540b.txt",
            "type" : "text/plain",
            "size" : 29
          }, {
            "uid" : "d7879778b64bcdce",
            "name" : "请求头",
            "source" : "d7879778b64bcdce.json",
            "type" : "application/json",
            "size" : 234
          }, {
            "uid" : "472954b57b5b36e8",
            "name" : "请求体（JSON）",
            "source" : "472954b57b5b36e8.json",
            "type" : "application/json",
            "size" : 162
          } ],
          "parameters" : [ ],
          "hasContent" : true,
          "stepsCount" : 0,
          "attachmentsCount" : 3,
          "shouldDisplayMessage" : false
        }, {
          "name" : "响应详情",
          "time" : {
            "start" : 1756711577297,
            "stop" : 1756711577298,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "802ced20fb721163",
            "name" : "响应状态码",
            "source" : "802ced20fb721163.txt",
            "type" : "text/plain",
            "size" : 3
          }, {
            "uid" : "4e07ba707cbd9b88",
            "name" : "响应头",
            "source" : "4e07ba707cbd9b88.json",
            "type" : "application/json",
            "size" : 526
          }, {
            "uid" : "5f55cfc90b38a7",
            "name" : "响应体（JSON）",
            "source" : "5f55cfc90b38a7.json",
            "type" : "application/json",
            "size" : 73
          } ],
          "parameters" : [ ],
          "hasContent" : true,
          "stepsCount" : 0,
          "attachmentsCount" : 3,
          "shouldDisplayMessage" : false
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "hasContent" : true,
        "stepsCount" : 2,
        "attachmentsCount" : 6,
        "shouldDisplayMessage" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 3,
      "attachmentsCount" : 6,
      "shouldDisplayMessage" : false
    }, {
      "name" : "2. 验证响应",
      "time" : {
        "start" : 1756711578307,
        "stop" : 1756711578323,
        "duration" : 16
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Failed: 响应msg字段应为success（JSON断言失败）\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\lingkuan_828\\test_vps\\test_lianxi.py\", line 118, in test_trader_orderclose2\n    self.assert_json_value(response, \"$.msg\", \"success\", \"响应msg字段应为success\")\n  File \"D:\\pycharm_test\\lingkuan_828\\commons\\api_base.py\", line 425, in assert_json_value\n    raise AssertionError(f\"Failed: {error_msg_prefix}（JSON断言失败）\") from e\n",
      "steps" : [ {
        "name" : "断言响应状态码",
        "time" : {
          "start" : 1756711578307,
          "stop" : 1756711578308,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "3fcf230299e9b13e",
          "name" : "请求URL",
          "source" : "3fcf230299e9b13e.txt",
          "type" : "text/plain",
          "size" : 55
        }, {
          "uid" : "3e590e08b4c19bf9",
          "name" : "预期状态码",
          "source" : "3e590e08b4c19bf9.txt",
          "type" : "text/plain",
          "size" : 14
        }, {
          "uid" : "f888c33f2685aa8a",
          "name" : "实际状态码",
          "source" : "f888c33f2685aa8a.txt",
          "type" : "text/plain",
          "size" : 14
        }, {
          "uid" : "4f1d2b1e39839a63",
          "name" : "响应内容",
          "source" : "4f1d2b1e39839a63.txt",
          "type" : "text/plain",
          "size" : 60
        } ],
        "parameters" : [ ],
        "hasContent" : true,
        "stepsCount" : 0,
        "attachmentsCount" : 4,
        "shouldDisplayMessage" : false
      }, {
        "name" : "断言JSON路径: $.msg",
        "time" : {
          "start" : 1756711578316,
          "stop" : 1756711578320,
          "duration" : 4
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "6db4dcaf53a12204",
          "name" : "请求URL",
          "source" : "6db4dcaf53a12204.txt",
          "type" : "text/plain",
          "size" : 55
        }, {
          "uid" : "238eaae19fcc1765",
          "name" : "预期值",
          "source" : "238eaae19fcc1765.txt",
          "type" : "text/plain",
          "size" : 20
        }, {
          "uid" : "5c3ec63568152dd4",
          "name" : "实际值",
          "source" : "5c3ec63568152dd4.txt",
          "type" : "text/plain",
          "size" : 40
        } ],
        "parameters" : [ ],
        "hasContent" : true,
        "stepsCount" : 0,
        "attachmentsCount" : 3,
        "shouldDisplayMessage" : false
      }, {
        "name" : "JSON断言失败: $.msg",
        "time" : {
          "start" : 1756711578320,
          "stop" : 1756711578323,
          "duration" : 3
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "ae88c1e648b14bad",
          "name" : "JSON路径",
          "source" : "ae88c1e648b14bad.txt",
          "type" : "text/plain",
          "size" : 5
        }, {
          "uid" : "34ef49ee1ff473da",
          "name" : "预期值",
          "source" : "34ef49ee1ff473da.txt",
          "type" : "text/plain",
          "size" : 7
        }, {
          "uid" : "6fb3236553381965",
          "name" : "响应内容",
          "source" : "6fb3236553381965.txt",
          "type" : "text/plain",
          "size" : 60
        } ],
        "parameters" : [ ],
        "hasContent" : true,
        "stepsCount" : 0,
        "attachmentsCount" : 3,
        "shouldDisplayMessage" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 3,
      "attachmentsCount" : 10,
      "shouldDisplayMessage" : true
    } ],
    "attachments" : [ {
      "uid" : "cb92fad9c3209bfd",
      "name" : "log",
      "source" : "cb92fad9c3209bfd.txt",
      "type" : "text/plain",
      "size" : 5598
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 8,
    "attachmentsCount" : 17,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "api_session::0",
    "time" : {
      "start" : 1756711578364,
      "stop" : 1756711578364,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "logged_session::0",
    "time" : {
      "start" : 1756711578362,
      "stop" : 1756711578363,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "var_manager::0",
    "time" : {
      "start" : 1756711578364,
      "stop" : 1756711578366,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "场景6：平仓的订单类型功能验证-MT4外部订单"
  }, {
    "name" : "feature",
    "value" : "VPS策略下单-平仓的功能校验"
  }, {
    "name" : "tag",
    "value" : "url('vps')"
  }, {
    "name" : "parentSuite",
    "value" : "test_vps"
  }, {
    "name" : "suite",
    "value" : "test_lianxi"
  }, {
    "name" : "subSuite",
    "value" : "TestVPSOrderType"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "44456-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_vps.test_lianxi"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "url('vps')" ]
  },
  "source" : "e509cc46ad4faa54.json",
  "parameterValues" : [ ]
}