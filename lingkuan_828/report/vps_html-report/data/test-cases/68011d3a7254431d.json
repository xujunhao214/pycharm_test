{
  "uid" : "68011d3a7254431d",
  "name" : "数据库校验-交易平仓-主指令及订单详情数据检查-有订单",
  "fullName" : "test_vps.test_lianxi.TestVPStradingOrders3#test_dbquery_orderSendclose",
  "historyId" : "07de7cb6298ec8763534de1f034293d2",
  "time" : {
    "start" : 1756453985457,
    "stop" : 1756453992872,
    "duration" : 7415
  },
  "description" : "\n        ### 测试说明\n        - 前置条件：有vps策略和vps跟单\n          1. 修改跟单账号，跟单方向-反向sell\n          2. 进行开仓\n          3. 交易下单-跟单账号自己平仓-buy\n          4. 校验平仓的订单数，应该不等于4\n          5. 交易下单-跟单账号自己平仓-sell\n          6. 校验平仓的订单数,等于4\n        - 预期结果：平仓的订单方向功能正确\n        ",
  "descriptionHtml" : "<pre><code>    ### 测试说明\n    - 前置条件：有vps策略和vps跟单\n      1. 修改跟单账号，跟单方向-反向sell\n      2. 进行开仓\n      3. 交易下单-跟单账号自己平仓-buy\n      4. 校验平仓的订单数，应该不等于4\n      5. 交易下单-跟单账号自己平仓-sell\n      6. 校验平仓的订单数,等于4\n    - 预期结果：平仓的订单方向功能正确\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "Failed: 校验失败: 正常平仓，应该有4个平仓订单\n\n实际: 13\n操作: ==\n预期: 4",
  "statusTrace" : "self = <lingkuan_828.test_vps.test_lianxi.TestVPSOrderSend_newScenarios.TestVPStradingOrders3 object at 0x0000022B3E841DC0>\nvar_manager = <lingkuan_828.commons.variable_manager.VariableManager object at 0x0000022B3E860F40>\ndb_transaction = <pymysql.connections.Connection object at 0x0000022B3E915B20>\n\n    @allure.title(\"数据库校验-交易平仓-主指令及订单详情数据检查-有订单\")\n    def test_dbquery_orderSendclose(self, var_manager, db_transaction):\n        with allure.step(\"1. 获取订单详情表账号数据\"):\n            new_user = var_manager.get_variable(\"new_user\")\n            sql = f\"\"\"\n                        SELECT\n                            fod.size,\n                            fod.close_no,\n                            fod.magical,\n                            fod.open_price,\n                            fod.symbol,\n                            fod.order_no,\n                            fod.close_time,\n                            foi.true_total_lots,\n                            foi.order_no,\n                            foi.operation_type,\n                            foi.create_time,\n                            foi.status,\n                            foi.total_orders\n                        FROM\n                            follow_order_detail fod\n                        INNER JOIN\n                            follow_order_instruct foi\n                        ON\n                            foi.order_no = fod.close_no COLLATE utf8mb4_0900_ai_ci\n                        WHERE foi.operation_type = %s\n                            AND fod.account = %s\n                            \"\"\"\n            params = (\n                '1',\n                new_user[\"account\"],\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n            db_data = self.query_database_with_time_with_timezone(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"fod.close_time\"\n            )\n        with allure.step(\"2. 数据校验\"):\n            if not db_data:\n                pytest.fail(\"数据库查询结果为空，无法提取数据\")\n    \n            with allure.step(\"验证订单数量\"):\n>               self.verify_data(\n                    actual_value=len(db_data),\n                    expected_value=4,\n                    op=CompareOp.EQ,\n                    message=f\"正常平仓，应该有4个平仓订单\",\n                    attachment_name=\"订单数量详情\"\n                )\n\ntest_vps\\test_lianxi.py:354: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_828.test_vps.test_lianxi.TestVPSOrderSend_newScenarios.TestVPStradingOrders3 object at 0x0000022B3E841DC0>\nactual_value = 13, expected_value = 4, op = <CompareOp.EQ: '=='>\nmessage = '正常平仓，应该有4个平仓订单', attachment_name = '订单数量详情'\nattachment_type = 'text/plain', use_isclose = True, rel_tol = 1e-09, abs_tol = 0\n\n    def verify_data(\n            self,\n            actual_value,\n            expected_value,\n            op: CompareOp,\n            message: str,\n            attachment_name: str,\n            attachment_type=\"text/plain\",\n            use_isclose=True,  # 新增参数：是否启用math.isclose容错（默认启用）\n            rel_tol=1e-9,  # 相对容差（仅当use_isclose=True时生效）\n            abs_tol=0  # 绝对容差（仅当use_isclose=True时生效）\n    ):\n        \"\"\"\n        通用数据校验函数，支持浮点容错比较\n        :param actual_value: 实际值\n        :param expected_value: 预期值\n        :param op: 比较操作，CompareOp 枚举\n        :param message: 校验失败时的提示信息\n        :param attachment_name: Allure 附件名称\n        :param attachment_type: Allure 附件类型，默认文本\n        :param use_isclose: 是否使用math.isclose进行浮点容错比较\n        :param rel_tol: 相对容差（默认1e-9）\n        :param abs_tol: 绝对容差（默认0.0）\n        其他参数同前\n        \"\"\"\n        with allure.step(f\"校验: {message}\"):\n            result = False\n            try:\n                # 处理浮点容错比较（仅对EQ/NE操作生效）\n                if use_isclose and op in (CompareOp.EQ, CompareOp.NE):\n                    if not (isinstance(actual_value, (int, float)) and\n                            isinstance(expected_value, (int, float))):\n                        # 非数字类型自动禁用isclose，避免报错\n                        use_isclose = False\n                        logging.warning(f\"自动禁用isclose：非数字类型比较（实际值类型：{type(actual_value)}）\")\n    \n                    # 计算isclose结果\n                    is_close = math.isclose(\n                        actual_value,\n                        expected_value,\n                        rel_tol=rel_tol,\n                        abs_tol=abs_tol\n                    )\n                    # 根据操作类型取反\n                    result = is_close if op == CompareOp.EQ else not is_close\n    \n                # 普通比较逻辑\n                else:\n                    if op == CompareOp.EQ:\n                        result = actual_value == expected_value\n                    elif op == CompareOp.NE:\n                        result = actual_value != expected_value\n                    elif op == CompareOp.GT:\n                        result = actual_value > expected_value\n                    elif op == CompareOp.LT:\n                        result = actual_value < expected_value\n                    elif op == CompareOp.GE:\n                        result = actual_value >= expected_value\n                    elif op == CompareOp.LE:\n                        result = actual_value <= expected_value\n                    elif op == CompareOp.IN:\n                        result = actual_value in expected_value\n                    elif op == CompareOp.NOT_IN:\n                        result = actual_value not in expected_value\n    \n            except TypeError as e:\n                pytest.fail(\n                    f\"校验类型错误: {str(e)}\\n实际值类型: {type(actual_value)}, 预期值类型: {type(expected_value)}\")\n    \n            # 生成详细提示信息（包含容差参数）\n            detail_msg = (\n                f\"\\n实际: {actual_value}\\n\"\n                f\"操作: {op.value}\\n\"\n                f\"预期: {expected_value}\\n\"\n            )\n    \n            # 添加allure.attach，将信息写入报告\n            allure.attach(\n                detail_msg,  # 附件内容\n                name=attachment_name,  # 附件名称（来自参数）\n                attachment_type=attachment_type  # 附件类型\n            )\n    \n            if not result:\n>               pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\nE               Failed: 校验失败: 正常平仓，应该有4个平仓订单\nE               \nE               实际: 13\nE               操作: ==\nE               预期: 4\n\ncommons\\api_base.py:1305: Failed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "environment",
    "time" : {
      "start" : 1756453963850,
      "stop" : 1756453963850,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "db",
    "time" : {
      "start" : 1756453985046,
      "stop" : 1756453985457,
      "duration" : 411
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "test_group",
    "time" : {
      "start" : 1756453963850,
      "stop" : 1756453963850,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "db_transaction",
    "time" : {
      "start" : 1756453985457,
      "stop" : 1756453985457,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "var_manager",
    "time" : {
      "start" : 1756453963850,
      "stop" : 1756453963851,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "db_config",
    "time" : {
      "start" : 1756453971823,
      "stop" : 1756453971823,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "testStage" : {
    "description" : "\n        ### 测试说明\n        - 前置条件：有vps策略和vps跟单\n          1. 修改跟单账号，跟单方向-反向sell\n          2. 进行开仓\n          3. 交易下单-跟单账号自己平仓-buy\n          4. 校验平仓的订单数，应该不等于4\n          5. 交易下单-跟单账号自己平仓-sell\n          6. 校验平仓的订单数,等于4\n        - 预期结果：平仓的订单方向功能正确\n        ",
    "status" : "failed",
    "statusMessage" : "Failed: 校验失败: 正常平仓，应该有4个平仓订单\n\n实际: 13\n操作: ==\n预期: 4",
    "statusTrace" : "self = <lingkuan_828.test_vps.test_lianxi.TestVPSOrderSend_newScenarios.TestVPStradingOrders3 object at 0x0000022B3E841DC0>\nvar_manager = <lingkuan_828.commons.variable_manager.VariableManager object at 0x0000022B3E860F40>\ndb_transaction = <pymysql.connections.Connection object at 0x0000022B3E915B20>\n\n    @allure.title(\"数据库校验-交易平仓-主指令及订单详情数据检查-有订单\")\n    def test_dbquery_orderSendclose(self, var_manager, db_transaction):\n        with allure.step(\"1. 获取订单详情表账号数据\"):\n            new_user = var_manager.get_variable(\"new_user\")\n            sql = f\"\"\"\n                        SELECT\n                            fod.size,\n                            fod.close_no,\n                            fod.magical,\n                            fod.open_price,\n                            fod.symbol,\n                            fod.order_no,\n                            fod.close_time,\n                            foi.true_total_lots,\n                            foi.order_no,\n                            foi.operation_type,\n                            foi.create_time,\n                            foi.status,\n                            foi.total_orders\n                        FROM\n                            follow_order_detail fod\n                        INNER JOIN\n                            follow_order_instruct foi\n                        ON\n                            foi.order_no = fod.close_no COLLATE utf8mb4_0900_ai_ci\n                        WHERE foi.operation_type = %s\n                            AND fod.account = %s\n                            \"\"\"\n            params = (\n                '1',\n                new_user[\"account\"],\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n            db_data = self.query_database_with_time_with_timezone(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"fod.close_time\"\n            )\n        with allure.step(\"2. 数据校验\"):\n            if not db_data:\n                pytest.fail(\"数据库查询结果为空，无法提取数据\")\n    \n            with allure.step(\"验证订单数量\"):\n>               self.verify_data(\n                    actual_value=len(db_data),\n                    expected_value=4,\n                    op=CompareOp.EQ,\n                    message=f\"正常平仓，应该有4个平仓订单\",\n                    attachment_name=\"订单数量详情\"\n                )\n\ntest_vps\\test_lianxi.py:354: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_828.test_vps.test_lianxi.TestVPSOrderSend_newScenarios.TestVPStradingOrders3 object at 0x0000022B3E841DC0>\nactual_value = 13, expected_value = 4, op = <CompareOp.EQ: '=='>\nmessage = '正常平仓，应该有4个平仓订单', attachment_name = '订单数量详情'\nattachment_type = 'text/plain', use_isclose = True, rel_tol = 1e-09, abs_tol = 0\n\n    def verify_data(\n            self,\n            actual_value,\n            expected_value,\n            op: CompareOp,\n            message: str,\n            attachment_name: str,\n            attachment_type=\"text/plain\",\n            use_isclose=True,  # 新增参数：是否启用math.isclose容错（默认启用）\n            rel_tol=1e-9,  # 相对容差（仅当use_isclose=True时生效）\n            abs_tol=0  # 绝对容差（仅当use_isclose=True时生效）\n    ):\n        \"\"\"\n        通用数据校验函数，支持浮点容错比较\n        :param actual_value: 实际值\n        :param expected_value: 预期值\n        :param op: 比较操作，CompareOp 枚举\n        :param message: 校验失败时的提示信息\n        :param attachment_name: Allure 附件名称\n        :param attachment_type: Allure 附件类型，默认文本\n        :param use_isclose: 是否使用math.isclose进行浮点容错比较\n        :param rel_tol: 相对容差（默认1e-9）\n        :param abs_tol: 绝对容差（默认0.0）\n        其他参数同前\n        \"\"\"\n        with allure.step(f\"校验: {message}\"):\n            result = False\n            try:\n                # 处理浮点容错比较（仅对EQ/NE操作生效）\n                if use_isclose and op in (CompareOp.EQ, CompareOp.NE):\n                    if not (isinstance(actual_value, (int, float)) and\n                            isinstance(expected_value, (int, float))):\n                        # 非数字类型自动禁用isclose，避免报错\n                        use_isclose = False\n                        logging.warning(f\"自动禁用isclose：非数字类型比较（实际值类型：{type(actual_value)}）\")\n    \n                    # 计算isclose结果\n                    is_close = math.isclose(\n                        actual_value,\n                        expected_value,\n                        rel_tol=rel_tol,\n                        abs_tol=abs_tol\n                    )\n                    # 根据操作类型取反\n                    result = is_close if op == CompareOp.EQ else not is_close\n    \n                # 普通比较逻辑\n                else:\n                    if op == CompareOp.EQ:\n                        result = actual_value == expected_value\n                    elif op == CompareOp.NE:\n                        result = actual_value != expected_value\n                    elif op == CompareOp.GT:\n                        result = actual_value > expected_value\n                    elif op == CompareOp.LT:\n                        result = actual_value < expected_value\n                    elif op == CompareOp.GE:\n                        result = actual_value >= expected_value\n                    elif op == CompareOp.LE:\n                        result = actual_value <= expected_value\n                    elif op == CompareOp.IN:\n                        result = actual_value in expected_value\n                    elif op == CompareOp.NOT_IN:\n                        result = actual_value not in expected_value\n    \n            except TypeError as e:\n                pytest.fail(\n                    f\"校验类型错误: {str(e)}\\n实际值类型: {type(actual_value)}, 预期值类型: {type(expected_value)}\")\n    \n            # 生成详细提示信息（包含容差参数）\n            detail_msg = (\n                f\"\\n实际: {actual_value}\\n\"\n                f\"操作: {op.value}\\n\"\n                f\"预期: {expected_value}\\n\"\n            )\n    \n            # 添加allure.attach，将信息写入报告\n            allure.attach(\n                detail_msg,  # 附件内容\n                name=attachment_name,  # 附件名称（来自参数）\n                attachment_type=attachment_type  # 附件类型\n            )\n    \n            if not result:\n>               pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\nE               Failed: 校验失败: 正常平仓，应该有4个平仓订单\nE               \nE               实际: 13\nE               操作: ==\nE               预期: 4\n\ncommons\\api_base.py:1305: Failed",
    "steps" : [ {
      "name" : "1. 获取订单详情表账号数据",
      "time" : {
        "start" : 1756453985457,
        "stop" : 1756453992872,
        "duration" : 7415
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "轮询等待数据稳定（时区+05:00，超时30秒）",
        "time" : {
          "start" : 1756453985457,
          "stop" : 1756453992872,
          "duration" : 7415
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "带时区转换查询（目标时区: +05:00）",
          "time" : {
            "start" : 1756453985510,
            "stop" : 1756453986590,
            "duration" : 1080
          },
          "status" : "passed",
          "steps" : [ {
            "name" : "执行数据库查询",
            "time" : {
              "start" : 1756453985511,
              "stop" : 1756453986590,
              "duration" : 1079
            },
            "status" : "passed",
            "steps" : [ ],
            "attachments" : [ {
              "uid" : "fc7eb7ed8de8d6ed",
              "name" : "执行SQL",
              "source" : "fc7eb7ed8de8d6ed.txt",
              "type" : "text/plain",
              "size" : 1245
            }, {
              "uid" : "4177b3a38db5672d",
              "name" : "SQL参数",
              "source" : "4177b3a38db5672d.txt",
              "type" : "text/plain",
              "size" : 21
            } ],
            "parameters" : [ ],
            "shouldDisplayMessage" : false,
            "attachmentsCount" : 2,
            "hasContent" : true,
            "stepsCount" : 0
          } ],
          "attachments" : [ {
            "uid" : "1016c1207f2cd365",
            "name" : "时区处理",
            "source" : "1016c1207f2cd365.txt",
            "type" : "text/plain",
            "size" : 51
          } ],
          "parameters" : [ ],
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 3,
          "hasContent" : true,
          "stepsCount" : 1
        }, {
          "name" : "轮询中（已等待1.1秒）",
          "time" : {
            "start" : 1756453986590,
            "stop" : 1756453986591,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "1ad8e20f82d0f333",
            "name" : "当前状态",
            "source" : "1ad8e20f82d0f333.txt",
            "type" : "text/plain",
            "size" : 16
          }, {
            "uid" : "32001b6de7b070e3",
            "name" : "超时倒计时",
            "source" : "32001b6de7b070e3.txt",
            "type" : "text/plain",
            "size" : 21
          } ],
          "parameters" : [ ],
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 2,
          "hasContent" : true,
          "stepsCount" : 0
        }, {
          "name" : "判断结果稳定性",
          "time" : {
            "start" : 1756453986591,
            "stop" : 1756453986591,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "c381736ebb9df0d7",
            "name" : "判断结果",
            "source" : "c381736ebb9df0d7.txt",
            "type" : "text/plain",
            "size" : 36
          } ],
          "parameters" : [ ],
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 1,
          "hasContent" : true,
          "stepsCount" : 0
        }, {
          "name" : "数据发生变化",
          "time" : {
            "start" : 1756453986591,
            "stop" : 1756453986591,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "7288cb1331ef4537",
            "name" : "状态说明",
            "source" : "7288cb1331ef4537.txt",
            "type" : "text/plain",
            "size" : 24
          } ],
          "parameters" : [ ],
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 1,
          "hasContent" : true,
          "stepsCount" : 0
        }, {
          "name" : "带时区转换查询（目标时区: +05:00）",
          "time" : {
            "start" : 1756453988640,
            "stop" : 1756453989705,
            "duration" : 1065
          },
          "status" : "passed",
          "steps" : [ {
            "name" : "执行数据库查询",
            "time" : {
              "start" : 1756453988641,
              "stop" : 1756453989705,
              "duration" : 1064
            },
            "status" : "passed",
            "steps" : [ ],
            "attachments" : [ {
              "uid" : "94a4bc47a3d15600",
              "name" : "执行SQL",
              "source" : "94a4bc47a3d15600.txt",
              "type" : "text/plain",
              "size" : 1245
            }, {
              "uid" : "64686388c937cc4d",
              "name" : "SQL参数",
              "source" : "64686388c937cc4d.txt",
              "type" : "text/plain",
              "size" : 21
            } ],
            "parameters" : [ ],
            "shouldDisplayMessage" : false,
            "attachmentsCount" : 2,
            "hasContent" : true,
            "stepsCount" : 0
          } ],
          "attachments" : [ {
            "uid" : "b20da6ce7f138f5f",
            "name" : "时区处理",
            "source" : "b20da6ce7f138f5f.txt",
            "type" : "text/plain",
            "size" : 51
          } ],
          "parameters" : [ ],
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 3,
          "hasContent" : true,
          "stepsCount" : 1
        }, {
          "name" : "轮询中（已等待4.2秒）",
          "time" : {
            "start" : 1756453989705,
            "stop" : 1756453989705,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "b67237e00d1b2ef2",
            "name" : "当前状态",
            "source" : "b67237e00d1b2ef2.txt",
            "type" : "text/plain",
            "size" : 16
          }, {
            "uid" : "cc197d8939c69d46",
            "name" : "超时倒计时",
            "source" : "cc197d8939c69d46.txt",
            "type" : "text/plain",
            "size" : 21
          } ],
          "parameters" : [ ],
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 2,
          "hasContent" : true,
          "stepsCount" : 0
        }, {
          "name" : "判断结果稳定性",
          "time" : {
            "start" : 1756453989705,
            "stop" : 1756453989706,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "21bf05430b33cae2",
            "name" : "判断结果",
            "source" : "21bf05430b33cae2.txt",
            "type" : "text/plain",
            "size" : 42
          } ],
          "parameters" : [ ],
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 1,
          "hasContent" : true,
          "stepsCount" : 0
        }, {
          "name" : "数据首次稳定",
          "time" : {
            "start" : 1756453989706,
            "stop" : 1756453989706,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "d359eeb5b097394a",
            "name" : "状态说明",
            "source" : "d359eeb5b097394a.txt",
            "type" : "text/plain",
            "size" : 40
          } ],
          "parameters" : [ ],
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 1,
          "hasContent" : true,
          "stepsCount" : 0
        }, {
          "name" : "带时区转换查询（目标时区: +05:00）",
          "time" : {
            "start" : 1756453991764,
            "stop" : 1756453992870,
            "duration" : 1106
          },
          "status" : "passed",
          "steps" : [ {
            "name" : "执行数据库查询",
            "time" : {
              "start" : 1756453991765,
              "stop" : 1756453992869,
              "duration" : 1104
            },
            "status" : "passed",
            "steps" : [ ],
            "attachments" : [ {
              "uid" : "fc98d827b0a1ad4b",
              "name" : "执行SQL",
              "source" : "fc98d827b0a1ad4b.txt",
              "type" : "text/plain",
              "size" : 1245
            }, {
              "uid" : "57a7a36d2144fc1",
              "name" : "SQL参数",
              "source" : "57a7a36d2144fc1.txt",
              "type" : "text/plain",
              "size" : 21
            } ],
            "parameters" : [ ],
            "shouldDisplayMessage" : false,
            "attachmentsCount" : 2,
            "hasContent" : true,
            "stepsCount" : 0
          } ],
          "attachments" : [ {
            "uid" : "7e51e0ca1ab7b85d",
            "name" : "时区处理",
            "source" : "7e51e0ca1ab7b85d.txt",
            "type" : "text/plain",
            "size" : 51
          } ],
          "parameters" : [ ],
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 3,
          "hasContent" : true,
          "stepsCount" : 1
        }, {
          "name" : "轮询中（已等待7.4秒）",
          "time" : {
            "start" : 1756453992870,
            "stop" : 1756453992871,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "98b932e5074a7ae2",
            "name" : "当前状态",
            "source" : "98b932e5074a7ae2.txt",
            "type" : "text/plain",
            "size" : 16
          }, {
            "uid" : "8ae3e97365fffcc8",
            "name" : "超时倒计时",
            "source" : "8ae3e97365fffcc8.txt",
            "type" : "text/plain",
            "size" : 21
          } ],
          "parameters" : [ ],
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 2,
          "hasContent" : true,
          "stepsCount" : 0
        }, {
          "name" : "判断结果稳定性",
          "time" : {
            "start" : 1756453992871,
            "stop" : 1756453992871,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "95544ba0e06f3620",
            "name" : "判断结果",
            "source" : "95544ba0e06f3620.txt",
            "type" : "text/plain",
            "size" : 42
          } ],
          "parameters" : [ ],
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 1,
          "hasContent" : true,
          "stepsCount" : 0
        }, {
          "name" : "数据稳定达标",
          "time" : {
            "start" : 1756453992871,
            "stop" : 1756453992871,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "a9ad8f2989cb402b",
            "name" : "结果说明",
            "source" : "a9ad8f2989cb402b.txt",
            "type" : "text/plain",
            "size" : 34
          } ],
          "parameters" : [ ],
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 1,
          "hasContent" : true,
          "stepsCount" : 0
        }, {
          "name" : "带时区查询最终结果",
          "time" : {
            "start" : 1756453992871,
            "stop" : 1756453992872,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "b9984e49b1cef576",
            "name" : "结果预览",
            "source" : "b9984e49b1cef576.json",
            "type" : "application/json",
            "size" : 4809
          } ],
          "parameters" : [ ],
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 1,
          "hasContent" : true,
          "stepsCount" : 0
        } ],
        "attachments" : [ {
          "uid" : "8038f1c0da8838fa",
          "name" : "执行SQL",
          "source" : "8038f1c0da8838fa.txt",
          "type" : "text/plain",
          "size" : 1100
        }, {
          "uid" : "4145c935b7ee6081",
          "name" : "SQL参数",
          "source" : "4145c935b7ee6081.txt",
          "type" : "text/plain",
          "size" : 15
        }, {
          "uid" : "9f3938dcba16544b",
          "name" : "时区偏移量（小时）",
          "source" : "9f3938dcba16544b.txt",
          "type" : "text/plain",
          "size" : 1
        } ],
        "parameters" : [ ],
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 25,
        "hasContent" : true,
        "stepsCount" : 16
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 25,
      "hasContent" : true,
      "stepsCount" : 17
    }, {
      "name" : "2. 数据校验",
      "time" : {
        "start" : 1756453992872,
        "stop" : 1756453992872,
        "duration" : 0
      },
      "status" : "failed",
      "statusMessage" : "Failed: 校验失败: 正常平仓，应该有4个平仓订单\n\n实际: 13\n操作: ==\n预期: 4\n\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\lingkuan_828\\test_vps\\test_lianxi.py\", line 354, in test_dbquery_orderSendclose\n    self.verify_data(\n  File \"D:\\pycharm_test\\lingkuan_828\\commons\\api_base.py\", line 1305, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n",
      "steps" : [ {
        "name" : "验证订单数量",
        "time" : {
          "start" : 1756453992872,
          "stop" : 1756453992872,
          "duration" : 0
        },
        "status" : "failed",
        "statusMessage" : "Failed: 校验失败: 正常平仓，应该有4个平仓订单\n\n实际: 13\n操作: ==\n预期: 4\n\n",
        "statusTrace" : "  File \"D:\\pycharm_test\\lingkuan_828\\test_vps\\test_lianxi.py\", line 354, in test_dbquery_orderSendclose\n    self.verify_data(\n  File \"D:\\pycharm_test\\lingkuan_828\\commons\\api_base.py\", line 1305, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n",
        "steps" : [ {
          "name" : "校验: 正常平仓，应该有4个平仓订单",
          "time" : {
            "start" : 1756453992872,
            "stop" : 1756453992872,
            "duration" : 0
          },
          "status" : "failed",
          "statusMessage" : "Failed: 校验失败: 正常平仓，应该有4个平仓订单\n\n实际: 13\n操作: ==\n预期: 4\n\n",
          "statusTrace" : "  File \"D:\\pycharm_test\\lingkuan_828\\commons\\api_base.py\", line 1305, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "6158921193df65f7",
            "name" : "订单数量详情",
            "source" : "6158921193df65f7.attach",
            "type" : "text/plain",
            "size" : 33
          } ],
          "parameters" : [ ],
          "shouldDisplayMessage" : true,
          "attachmentsCount" : 1,
          "hasContent" : true,
          "stepsCount" : 0
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 1,
        "hasContent" : true,
        "stepsCount" : 1
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 1,
      "hasContent" : true,
      "stepsCount" : 2
    } ],
    "attachments" : [ {
      "uid" : "76e9cc0c56b01edb",
      "name" : "log",
      "source" : "76e9cc0c56b01edb.txt",
      "type" : "text/plain",
      "size" : 17084
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 27,
    "hasContent" : true,
    "stepsCount" : 21
  },
  "afterStages" : [ {
    "name" : "db::0",
    "time" : {
      "start" : 1756453992889,
      "stop" : 1756453992889,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "db_transaction::0",
    "time" : {
      "start" : 1756453992889,
      "stop" : 1756453992889,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "var_manager::0",
    "time" : {
      "start" : 1756454025475,
      "stop" : 1756454025475,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "仪表盘"
  }, {
    "name" : "story",
    "value" : "场景3：平仓的订单方向功能校验-sell"
  }, {
    "name" : "parentSuite",
    "value" : "test_vps"
  }, {
    "name" : "suite",
    "value" : "test_lianxi"
  }, {
    "name" : "subSuite",
    "value" : "TestVPSOrderSend_newScenarios"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "6076-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_vps.test_lianxi"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "68011d3a7254431d.json",
  "parameterValues" : [ ]
}