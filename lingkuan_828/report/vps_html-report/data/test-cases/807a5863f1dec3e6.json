{
  "uid" : "807a5863f1dec3e6",
  "name" : "仪表盘-账号数据校验",
  "fullName" : "test_vps.test_getAccountDataPage.TestVPSOrderSend2#test_dashboard_getAccountDataPage",
  "historyId" : "dcf21c6b73edcdbd3e9993dd41e9f877",
  "time" : {
    "start" : 1756430223447,
    "stop" : 1756430225034,
    "duration" : 1587
  },
  "description" : "\n    ### 测试说明\n    - 功能校验，校验仪表盘的数据是否正确\n    - 前置条件：有vps策略和vps跟单\n      1. 进行开仓，手数范围0.1-1，总手数1\n      2. 获取仪表数据，提取数据库数据，然后进行校验\n      3. 数据正确\n    - 预期结果：数据正确\n    ",
  "descriptionHtml" : "<pre><code>### 测试说明\n- 功能校验，校验仪表盘的数据是否正确\n- 前置条件：有vps策略和vps跟单\n  1. 进行开仓，手数范围0.1-1，总手数1\n  2. 获取仪表数据，提取数据库数据，然后进行校验\n  3. 数据正确\n- 预期结果：数据正确\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "Failed: 校验失败: 持仓手数符合预期\n\n实际: 1.0\n操作: ==\n预期: 1.9300000000000002",
  "statusTrace" : "self = <lingkuan_828.test_vps.test_getAccountDataPage.TestVPSOrderSend_newScenarios.TestVPSOrderSend2 object at 0x000001FA57513970>\nvar_manager = <lingkuan_828.commons.variable_manager.VariableManager object at 0x000001FA57886340>\nlogged_session = <lingkuan_828.commons.session.EnvironmentSession object at 0x000001FA588AE5E0>\n\n    @pytest.mark.retry(n=3, delay=5)\n    @allure.title(\"仪表盘-账号数据校验\")\n    def test_dashboard_getAccountDataPage(self, var_manager, logged_session):\n        with allure.step(\"1. 获取仪表盘-账号数据\"):\n            vps_user_accounts_1 = var_manager.get_variable(\"vps_user_accounts_1\")\n            params = {\n                \"page\": 1,\n                \"limit\": 10,\n                \"order\": \"\",\n                \"asc\": False,\n                \"deleted\": None,\n                \"brokerName\": \"AS\",\n                \"account\": vps_user_accounts_1,\n            }\n            response = self.send_get_request(\n                logged_session,\n                '/dashboard/getAccountDataPage',\n                params=params,\n            )\n        with allure.step(\"2. 验证响应\"):\n            self.assert_response_status(\n                response,\n                200,\n                \"获取仪表盘数据失败\"\n            )\n            self.assert_json_value(\n                response,\n                \"$.msg\",\n                \"success\",\n                \"响应msg字段应为success\"\n            )\n        with allure.step(\"3. 提取数据\"):\n            self.json_utils = JsonPathUtils()\n            response = response.json()\n            sourceAccount = self.json_utils.extract(response, \"$.data[0].sourceAccount\")\n            profit = self.json_utils.extract(response, \"$.data[0].profit\")\n            orderNum = self.json_utils.extract(response, \"$.data[0].orderNum\")\n            lots = self.json_utils.extract(response, \"$.data[0].lots\")\n            marginProportion = self.json_utils.extract(response, \"$.data[0].marginProportion\")\n            proportion = self.json_utils.extract(response, \"$.data[0].proportion\")\n            equity = self.json_utils.extract(response, \"$.data[0].equity\")\n            logging.info(\n                f\"提取的数据:{sourceAccount, profit, orderNum, lots, marginProportion, proportion, equity}\")\n    \n        with allure.step(\"4. 数据校验\"):\n            with allure.step(\"5.1 验证账号\"):\n                new_user = var_manager.get_variable(\"new_user\")\n                self.verify_data(\n                    actual_value=sourceAccount,\n                    expected_value=new_user[\"account\"],\n                    op=CompareOp.EQ,\n                    use_isclose=False,\n                    message=f\"账号数据符合预期\",\n                    attachment_name=\"账号详情\"\n                )\n                logging.info(f\"账号数据符合预期，实际是{sourceAccount}\")\n    \n            # with allure.step(\"5.2 验证盈利\"):\n            #         self.verify_data(\n            #             actual_value=float(profit),\n            #             expected_value=float(profit_sum),\n            #             op=CompareOp.EQ,\n            #             use_isclose=True,\n            #             abs_tol=100,\n            #             message=f\"盈利数据符合预期\",\n            #             attachment_name=\"盈利详情\"\n            #         )\n            #         logging.info(f\"盈利数据符合预期，实际是{profit_sum}\")\n    \n            with allure.step(\"5.3 验证持仓订单量\"):\n                self.verify_data(\n                    actual_value=float(orderNum),\n                    expected_value=float(order_num),\n                    op=CompareOp.EQ,\n                    use_isclose=True,\n                    abs_tol=3,\n                    message=f\"持仓订单量数据符合预期\",\n                    attachment_name=\"持仓订单量详情\"\n                )\n                logging.info(f\"持仓订单量数据符合预期，实际是{order_num}\")\n    \n            with allure.step(\"5.4 验证持仓手数\"):\n>               self.verify_data(\n                    actual_value=float(lots),\n                    expected_value=float(total),\n                    op=CompareOp.EQ,\n                    use_isclose=True,\n                    abs_tol=0,\n                    message=f\"持仓手数符合预期\",\n                    attachment_name=\"持仓手数详情\"\n                )\n\ntest_vps\\test_getAccountDataPage.py:511: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_828.test_vps.test_getAccountDataPage.TestVPSOrderSend_newScenarios.TestVPSOrderSend2 object at 0x000001FA57513970>\nactual_value = 1.0, expected_value = 1.9300000000000002\nop = <CompareOp.EQ: '=='>, message = '持仓手数符合预期', attachment_name = '持仓手数详情'\nattachment_type = 'text/plain', use_isclose = True, rel_tol = 1e-09, abs_tol = 0\n\n    def verify_data(\n            self,\n            actual_value,\n            expected_value,\n            op: CompareOp,\n            message: str,\n            attachment_name: str,\n            attachment_type=\"text/plain\",\n            use_isclose=True,  # 新增参数：是否启用math.isclose容错（默认启用）\n            rel_tol=1e-9,  # 相对容差（仅当use_isclose=True时生效）\n            abs_tol=0.0  # 绝对容差（仅当use_isclose=True时生效）\n    ):\n        \"\"\"\n        通用数据校验函数，支持浮点容错比较\n        :param actual_value: 实际值\n        :param expected_value: 预期值\n        :param op: 比较操作，CompareOp 枚举\n        :param message: 校验失败时的提示信息\n        :param attachment_name: Allure 附件名称\n        :param attachment_type: Allure 附件类型，默认文本\n        :param use_isclose: 是否使用math.isclose进行浮点容错比较\n        :param rel_tol: 相对容差（默认1e-9）\n        :param abs_tol: 绝对容差（默认0.0）\n        其他参数同前\n        \"\"\"\n        with allure.step(f\"校验: {message}\"):\n            result = False\n            try:\n                # 处理浮点容错比较（仅对EQ/NE操作生效）\n                if use_isclose and op in (CompareOp.EQ, CompareOp.NE):\n                    if not (isinstance(actual_value, (int, float)) and\n                            isinstance(expected_value, (int, float))):\n                        # 非数字类型自动禁用isclose，避免报错\n                        use_isclose = False\n                        logging.warning(f\"自动禁用isclose：非数字类型比较（实际值类型：{type(actual_value)}）\")\n    \n                    # 计算isclose结果\n                    is_close = math.isclose(\n                        actual_value,\n                        expected_value,\n                        rel_tol=rel_tol,\n                        abs_tol=abs_tol\n                    )\n                    # 根据操作类型取反\n                    result = is_close if op == CompareOp.EQ else not is_close\n    \n                # 普通比较逻辑\n                else:\n                    if op == CompareOp.EQ:\n                        result = actual_value == expected_value\n                    elif op == CompareOp.NE:\n                        result = actual_value != expected_value\n                    elif op == CompareOp.GT:\n                        result = actual_value > expected_value\n                    elif op == CompareOp.LT:\n                        result = actual_value < expected_value\n                    elif op == CompareOp.GE:\n                        result = actual_value >= expected_value\n                    elif op == CompareOp.LE:\n                        result = actual_value <= expected_value\n                    elif op == CompareOp.IN:\n                        result = actual_value in expected_value\n                    elif op == CompareOp.NOT_IN:\n                        result = actual_value not in expected_value\n    \n            except TypeError as e:\n                pytest.fail(\n                    f\"校验类型错误: {str(e)}\\n实际值类型: {type(actual_value)}, 预期值类型: {type(expected_value)}\")\n    \n            # 生成详细提示信息（包含容差参数）\n            detail_msg = (\n                f\"\\n实际: {actual_value}\\n\"\n                f\"操作: {op.value}\\n\"\n                f\"预期: {expected_value}\\n\"\n            )\n    \n            # 添加allure.attach，将信息写入报告\n            allure.attach(\n                detail_msg,  # 附件内容\n                name=attachment_name,  # 附件名称（来自参数）\n                attachment_type=attachment_type  # 附件类型\n            )\n    \n            if not result:\n>               pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\nE               Failed: 校验失败: 持仓手数符合预期\nE               \nE               实际: 1.0\nE               操作: ==\nE               预期: 1.9300000000000002\n\ncommons\\api_base.py:1305: Failed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "logged_session",
    "time" : {
      "start" : 1756430222169,
      "stop" : 1756430223447,
      "duration" : 1278
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "api_session",
    "time" : {
      "start" : 1756430222168,
      "stop" : 1756430222169,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "testStage" : {
    "description" : "\n    ### 测试说明\n    - 功能校验，校验仪表盘的数据是否正确\n    - 前置条件：有vps策略和vps跟单\n      1. 进行开仓，手数范围0.1-1，总手数1\n      2. 获取仪表数据，提取数据库数据，然后进行校验\n      3. 数据正确\n    - 预期结果：数据正确\n    ",
    "status" : "failed",
    "statusMessage" : "Failed: 校验失败: 持仓手数符合预期\n\n实际: 1.0\n操作: ==\n预期: 1.9300000000000002",
    "statusTrace" : "self = <lingkuan_828.test_vps.test_getAccountDataPage.TestVPSOrderSend_newScenarios.TestVPSOrderSend2 object at 0x000001FA57513970>\nvar_manager = <lingkuan_828.commons.variable_manager.VariableManager object at 0x000001FA57886340>\nlogged_session = <lingkuan_828.commons.session.EnvironmentSession object at 0x000001FA588AE5E0>\n\n    @pytest.mark.retry(n=3, delay=5)\n    @allure.title(\"仪表盘-账号数据校验\")\n    def test_dashboard_getAccountDataPage(self, var_manager, logged_session):\n        with allure.step(\"1. 获取仪表盘-账号数据\"):\n            vps_user_accounts_1 = var_manager.get_variable(\"vps_user_accounts_1\")\n            params = {\n                \"page\": 1,\n                \"limit\": 10,\n                \"order\": \"\",\n                \"asc\": False,\n                \"deleted\": None,\n                \"brokerName\": \"AS\",\n                \"account\": vps_user_accounts_1,\n            }\n            response = self.send_get_request(\n                logged_session,\n                '/dashboard/getAccountDataPage',\n                params=params,\n            )\n        with allure.step(\"2. 验证响应\"):\n            self.assert_response_status(\n                response,\n                200,\n                \"获取仪表盘数据失败\"\n            )\n            self.assert_json_value(\n                response,\n                \"$.msg\",\n                \"success\",\n                \"响应msg字段应为success\"\n            )\n        with allure.step(\"3. 提取数据\"):\n            self.json_utils = JsonPathUtils()\n            response = response.json()\n            sourceAccount = self.json_utils.extract(response, \"$.data[0].sourceAccount\")\n            profit = self.json_utils.extract(response, \"$.data[0].profit\")\n            orderNum = self.json_utils.extract(response, \"$.data[0].orderNum\")\n            lots = self.json_utils.extract(response, \"$.data[0].lots\")\n            marginProportion = self.json_utils.extract(response, \"$.data[0].marginProportion\")\n            proportion = self.json_utils.extract(response, \"$.data[0].proportion\")\n            equity = self.json_utils.extract(response, \"$.data[0].equity\")\n            logging.info(\n                f\"提取的数据:{sourceAccount, profit, orderNum, lots, marginProportion, proportion, equity}\")\n    \n        with allure.step(\"4. 数据校验\"):\n            with allure.step(\"5.1 验证账号\"):\n                new_user = var_manager.get_variable(\"new_user\")\n                self.verify_data(\n                    actual_value=sourceAccount,\n                    expected_value=new_user[\"account\"],\n                    op=CompareOp.EQ,\n                    use_isclose=False,\n                    message=f\"账号数据符合预期\",\n                    attachment_name=\"账号详情\"\n                )\n                logging.info(f\"账号数据符合预期，实际是{sourceAccount}\")\n    \n            # with allure.step(\"5.2 验证盈利\"):\n            #         self.verify_data(\n            #             actual_value=float(profit),\n            #             expected_value=float(profit_sum),\n            #             op=CompareOp.EQ,\n            #             use_isclose=True,\n            #             abs_tol=100,\n            #             message=f\"盈利数据符合预期\",\n            #             attachment_name=\"盈利详情\"\n            #         )\n            #         logging.info(f\"盈利数据符合预期，实际是{profit_sum}\")\n    \n            with allure.step(\"5.3 验证持仓订单量\"):\n                self.verify_data(\n                    actual_value=float(orderNum),\n                    expected_value=float(order_num),\n                    op=CompareOp.EQ,\n                    use_isclose=True,\n                    abs_tol=3,\n                    message=f\"持仓订单量数据符合预期\",\n                    attachment_name=\"持仓订单量详情\"\n                )\n                logging.info(f\"持仓订单量数据符合预期，实际是{order_num}\")\n    \n            with allure.step(\"5.4 验证持仓手数\"):\n>               self.verify_data(\n                    actual_value=float(lots),\n                    expected_value=float(total),\n                    op=CompareOp.EQ,\n                    use_isclose=True,\n                    abs_tol=0,\n                    message=f\"持仓手数符合预期\",\n                    attachment_name=\"持仓手数详情\"\n                )\n\ntest_vps\\test_getAccountDataPage.py:511: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_828.test_vps.test_getAccountDataPage.TestVPSOrderSend_newScenarios.TestVPSOrderSend2 object at 0x000001FA57513970>\nactual_value = 1.0, expected_value = 1.9300000000000002\nop = <CompareOp.EQ: '=='>, message = '持仓手数符合预期', attachment_name = '持仓手数详情'\nattachment_type = 'text/plain', use_isclose = True, rel_tol = 1e-09, abs_tol = 0\n\n    def verify_data(\n            self,\n            actual_value,\n            expected_value,\n            op: CompareOp,\n            message: str,\n            attachment_name: str,\n            attachment_type=\"text/plain\",\n            use_isclose=True,  # 新增参数：是否启用math.isclose容错（默认启用）\n            rel_tol=1e-9,  # 相对容差（仅当use_isclose=True时生效）\n            abs_tol=0.0  # 绝对容差（仅当use_isclose=True时生效）\n    ):\n        \"\"\"\n        通用数据校验函数，支持浮点容错比较\n        :param actual_value: 实际值\n        :param expected_value: 预期值\n        :param op: 比较操作，CompareOp 枚举\n        :param message: 校验失败时的提示信息\n        :param attachment_name: Allure 附件名称\n        :param attachment_type: Allure 附件类型，默认文本\n        :param use_isclose: 是否使用math.isclose进行浮点容错比较\n        :param rel_tol: 相对容差（默认1e-9）\n        :param abs_tol: 绝对容差（默认0.0）\n        其他参数同前\n        \"\"\"\n        with allure.step(f\"校验: {message}\"):\n            result = False\n            try:\n                # 处理浮点容错比较（仅对EQ/NE操作生效）\n                if use_isclose and op in (CompareOp.EQ, CompareOp.NE):\n                    if not (isinstance(actual_value, (int, float)) and\n                            isinstance(expected_value, (int, float))):\n                        # 非数字类型自动禁用isclose，避免报错\n                        use_isclose = False\n                        logging.warning(f\"自动禁用isclose：非数字类型比较（实际值类型：{type(actual_value)}）\")\n    \n                    # 计算isclose结果\n                    is_close = math.isclose(\n                        actual_value,\n                        expected_value,\n                        rel_tol=rel_tol,\n                        abs_tol=abs_tol\n                    )\n                    # 根据操作类型取反\n                    result = is_close if op == CompareOp.EQ else not is_close\n    \n                # 普通比较逻辑\n                else:\n                    if op == CompareOp.EQ:\n                        result = actual_value == expected_value\n                    elif op == CompareOp.NE:\n                        result = actual_value != expected_value\n                    elif op == CompareOp.GT:\n                        result = actual_value > expected_value\n                    elif op == CompareOp.LT:\n                        result = actual_value < expected_value\n                    elif op == CompareOp.GE:\n                        result = actual_value >= expected_value\n                    elif op == CompareOp.LE:\n                        result = actual_value <= expected_value\n                    elif op == CompareOp.IN:\n                        result = actual_value in expected_value\n                    elif op == CompareOp.NOT_IN:\n                        result = actual_value not in expected_value\n    \n            except TypeError as e:\n                pytest.fail(\n                    f\"校验类型错误: {str(e)}\\n实际值类型: {type(actual_value)}, 预期值类型: {type(expected_value)}\")\n    \n            # 生成详细提示信息（包含容差参数）\n            detail_msg = (\n                f\"\\n实际: {actual_value}\\n\"\n                f\"操作: {op.value}\\n\"\n                f\"预期: {expected_value}\\n\"\n            )\n    \n            # 添加allure.attach，将信息写入报告\n            allure.attach(\n                detail_msg,  # 附件内容\n                name=attachment_name,  # 附件名称（来自参数）\n                attachment_type=attachment_type  # 附件类型\n            )\n    \n            if not result:\n>               pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\nE               Failed: 校验失败: 持仓手数符合预期\nE               \nE               实际: 1.0\nE               操作: ==\nE               预期: 1.9300000000000002\n\ncommons\\api_base.py:1305: Failed",
    "steps" : [ {
      "name" : "1. 获取仪表盘-账号数据",
      "time" : {
        "start" : 1756430223447,
        "stop" : 1756430224944,
        "duration" : 1497
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "执行 GET 请求",
        "time" : {
          "start" : 1756430223447,
          "stop" : 1756430224944,
          "duration" : 1497
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "请求详情",
          "time" : {
            "start" : 1756430223447,
            "stop" : 1756430223448,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "d735e697900d6a49",
            "name" : "请求URL",
            "source" : "d735e697900d6a49.txt",
            "type" : "text/plain",
            "size" : 29
          }, {
            "uid" : "f02f9f3a2a00dc1b",
            "name" : "请求头",
            "source" : "f02f9f3a2a00dc1b.json",
            "type" : "application/json",
            "size" : 234
          }, {
            "uid" : "c13395a2729f32bf",
            "name" : "请求体（表单/文件）",
            "source" : "c13395a2729f32bf.txt",
            "type" : "text/plain",
            "size" : 109
          } ],
          "parameters" : [ ],
          "attachmentsCount" : 3,
          "shouldDisplayMessage" : false,
          "hasContent" : true,
          "stepsCount" : 0
        }, {
          "name" : "响应详情",
          "time" : {
            "start" : 1756430223940,
            "stop" : 1756430223942,
            "duration" : 2
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "e87733a70f82e491",
            "name" : "响应状态码",
            "source" : "e87733a70f82e491.txt",
            "type" : "text/plain",
            "size" : 3
          }, {
            "uid" : "8afc5fbb04ff4838",
            "name" : "响应头",
            "source" : "8afc5fbb04ff4838.json",
            "type" : "application/json",
            "size" : 966
          }, {
            "uid" : "2e5c908d4a0a452e",
            "name" : "响应体（JSON）",
            "source" : "2e5c908d4a0a452e.json",
            "type" : "application/json",
            "size" : 533
          } ],
          "parameters" : [ ],
          "attachmentsCount" : 3,
          "shouldDisplayMessage" : false,
          "hasContent" : true,
          "stepsCount" : 0
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "attachmentsCount" : 6,
        "shouldDisplayMessage" : false,
        "hasContent" : true,
        "stepsCount" : 2
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 6,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 3
    }, {
      "name" : "2. 验证响应",
      "time" : {
        "start" : 1756430224944,
        "stop" : 1756430224970,
        "duration" : 26
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "断言响应状态码",
        "time" : {
          "start" : 1756430224944,
          "stop" : 1756430224946,
          "duration" : 2
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "c961d84fb9182f98",
          "name" : "请求URL",
          "source" : "c961d84fb9182f98.txt",
          "type" : "text/plain",
          "size" : 115
        }, {
          "uid" : "3b1c1200167d8f5",
          "name" : "预期状态码",
          "source" : "3b1c1200167d8f5.txt",
          "type" : "text/plain",
          "size" : 14
        }, {
          "uid" : "d1628276f79b5cbd",
          "name" : "实际状态码",
          "source" : "d1628276f79b5cbd.txt",
          "type" : "text/plain",
          "size" : 14
        }, {
          "uid" : "9842a4254bf2bab2",
          "name" : "响应内容",
          "source" : "9842a4254bf2bab2.txt",
          "type" : "text/plain",
          "size" : 381
        } ],
        "parameters" : [ ],
        "attachmentsCount" : 4,
        "shouldDisplayMessage" : false,
        "hasContent" : true,
        "stepsCount" : 0
      }, {
        "name" : "断言JSON路径: $.msg",
        "time" : {
          "start" : 1756430224969,
          "stop" : 1756430224970,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "a9965170b22538ac",
          "name" : "请求URL",
          "source" : "a9965170b22538ac.txt",
          "type" : "text/plain",
          "size" : 115
        }, {
          "uid" : "1a0f5008f72e85b",
          "name" : "预期值",
          "source" : "1a0f5008f72e85b.txt",
          "type" : "text/plain",
          "size" : 20
        }, {
          "uid" : "67bf67a2c1fd3c4d",
          "name" : "实际值",
          "source" : "67bf67a2c1fd3c4d.txt",
          "type" : "text/plain",
          "size" : 20
        } ],
        "parameters" : [ ],
        "attachmentsCount" : 3,
        "shouldDisplayMessage" : false,
        "hasContent" : true,
        "stepsCount" : 0
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 7,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 2
    }, {
      "name" : "3. 提取数据",
      "time" : {
        "start" : 1756430224970,
        "stop" : 1756430225030,
        "duration" : 60
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false,
      "stepsCount" : 0
    }, {
      "name" : "4. 数据校验",
      "time" : {
        "start" : 1756430225030,
        "stop" : 1756430225033,
        "duration" : 3
      },
      "status" : "failed",
      "statusMessage" : "Failed: 校验失败: 持仓手数符合预期\n\n实际: 1.0\n操作: ==\n预期: 1.9300000000000002\n\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\lingkuan_828\\test_vps\\test_getAccountDataPage.py\", line 511, in test_dashboard_getAccountDataPage\n    self.verify_data(\n  File \"D:\\pycharm_test\\lingkuan_828\\commons\\api_base.py\", line 1305, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n",
      "steps" : [ {
        "name" : "5.1 验证账号",
        "time" : {
          "start" : 1756430225030,
          "stop" : 1756430225031,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "校验: 账号数据符合预期",
          "time" : {
            "start" : 1756430225030,
            "stop" : 1756430225031,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "1197be79598e29fc",
            "name" : "账号详情",
            "source" : "1197be79598e29fc.attach",
            "type" : "text/plain",
            "size" : 42
          } ],
          "parameters" : [ ],
          "attachmentsCount" : 1,
          "shouldDisplayMessage" : false,
          "hasContent" : true,
          "stepsCount" : 0
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "attachmentsCount" : 1,
        "shouldDisplayMessage" : false,
        "hasContent" : true,
        "stepsCount" : 1
      }, {
        "name" : "5.3 验证持仓订单量",
        "time" : {
          "start" : 1756430225031,
          "stop" : 1756430225032,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "校验: 持仓订单量数据符合预期",
          "time" : {
            "start" : 1756430225031,
            "stop" : 1756430225032,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "128e086ab3ca698c",
            "name" : "持仓订单量详情",
            "source" : "128e086ab3ca698c.attach",
            "type" : "text/plain",
            "size" : 36
          } ],
          "parameters" : [ ],
          "attachmentsCount" : 1,
          "shouldDisplayMessage" : false,
          "hasContent" : true,
          "stepsCount" : 0
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "attachmentsCount" : 1,
        "shouldDisplayMessage" : false,
        "hasContent" : true,
        "stepsCount" : 1
      }, {
        "name" : "5.4 验证持仓手数",
        "time" : {
          "start" : 1756430225032,
          "stop" : 1756430225033,
          "duration" : 1
        },
        "status" : "failed",
        "statusMessage" : "Failed: 校验失败: 持仓手数符合预期\n\n实际: 1.0\n操作: ==\n预期: 1.9300000000000002\n\n",
        "statusTrace" : "  File \"D:\\pycharm_test\\lingkuan_828\\test_vps\\test_getAccountDataPage.py\", line 511, in test_dashboard_getAccountDataPage\n    self.verify_data(\n  File \"D:\\pycharm_test\\lingkuan_828\\commons\\api_base.py\", line 1305, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n",
        "steps" : [ {
          "name" : "校验: 持仓手数符合预期",
          "time" : {
            "start" : 1756430225032,
            "stop" : 1756430225033,
            "duration" : 1
          },
          "status" : "failed",
          "statusMessage" : "Failed: 校验失败: 持仓手数符合预期\n\n实际: 1.0\n操作: ==\n预期: 1.9300000000000002\n\n",
          "statusTrace" : "  File \"D:\\pycharm_test\\lingkuan_828\\commons\\api_base.py\", line 1305, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "1940d8f6a90644b3",
            "name" : "持仓手数详情",
            "source" : "1940d8f6a90644b3.attach",
            "type" : "text/plain",
            "size" : 51
          } ],
          "parameters" : [ ],
          "attachmentsCount" : 1,
          "shouldDisplayMessage" : true,
          "hasContent" : true,
          "stepsCount" : 0
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "attachmentsCount" : 1,
        "shouldDisplayMessage" : false,
        "hasContent" : true,
        "stepsCount" : 1
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 3,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 6
    } ],
    "attachments" : [ {
      "uid" : "1338ae5a522a386",
      "name" : "log",
      "source" : "1338ae5a522a386.txt",
      "type" : "text/plain",
      "size" : 4630
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 17,
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 15
  },
  "afterStages" : [ {
    "name" : "logged_session::0",
    "time" : {
      "start" : 1756430225066,
      "stop" : 1756430225066,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "api_session::0",
    "time" : {
      "start" : 1756430225067,
      "stop" : 1756430225067,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "仪表盘-vps跟单数据"
  }, {
    "name" : "feature",
    "value" : "仪表盘"
  }, {
    "name" : "tag",
    "value" : "retry(n=3, delay=5)"
  }, {
    "name" : "parentSuite",
    "value" : "test_vps"
  }, {
    "name" : "suite",
    "value" : "test_getAccountDataPage"
  }, {
    "name" : "subSuite",
    "value" : "TestVPSOrderSend_newScenarios"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "48340-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_vps.test_getAccountDataPage"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "retry(n=3, delay=5)" ]
  },
  "source" : "807a5863f1dec3e6.json",
  "parameterValues" : [ ]
}