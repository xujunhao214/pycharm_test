{
  "uid" : "c93e2a4aa71b02cb",
  "name" : "跟单软件看板-VPS数据-策略开仓",
  "fullName" : "test_vps.test_vps_ordersend2.TestVPSOrderSend1#test_trader_orderSend",
  "historyId" : "d7e1e17722caa9a0d87afcf81753daf5",
  "time" : {
    "start" : 1756430541731,
    "stop" : 1756430542985,
    "duration" : 1254
  },
  "description" : "\n    ### 测试说明\n    - 场景校验：手数范围>总手数>订单数量\n    - 前置条件：有vps策略和vps跟单\n      1. 进行开仓，手数范围0.6-1，总手数1\n      2. 校验手数范围限制是否生效，只有一个订单，订单手数大于0.6\n      3. 进行平仓\n      4. 校验账号的数据是否正确\n    - 预期结果：账号的数据正确，权重正确\n    ",
  "descriptionHtml" : "<pre><code>### 测试说明\n- 场景校验：手数范围&gt;总手数&gt;订单数量\n- 前置条件：有vps策略和vps跟单\n  1. 进行开仓，手数范围0.6-1，总手数1\n  2. 校验手数范围限制是否生效，只有一个订单，订单手数大于0.6\n  3. 进行平仓\n  4. 校验账号的数据是否正确\n- 预期结果：账号的数据正确，权重正确\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: Failed: 响应msg字段应为success（JSON断言失败）",
  "statusTrace" : "self = <lingkuan_828.test_vps.test_vps_ordersend2.TestVPSOrderSend_newScenarios.TestVPSOrderSend1 object at 0x000001FA57606C10>\nresponse = <Response [200]>, json_path = '$.msg', expected_value = 'success'\nerror_msg_prefix = '响应msg字段应为success'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n    \n>           assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\nE               AssertionError: Failed: 响应msg字段应为success（JSON路径值不匹配）\n\ncommons\\api_base.py:416: AssertionError\n\nThe above exception was the direct cause of the following exception:\n\nself = <lingkuan_828.test_vps.test_vps_ordersend2.TestVPSOrderSend_newScenarios.TestVPSOrderSend1 object at 0x000001FA57606C10>\nvar_manager = <lingkuan_828.commons.variable_manager.VariableManager object at 0x000001FA58AF5A60>\nlogged_session = <lingkuan_828.commons.session.EnvironmentSession object at 0x000001FA576136D0>\n\n    @pytest.mark.url(\"vps\")\n    @allure.title(\"跟单软件看板-VPS数据-策略开仓\")\n    def test_trader_orderSend(self, var_manager, logged_session):\n        # 1. 发送策略开仓请求\n        trader_ordersend = var_manager.get_variable(\"trader_ordersend\")\n        vps_trader_id = var_manager.get_variable(\"vps_trader_id\")\n        data = {\n            \"symbol\": trader_ordersend[\"symbol\"],\n            \"placedType\": 0,\n            \"remark\": trader_ordersend[\"remark\"],\n            \"intervalTime\": 100,\n            \"type\": 0,\n            \"totalNum\": \"\",\n            \"totalSzie\": \"1.00\",\n            \"startSize\": \"0.60\",\n            \"endSize\": \"1.00\",\n            \"traderId\": vps_trader_id\n        }\n        response = self.send_post_request(\n            logged_session,\n            '/subcontrol/trader/orderSend',\n            json_data=data,\n        )\n    \n        # 2. 验证响应状态码和内容\n        self.assert_response_status(\n            response,\n            200,\n            \"策略开仓失败\"\n        )\n>       self.assert_json_value(\n            response,\n            \"$.msg\",\n            \"success\",\n            \"响应msg字段应为success\"\n        )\n\ntest_vps\\test_vps_ordersend2.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_828.test_vps.test_vps_ordersend2.TestVPSOrderSend_newScenarios.TestVPSOrderSend1 object at 0x000001FA57606C10>\nresponse = <Response [200]>, json_path = '$.msg', expected_value = 'success'\nerror_msg_prefix = '响应msg字段应为success'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n    \n            assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\n        except Exception as e:\n            with allure.step(f\"JSON断言失败: {json_path}\"):\n                allure.attach(json_path, \"JSON路径\", allure.attachment_type.TEXT)\n                allure.attach(str(expected_value), \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(response.text[:500], \"响应内容\", allure.attachment_type.TEXT)\n            logger.error(\n                f\"[{self._get_current_time()}] JSON断言失败: {str(e)} | 路径: {json_path} | 响应: {response.text[:500]}\")\n>           raise AssertionError(f\"Failed: {error_msg_prefix}（JSON断言失败）\") from e\nE           AssertionError: Failed: 响应msg字段应为success（JSON断言失败）\n\ncommons\\api_base.py:425: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "api_session",
    "time" : {
      "start" : 1756430540372,
      "stop" : 1756430540372,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "logged_session",
    "time" : {
      "start" : 1756430540372,
      "stop" : 1756430541731,
      "duration" : 1359
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "testStage" : {
    "description" : "\n    ### 测试说明\n    - 场景校验：手数范围>总手数>订单数量\n    - 前置条件：有vps策略和vps跟单\n      1. 进行开仓，手数范围0.6-1，总手数1\n      2. 校验手数范围限制是否生效，只有一个订单，订单手数大于0.6\n      3. 进行平仓\n      4. 校验账号的数据是否正确\n    - 预期结果：账号的数据正确，权重正确\n    ",
    "status" : "failed",
    "statusMessage" : "AssertionError: Failed: 响应msg字段应为success（JSON断言失败）",
    "statusTrace" : "self = <lingkuan_828.test_vps.test_vps_ordersend2.TestVPSOrderSend_newScenarios.TestVPSOrderSend1 object at 0x000001FA57606C10>\nresponse = <Response [200]>, json_path = '$.msg', expected_value = 'success'\nerror_msg_prefix = '响应msg字段应为success'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n    \n>           assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\nE               AssertionError: Failed: 响应msg字段应为success（JSON路径值不匹配）\n\ncommons\\api_base.py:416: AssertionError\n\nThe above exception was the direct cause of the following exception:\n\nself = <lingkuan_828.test_vps.test_vps_ordersend2.TestVPSOrderSend_newScenarios.TestVPSOrderSend1 object at 0x000001FA57606C10>\nvar_manager = <lingkuan_828.commons.variable_manager.VariableManager object at 0x000001FA58AF5A60>\nlogged_session = <lingkuan_828.commons.session.EnvironmentSession object at 0x000001FA576136D0>\n\n    @pytest.mark.url(\"vps\")\n    @allure.title(\"跟单软件看板-VPS数据-策略开仓\")\n    def test_trader_orderSend(self, var_manager, logged_session):\n        # 1. 发送策略开仓请求\n        trader_ordersend = var_manager.get_variable(\"trader_ordersend\")\n        vps_trader_id = var_manager.get_variable(\"vps_trader_id\")\n        data = {\n            \"symbol\": trader_ordersend[\"symbol\"],\n            \"placedType\": 0,\n            \"remark\": trader_ordersend[\"remark\"],\n            \"intervalTime\": 100,\n            \"type\": 0,\n            \"totalNum\": \"\",\n            \"totalSzie\": \"1.00\",\n            \"startSize\": \"0.60\",\n            \"endSize\": \"1.00\",\n            \"traderId\": vps_trader_id\n        }\n        response = self.send_post_request(\n            logged_session,\n            '/subcontrol/trader/orderSend',\n            json_data=data,\n        )\n    \n        # 2. 验证响应状态码和内容\n        self.assert_response_status(\n            response,\n            200,\n            \"策略开仓失败\"\n        )\n>       self.assert_json_value(\n            response,\n            \"$.msg\",\n            \"success\",\n            \"响应msg字段应为success\"\n        )\n\ntest_vps\\test_vps_ordersend2.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_828.test_vps.test_vps_ordersend2.TestVPSOrderSend_newScenarios.TestVPSOrderSend1 object at 0x000001FA57606C10>\nresponse = <Response [200]>, json_path = '$.msg', expected_value = 'success'\nerror_msg_prefix = '响应msg字段应为success'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n    \n            assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\n        except Exception as e:\n            with allure.step(f\"JSON断言失败: {json_path}\"):\n                allure.attach(json_path, \"JSON路径\", allure.attachment_type.TEXT)\n                allure.attach(str(expected_value), \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(response.text[:500], \"响应内容\", allure.attachment_type.TEXT)\n            logger.error(\n                f\"[{self._get_current_time()}] JSON断言失败: {str(e)} | 路径: {json_path} | 响应: {response.text[:500]}\")\n>           raise AssertionError(f\"Failed: {error_msg_prefix}（JSON断言失败）\") from e\nE           AssertionError: Failed: 响应msg字段应为success（JSON断言失败）\n\ncommons\\api_base.py:425: AssertionError",
    "steps" : [ {
      "name" : "执行 POST 请求",
      "time" : {
        "start" : 1756430541731,
        "stop" : 1756430542959,
        "duration" : 1228
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "请求详情",
        "time" : {
          "start" : 1756430541731,
          "stop" : 1756430541732,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "33634a5927ae6b50",
          "name" : "请求URL",
          "source" : "33634a5927ae6b50.txt",
          "type" : "text/plain",
          "size" : 28
        }, {
          "uid" : "287a034f5a0acc6e",
          "name" : "请求头",
          "source" : "287a034f5a0acc6e.json",
          "type" : "application/json",
          "size" : 234
        }, {
          "uid" : "a8dce33bb0c38be8",
          "name" : "请求体（JSON）",
          "source" : "a8dce33bb0c38be8.json",
          "type" : "application/json",
          "size" : 203
        } ],
        "parameters" : [ ],
        "attachmentsCount" : 3,
        "shouldDisplayMessage" : false,
        "hasContent" : true,
        "stepsCount" : 0
      }, {
        "name" : "响应详情",
        "time" : {
          "start" : 1756430541944,
          "stop" : 1756430541946,
          "duration" : 2
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "be822e6167b00f52",
          "name" : "响应状态码",
          "source" : "be822e6167b00f52.txt",
          "type" : "text/plain",
          "size" : 3
        }, {
          "uid" : "de83a3e8d38207e2",
          "name" : "响应头",
          "source" : "de83a3e8d38207e2.json",
          "type" : "application/json",
          "size" : 526
        }, {
          "uid" : "8f27ea113c50f0b8",
          "name" : "响应体（JSON）",
          "source" : "8f27ea113c50f0b8.json",
          "type" : "application/json",
          "size" : 89
        } ],
        "parameters" : [ ],
        "attachmentsCount" : 3,
        "shouldDisplayMessage" : false,
        "hasContent" : true,
        "stepsCount" : 0
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 6,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 2
    }, {
      "name" : "断言响应状态码",
      "time" : {
        "start" : 1756430542959,
        "stop" : 1756430542963,
        "duration" : 4
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "162f041d1006daa1",
        "name" : "请求URL",
        "source" : "162f041d1006daa1.txt",
        "type" : "text/plain",
        "size" : 54
      }, {
        "uid" : "854b9591df2e1c3d",
        "name" : "预期状态码",
        "source" : "854b9591df2e1c3d.txt",
        "type" : "text/plain",
        "size" : 14
      }, {
        "uid" : "dfa0cde229596b73",
        "name" : "实际状态码",
        "source" : "dfa0cde229596b73.txt",
        "type" : "text/plain",
        "size" : 14
      }, {
        "uid" : "a6dd70c475f14112",
        "name" : "响应内容",
        "source" : "a6dd70c475f14112.txt",
        "type" : "text/plain",
        "size" : 76
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 4,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 0
    }, {
      "name" : "断言JSON路径: $.msg",
      "time" : {
        "start" : 1756430542983,
        "stop" : 1756430542985,
        "duration" : 2
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "860e4340f57caefe",
        "name" : "请求URL",
        "source" : "860e4340f57caefe.txt",
        "type" : "text/plain",
        "size" : 54
      }, {
        "uid" : "1d6d8a6c098c840c",
        "name" : "预期值",
        "source" : "1d6d8a6c098c840c.txt",
        "type" : "text/plain",
        "size" : 20
      }, {
        "uid" : "7b714cd1b96a8616",
        "name" : "实际值",
        "source" : "7b714cd1b96a8616.txt",
        "type" : "text/plain",
        "size" : 56
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 3,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 0
    }, {
      "name" : "JSON断言失败: $.msg",
      "time" : {
        "start" : 1756430542985,
        "stop" : 1756430542985,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "21884ebbecfd2d74",
        "name" : "JSON路径",
        "source" : "21884ebbecfd2d74.txt",
        "type" : "text/plain",
        "size" : 5
      }, {
        "uid" : "6dd1b3c8519fdd3",
        "name" : "预期值",
        "source" : "6dd1b3c8519fdd3.txt",
        "type" : "text/plain",
        "size" : 7
      }, {
        "uid" : "dc50f3f3080b6a6d",
        "name" : "响应内容",
        "source" : "dc50f3f3080b6a6d.txt",
        "type" : "text/plain",
        "size" : 76
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 3,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 0
    } ],
    "attachments" : [ {
      "uid" : "30e9300de953b32a",
      "name" : "log",
      "source" : "30e9300de953b32a.txt",
      "type" : "text/plain",
      "size" : 1797
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 17,
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 6
  },
  "afterStages" : [ {
    "name" : "api_session::0",
    "time" : {
      "start" : 1756430543028,
      "stop" : 1756430543029,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "logged_session::0",
    "time" : {
      "start" : 1756430543027,
      "stop" : 1756430543027,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "VPS策略下单-开仓的场景校验2"
  }, {
    "name" : "story",
    "value" : "场景1：VPS策略下单-手数范围0.6-1，总手数1"
  }, {
    "name" : "tag",
    "value" : "url('vps')"
  }, {
    "name" : "parentSuite",
    "value" : "test_vps"
  }, {
    "name" : "suite",
    "value" : "test_vps_ordersend2"
  }, {
    "name" : "subSuite",
    "value" : "TestVPSOrderSend_newScenarios"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "48340-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_vps.test_vps_ordersend2"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "url('vps')" ]
  },
  "source" : "c93e2a4aa71b02cb.json",
  "parameterValues" : [ ]
}