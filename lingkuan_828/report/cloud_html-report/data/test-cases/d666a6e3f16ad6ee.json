{
  "uid" : "d666a6e3f16ad6ee",
  "name" : "数据库校验-复制下单平仓数据-数据校验",
  "fullName" : "test_cloudTrader.test_cloudOrderClose.TestMasOrderSend11#test_copy_verify_close_db",
  "historyId" : "669441f1a6ab35071715dccf054b4e9e",
  "time" : {
    "start" : 1756431482000,
    "stop" : 1756431486341,
    "duration" : 4341
  },
  "description" : "\n        ### 测试说明\n        - 前置条件：有云策略和云跟单\n          1. 进行开仓，手数范围0.1-1，总订单数量2\n          2. 平仓-全平策略\n          3. 校验订单数据是否正确\n        - 预期结果：平仓的功能校验-全平订单功能正确\n        ",
  "descriptionHtml" : "<pre><code>    ### 测试说明\n    - 前置条件：有云策略和云跟单\n      1. 进行开仓，手数范围0.1-1，总订单数量2\n      2. 平仓-全平策略\n      3. 校验订单数据是否正确\n    - 预期结果：平仓的功能校验-全平订单功能正确\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "Failed: 校验失败: 平仓的订单数量应该是2\n\n实际: 4\n操作: ==\n预期: 2",
  "statusTrace" : "self = <lingkuan_828.test_cloudTrader.test_cloudOrderClose.TestCloudClose.TestMasOrderSend11 object at 0x0000012EF6114190>\nvar_manager = <lingkuan_828.commons.variable_manager.VariableManager object at 0x0000012EF6214280>\ndb_transaction = <pymysql.connections.Connection object at 0x0000012EF63B4BE0>\n\n    @allure.title(\"数据库校验-复制下单平仓数据-数据校验\")\n    def test_copy_verify_close_db(self, var_manager, db_transaction):\n        \"\"\"验证复制下单平仓后数据库中的订单数据正确性\"\"\"\n        with allure.step(\"查询复制平仓订单数据\"):\n            cloudTrader_user_accounts_4 = var_manager.get_variable(\"cloudTrader_user_accounts_4\")\n            cloudTrader_vps_ids_3 = var_manager.get_variable(\"cloudTrader_vps_ids_3\")\n    \n            sql = \"\"\"\n                           SELECT\n                               fod.size,\n                               fod.close_no,\n                               fod.magical,\n                               fod.open_price,\n                               fod.symbol,\n                               fod.order_no,\n                               foi.true_total_lots,\n                               foi.order_no,\n                               foi.operation_type,\n                               foi.create_time,\n                               foi.status,\n                               foi.min_lot_size,\n                               foi.max_lot_size,\n                               foi.total_lots,\n                               foi.master_order,\n                               foi.total_orders\n                           FROM\n                               follow_order_detail fod\n                           INNER JOIN\n                               follow_order_instruct foi\n                           ON\n                               foi.order_no = fod.close_no COLLATE utf8mb4_0900_ai_ci\n                           WHERE foi.operation_type = %s\n                               AND fod.account = %s\n                               AND fod.trader_id = %s\n                       \"\"\"\n            params = ('1', cloudTrader_user_accounts_4, cloudTrader_vps_ids_3)\n    \n            # 轮询等待数据库记录\n            db_data = self.query_database_with_time_with_timezone(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"fod.close_time\"\n            )\n    \n        with allure.step(\"执行复制平仓数据校验-2个订单\"):\n            if not db_data:\n                pytest.fail(\"数据库查询结果为空，无法进行复制下单校验\")\n    \n            with allure.step(\"验证订单数量\"):\n>               self.verify_data(\n                    actual_value=len(db_data),\n                    expected_value=2,\n                    op=CompareOp.EQ,\n                    message=f\"平仓的订单数量应该是2\",\n                    attachment_name=\"订单数量详情\"\n                )\n\ntest_cloudTrader\\test_cloudOrderClose.py:2721: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_828.test_cloudTrader.test_cloudOrderClose.TestCloudClose.TestMasOrderSend11 object at 0x0000012EF6114190>\nactual_value = 4, expected_value = 2, op = <CompareOp.EQ: '=='>\nmessage = '平仓的订单数量应该是2', attachment_name = '订单数量详情'\nattachment_type = 'text/plain', use_isclose = True, rel_tol = 1e-09\nabs_tol = 0.0\n\n    def verify_data(\n            self,\n            actual_value,\n            expected_value,\n            op: CompareOp,\n            message: str,\n            attachment_name: str,\n            attachment_type=\"text/plain\",\n            use_isclose=True,  # 新增参数：是否启用math.isclose容错（默认启用）\n            rel_tol=1e-9,  # 相对容差（仅当use_isclose=True时生效）\n            abs_tol=0.0  # 绝对容差（仅当use_isclose=True时生效）\n    ):\n        \"\"\"\n        通用数据校验函数，支持浮点容错比较\n        :param actual_value: 实际值\n        :param expected_value: 预期值\n        :param op: 比较操作，CompareOp 枚举\n        :param message: 校验失败时的提示信息\n        :param attachment_name: Allure 附件名称\n        :param attachment_type: Allure 附件类型，默认文本\n        :param use_isclose: 是否使用math.isclose进行浮点容错比较\n        :param rel_tol: 相对容差（默认1e-9）\n        :param abs_tol: 绝对容差（默认0.0）\n        其他参数同前\n        \"\"\"\n        with allure.step(f\"校验: {message}\"):\n            result = False\n            try:\n                # 处理浮点容错比较（仅对EQ/NE操作生效）\n                if use_isclose and op in (CompareOp.EQ, CompareOp.NE):\n                    if not (isinstance(actual_value, (int, float)) and\n                            isinstance(expected_value, (int, float))):\n                        # 非数字类型自动禁用isclose，避免报错\n                        use_isclose = False\n                        logging.warning(f\"自动禁用isclose：非数字类型比较（实际值类型：{type(actual_value)}）\")\n    \n                    # 计算isclose结果\n                    is_close = math.isclose(\n                        actual_value,\n                        expected_value,\n                        rel_tol=rel_tol,\n                        abs_tol=abs_tol\n                    )\n                    # 根据操作类型取反\n                    result = is_close if op == CompareOp.EQ else not is_close\n    \n                # 普通比较逻辑\n                else:\n                    if op == CompareOp.EQ:\n                        result = actual_value == expected_value\n                    elif op == CompareOp.NE:\n                        result = actual_value != expected_value\n                    elif op == CompareOp.GT:\n                        result = actual_value > expected_value\n                    elif op == CompareOp.LT:\n                        result = actual_value < expected_value\n                    elif op == CompareOp.GE:\n                        result = actual_value >= expected_value\n                    elif op == CompareOp.LE:\n                        result = actual_value <= expected_value\n                    elif op == CompareOp.IN:\n                        result = actual_value in expected_value\n                    elif op == CompareOp.NOT_IN:\n                        result = actual_value not in expected_value\n    \n            except TypeError as e:\n                pytest.fail(\n                    f\"校验类型错误: {str(e)}\\n实际值类型: {type(actual_value)}, 预期值类型: {type(expected_value)}\")\n    \n            # 生成详细提示信息（包含容差参数）\n            detail_msg = (\n                f\"\\n实际: {actual_value}\\n\"\n                f\"操作: {op.value}\\n\"\n                f\"预期: {expected_value}\\n\"\n            )\n    \n            # 添加allure.attach，将信息写入报告\n            allure.attach(\n                detail_msg,  # 附件内容\n                name=attachment_name,  # 附件名称（来自参数）\n                attachment_type=attachment_type  # 附件类型\n            )\n    \n            if not result:\n>               pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\nE               Failed: 校验失败: 平仓的订单数量应该是2\nE               \nE               实际: 4\nE               操作: ==\nE               预期: 2\n\ncommons\\api_base.py:1305: Failed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "db",
    "time" : {
      "start" : 1756431481565,
      "stop" : 1756431482000,
      "duration" : 435
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "db_transaction",
    "time" : {
      "start" : 1756431482000,
      "stop" : 1756431482000,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "description" : "\n        ### 测试说明\n        - 前置条件：有云策略和云跟单\n          1. 进行开仓，手数范围0.1-1，总订单数量2\n          2. 平仓-全平策略\n          3. 校验订单数据是否正确\n        - 预期结果：平仓的功能校验-全平订单功能正确\n        ",
    "status" : "failed",
    "statusMessage" : "Failed: 校验失败: 平仓的订单数量应该是2\n\n实际: 4\n操作: ==\n预期: 2",
    "statusTrace" : "self = <lingkuan_828.test_cloudTrader.test_cloudOrderClose.TestCloudClose.TestMasOrderSend11 object at 0x0000012EF6114190>\nvar_manager = <lingkuan_828.commons.variable_manager.VariableManager object at 0x0000012EF6214280>\ndb_transaction = <pymysql.connections.Connection object at 0x0000012EF63B4BE0>\n\n    @allure.title(\"数据库校验-复制下单平仓数据-数据校验\")\n    def test_copy_verify_close_db(self, var_manager, db_transaction):\n        \"\"\"验证复制下单平仓后数据库中的订单数据正确性\"\"\"\n        with allure.step(\"查询复制平仓订单数据\"):\n            cloudTrader_user_accounts_4 = var_manager.get_variable(\"cloudTrader_user_accounts_4\")\n            cloudTrader_vps_ids_3 = var_manager.get_variable(\"cloudTrader_vps_ids_3\")\n    \n            sql = \"\"\"\n                           SELECT\n                               fod.size,\n                               fod.close_no,\n                               fod.magical,\n                               fod.open_price,\n                               fod.symbol,\n                               fod.order_no,\n                               foi.true_total_lots,\n                               foi.order_no,\n                               foi.operation_type,\n                               foi.create_time,\n                               foi.status,\n                               foi.min_lot_size,\n                               foi.max_lot_size,\n                               foi.total_lots,\n                               foi.master_order,\n                               foi.total_orders\n                           FROM\n                               follow_order_detail fod\n                           INNER JOIN\n                               follow_order_instruct foi\n                           ON\n                               foi.order_no = fod.close_no COLLATE utf8mb4_0900_ai_ci\n                           WHERE foi.operation_type = %s\n                               AND fod.account = %s\n                               AND fod.trader_id = %s\n                       \"\"\"\n            params = ('1', cloudTrader_user_accounts_4, cloudTrader_vps_ids_3)\n    \n            # 轮询等待数据库记录\n            db_data = self.query_database_with_time_with_timezone(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"fod.close_time\"\n            )\n    \n        with allure.step(\"执行复制平仓数据校验-2个订单\"):\n            if not db_data:\n                pytest.fail(\"数据库查询结果为空，无法进行复制下单校验\")\n    \n            with allure.step(\"验证订单数量\"):\n>               self.verify_data(\n                    actual_value=len(db_data),\n                    expected_value=2,\n                    op=CompareOp.EQ,\n                    message=f\"平仓的订单数量应该是2\",\n                    attachment_name=\"订单数量详情\"\n                )\n\ntest_cloudTrader\\test_cloudOrderClose.py:2721: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_828.test_cloudTrader.test_cloudOrderClose.TestCloudClose.TestMasOrderSend11 object at 0x0000012EF6114190>\nactual_value = 4, expected_value = 2, op = <CompareOp.EQ: '=='>\nmessage = '平仓的订单数量应该是2', attachment_name = '订单数量详情'\nattachment_type = 'text/plain', use_isclose = True, rel_tol = 1e-09\nabs_tol = 0.0\n\n    def verify_data(\n            self,\n            actual_value,\n            expected_value,\n            op: CompareOp,\n            message: str,\n            attachment_name: str,\n            attachment_type=\"text/plain\",\n            use_isclose=True,  # 新增参数：是否启用math.isclose容错（默认启用）\n            rel_tol=1e-9,  # 相对容差（仅当use_isclose=True时生效）\n            abs_tol=0.0  # 绝对容差（仅当use_isclose=True时生效）\n    ):\n        \"\"\"\n        通用数据校验函数，支持浮点容错比较\n        :param actual_value: 实际值\n        :param expected_value: 预期值\n        :param op: 比较操作，CompareOp 枚举\n        :param message: 校验失败时的提示信息\n        :param attachment_name: Allure 附件名称\n        :param attachment_type: Allure 附件类型，默认文本\n        :param use_isclose: 是否使用math.isclose进行浮点容错比较\n        :param rel_tol: 相对容差（默认1e-9）\n        :param abs_tol: 绝对容差（默认0.0）\n        其他参数同前\n        \"\"\"\n        with allure.step(f\"校验: {message}\"):\n            result = False\n            try:\n                # 处理浮点容错比较（仅对EQ/NE操作生效）\n                if use_isclose and op in (CompareOp.EQ, CompareOp.NE):\n                    if not (isinstance(actual_value, (int, float)) and\n                            isinstance(expected_value, (int, float))):\n                        # 非数字类型自动禁用isclose，避免报错\n                        use_isclose = False\n                        logging.warning(f\"自动禁用isclose：非数字类型比较（实际值类型：{type(actual_value)}）\")\n    \n                    # 计算isclose结果\n                    is_close = math.isclose(\n                        actual_value,\n                        expected_value,\n                        rel_tol=rel_tol,\n                        abs_tol=abs_tol\n                    )\n                    # 根据操作类型取反\n                    result = is_close if op == CompareOp.EQ else not is_close\n    \n                # 普通比较逻辑\n                else:\n                    if op == CompareOp.EQ:\n                        result = actual_value == expected_value\n                    elif op == CompareOp.NE:\n                        result = actual_value != expected_value\n                    elif op == CompareOp.GT:\n                        result = actual_value > expected_value\n                    elif op == CompareOp.LT:\n                        result = actual_value < expected_value\n                    elif op == CompareOp.GE:\n                        result = actual_value >= expected_value\n                    elif op == CompareOp.LE:\n                        result = actual_value <= expected_value\n                    elif op == CompareOp.IN:\n                        result = actual_value in expected_value\n                    elif op == CompareOp.NOT_IN:\n                        result = actual_value not in expected_value\n    \n            except TypeError as e:\n                pytest.fail(\n                    f\"校验类型错误: {str(e)}\\n实际值类型: {type(actual_value)}, 预期值类型: {type(expected_value)}\")\n    \n            # 生成详细提示信息（包含容差参数）\n            detail_msg = (\n                f\"\\n实际: {actual_value}\\n\"\n                f\"操作: {op.value}\\n\"\n                f\"预期: {expected_value}\\n\"\n            )\n    \n            # 添加allure.attach，将信息写入报告\n            allure.attach(\n                detail_msg,  # 附件内容\n                name=attachment_name,  # 附件名称（来自参数）\n                attachment_type=attachment_type  # 附件类型\n            )\n    \n            if not result:\n>               pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\nE               Failed: 校验失败: 平仓的订单数量应该是2\nE               \nE               实际: 4\nE               操作: ==\nE               预期: 2\n\ncommons\\api_base.py:1305: Failed",
    "steps" : [ {
      "name" : "查询复制平仓订单数据",
      "time" : {
        "start" : 1756431482001,
        "stop" : 1756431486338,
        "duration" : 4337
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "轮询等待数据稳定（时区+05:00，超时30秒）",
        "time" : {
          "start" : 1756431482001,
          "stop" : 1756431486338,
          "duration" : 4337
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "带时区转换查询（目标时区: +05:00）",
          "time" : {
            "start" : 1756431482048,
            "stop" : 1756431482109,
            "duration" : 61
          },
          "status" : "passed",
          "steps" : [ {
            "name" : "执行数据库查询",
            "time" : {
              "start" : 1756431482048,
              "stop" : 1756431482109,
              "duration" : 61
            },
            "status" : "passed",
            "steps" : [ ],
            "attachments" : [ {
              "uid" : "1be6bbbdaa689af8",
              "name" : "执行SQL",
              "source" : "1be6bbbdaa689af8.txt",
              "type" : "text/plain",
              "size" : 1523
            }, {
              "uid" : "5282f8ea2180ee07",
              "name" : "SQL参数",
              "source" : "5282f8ea2180ee07.txt",
              "type" : "text/plain",
              "size" : 27
            } ],
            "parameters" : [ ],
            "hasContent" : true,
            "stepsCount" : 0,
            "attachmentsCount" : 2,
            "shouldDisplayMessage" : false
          } ],
          "attachments" : [ {
            "uid" : "a29888853b7e71a5",
            "name" : "时区处理",
            "source" : "a29888853b7e71a5.txt",
            "type" : "text/plain",
            "size" : 51
          } ],
          "parameters" : [ ],
          "hasContent" : true,
          "stepsCount" : 1,
          "attachmentsCount" : 3,
          "shouldDisplayMessage" : false
        }, {
          "name" : "轮询中（已等待0.1秒）",
          "time" : {
            "start" : 1756431482109,
            "stop" : 1756431482109,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "6c687460b1644c2f",
            "name" : "当前状态",
            "source" : "6c687460b1644c2f.txt",
            "type" : "text/plain",
            "size" : 15
          }, {
            "uid" : "6d6747d194d567f0",
            "name" : "超时倒计时",
            "source" : "6d6747d194d567f0.txt",
            "type" : "text/plain",
            "size" : 21
          } ],
          "parameters" : [ ],
          "hasContent" : true,
          "stepsCount" : 0,
          "attachmentsCount" : 2,
          "shouldDisplayMessage" : false
        }, {
          "name" : "判断结果稳定性",
          "time" : {
            "start" : 1756431482109,
            "stop" : 1756431482109,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "2f4ec0e266e2d3a1",
            "name" : "判断结果",
            "source" : "2f4ec0e266e2d3a1.txt",
            "type" : "text/plain",
            "size" : 36
          } ],
          "parameters" : [ ],
          "hasContent" : true,
          "stepsCount" : 0,
          "attachmentsCount" : 1,
          "shouldDisplayMessage" : false
        }, {
          "name" : "数据发生变化",
          "time" : {
            "start" : 1756431482109,
            "stop" : 1756431482110,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "fbb4313e9028ece",
            "name" : "状态说明",
            "source" : "fbb4313e9028ece.txt",
            "type" : "text/plain",
            "size" : 24
          } ],
          "parameters" : [ ],
          "hasContent" : true,
          "stepsCount" : 0,
          "attachmentsCount" : 1,
          "shouldDisplayMessage" : false
        }, {
          "name" : "带时区转换查询（目标时区: +05:00）",
          "time" : {
            "start" : 1756431484169,
            "stop" : 1756431484225,
            "duration" : 56
          },
          "status" : "passed",
          "steps" : [ {
            "name" : "执行数据库查询",
            "time" : {
              "start" : 1756431484170,
              "stop" : 1756431484225,
              "duration" : 55
            },
            "status" : "passed",
            "steps" : [ ],
            "attachments" : [ {
              "uid" : "d262f3fdfde9d02",
              "name" : "执行SQL",
              "source" : "d262f3fdfde9d02.txt",
              "type" : "text/plain",
              "size" : 1523
            }, {
              "uid" : "17ffa0ae2b86ef7f",
              "name" : "SQL参数",
              "source" : "17ffa0ae2b86ef7f.txt",
              "type" : "text/plain",
              "size" : 27
            } ],
            "parameters" : [ ],
            "hasContent" : true,
            "stepsCount" : 0,
            "attachmentsCount" : 2,
            "shouldDisplayMessage" : false
          } ],
          "attachments" : [ {
            "uid" : "d70ceb52f401f5f4",
            "name" : "时区处理",
            "source" : "d70ceb52f401f5f4.txt",
            "type" : "text/plain",
            "size" : 51
          } ],
          "parameters" : [ ],
          "hasContent" : true,
          "stepsCount" : 1,
          "attachmentsCount" : 3,
          "shouldDisplayMessage" : false
        }, {
          "name" : "轮询中（已等待2.2秒）",
          "time" : {
            "start" : 1756431484225,
            "stop" : 1756431484226,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "89f5fc15979ed0a6",
            "name" : "当前状态",
            "source" : "89f5fc15979ed0a6.txt",
            "type" : "text/plain",
            "size" : 15
          }, {
            "uid" : "de75e885d019400b",
            "name" : "超时倒计时",
            "source" : "de75e885d019400b.txt",
            "type" : "text/plain",
            "size" : 21
          } ],
          "parameters" : [ ],
          "hasContent" : true,
          "stepsCount" : 0,
          "attachmentsCount" : 2,
          "shouldDisplayMessage" : false
        }, {
          "name" : "判断结果稳定性",
          "time" : {
            "start" : 1756431484226,
            "stop" : 1756431484227,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "95e1a1acadd1be75",
            "name" : "判断结果",
            "source" : "95e1a1acadd1be75.txt",
            "type" : "text/plain",
            "size" : 42
          } ],
          "parameters" : [ ],
          "hasContent" : true,
          "stepsCount" : 0,
          "attachmentsCount" : 1,
          "shouldDisplayMessage" : false
        }, {
          "name" : "数据首次稳定",
          "time" : {
            "start" : 1756431484227,
            "stop" : 1756431484227,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "3c267fa7ea6a7b75",
            "name" : "状态说明",
            "source" : "3c267fa7ea6a7b75.txt",
            "type" : "text/plain",
            "size" : 40
          } ],
          "parameters" : [ ],
          "hasContent" : true,
          "stepsCount" : 0,
          "attachmentsCount" : 1,
          "shouldDisplayMessage" : false
        }, {
          "name" : "带时区转换查询（目标时区: +05:00）",
          "time" : {
            "start" : 1756431486282,
            "stop" : 1756431486335,
            "duration" : 53
          },
          "status" : "passed",
          "steps" : [ {
            "name" : "执行数据库查询",
            "time" : {
              "start" : 1756431486282,
              "stop" : 1756431486335,
              "duration" : 53
            },
            "status" : "passed",
            "steps" : [ ],
            "attachments" : [ {
              "uid" : "15c65420c9168c9f",
              "name" : "执行SQL",
              "source" : "15c65420c9168c9f.txt",
              "type" : "text/plain",
              "size" : 1523
            }, {
              "uid" : "9f31b0246d3475eb",
              "name" : "SQL参数",
              "source" : "9f31b0246d3475eb.txt",
              "type" : "text/plain",
              "size" : 27
            } ],
            "parameters" : [ ],
            "hasContent" : true,
            "stepsCount" : 0,
            "attachmentsCount" : 2,
            "shouldDisplayMessage" : false
          } ],
          "attachments" : [ {
            "uid" : "31ff1b17c5c819c8",
            "name" : "时区处理",
            "source" : "31ff1b17c5c819c8.txt",
            "type" : "text/plain",
            "size" : 51
          } ],
          "parameters" : [ ],
          "hasContent" : true,
          "stepsCount" : 1,
          "attachmentsCount" : 3,
          "shouldDisplayMessage" : false
        }, {
          "name" : "轮询中（已等待4.3秒）",
          "time" : {
            "start" : 1756431486335,
            "stop" : 1756431486337,
            "duration" : 2
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "f38b35e35be04fd4",
            "name" : "当前状态",
            "source" : "f38b35e35be04fd4.txt",
            "type" : "text/plain",
            "size" : 15
          }, {
            "uid" : "c3cfaf264139339a",
            "name" : "超时倒计时",
            "source" : "c3cfaf264139339a.txt",
            "type" : "text/plain",
            "size" : 21
          } ],
          "parameters" : [ ],
          "hasContent" : true,
          "stepsCount" : 0,
          "attachmentsCount" : 2,
          "shouldDisplayMessage" : false
        }, {
          "name" : "判断结果稳定性",
          "time" : {
            "start" : 1756431486337,
            "stop" : 1756431486337,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "6c55e2e44d1f4bcd",
            "name" : "判断结果",
            "source" : "6c55e2e44d1f4bcd.txt",
            "type" : "text/plain",
            "size" : 42
          } ],
          "parameters" : [ ],
          "hasContent" : true,
          "stepsCount" : 0,
          "attachmentsCount" : 1,
          "shouldDisplayMessage" : false
        }, {
          "name" : "数据稳定达标",
          "time" : {
            "start" : 1756431486337,
            "stop" : 1756431486338,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "4117ddfd4e24ce74",
            "name" : "结果说明",
            "source" : "4117ddfd4e24ce74.txt",
            "type" : "text/plain",
            "size" : 34
          } ],
          "parameters" : [ ],
          "hasContent" : true,
          "stepsCount" : 0,
          "attachmentsCount" : 1,
          "shouldDisplayMessage" : false
        }, {
          "name" : "带时区查询最终结果",
          "time" : {
            "start" : 1756431486338,
            "stop" : 1756431486338,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "f57f978e586cf17b",
            "name" : "结果预览",
            "source" : "f57f978e586cf17b.json",
            "type" : "application/json",
            "size" : 1711
          } ],
          "parameters" : [ ],
          "hasContent" : true,
          "stepsCount" : 0,
          "attachmentsCount" : 1,
          "shouldDisplayMessage" : false
        } ],
        "attachments" : [ {
          "uid" : "56e6733ce5766ca1",
          "name" : "执行SQL",
          "source" : "56e6733ce5766ca1.txt",
          "type" : "text/plain",
          "size" : 1378
        }, {
          "uid" : "43872730238727e4",
          "name" : "SQL参数",
          "source" : "43872730238727e4.txt",
          "type" : "text/plain",
          "size" : 21
        }, {
          "uid" : "b4cada6796537929",
          "name" : "时区偏移量（小时）",
          "source" : "b4cada6796537929.txt",
          "type" : "text/plain",
          "size" : 1
        } ],
        "parameters" : [ ],
        "hasContent" : true,
        "stepsCount" : 16,
        "attachmentsCount" : 25,
        "shouldDisplayMessage" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 17,
      "attachmentsCount" : 25,
      "shouldDisplayMessage" : false
    }, {
      "name" : "执行复制平仓数据校验-2个订单",
      "time" : {
        "start" : 1756431486338,
        "stop" : 1756431486340,
        "duration" : 2
      },
      "status" : "failed",
      "statusMessage" : "Failed: 校验失败: 平仓的订单数量应该是2\n\n实际: 4\n操作: ==\n预期: 2\n\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\lingkuan_828\\test_cloudTrader\\test_cloudOrderClose.py\", line 2721, in test_copy_verify_close_db\n    self.verify_data(\n  File \"D:\\pycharm_test\\lingkuan_828\\commons\\api_base.py\", line 1305, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n",
      "steps" : [ {
        "name" : "验证订单数量",
        "time" : {
          "start" : 1756431486338,
          "stop" : 1756431486339,
          "duration" : 1
        },
        "status" : "failed",
        "statusMessage" : "Failed: 校验失败: 平仓的订单数量应该是2\n\n实际: 4\n操作: ==\n预期: 2\n\n",
        "statusTrace" : "  File \"D:\\pycharm_test\\lingkuan_828\\test_cloudTrader\\test_cloudOrderClose.py\", line 2721, in test_copy_verify_close_db\n    self.verify_data(\n  File \"D:\\pycharm_test\\lingkuan_828\\commons\\api_base.py\", line 1305, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n",
        "steps" : [ {
          "name" : "校验: 平仓的订单数量应该是2",
          "time" : {
            "start" : 1756431486338,
            "stop" : 1756431486339,
            "duration" : 1
          },
          "status" : "failed",
          "statusMessage" : "Failed: 校验失败: 平仓的订单数量应该是2\n\n实际: 4\n操作: ==\n预期: 2\n\n",
          "statusTrace" : "  File \"D:\\pycharm_test\\lingkuan_828\\commons\\api_base.py\", line 1305, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "6a3a8edf27dbcd4d",
            "name" : "订单数量详情",
            "source" : "6a3a8edf27dbcd4d.attach",
            "type" : "text/plain",
            "size" : 32
          } ],
          "parameters" : [ ],
          "hasContent" : true,
          "stepsCount" : 0,
          "attachmentsCount" : 1,
          "shouldDisplayMessage" : true
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "hasContent" : true,
        "stepsCount" : 1,
        "attachmentsCount" : 1,
        "shouldDisplayMessage" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 2,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false
    } ],
    "attachments" : [ {
      "uid" : "a6f564d365e3dcc4",
      "name" : "log",
      "source" : "a6f564d365e3dcc4.txt",
      "type" : "text/plain",
      "size" : 10061
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 21,
    "attachmentsCount" : 27,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "db::0",
    "time" : {
      "start" : 1756431486385,
      "stop" : 1756431486386,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "db_transaction::0",
    "time" : {
      "start" : 1756431486384,
      "stop" : 1756431486384,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "云策略复制下单-平仓的功能校验"
  }, {
    "name" : "story",
    "value" : "场景11：平仓的功能校验-全平订单"
  }, {
    "name" : "parentSuite",
    "value" : "test_cloudTrader"
  }, {
    "name" : "suite",
    "value" : "test_cloudOrderClose"
  }, {
    "name" : "subSuite",
    "value" : "TestCloudClose"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "21760-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_cloudTrader.test_cloudOrderClose"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "d666a6e3f16ad6ee.json",
  "parameterValues" : [ ]
}