{"name": "数据库校验-复制下单平仓数据", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 订单数量符合预期\n\n实际: 2\n操作: ==\n预期: 1", "trace": "self = <lingkuan_828.test_cloudTrader.test_cloudOrderSend2.TestCloudStrategyOrder.TestMasOrderSend1 object at 0x0000012EF60DA910>\nvar_manager = <lingkuan_828.commons.variable_manager.VariableManager object at 0x0000012EF64A3E20>\ndb_transaction = <pymysql.connections.Connection object at 0x0000012EF61B1F70>\n\n    @allure.title(\"数据库校验-复制下单平仓数据\")\n    def test_copy_verify_close_db(self, var_manager, db_transaction):\n        \"\"\"验证复制下单平仓后数据库中的订单数据正确性\"\"\"\n        with allure.step(\"查询复制平仓订单数据\"):\n            cloudTrader_user_accounts_4 = var_manager.get_variable(\"cloudTrader_user_accounts_4\")\n            cloudTrader_vps_ids_3 = var_manager.get_variable(\"cloudTrader_vps_ids_3\")\n    \n            sql = \"\"\"\n                SELECT\n                    fod.size,\n                    fod.close_no,\n                    fod.magical,\n                    fod.open_price,\n                    fod.symbol,\n                    fod.order_no,\n                    foi.true_total_lots,\n                    foi.order_no,\n                    foi.operation_type,\n                    foi.create_time,\n                    foi.status,\n                    foi.min_lot_size,\n                    foi.max_lot_size,\n                    foi.total_lots,\n                    foi.master_order,\n                    foi.total_orders\n                FROM\n                    follow_order_detail fod\n                INNER JOIN\n                    follow_order_instruct foi\n                ON\n                    foi.order_no = fod.close_no COLLATE utf8mb4_0900_ai_ci\n                WHERE foi.operation_type = %s\n                    AND fod.account = %s\n                    AND fod.trader_id = %s\n            \"\"\"\n            params = ('1', cloudTrader_user_accounts_4, cloudTrader_vps_ids_3)\n    \n            # 轮询等待数据库记录\n            db_data = self.query_database_with_time_with_timezone(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"fod.close_time\"\n            )\n    \n        with allure.step(\"执行复制平仓数据校验\"):\n            if not db_data:\n                pytest.fail(\"数据库查询结果为空，无法进行复制平仓校验\")\n    \n            with allure.step(\"验证订单状态\"):\n                status = db_data[0][\"status\"]\n                self.verify_data(\n                    actual_value=status,\n                    expected_value=(0, 1),\n                    op=CompareOp.IN,\n                    message=\"订单状态应为0或1\",\n                    attachment_name=\"订单状态详情\"\n                )\n                logging.info(f\"订单状态验证通过: {status}\")\n    \n            with allure.step(\"验证订单数量\"):\n>               self.verify_data(\n                    actual_value=len(db_data),\n                    expected_value=1,\n                    op=CompareOp.EQ,\n                    message=\"订单数量符合预期\",\n                    attachment_name=\"订单数量\"\n                )\n\ntest_cloudTrader\\test_cloudOrderSend2.py:263: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_828.test_cloudTrader.test_cloudOrderSend2.TestCloudStrategyOrder.TestMasOrderSend1 object at 0x0000012EF60DA910>\nactual_value = 2, expected_value = 1, op = <CompareOp.EQ: '=='>\nmessage = '订单数量符合预期', attachment_name = '订单数量', attachment_type = 'text/plain'\nuse_isclose = True, rel_tol = 1e-09, abs_tol = 0.0\n\n    def verify_data(\n            self,\n            actual_value,\n            expected_value,\n            op: CompareOp,\n            message: str,\n            attachment_name: str,\n            attachment_type=\"text/plain\",\n            use_isclose=True,  # 新增参数：是否启用math.isclose容错（默认启用）\n            rel_tol=1e-9,  # 相对容差（仅当use_isclose=True时生效）\n            abs_tol=0.0  # 绝对容差（仅当use_isclose=True时生效）\n    ):\n        \"\"\"\n        通用数据校验函数，支持浮点容错比较\n        :param actual_value: 实际值\n        :param expected_value: 预期值\n        :param op: 比较操作，CompareOp 枚举\n        :param message: 校验失败时的提示信息\n        :param attachment_name: Allure 附件名称\n        :param attachment_type: Allure 附件类型，默认文本\n        :param use_isclose: 是否使用math.isclose进行浮点容错比较\n        :param rel_tol: 相对容差（默认1e-9）\n        :param abs_tol: 绝对容差（默认0.0）\n        其他参数同前\n        \"\"\"\n        with allure.step(f\"校验: {message}\"):\n            result = False\n            try:\n                # 处理浮点容错比较（仅对EQ/NE操作生效）\n                if use_isclose and op in (CompareOp.EQ, CompareOp.NE):\n                    if not (isinstance(actual_value, (int, float)) and\n                            isinstance(expected_value, (int, float))):\n                        # 非数字类型自动禁用isclose，避免报错\n                        use_isclose = False\n                        logging.warning(f\"自动禁用isclose：非数字类型比较（实际值类型：{type(actual_value)}）\")\n    \n                    # 计算isclose结果\n                    is_close = math.isclose(\n                        actual_value,\n                        expected_value,\n                        rel_tol=rel_tol,\n                        abs_tol=abs_tol\n                    )\n                    # 根据操作类型取反\n                    result = is_close if op == CompareOp.EQ else not is_close\n    \n                # 普通比较逻辑\n                else:\n                    if op == CompareOp.EQ:\n                        result = actual_value == expected_value\n                    elif op == CompareOp.NE:\n                        result = actual_value != expected_value\n                    elif op == CompareOp.GT:\n                        result = actual_value > expected_value\n                    elif op == CompareOp.LT:\n                        result = actual_value < expected_value\n                    elif op == CompareOp.GE:\n                        result = actual_value >= expected_value\n                    elif op == CompareOp.LE:\n                        result = actual_value <= expected_value\n                    elif op == CompareOp.IN:\n                        result = actual_value in expected_value\n                    elif op == CompareOp.NOT_IN:\n                        result = actual_value not in expected_value\n    \n            except TypeError as e:\n                pytest.fail(\n                    f\"校验类型错误: {str(e)}\\n实际值类型: {type(actual_value)}, 预期值类型: {type(expected_value)}\")\n    \n            # 生成详细提示信息（包含容差参数）\n            detail_msg = (\n                f\"\\n实际: {actual_value}\\n\"\n                f\"操作: {op.value}\\n\"\n                f\"预期: {expected_value}\\n\"\n            )\n    \n            # 添加allure.attach，将信息写入报告\n            allure.attach(\n                detail_msg,  # 附件内容\n                name=attachment_name,  # 附件名称（来自参数）\n                attachment_type=attachment_type  # 附件类型\n            )\n    \n            if not result:\n>               pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\nE               Failed: 校验失败: 订单数量符合预期\nE               \nE               实际: 2\nE               操作: ==\nE               预期: 1\n\ncommons\\api_base.py:1305: Failed"}, "description": "\n    ### 测试说明\n    - 前置条件：有云策略和云跟单\n      1. 进行开仓，手数范围0.6-1，总手数1\n      2. 校验账号的数据是否正确\n      3. 进行平仓\n      4. 校验账号的数据是否正确\n    - 预期结果：账号的数据正确\n    ", "steps": [{"name": "查询复制平仓订单数据", "status": "passed", "steps": [{"name": "轮询等待数据稳定（时区+05:00，超时30秒）", "status": "passed", "steps": [{"name": "带时区转换查询（目标时区: +05:00）", "status": "passed", "steps": [{"name": "执行数据库查询", "status": "passed", "attachments": [{"name": "执行SQL", "source": "d766853f-ac5e-425a-abb1-4e91eef5ea5b-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "8ccfb91d-182f-4612-8a82-47255e431295-attachment.txt", "type": "text/plain"}], "start": 1756430732037, "stop": 1756430732091}], "attachments": [{"name": "时区处理", "source": "349c1823-7c53-4233-8bc3-4d9acdbe7ef1-attachment.txt", "type": "text/plain"}], "start": 1756430732037, "stop": 1756430732091}, {"name": "轮询中（已等待0.1秒）", "status": "passed", "attachments": [{"name": "当前状态", "source": "b44b6b02-4e3d-4bbe-bd12-99bb329d45eb-attachment.txt", "type": "text/plain"}, {"name": "超时倒计时", "source": "0e761aa6-e925-4728-864e-063fa78c818c-attachment.txt", "type": "text/plain"}], "start": 1756430732091, "stop": 1756430732092}, {"name": "判断结果稳定性", "status": "passed", "attachments": [{"name": "判断结果", "source": "1ad2c61b-e76d-43d6-8874-37b85327f746-attachment.txt", "type": "text/plain"}], "start": 1756430732092, "stop": 1756430732092}, {"name": "数据发生变化", "status": "passed", "attachments": [{"name": "状态说明", "source": "d41c8f62-5df9-467b-9eaa-3e3273943180-attachment.txt", "type": "text/plain"}], "start": 1756430732092, "stop": 1756430732092}, {"name": "带时区转换查询（目标时区: +05:00）", "status": "passed", "steps": [{"name": "执行数据库查询", "status": "passed", "attachments": [{"name": "执行SQL", "source": "288722d9-fed0-4997-997f-cadc2442f3d8-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "f45795df-220c-4539-8720-ddd407749a96-attachment.txt", "type": "text/plain"}], "start": 1756430734152, "stop": 1756430734205}], "attachments": [{"name": "时区处理", "source": "575a958a-8b01-4a27-b518-e416454bb0b6-attachment.txt", "type": "text/plain"}], "start": 1756430734151, "stop": 1756430734205}, {"name": "轮询中（已等待2.2秒）", "status": "passed", "attachments": [{"name": "当前状态", "source": "b8c3f6f2-5689-4f91-99c9-d8976230ee30-attachment.txt", "type": "text/plain"}, {"name": "超时倒计时", "source": "512a901b-8b6a-474d-960f-3a9f6591f95a-attachment.txt", "type": "text/plain"}], "start": 1756430734205, "stop": 1756430734207}, {"name": "判断结果稳定性", "status": "passed", "attachments": [{"name": "判断结果", "source": "bf75b115-74a0-422a-8105-d4e4c6ed7176-attachment.txt", "type": "text/plain"}], "start": 1756430734207, "stop": 1756430734208}, {"name": "数据首次稳定", "status": "passed", "attachments": [{"name": "状态说明", "source": "c94d86d8-d4ca-4a83-99f5-1869fb13cda3-attachment.txt", "type": "text/plain"}], "start": 1756430734208, "stop": 1756430734208}, {"name": "带时区转换查询（目标时区: +05:00）", "status": "passed", "steps": [{"name": "执行数据库查询", "status": "passed", "attachments": [{"name": "执行SQL", "source": "30b217df-9e73-4966-bc77-336a416bd8f0-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "cba8cfe3-e67d-4948-a296-28525fcef525-attachment.txt", "type": "text/plain"}], "start": 1756430736256, "stop": 1756430736313}], "attachments": [{"name": "时区处理", "source": "1d36d7ac-c1c1-48c3-802b-b0a98e10941a-attachment.txt", "type": "text/plain"}], "start": 1756430736256, "stop": 1756430736313}, {"name": "轮询中（已等待4.3秒）", "status": "passed", "attachments": [{"name": "当前状态", "source": "39157b65-44b1-42fd-9779-686527b1044f-attachment.txt", "type": "text/plain"}, {"name": "超时倒计时", "source": "6ec48983-9992-4c6e-8fa6-9cfc2397f1e1-attachment.txt", "type": "text/plain"}], "start": 1756430736313, "stop": 1756430736314}, {"name": "判断结果稳定性", "status": "passed", "attachments": [{"name": "判断结果", "source": "ad7f9f13-fe36-4716-a12c-60d0866c45a6-attachment.txt", "type": "text/plain"}], "start": 1756430736314, "stop": 1756430736314}, {"name": "数据稳定达标", "status": "passed", "attachments": [{"name": "结果说明", "source": "7abac38f-3636-43ec-9d4b-21b777791a69-attachment.txt", "type": "text/plain"}], "start": 1756430736314, "stop": 1756430736315}, {"name": "带时区查询最终结果", "status": "passed", "attachments": [{"name": "结果预览", "source": "48615e24-008e-4915-b687-59bffa077ecb-attachment.json", "type": "application/json"}], "start": 1756430736315, "stop": 1756430736316}], "attachments": [{"name": "执行SQL", "source": "6850789c-85db-4805-a4c1-0b9fe32e9104-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "a39e3c94-721a-4649-873c-85d23cf1f80e-attachment.txt", "type": "text/plain"}, {"name": "时区偏移量（小时）", "source": "ead76a46-9925-4c5e-8cf4-288ae5ad0871-attachment.txt", "type": "text/plain"}], "start": 1756430731989, "stop": 1756430736316}], "start": 1756430731989, "stop": 1756430736316}, {"name": "执行复制平仓数据校验", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 订单数量符合预期\n\n实际: 2\n操作: ==\n预期: 1\n\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_828\\test_cloudTrader\\test_cloudOrderSend2.py\", line 263, in test_copy_verify_close_db\n    self.verify_data(\n  File \"D:\\pycharm_test\\lingkuan_828\\commons\\api_base.py\", line 1305, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "验证订单状态", "status": "passed", "steps": [{"name": "校验: 订单状态应为0或1", "status": "passed", "attachments": [{"name": "订单状态详情", "source": "0baeb6f2-1898-4236-973f-287daa406db7-attachment.attach", "type": "text/plain"}], "start": 1756430736316, "stop": 1756430736316}], "start": 1756430736316, "stop": 1756430736316}, {"name": "验证订单数量", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 订单数量符合预期\n\n实际: 2\n操作: ==\n预期: 1\n\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_828\\test_cloudTrader\\test_cloudOrderSend2.py\", line 263, in test_copy_verify_close_db\n    self.verify_data(\n  File \"D:\\pycharm_test\\lingkuan_828\\commons\\api_base.py\", line 1305, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "校验: 订单数量符合预期", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 订单数量符合预期\n\n实际: 2\n操作: ==\n预期: 1\n\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_828\\commons\\api_base.py\", line 1305, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "attachments": [{"name": "订单数量", "source": "560122af-271c-45d5-b0f5-91947c735134-attachment.attach", "type": "text/plain"}], "start": 1756430736316, "stop": 1756430736316}], "start": 1756430736316, "stop": 1756430736317}], "start": 1756430736316, "stop": 1756430736317}], "attachments": [{"name": "log", "source": "08168238-bf64-4be0-ad84-5a969d91a31a-attachment.txt", "type": "text/plain"}], "start": 1756430731989, "stop": 1756430736317, "uuid": "789ca164-9f8f-45a7-b0b9-b949f2348cd2", "historyId": "0e34f14ff2cee2dc80e0f1fdcab280c3", "testCaseId": "0e34f14ff2cee2dc80e0f1fdcab280c3", "fullName": "test_cloudTrader.test_cloudOrderSend2.TestMasOrderSend1#test_copy_verify_close_db", "labels": [{"name": "feature", "value": "云策略复制下单-开仓的场景校验2"}, {"name": "story", "value": "场景1：复制下单-手数范围0.6-1，总手数1"}, {"name": "parentSuite", "value": "test_cloudTrader"}, {"name": "suite", "value": "test_cloudOrderSend2"}, {"name": "subSuite", "value": "TestCloudStrategyOrder"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "21760-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cloudTrader.test_cloudOrderSend2"}]}