{"name": "跟单软件看板-VPS数据-策略开仓", "status": "failed", "statusDetails": {"message": "AssertionError: Failed: 响应msg字段应为success（JSON断言失败）", "trace": "self = <lingkuan_828.test_vps.test_vps_ordersend2.TestVPSOrderSend_newScenarios.TestVPSOrderSend1 object at 0x000001FA57606C10>\nresponse = <Response [200]>, json_path = '$.msg', expected_value = 'success'\nerror_msg_prefix = '响应msg字段应为success'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n    \n>           assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\nE               AssertionError: Failed: 响应msg字段应为success（JSON路径值不匹配）\n\ncommons\\api_base.py:416: AssertionError\n\nThe above exception was the direct cause of the following exception:\n\nself = <lingkuan_828.test_vps.test_vps_ordersend2.TestVPSOrderSend_newScenarios.TestVPSOrderSend1 object at 0x000001FA57606C10>\nvar_manager = <lingkuan_828.commons.variable_manager.VariableManager object at 0x000001FA58AF5A60>\nlogged_session = <lingkuan_828.commons.session.EnvironmentSession object at 0x000001FA58993880>\n\n    @pytest.mark.url(\"vps\")\n    @allure.title(\"跟单软件看板-VPS数据-策略开仓\")\n    def test_trader_orderSend(self, var_manager, logged_session):\n        # 1. 发送策略开仓请求\n        trader_ordersend = var_manager.get_variable(\"trader_ordersend\")\n        vps_trader_id = var_manager.get_variable(\"vps_trader_id\")\n        data = {\n            \"symbol\": trader_ordersend[\"symbol\"],\n            \"placedType\": 0,\n            \"remark\": trader_ordersend[\"remark\"],\n            \"intervalTime\": 100,\n            \"type\": 0,\n            \"totalNum\": \"\",\n            \"totalSzie\": \"1.00\",\n            \"startSize\": \"0.60\",\n            \"endSize\": \"1.00\",\n            \"traderId\": vps_trader_id\n        }\n        response = self.send_post_request(\n            logged_session,\n            '/subcontrol/trader/orderSend',\n            json_data=data,\n        )\n    \n        # 2. 验证响应状态码和内容\n        self.assert_response_status(\n            response,\n            200,\n            \"策略开仓失败\"\n        )\n>       self.assert_json_value(\n            response,\n            \"$.msg\",\n            \"success\",\n            \"响应msg字段应为success\"\n        )\n\ntest_vps\\test_vps_ordersend2.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_828.test_vps.test_vps_ordersend2.TestVPSOrderSend_newScenarios.TestVPSOrderSend1 object at 0x000001FA57606C10>\nresponse = <Response [200]>, json_path = '$.msg', expected_value = 'success'\nerror_msg_prefix = '响应msg字段应为success'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n    \n            assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\n        except Exception as e:\n            with allure.step(f\"JSON断言失败: {json_path}\"):\n                allure.attach(json_path, \"JSON路径\", allure.attachment_type.TEXT)\n                allure.attach(str(expected_value), \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(response.text[:500], \"响应内容\", allure.attachment_type.TEXT)\n            logger.error(\n                f\"[{self._get_current_time()}] JSON断言失败: {str(e)} | 路径: {json_path} | 响应: {response.text[:500]}\")\n>           raise AssertionError(f\"Failed: {error_msg_prefix}（JSON断言失败）\") from e\nE           AssertionError: Failed: 响应msg字段应为success（JSON断言失败）\n\ncommons\\api_base.py:425: AssertionError"}, "description": "\n    ### 测试说明\n    - 场景校验：手数范围>总手数>订单数量\n    - 前置条件：有vps策略和vps跟单\n      1. 进行开仓，手数范围0.6-1，总手数1\n      2. 校验手数范围限制是否生效，只有一个订单，订单手数大于0.6\n      3. 进行平仓\n      4. 校验账号的数据是否正确\n    - 预期结果：账号的数据正确，权重正确\n    ", "steps": [{"name": "执行 POST 请求", "status": "passed", "steps": [{"name": "请求详情", "status": "passed", "attachments": [{"name": "请求URL", "source": "1b3673a6-d105-4af4-bbed-0d1d02973754-attachment.txt", "type": "text/plain"}, {"name": "请求头", "source": "a309061e-59c3-45a6-85c7-d6a2b8362947-attachment.json", "type": "application/json"}, {"name": "请求体（JSON）", "source": "e346e144-2196-4d0a-bbae-7be3a01b0286-attachment.json", "type": "application/json"}], "start": 1756430549383, "stop": 1756430549384}, {"name": "响应详情", "status": "passed", "attachments": [{"name": "响应状态码", "source": "bb81820d-0272-4a41-8cda-3c86704bc5af-attachment.txt", "type": "text/plain"}, {"name": "响应头", "source": "c336f64d-e003-46c5-aeee-a069b5675cef-attachment.json", "type": "application/json"}, {"name": "响应体（JSON）", "source": "65a47e85-72da-43c4-a8f7-857499f1fd0c-attachment.json", "type": "application/json"}], "start": 1756430549600, "stop": 1756430549601}], "start": 1756430549383, "stop": 1756430550603}, {"name": "断言响应状态码", "status": "passed", "attachments": [{"name": "请求URL", "source": "c3fffe75-a3e2-45dd-b35a-c47e31b4a89f-attachment.txt", "type": "text/plain"}, {"name": "预期状态码", "source": "7172cbc7-54f4-4dc8-a4d5-0d6afd786660-attachment.txt", "type": "text/plain"}, {"name": "实际状态码", "source": "ee959d3c-683e-457d-b23c-b8a57c3da7cb-attachment.txt", "type": "text/plain"}, {"name": "响应内容", "source": "696ac15c-b483-42c8-a13f-f22cebbb2282-attachment.txt", "type": "text/plain"}], "start": 1756430550603, "stop": 1756430550605}, {"name": "断言JSON路径: $.msg", "status": "passed", "attachments": [{"name": "请求URL", "source": "bb49c068-2864-4162-bccc-ccc9a6813123-attachment.txt", "type": "text/plain"}, {"name": "预期值", "source": "fb1c0fec-1c41-4ef4-bff7-4b280b0c20e9-attachment.txt", "type": "text/plain"}, {"name": "实际值", "source": "6b2460df-09c5-4700-b31b-ef7be5dbd853-attachment.txt", "type": "text/plain"}], "start": 1756430550612, "stop": 1756430550613}, {"name": "JSON断言失败: $.msg", "status": "passed", "attachments": [{"name": "JSON路径", "source": "8fdc17a0-5f5e-4bc2-85d6-61ec46ad7688-attachment.txt", "type": "text/plain"}, {"name": "预期值", "source": "f4ba918d-8cc0-42c1-aafb-f5bfce3bfd0b-attachment.txt", "type": "text/plain"}, {"name": "响应内容", "source": "b599f279-47ec-46e8-a931-1c2dd11ff10f-attachment.txt", "type": "text/plain"}], "start": 1756430550613, "stop": 1756430550614}], "attachments": [{"name": "log", "source": "f261f757-2296-4148-a61c-cd136ddf4ba7-attachment.txt", "type": "text/plain"}], "start": 1756430549383, "stop": 1756430550614, "uuid": "10776e56-e68b-4d7f-9641-e12f49b4459d", "historyId": "d7e1e17722caa9a0d87afcf81753daf5", "testCaseId": "d7e1e17722caa9a0d87afcf81753daf5", "fullName": "test_vps.test_vps_ordersend2.TestVPSOrderSend1#test_trader_orderSend", "labels": [{"name": "feature", "value": "VPS策略下单-开仓的场景校验2"}, {"name": "story", "value": "场景1：VPS策略下单-手数范围0.6-1，总手数1"}, {"name": "tag", "value": "url('vps')"}, {"name": "parentSuite", "value": "test_vps"}, {"name": "suite", "value": "test_vps_ordersend2"}, {"name": "subSuite", "value": "TestVPSOrderSend_newScenarios"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "48340-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_vps.test_vps_ordersend2"}]}