{"name": "仪表盘-账号数据校验", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 持仓手数符合预期\n\n实际: 1.0\n操作: ==\n预期: 2.0", "trace": "self = <lingkuan_828.test_cloudTrader.test_getAccountDataPage.TestCloudOrderSend_newScenarios.TestCloudOrderSend2 object at 0x0000012EF6036F10>\nvar_manager = <lingkuan_828.commons.variable_manager.VariableManager object at 0x0000012EF61D6FD0>\nlogged_session = <lingkuan_828.commons.session.EnvironmentSession object at 0x0000012EF7562610>\n\n    @pytest.mark.retry(n=3, delay=5)\n    @allure.title(\"仪表盘-账号数据校验\")\n    def test_dashboard_getAccountDataPage(self, var_manager, logged_session):\n        with allure.step(\"1. 获取仪表盘-账号数据\"):\n            cloudTrader_user_accounts_4 = var_manager.get_variable(\"cloudTrader_user_accounts_2\")\n            params = {\n                \"page\": 1,\n                \"limit\": 10,\n                \"order\": \"\",\n                \"asc\": False,\n                \"deleted\": None,\n                \"brokerName\": \"AS\",\n                \"account\": cloudTrader_user_accounts_4,\n            }\n            response = self.send_get_request(\n                logged_session,\n                '/dashboard/getAccountDataPage',\n                params=params,\n            )\n        with allure.step(\"2. 验证响应\"):\n            self.assert_response_status(\n                response,\n                200,\n                \"获取仪表盘数据失败\"\n            )\n            self.assert_json_value(\n                response,\n                \"$.msg\",\n                \"success\",\n                \"响应msg字段应为success\"\n            )\n        with allure.step(\"3. 提取数据\"):\n            self.json_utils = JsonPathUtils()\n            response = response.json()\n            sourceAccount = self.json_utils.extract(response, \"$.data[0].sourceAccount\")\n            profit = self.json_utils.extract(response, \"$.data[0].profit\")\n            orderNum = self.json_utils.extract(response, \"$.data[0].orderNum\")\n            lots = self.json_utils.extract(response, \"$.data[0].lots\")\n            marginProportion = self.json_utils.extract(response, \"$.data[0].marginProportion\")\n            proportion = self.json_utils.extract(response, \"$.data[0].proportion\")\n            equity = self.json_utils.extract(response, \"$.data[0].equity\")\n            logging.info(\n                f\"提取的数据:{sourceAccount, profit, orderNum, lots, marginProportion, proportion, equity}\")\n    \n        with allure.step(\"4. 数据校验\"):\n            with allure.step(\"5.1 验证账号\"):\n                cloudTrader_user_accounts_1 = var_manager.get_variable(\"cloudTrader_user_accounts_1\")\n                self.verify_data(\n                    actual_value=sourceAccount,\n                    expected_value=cloudTrader_user_accounts_1,\n                    op=CompareOp.EQ,\n                    use_isclose=False,\n                    message=f\"账号数据符合预期\",\n                    attachment_name=\"账号详情\"\n                )\n                logging.info(f\"账号数据符合预期，实际是{sourceAccount}\")\n    \n            # with allure.step(\"5.2 验证盈利\"):\n            #         self.verify_data(\n            #             actual_value=float(profit),\n            #             expected_value=float(profit_sum),\n            #             op=CompareOp.EQ,\n            #             use_isclose=True,\n            #             abs_tol=100,\n            #             message=f\"盈利数据符合预期\",\n            #             attachment_name=\"盈利详情\"\n            #         )\n            #         logging.info(f\"盈利数据符合预期，实际是{profit_sum}\")\n    \n            with allure.step(\"5.3 验证持仓订单量\"):\n                self.verify_data(\n                    actual_value=float(orderNum),\n                    expected_value=float(order_num),\n                    op=CompareOp.EQ,\n                    use_isclose=True,\n                    abs_tol=3,\n                    message=f\"持仓订单量数据符合预期\",\n                    attachment_name=\"持仓订单量详情\"\n                )\n                logging.info(f\"持仓订单量数据符合预期，实际是{order_num}\")\n    \n            with allure.step(\"5.4 验证持仓手数\"):\n>               self.verify_data(\n                    actual_value=float(lots),\n                    expected_value=float(total),\n                    op=CompareOp.EQ,\n                    use_isclose=True,\n                    abs_tol=0,\n                    message=f\"持仓手数符合预期\",\n                    attachment_name=\"持仓手数详情\"\n                )\n\ntest_cloudTrader\\test_getAccountDataPage.py:453: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_828.test_cloudTrader.test_getAccountDataPage.TestCloudOrderSend_newScenarios.TestCloudOrderSend2 object at 0x0000012EF6036F10>\nactual_value = 1.0, expected_value = 2.0, op = <CompareOp.EQ: '=='>\nmessage = '持仓手数符合预期', attachment_name = '持仓手数详情', attachment_type = 'text/plain'\nuse_isclose = True, rel_tol = 1e-09, abs_tol = 0\n\n    def verify_data(\n            self,\n            actual_value,\n            expected_value,\n            op: CompareOp,\n            message: str,\n            attachment_name: str,\n            attachment_type=\"text/plain\",\n            use_isclose=True,  # 新增参数：是否启用math.isclose容错（默认启用）\n            rel_tol=1e-9,  # 相对容差（仅当use_isclose=True时生效）\n            abs_tol=0.0  # 绝对容差（仅当use_isclose=True时生效）\n    ):\n        \"\"\"\n        通用数据校验函数，支持浮点容错比较\n        :param actual_value: 实际值\n        :param expected_value: 预期值\n        :param op: 比较操作，CompareOp 枚举\n        :param message: 校验失败时的提示信息\n        :param attachment_name: Allure 附件名称\n        :param attachment_type: Allure 附件类型，默认文本\n        :param use_isclose: 是否使用math.isclose进行浮点容错比较\n        :param rel_tol: 相对容差（默认1e-9）\n        :param abs_tol: 绝对容差（默认0.0）\n        其他参数同前\n        \"\"\"\n        with allure.step(f\"校验: {message}\"):\n            result = False\n            try:\n                # 处理浮点容错比较（仅对EQ/NE操作生效）\n                if use_isclose and op in (CompareOp.EQ, CompareOp.NE):\n                    if not (isinstance(actual_value, (int, float)) and\n                            isinstance(expected_value, (int, float))):\n                        # 非数字类型自动禁用isclose，避免报错\n                        use_isclose = False\n                        logging.warning(f\"自动禁用isclose：非数字类型比较（实际值类型：{type(actual_value)}）\")\n    \n                    # 计算isclose结果\n                    is_close = math.isclose(\n                        actual_value,\n                        expected_value,\n                        rel_tol=rel_tol,\n                        abs_tol=abs_tol\n                    )\n                    # 根据操作类型取反\n                    result = is_close if op == CompareOp.EQ else not is_close\n    \n                # 普通比较逻辑\n                else:\n                    if op == CompareOp.EQ:\n                        result = actual_value == expected_value\n                    elif op == CompareOp.NE:\n                        result = actual_value != expected_value\n                    elif op == CompareOp.GT:\n                        result = actual_value > expected_value\n                    elif op == CompareOp.LT:\n                        result = actual_value < expected_value\n                    elif op == CompareOp.GE:\n                        result = actual_value >= expected_value\n                    elif op == CompareOp.LE:\n                        result = actual_value <= expected_value\n                    elif op == CompareOp.IN:\n                        result = actual_value in expected_value\n                    elif op == CompareOp.NOT_IN:\n                        result = actual_value not in expected_value\n    \n            except TypeError as e:\n                pytest.fail(\n                    f\"校验类型错误: {str(e)}\\n实际值类型: {type(actual_value)}, 预期值类型: {type(expected_value)}\")\n    \n            # 生成详细提示信息（包含容差参数）\n            detail_msg = (\n                f\"\\n实际: {actual_value}\\n\"\n                f\"操作: {op.value}\\n\"\n                f\"预期: {expected_value}\\n\"\n            )\n    \n            # 添加allure.attach，将信息写入报告\n            allure.attach(\n                detail_msg,  # 附件内容\n                name=attachment_name,  # 附件名称（来自参数）\n                attachment_type=attachment_type  # 附件类型\n            )\n    \n            if not result:\n>               pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\nE               Failed: 校验失败: 持仓手数符合预期\nE               \nE               实际: 1.0\nE               操作: ==\nE               预期: 2.0\n\ncommons\\api_base.py:1305: Failed"}, "description": "\n    ### 测试说明\n    - 功能校验，校验仪表盘的数据是否正确\n    - 前置条件：有云策略和云跟单\n      1. 进行开仓，手数范围0.1-1，总手数1\n      2. 获取仪表数据，提取数据库数据，然后进行校验\n      3. 数据正确\n    - 预期结果：数据正确\n    ", "steps": [{"name": "1. 获取仪表盘-账号数据", "status": "passed", "steps": [{"name": "执行 GET 请求", "status": "passed", "steps": [{"name": "请求详情", "status": "passed", "attachments": [{"name": "请求URL", "source": "6e422e20-5346-4444-98ec-cbe90582caeb-attachment.txt", "type": "text/plain"}, {"name": "请求头", "source": "c07fca26-35a0-44c5-bc61-b236099d4bf1-attachment.json", "type": "application/json"}, {"name": "请求体（表单/文件）", "source": "f8363930-6c25-438a-ad6e-687844ca10cd-attachment.txt", "type": "text/plain"}], "start": 1756430345998, "stop": 1756430345999}, {"name": "响应详情", "status": "passed", "attachments": [{"name": "响应状态码", "source": "f5198f15-5e02-49dc-9cb5-05bcfca28155-attachment.txt", "type": "text/plain"}, {"name": "响应头", "source": "a059fd59-9bf8-4e79-9cbd-eebd361a6143-attachment.json", "type": "application/json"}, {"name": "响应体（JSON）", "source": "131ddd09-000e-497b-b572-28b675032de2-attachment.json", "type": "application/json"}], "start": 1756430346487, "stop": 1756430346488}], "start": 1756430345998, "stop": 1756430347492}], "start": 1756430345998, "stop": 1756430347492}, {"name": "2. 验证响应", "status": "passed", "steps": [{"name": "断言响应状态码", "status": "passed", "attachments": [{"name": "请求URL", "source": "bbc35d2a-63c9-4622-981d-ae7ee1c1ee35-attachment.txt", "type": "text/plain"}, {"name": "预期状态码", "source": "372049a4-4b38-4e53-b67b-c17e652b6657-attachment.txt", "type": "text/plain"}, {"name": "实际状态码", "source": "0b759769-1c5a-4e89-8691-c0783700eea7-attachment.txt", "type": "text/plain"}, {"name": "响应内容", "source": "92edbfce-6755-44cf-91f4-4e306275663a-attachment.txt", "type": "text/plain"}], "start": 1756430347492, "stop": 1756430347494}, {"name": "断言JSON路径: $.msg", "status": "passed", "attachments": [{"name": "请求URL", "source": "8d7ca691-3aa5-40a5-8d51-ff99523d05df-attachment.txt", "type": "text/plain"}, {"name": "预期值", "source": "d9bab4d2-1ccd-4ee1-9e9a-87926a377c86-attachment.txt", "type": "text/plain"}, {"name": "实际值", "source": "47b7cce8-9f5b-4693-897d-76c98644fb5d-attachment.txt", "type": "text/plain"}], "start": 1756430347502, "stop": 1756430347504}], "start": 1756430347492, "stop": 1756430347504}, {"name": "3. 提取数据", "status": "passed", "start": 1756430347504, "stop": 1756430347564}, {"name": "4. 数据校验", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 持仓手数符合预期\n\n实际: 1.0\n操作: ==\n预期: 2.0\n\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_828\\test_cloudTrader\\test_getAccountDataPage.py\", line 453, in test_dashboard_getAccountDataPage\n    self.verify_data(\n  File \"D:\\pycharm_test\\lingkuan_828\\commons\\api_base.py\", line 1305, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "5.1 验证账号", "status": "passed", "steps": [{"name": "校验: 账号数据符合预期", "status": "passed", "attachments": [{"name": "账号详情", "source": "c00f1743-ab08-4bfc-9598-4ec76c10665e-attachment.attach", "type": "text/plain"}], "start": 1756430347564, "stop": 1756430347566}], "start": 1756430347564, "stop": 1756430347566}, {"name": "5.3 验证持仓订单量", "status": "passed", "steps": [{"name": "校验: 持仓订单量数据符合预期", "status": "passed", "attachments": [{"name": "持仓订单量详情", "source": "98b86280-024a-4f00-9195-100d05f086d4-attachment.attach", "type": "text/plain"}], "start": 1756430347566, "stop": 1756430347566}], "start": 1756430347566, "stop": 1756430347566}, {"name": "5.4 验证持仓手数", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 持仓手数符合预期\n\n实际: 1.0\n操作: ==\n预期: 2.0\n\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_828\\test_cloudTrader\\test_getAccountDataPage.py\", line 453, in test_dashboard_getAccountDataPage\n    self.verify_data(\n  File \"D:\\pycharm_test\\lingkuan_828\\commons\\api_base.py\", line 1305, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "校验: 持仓手数符合预期", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 持仓手数符合预期\n\n实际: 1.0\n操作: ==\n预期: 2.0\n\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_828\\commons\\api_base.py\", line 1305, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "attachments": [{"name": "持仓手数详情", "source": "7250cca7-bd05-41b2-8a88-341dfd061ad9-attachment.attach", "type": "text/plain"}], "start": 1756430347566, "stop": 1756430347567}], "start": 1756430347566, "stop": 1756430347567}], "start": 1756430347564, "stop": 1756430347568}], "attachments": [{"name": "log", "source": "bf1e8709-cd16-40c5-8e5b-869db20c3894-attachment.txt", "type": "text/plain"}], "start": 1756430345998, "stop": 1756430347568, "uuid": "db5909c7-0ce7-497a-9303-3ca64cceba00", "historyId": "38a0c4daf9a7082667a961f77a60e3bd", "testCaseId": "38a0c4daf9a7082667a961f77a60e3bd", "fullName": "test_cloudTrader.test_getAccountDataPage.TestCloudOrderSend2#test_dashboard_getAccountDataPage", "labels": [{"name": "story", "value": "仪表盘-云策略-云跟单账号数据"}, {"name": "feature", "value": "仪表盘"}, {"name": "tag", "value": "retry(n=3, delay=5)"}, {"name": "parentSuite", "value": "test_cloudTrader"}, {"name": "suite", "value": "test_getAccountDataPage"}, {"name": "subSuite", "value": "TestCloudOrderSend_newScenarios"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "21760-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cloudTrader.test_getAccountDataPage"}]}