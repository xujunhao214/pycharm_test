{"name": "数据库校验-分配下单平仓数据", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 详情总手数应符合预期\n\n实际: 1.5\n操作: ==\n预期: 1.0", "trace": "self = <lingkuan_828.test_cloudTrader.test_cloudOrderSend.TestCloudStrategyOrder.TestMasOrderSend6 object at 0x0000012EF60A9FD0>\nvar_manager = <lingkuan_828.commons.variable_manager.VariableManager object at 0x0000012EF60C3280>\ndb_transaction = <pymysql.connections.Connection object at 0x0000012EF63EC0D0>\n\n    @allure.title(\"数据库校验-分配下单平仓数据\")\n    def test_allocation_verify_close_db(self, var_manager, db_transaction):\n        \"\"\"验证分配下单平仓后数据库中的订单数据正确性\"\"\"\n        with allure.step(\"查询平仓订单数据\"):\n            cloudTrader_user_accounts_4 = var_manager.get_variable(\"cloudTrader_user_accounts_4\")\n            cloudTrader_vps_ids_3 = var_manager.get_variable(\"cloudTrader_vps_ids_3\")\n    \n            sql = \"\"\"\n                    SELECT\n                        fod.size,\n                        fod.close_no,\n                        fod.magical,\n                        fod.open_price,\n                        fod.symbol,\n                        fod.order_no,\n                        foi.true_total_lots,\n                        foi.order_no,\n                        foi.operation_type,\n                        foi.create_time,\n                        foi.status,\n                        foi.min_lot_size,\n                        foi.max_lot_size,\n                        foi.total_lots,\n                        foi.master_order,\n                        foi.total_orders\n                    FROM\n                        follow_order_detail fod\n                    INNER JOIN\n                        follow_order_instruct foi\n                    ON\n                        foi.order_no = fod.close_no COLLATE utf8mb4_0900_ai_ci\n                    WHERE foi.operation_type = %s\n                        AND fod.account = %s\n                        AND fod.trader_id = %s\n                \"\"\"\n            params = ('1', cloudTrader_user_accounts_4, cloudTrader_vps_ids_3)\n    \n            # 轮询等待数据库记录\n            db_data = self.query_database_with_time_with_timezone(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"fod.close_time\"\n            )\n    \n        with allure.step(\"执行平仓数据校验\"):\n            trader_ordersend = var_manager.get_variable(\"trader_ordersend\")\n            if not db_data:\n                pytest.fail(\"数据库查询结果为空，无法进行平仓校验\")\n    \n            with allure.step(\"验证订单状态\"):\n                status = db_data[0][\"status\"]\n                self.verify_data(\n                    actual_value=status,\n                    expected_value=(0, 1),\n                    op=CompareOp.IN,\n                    message=\"订单状态应为0或1\",\n                    attachment_name=\"订单状态详情\"\n                )\n                logging.info(f\"订单状态验证通过: {status}\")\n    \n            with allure.step(\"验证详情总手数\"):\n                totalSzie = trader_ordersend[\"totalSzie\"]\n                size = [record[\"size\"] for record in db_data]\n                total = sum(size)\n>               self.verify_data(\n                    actual_value=float(total),\n                    expected_value=float(totalSzie),\n                    op=CompareOp.EQ,\n                    message=\"详情总手数应符合预期\",\n                    attachment_name=\"详情总手数\"\n                )\n\ntest_cloudTrader\\test_cloudOrderSend.py:1490: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_828.test_cloudTrader.test_cloudOrderSend.TestCloudStrategyOrder.TestMasOrderSend6 object at 0x0000012EF60A9FD0>\nactual_value = 1.5, expected_value = 1.0, op = <CompareOp.EQ: '=='>\nmessage = '详情总手数应符合预期', attachment_name = '详情总手数'\nattachment_type = 'text/plain', use_isclose = True, rel_tol = 1e-09\nabs_tol = 0.0\n\n    def verify_data(\n            self,\n            actual_value,\n            expected_value,\n            op: CompareOp,\n            message: str,\n            attachment_name: str,\n            attachment_type=\"text/plain\",\n            use_isclose=True,  # 新增参数：是否启用math.isclose容错（默认启用）\n            rel_tol=1e-9,  # 相对容差（仅当use_isclose=True时生效）\n            abs_tol=0.0  # 绝对容差（仅当use_isclose=True时生效）\n    ):\n        \"\"\"\n        通用数据校验函数，支持浮点容错比较\n        :param actual_value: 实际值\n        :param expected_value: 预期值\n        :param op: 比较操作，CompareOp 枚举\n        :param message: 校验失败时的提示信息\n        :param attachment_name: Allure 附件名称\n        :param attachment_type: Allure 附件类型，默认文本\n        :param use_isclose: 是否使用math.isclose进行浮点容错比较\n        :param rel_tol: 相对容差（默认1e-9）\n        :param abs_tol: 绝对容差（默认0.0）\n        其他参数同前\n        \"\"\"\n        with allure.step(f\"校验: {message}\"):\n            result = False\n            try:\n                # 处理浮点容错比较（仅对EQ/NE操作生效）\n                if use_isclose and op in (CompareOp.EQ, CompareOp.NE):\n                    if not (isinstance(actual_value, (int, float)) and\n                            isinstance(expected_value, (int, float))):\n                        # 非数字类型自动禁用isclose，避免报错\n                        use_isclose = False\n                        logging.warning(f\"自动禁用isclose：非数字类型比较（实际值类型：{type(actual_value)}）\")\n    \n                    # 计算isclose结果\n                    is_close = math.isclose(\n                        actual_value,\n                        expected_value,\n                        rel_tol=rel_tol,\n                        abs_tol=abs_tol\n                    )\n                    # 根据操作类型取反\n                    result = is_close if op == CompareOp.EQ else not is_close\n    \n                # 普通比较逻辑\n                else:\n                    if op == CompareOp.EQ:\n                        result = actual_value == expected_value\n                    elif op == CompareOp.NE:\n                        result = actual_value != expected_value\n                    elif op == CompareOp.GT:\n                        result = actual_value > expected_value\n                    elif op == CompareOp.LT:\n                        result = actual_value < expected_value\n                    elif op == CompareOp.GE:\n                        result = actual_value >= expected_value\n                    elif op == CompareOp.LE:\n                        result = actual_value <= expected_value\n                    elif op == CompareOp.IN:\n                        result = actual_value in expected_value\n                    elif op == CompareOp.NOT_IN:\n                        result = actual_value not in expected_value\n    \n            except TypeError as e:\n                pytest.fail(\n                    f\"校验类型错误: {str(e)}\\n实际值类型: {type(actual_value)}, 预期值类型: {type(expected_value)}\")\n    \n            # 生成详细提示信息（包含容差参数）\n            detail_msg = (\n                f\"\\n实际: {actual_value}\\n\"\n                f\"操作: {op.value}\\n\"\n                f\"预期: {expected_value}\\n\"\n            )\n    \n            # 添加allure.attach，将信息写入报告\n            allure.attach(\n                detail_msg,  # 附件内容\n                name=attachment_name,  # 附件名称（来自参数）\n                attachment_type=attachment_type  # 附件类型\n            )\n    \n            if not result:\n>               pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\nE               Failed: 校验失败: 详情总手数应符合预期\nE               \nE               实际: 1.5\nE               操作: ==\nE               预期: 1.0\n\ncommons\\api_base.py:1305: Failed"}, "description": "\n    ### 测试说明\n    - 前置条件：有云策略和云跟单\n      1. 进行开仓，手数范围0.1-1，总手数1\n      2. 校验账号的数据是否正确\n      3. 进行平仓\n      4. 校验账号的数据是否正确\n    - 预期结果：云策略分配下单功能正确\n    ", "steps": [{"name": "查询平仓订单数据", "status": "passed", "steps": [{"name": "轮询等待数据稳定（时区+05:00，超时30秒）", "status": "passed", "steps": [{"name": "带时区转换查询（目标时区: +05:00）", "status": "passed", "steps": [{"name": "执行数据库查询", "status": "passed", "attachments": [{"name": "执行SQL", "source": "0d45032c-b6ac-4786-a54c-103a8b1baddc-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "5e046654-a994-4de1-a9ab-51ad18e74877-attachment.txt", "type": "text/plain"}], "start": 1756430679204, "stop": 1756430679260}], "attachments": [{"name": "时区处理", "source": "e69a28d8-55e3-4224-ac7f-a01ca3440aef-attachment.txt", "type": "text/plain"}], "start": 1756430679203, "stop": 1756430679260}, {"name": "轮询中（已等待0.1秒）", "status": "passed", "attachments": [{"name": "当前状态", "source": "61bf02cc-bc2c-4a29-8946-c3c1954cc671-attachment.txt", "type": "text/plain"}, {"name": "超时倒计时", "source": "3b64fee9-afef-4bd5-84f5-e6da996f53ac-attachment.txt", "type": "text/plain"}], "start": 1756430679260, "stop": 1756430679261}, {"name": "判断结果稳定性", "status": "passed", "attachments": [{"name": "判断结果", "source": "ea86523e-36c5-45d1-934d-cee10e5d2dd4-attachment.txt", "type": "text/plain"}], "start": 1756430679261, "stop": 1756430679262}, {"name": "数据发生变化", "status": "passed", "attachments": [{"name": "状态说明", "source": "487897d6-1f3e-452b-9252-d7ca288b0cff-attachment.txt", "type": "text/plain"}], "start": 1756430679262, "stop": 1756430679262}, {"name": "带时区转换查询（目标时区: +05:00）", "status": "passed", "steps": [{"name": "执行数据库查询", "status": "passed", "attachments": [{"name": "执行SQL", "source": "403c8c2d-3701-4d50-b6fd-0dd098c8ec6e-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "f1f350cf-1d9d-4373-8f5f-27caca91855d-attachment.txt", "type": "text/plain"}], "start": 1756430681320, "stop": 1756430681373}], "attachments": [{"name": "时区处理", "source": "9e2aff21-8d73-4231-832c-ecff6742c542-attachment.txt", "type": "text/plain"}], "start": 1756430681320, "stop": 1756430681373}, {"name": "轮询中（已等待2.2秒）", "status": "passed", "attachments": [{"name": "当前状态", "source": "08371794-fc46-4951-8e2a-f0c905508709-attachment.txt", "type": "text/plain"}, {"name": "超时倒计时", "source": "017eed6a-82ac-4855-bb3e-36cf4ee6ee7a-attachment.txt", "type": "text/plain"}], "start": 1756430681373, "stop": 1756430681374}, {"name": "判断结果稳定性", "status": "passed", "attachments": [{"name": "判断结果", "source": "6f5ea895-ece8-466e-a79d-96a69db88c04-attachment.txt", "type": "text/plain"}], "start": 1756430681374, "stop": 1756430681374}, {"name": "数据首次稳定", "status": "passed", "attachments": [{"name": "状态说明", "source": "f7eea18f-a49b-4fea-aa51-712208e09ed0-attachment.txt", "type": "text/plain"}], "start": 1756430681374, "stop": 1756430681374}, {"name": "带时区转换查询（目标时区: +05:00）", "status": "passed", "steps": [{"name": "执行数据库查询", "status": "passed", "attachments": [{"name": "执行SQL", "source": "d1410c98-86b6-4f24-9f3f-17820835d76d-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "19a34fb5-82a9-424b-8d8b-7d5179a5a303-attachment.txt", "type": "text/plain"}], "start": 1756430683432, "stop": 1756430683483}], "attachments": [{"name": "时区处理", "source": "27f93c96-ab3f-46e4-9ccc-b67edbfaabe5-attachment.txt", "type": "text/plain"}], "start": 1756430683431, "stop": 1756430683483}, {"name": "轮询中（已等待4.3秒）", "status": "passed", "attachments": [{"name": "当前状态", "source": "c1ed7adb-e55b-49f4-818b-333972a3182e-attachment.txt", "type": "text/plain"}, {"name": "超时倒计时", "source": "83b0a87e-6166-48df-972e-b86b7f4e22a3-attachment.txt", "type": "text/plain"}], "start": 1756430683483, "stop": 1756430683484}, {"name": "判断结果稳定性", "status": "passed", "attachments": [{"name": "判断结果", "source": "8f445b3f-080d-43c9-9fcd-03f4e76f97c8-attachment.txt", "type": "text/plain"}], "start": 1756430683484, "stop": 1756430683484}, {"name": "数据稳定达标", "status": "passed", "attachments": [{"name": "结果说明", "source": "a18a676c-416a-46d9-a429-0a4af8a87194-attachment.txt", "type": "text/plain"}], "start": 1756430683484, "stop": 1756430683484}, {"name": "带时区查询最终结果", "status": "passed", "attachments": [{"name": "结果预览", "source": "90360aef-bd75-4358-9817-7d9315615ed9-attachment.json", "type": "application/json"}], "start": 1756430683484, "stop": 1756430683485}], "attachments": [{"name": "执行SQL", "source": "9fa71533-a2f3-40d5-bf70-499562442a81-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "de0be2ff-071e-4fcc-bd90-c1d012d3abf8-attachment.txt", "type": "text/plain"}, {"name": "时区偏移量（小时）", "source": "e6a0c693-d6df-4638-a562-d314ac2365ff-attachment.txt", "type": "text/plain"}], "start": 1756430679158, "stop": 1756430683485}], "start": 1756430679158, "stop": 1756430683485}, {"name": "执行平仓数据校验", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 详情总手数应符合预期\n\n实际: 1.5\n操作: ==\n预期: 1.0\n\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_828\\test_cloudTrader\\test_cloudOrderSend.py\", line 1490, in test_allocation_verify_close_db\n    self.verify_data(\n  File \"D:\\pycharm_test\\lingkuan_828\\commons\\api_base.py\", line 1305, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "验证订单状态", "status": "passed", "steps": [{"name": "校验: 订单状态应为0或1", "status": "passed", "attachments": [{"name": "订单状态详情", "source": "5c45ce60-a98d-456d-bc51-8bfb06ae4cfd-attachment.attach", "type": "text/plain"}], "start": 1756430683485, "stop": 1756430683485}], "start": 1756430683485, "stop": 1756430683485}, {"name": "验证详情总手数", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 详情总手数应符合预期\n\n实际: 1.5\n操作: ==\n预期: 1.0\n\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_828\\test_cloudTrader\\test_cloudOrderSend.py\", line 1490, in test_allocation_verify_close_db\n    self.verify_data(\n  File \"D:\\pycharm_test\\lingkuan_828\\commons\\api_base.py\", line 1305, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "校验: 详情总手数应符合预期", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 详情总手数应符合预期\n\n实际: 1.5\n操作: ==\n预期: 1.0\n\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_828\\commons\\api_base.py\", line 1305, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "attachments": [{"name": "详情总手数", "source": "dcb9db9e-c995-491b-80da-4e64b86b9cbf-attachment.attach", "type": "text/plain"}], "start": 1756430683485, "stop": 1756430683485}], "start": 1756430683485, "stop": 1756430683485}], "start": 1756430683485, "stop": 1756430683485}], "attachments": [{"name": "log", "source": "0a2d378f-be49-4cb2-a7ef-f7efcb199793-attachment.txt", "type": "text/plain"}], "start": 1756430679156, "stop": 1756430683486, "uuid": "9399071e-4de9-40c0-869c-e051dad9e6ea", "historyId": "61c2d3f34bb9cf89302d92d74b63853b", "testCaseId": "61c2d3f34bb9cf89302d92d74b63853b", "fullName": "test_cloudTrader.test_cloudOrderSend.TestMasOrderSend6#test_allocation_verify_close_db", "labels": [{"name": "story", "value": "场景6：分配下单-手数0.1-1，总手数1"}, {"name": "feature", "value": "云策略复制下单-开仓的场景校验"}, {"name": "parentSuite", "value": "test_cloudTrader"}, {"name": "suite", "value": "test_cloudOrderSend"}, {"name": "subSuite", "value": "TestCloudStrategyOrder"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "21760-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cloudTrader.test_cloudOrderSend"}]}