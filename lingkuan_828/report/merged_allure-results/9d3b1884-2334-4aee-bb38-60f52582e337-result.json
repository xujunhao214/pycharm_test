{"name": "跟单软件看板-VPS数据-策略开仓", "status": "failed", "statusDetails": {"message": "AssertionError: Failed: 响应msg字段应为success（JSON断言失败）", "trace": "self = <lingkuan_828.test_vps.test_vps_ordersend2.TestVPSOrderSend_newScenarios.TestVPSOrderSend1 object at 0x000001FA57606C10>\nresponse = <Response [200]>, json_path = '$.msg', expected_value = 'success'\nerror_msg_prefix = '响应msg字段应为success'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n    \n>           assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\nE               AssertionError: Failed: 响应msg字段应为success（JSON路径值不匹配）\n\ncommons\\api_base.py:416: AssertionError\n\nThe above exception was the direct cause of the following exception:\n\nself = <lingkuan_828.test_vps.test_vps_ordersend2.TestVPSOrderSend_newScenarios.TestVPSOrderSend1 object at 0x000001FA57606C10>\nvar_manager = <lingkuan_828.commons.variable_manager.VariableManager object at 0x000001FA58AF5A60>\nlogged_session = <lingkuan_828.commons.session.EnvironmentSession object at 0x000001FA576136D0>\n\n    @pytest.mark.url(\"vps\")\n    @allure.title(\"跟单软件看板-VPS数据-策略开仓\")\n    def test_trader_orderSend(self, var_manager, logged_session):\n        # 1. 发送策略开仓请求\n        trader_ordersend = var_manager.get_variable(\"trader_ordersend\")\n        vps_trader_id = var_manager.get_variable(\"vps_trader_id\")\n        data = {\n            \"symbol\": trader_ordersend[\"symbol\"],\n            \"placedType\": 0,\n            \"remark\": trader_ordersend[\"remark\"],\n            \"intervalTime\": 100,\n            \"type\": 0,\n            \"totalNum\": \"\",\n            \"totalSzie\": \"1.00\",\n            \"startSize\": \"0.60\",\n            \"endSize\": \"1.00\",\n            \"traderId\": vps_trader_id\n        }\n        response = self.send_post_request(\n            logged_session,\n            '/subcontrol/trader/orderSend',\n            json_data=data,\n        )\n    \n        # 2. 验证响应状态码和内容\n        self.assert_response_status(\n            response,\n            200,\n            \"策略开仓失败\"\n        )\n>       self.assert_json_value(\n            response,\n            \"$.msg\",\n            \"success\",\n            \"响应msg字段应为success\"\n        )\n\ntest_vps\\test_vps_ordersend2.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_828.test_vps.test_vps_ordersend2.TestVPSOrderSend_newScenarios.TestVPSOrderSend1 object at 0x000001FA57606C10>\nresponse = <Response [200]>, json_path = '$.msg', expected_value = 'success'\nerror_msg_prefix = '响应msg字段应为success'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n    \n            assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\n        except Exception as e:\n            with allure.step(f\"JSON断言失败: {json_path}\"):\n                allure.attach(json_path, \"JSON路径\", allure.attachment_type.TEXT)\n                allure.attach(str(expected_value), \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(response.text[:500], \"响应内容\", allure.attachment_type.TEXT)\n            logger.error(\n                f\"[{self._get_current_time()}] JSON断言失败: {str(e)} | 路径: {json_path} | 响应: {response.text[:500]}\")\n>           raise AssertionError(f\"Failed: {error_msg_prefix}（JSON断言失败）\") from e\nE           AssertionError: Failed: 响应msg字段应为success（JSON断言失败）\n\ncommons\\api_base.py:425: AssertionError"}, "description": "\n    ### 测试说明\n    - 场景校验：手数范围>总手数>订单数量\n    - 前置条件：有vps策略和vps跟单\n      1. 进行开仓，手数范围0.6-1，总手数1\n      2. 校验手数范围限制是否生效，只有一个订单，订单手数大于0.6\n      3. 进行平仓\n      4. 校验账号的数据是否正确\n    - 预期结果：账号的数据正确，权重正确\n    ", "steps": [{"name": "执行 POST 请求", "status": "passed", "steps": [{"name": "请求详情", "status": "passed", "attachments": [{"name": "请求URL", "source": "746e6cbd-ecc5-4347-ad98-d6d4c0c6ca47-attachment.txt", "type": "text/plain"}, {"name": "请求头", "source": "90ae3934-58a9-4ce5-b283-12d1af50ddc1-attachment.json", "type": "application/json"}, {"name": "请求体（JSON）", "source": "89bbd0ff-0e0c-459b-89f9-9c3d19ca582e-attachment.json", "type": "application/json"}], "start": 1756430541731, "stop": 1756430541732}, {"name": "响应详情", "status": "passed", "attachments": [{"name": "响应状态码", "source": "b288539a-5152-4d72-98ff-27be21aa798c-attachment.txt", "type": "text/plain"}, {"name": "响应头", "source": "900a80f0-6eef-4342-8efb-a5b730e120cf-attachment.json", "type": "application/json"}, {"name": "响应体（JSON）", "source": "36fe9e73-9b57-4526-919f-40b20e38e9a2-attachment.json", "type": "application/json"}], "start": 1756430541944, "stop": 1756430541946}], "start": 1756430541731, "stop": 1756430542959}, {"name": "断言响应状态码", "status": "passed", "attachments": [{"name": "请求URL", "source": "087d76c2-56ec-4551-8854-985f3150c8fa-attachment.txt", "type": "text/plain"}, {"name": "预期状态码", "source": "794c3cb1-00b0-4b0b-8864-caf3789153bb-attachment.txt", "type": "text/plain"}, {"name": "实际状态码", "source": "1fd06ab2-9dc6-4011-be65-c64a5a225828-attachment.txt", "type": "text/plain"}, {"name": "响应内容", "source": "89cc645a-b454-45ff-b372-8d5afe19a640-attachment.txt", "type": "text/plain"}], "start": 1756430542959, "stop": 1756430542963}, {"name": "断言JSON路径: $.msg", "status": "passed", "attachments": [{"name": "请求URL", "source": "211fcf36-43d3-4fae-8450-7fe217c39f6d-attachment.txt", "type": "text/plain"}, {"name": "预期值", "source": "799fe94f-d58c-482b-8337-d436ca73fa68-attachment.txt", "type": "text/plain"}, {"name": "实际值", "source": "41435667-9ba9-4aa1-bf15-33be41655b41-attachment.txt", "type": "text/plain"}], "start": 1756430542983, "stop": 1756430542985}, {"name": "JSON断言失败: $.msg", "status": "passed", "attachments": [{"name": "JSON路径", "source": "73b14403-fc2d-4c63-9dae-559ae7c40923-attachment.txt", "type": "text/plain"}, {"name": "预期值", "source": "09d34e2a-9448-4de5-881c-0bd52b7b414e-attachment.txt", "type": "text/plain"}, {"name": "响应内容", "source": "3b1d9849-7e14-458b-af2e-82d6e0543698-attachment.txt", "type": "text/plain"}], "start": 1756430542985, "stop": 1756430542985}], "attachments": [{"name": "log", "source": "21cb86b4-8fff-4314-afd3-3a25932966cb-attachment.txt", "type": "text/plain"}], "start": 1756430541731, "stop": 1756430542985, "uuid": "ea6f48b7-ec88-4810-abf4-e6f6c618d761", "historyId": "d7e1e17722caa9a0d87afcf81753daf5", "testCaseId": "d7e1e17722caa9a0d87afcf81753daf5", "fullName": "test_vps.test_vps_ordersend2.TestVPSOrderSend1#test_trader_orderSend", "labels": [{"name": "feature", "value": "VPS策略下单-开仓的场景校验2"}, {"name": "story", "value": "场景1：VPS策略下单-手数范围0.6-1，总手数1"}, {"name": "tag", "value": "url('vps')"}, {"name": "parentSuite", "value": "test_vps"}, {"name": "suite", "value": "test_vps_ordersend2"}, {"name": "subSuite", "value": "TestVPSOrderSend_newScenarios"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "48340-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_vps.test_vps_ordersend2"}]}