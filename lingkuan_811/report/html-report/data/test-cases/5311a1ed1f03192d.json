{
  "uid" : "5311a1ed1f03192d",
  "name" : "修改跟单账号（仅使用后6个数据与模板匹配）",
  "fullName" : "test_vps.test_create_scene.TestCreate_Scene#test_update_addSlave",
  "historyId" : "34c34b56e7b5bfd8a49060656641e52d",
  "time" : {
    "start" : 1755071314847,
    "stop" : 1755071314847,
    "duration" : 0
  },
  "status" : "failed",
  "statusMessage" : "Failed: 经过 3 次重试后仍登录失败，请检查MFA密钥或账号密码",
  "statusTrace" : "api_session = <lingkuan_811.commons.session.EnvironmentSession object at 0x00000199BB4D7160>\nvar_manager = <lingkuan_730.commons.variable_manager.VariableManager object at 0x00000199BB5FB340>\nrequest = <SubRequest 'logged_session' for <Function test_update_addSlave>>\n\n    @pytest.fixture(scope=\"function\")\n    def logged_session(api_session, var_manager, request):\n        # 1. 配置重试参数（可根据需求调整）\n        max_retries = 3  # 最大重试次数\n        retry_interval = 15  # 重试间隔（秒），确保验证码刷新（30秒有效期内）\n    \n        # 2. 始终使用base_url进行登录\n        api_session.use_base_url()\n        logger.info(f\"[{DATETIME_NOW}] 用例 {request.node.nodeid} 使用默认URL登录: {api_session.base_url}\")\n    \n        # 3. 执行带重试的登录逻辑\n        login_data = var_manager.get_variable(\"login\")\n        access_token = None\n    \n        for attempt in range(max_retries):\n            try:\n                # 生成新的验证码（每次重试都重新生成，避免过期）\n                mfa_code = generate_code(MFA_SECRET_KEY)\n                logger.info(f\"登录尝试 {attempt + 1}/{max_retries}，生成MFA验证码: {mfa_code}\")\n    \n                # 构建登录请求数据\n                json_data = {\n                    \"username\": login_data[\"username\"],\n                    \"password\": login_data[\"password\"],\n                    \"captcha\": \"\",\n                    \"key\": \"\",\n                    \"secretKey\": \"\",\n                    \"code\": mfa_code,\n                    \"isMfaVerified\": 1,\n                    \"isStartMfaVerify\": 1\n                }\n    \n                # 发送登录请求\n                response = api_session.post(\"/sys/auth/login\", json=json_data)\n                response.raise_for_status()  # 触发HTTP错误（如500/401）\n                response_json = response.json()\n    \n                # 验证登录成功（根据实际响应调整）\n                if response_json.get(\"code\") != 0:  # 假设code=0为成功\n                    raise ValueError(f\"登录失败: {response_json.get('msg', '未知错误')}\")\n    \n                # 提取并设置token\n                access_token = response_json[\"data\"][\"access_token\"]\n                if not access_token:\n                    raise ValueError(\"登录成功但未返回access_token\")\n    \n                # 登录成功，跳出循环\n                logger.info(f\"登录成功（第{attempt + 1}次尝试），获取到token\")\n                break\n    \n            except Exception as e:\n                # 捕获所有登录相关错误（网络错误、验证码无效、服务器错误等）\n                logger.warning(f\"第{attempt + 1}次登录失败: {str(e)}\")\n                if attempt < max_retries - 1:\n                    logger.info(f\"等待 {retry_interval} 秒后重试...\")\n                    time.sleep(retry_interval)  # 等待后重试\n    \n        # 4. 登录最终结果判断\n        if not access_token:\n            # 所有重试都失败，标记用例失败\n>           pytest.fail(f\"经过 {max_retries} 次重试后仍登录失败，请检查MFA密钥或账号密码\")\nE           Failed: 经过 3 次重试后仍登录失败，请检查MFA密钥或账号密码\n\nconftest.py:152: Failed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "environment",
    "time" : {
      "start" : 1755070736575,
      "stop" : 1755070736575,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "logged_session",
    "time" : {
      "start" : 1755071314848,
      "stop" : 1755071348113,
      "duration" : 33265
    },
    "status" : "failed",
    "statusMessage" : "Failed: 经过 3 次重试后仍登录失败，请检查MFA密钥或账号密码\n",
    "statusTrace" : "  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\pluggy\\_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\pluggy\\_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n  File \"D:\\pycharm_test\\lingkuan_811\\conftest.py\", line 152, in logged_session\n    pytest.fail(f\"经过 {max_retries} 次重试后仍登录失败，请检查MFA密钥或账号密码\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 0
  }, {
    "name" : "var_manager",
    "time" : {
      "start" : 1755071250544,
      "stop" : 1755071250545,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "api_session",
    "time" : {
      "start" : 1755071314847,
      "stop" : 1755071314847,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "encrypted_password",
    "time" : {
      "start" : 1755071553997,
      "stop" : 1755071553997,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "Failed: 经过 3 次重试后仍登录失败，请检查MFA密钥或账号密码",
    "statusTrace" : "api_session = <lingkuan_811.commons.session.EnvironmentSession object at 0x00000199BB4D7160>\nvar_manager = <lingkuan_730.commons.variable_manager.VariableManager object at 0x00000199BB5FB340>\nrequest = <SubRequest 'logged_session' for <Function test_update_addSlave>>\n\n    @pytest.fixture(scope=\"function\")\n    def logged_session(api_session, var_manager, request):\n        # 1. 配置重试参数（可根据需求调整）\n        max_retries = 3  # 最大重试次数\n        retry_interval = 15  # 重试间隔（秒），确保验证码刷新（30秒有效期内）\n    \n        # 2. 始终使用base_url进行登录\n        api_session.use_base_url()\n        logger.info(f\"[{DATETIME_NOW}] 用例 {request.node.nodeid} 使用默认URL登录: {api_session.base_url}\")\n    \n        # 3. 执行带重试的登录逻辑\n        login_data = var_manager.get_variable(\"login\")\n        access_token = None\n    \n        for attempt in range(max_retries):\n            try:\n                # 生成新的验证码（每次重试都重新生成，避免过期）\n                mfa_code = generate_code(MFA_SECRET_KEY)\n                logger.info(f\"登录尝试 {attempt + 1}/{max_retries}，生成MFA验证码: {mfa_code}\")\n    \n                # 构建登录请求数据\n                json_data = {\n                    \"username\": login_data[\"username\"],\n                    \"password\": login_data[\"password\"],\n                    \"captcha\": \"\",\n                    \"key\": \"\",\n                    \"secretKey\": \"\",\n                    \"code\": mfa_code,\n                    \"isMfaVerified\": 1,\n                    \"isStartMfaVerify\": 1\n                }\n    \n                # 发送登录请求\n                response = api_session.post(\"/sys/auth/login\", json=json_data)\n                response.raise_for_status()  # 触发HTTP错误（如500/401）\n                response_json = response.json()\n    \n                # 验证登录成功（根据实际响应调整）\n                if response_json.get(\"code\") != 0:  # 假设code=0为成功\n                    raise ValueError(f\"登录失败: {response_json.get('msg', '未知错误')}\")\n    \n                # 提取并设置token\n                access_token = response_json[\"data\"][\"access_token\"]\n                if not access_token:\n                    raise ValueError(\"登录成功但未返回access_token\")\n    \n                # 登录成功，跳出循环\n                logger.info(f\"登录成功（第{attempt + 1}次尝试），获取到token\")\n                break\n    \n            except Exception as e:\n                # 捕获所有登录相关错误（网络错误、验证码无效、服务器错误等）\n                logger.warning(f\"第{attempt + 1}次登录失败: {str(e)}\")\n                if attempt < max_retries - 1:\n                    logger.info(f\"等待 {retry_interval} 秒后重试...\")\n                    time.sleep(retry_interval)  # 等待后重试\n    \n        # 4. 登录最终结果判断\n        if not access_token:\n            # 所有重试都失败，标记用例失败\n>           pytest.fail(f\"经过 {max_retries} 次重试后仍登录失败，请检查MFA密钥或账号密码\")\nE           Failed: 经过 3 次重试后仍登录失败，请检查MFA密钥或账号密码\n\nconftest.py:152: Failed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "ed8d6cdd16a6c503",
      "name" : "log",
      "source" : "ed8d6cdd16a6c503.txt",
      "type" : "text/plain",
      "size" : 936
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1
  },
  "afterStages" : [ {
    "name" : "var_manager::0",
    "time" : {
      "start" : 1755071873786,
      "stop" : 1755071873786,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "api_session::0",
    "time" : {
      "start" : 1755071348125,
      "stop" : 1755071348125,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "跟单软件看板-VPS数据-批量新增VPS跟单"
  }, {
    "name" : "tag",
    "value" : "url('vps')"
  }, {
    "name" : "parentSuite",
    "value" : "test_vps"
  }, {
    "name" : "suite",
    "value" : "test_create_scene"
  }, {
    "name" : "subSuite",
    "value" : "TestCreate_Scene"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "17448-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_vps.test_create_scene"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "url('vps')" ]
  },
  "source" : "5311a1ed1f03192d.json",
  "parameterValues" : [ ]
}