{"name": "数据库校验-VPS数据-删除策略账号", "status": "failed", "statusDetails": {"message": "Failed: 删除失败: 等待超时（5秒），记录仍然存在。\nSQL: SELECT * FROM follow_trader WHERE account = %s\n参数: ('300151',)\n最终结果数: 1（显示前50条）\n最终结果: [{\"id\": 6342, \"account\": \"300151\", \"create_time\": \"2025-08-20 17:13:43\"}]...", "trace": "self = <lingkuan_818.test_vps.test_delete_scene.TestDeleteTrader object at 0x00000234D6124BB0>\nvar_manager = <lingkuan_818.commons.variable_manager.VariableManager object at 0x00000234D60FCD60>\ndb_transaction = <pymysql.connections.Connection object at 0x00000234D622F640>\n\n    @allure.title(\"数据库校验-VPS数据-删除策略账号\")\n    def test_dbdelete_vpstrader(self, var_manager, db_transaction):\n        with allure.step(\"1. 查询数据库验证是否删除成功\"):\n            new_user = var_manager.get_variable(\"new_user\")\n            logging.info(f\"查询条件: table=follow_trader, account={new_user['account']}\")\n    \n            sql = f\"SELECT * FROM follow_trader WHERE account = %s\"\n            params = (new_user[\"account\"],)\n            try:\n>               self.wait_for_database_deletion(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params\n                )\n\ntest_vps\\test_delete_scene.py:186: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_818.test_vps.test_delete_scene.TestDeleteTrader object at 0x00000234D6124BB0>\ndb_transaction = <pymysql.connections.Connection object at 0x00000234D622F640>\nsql = 'SELECT * FROM follow_trader WHERE account = %s', params = ('300151',)\ntime_field = None, time_range = 1, order_by = 'create_time DESC', timeout = 5\npoll_interval = 2\n\n    def wait_for_database_deletion(self, db_transaction: pymysql.connections.Connection,\n                                   sql: str,\n                                   params: tuple = (),\n                                   time_field: Optional[str] = None,\n                                   time_range: int = MYSQL_TIME,\n                                   order_by: str = \"create_time DESC\",\n                                   timeout: int = DELETE_WAIT_TIMEOUT,\n                                   poll_interval: int = POLL_INTERVAL) -> None:\n        \"\"\"轮询等待数据库记录删除（增强日志）\"\"\"\n        import time\n        start_time = time.time()\n        logger.info(f\"[{self._get_current_time()}] 开始等待数据库记录删除 | SQL: {sql[:200]} | 超时: {timeout}秒\")\n        with allure.step(f\"等待数据库记录删除（超时: {timeout}秒）\"):\n            pass\n    \n        while time.time() - start_time < timeout:\n            try:\n                db_transaction.commit()  # 刷新事务\n    \n                if time_field:\n                    # 轮询过程中不附加到报告\n                    result = self.query_database_with_time(\n                        db_transaction=db_transaction,\n                        sql=sql,\n                        params=params,\n                        time_field=time_field,\n                        time_range_minutes=time_range,\n                        order_by=order_by,\n                        attach_to_allure=False\n                    )\n                else:\n                    # 轮询过程中不附加到报告\n                    result = self.query_database(\n                        db_transaction=db_transaction,\n                        sql=sql,\n                        params=params,\n                        order_by=order_by,\n                        attach_to_allure=False\n                    )\n    \n                if not result:\n                    logger.info(\n                        f\"[{self._get_current_time()}] 删除成功（耗时{time.time() - start_time:.1f}秒）| SQL: {sql[:200]}\")\n                    allure.attach(\n                        f\"删除成功（耗时{time.time() - start_time:.1f}秒）\",\n                        \"等待结果\",\n                        allure.attachment_type.TEXT\n                    )\n                    return\n    \n                elapsed = time.time() - start_time\n                logger.info(\n                    f\"[{self._get_current_time()}] 记录仍存在（已等待{elapsed:.1f}秒）| 剩余时间: {timeout - elapsed:.1f}秒 | 结果数: {len(result)}\")\n                time.sleep(poll_interval)\n    \n            except Exception as e:\n                logger.warning(f\"[{self._get_current_time()}] 轮询查询异常: {str(e)} | 继续等待...\")\n                time.sleep(poll_interval)\n    \n        # 超时处理 - 最后一次查询附加到报告\n        db_transaction.commit()\n        if time_field:\n            final_result = self.query_database_with_time(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=time_field,\n                time_range_minutes=time_range,\n                order_by=order_by\n            )\n        else:\n            final_result = self.query_database(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                order_by=order_by\n            )\n    \n        # 动态截取最多50条结果用于错误信息\n        display_count = min(len(final_result), 50)\n        error_msg = (\n            f\"等待超时（{timeout}秒），记录仍然存在。\\n\"\n            f\"SQL: {sql}\\n\"\n            f\"参数: {params}\\n\"\n            f\"最终结果数: {len(final_result)}（显示前50条）\\n\"\n            f\"最终结果: {json.dumps(self._simplify_result(final_result[:display_count]), ensure_ascii=False)}...\"\n        )\n        allure.attach(error_msg, \"等待超时\", allure.attachment_type.TEXT)\n>       raise TimeoutError(error_msg)\nE       TimeoutError: 等待超时（5秒），记录仍然存在。\nE       SQL: SELECT * FROM follow_trader WHERE account = %s\nE       参数: ('300151',)\nE       最终结果数: 1（显示前50条）\nE       最终结果: [{\"id\": 6342, \"account\": \"300151\", \"create_time\": \"2025-08-20 17:13:43\"}]...\n\ncommons\\api_base.py:577: TimeoutError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <lingkuan_818.test_vps.test_delete_scene.TestDeleteTrader object at 0x00000234D6124BB0>\nvar_manager = <lingkuan_818.commons.variable_manager.VariableManager object at 0x00000234D60FCD60>\ndb_transaction = <pymysql.connections.Connection object at 0x00000234D622F640>\n\n    @allure.title(\"数据库校验-VPS数据-删除策略账号\")\n    def test_dbdelete_vpstrader(self, var_manager, db_transaction):\n        with allure.step(\"1. 查询数据库验证是否删除成功\"):\n            new_user = var_manager.get_variable(\"new_user\")\n            logging.info(f\"查询条件: table=follow_trader, account={new_user['account']}\")\n    \n            sql = f\"SELECT * FROM follow_trader WHERE account = %s\"\n            params = (new_user[\"account\"],)\n            try:\n                self.wait_for_database_deletion(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params\n                )\n                allure.attach(f\"策略账号 {new_user['account']} 已成功从数据库删除\", \"验证结果\")\n            except TimeoutError as e:\n                allure.attach(f\"删除超时: {str(e)}\", \"验证结果\")\n>               pytest.fail(f\"删除失败: {str(e)}\")\nE               Failed: 删除失败: 等待超时（5秒），记录仍然存在。\nE               SQL: SELECT * FROM follow_trader WHERE account = %s\nE               参数: ('300151',)\nE               最终结果数: 1（显示前50条）\nE               最终结果: [{\"id\": 6342, \"account\": \"300151\", \"create_time\": \"2025-08-20 17:13:43\"}]...\n\ntest_vps\\test_delete_scene.py:194: Failed"}, "steps": [{"name": "1. 查询数据库验证是否删除成功", "status": "failed", "statusDetails": {"message": "Failed: 删除失败: 等待超时（5秒），记录仍然存在。\nSQL: SELECT * FROM follow_trader WHERE account = %s\n参数: ('300151',)\n最终结果数: 1（显示前50条）\n最终结果: [{\"id\": 6342, \"account\": \"300151\", \"create_time\": \"2025-08-20 17:13:43\"}]...\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_818\\test_vps\\test_delete_scene.py\", line 194, in test_dbdelete_vpstrader\n    pytest.fail(f\"删除失败: {str(e)}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "等待数据库记录删除（超时: 5秒）", "status": "passed", "start": 1755684653282, "stop": 1755684653282}, {"name": "数据库查询结果", "status": "passed", "attachments": [{"name": "执行SQL", "source": "8652bda5-23a3-4386-8247-4797913d0139-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "846127e4-9d62-44ba-818d-c3ceef6b6929-attachment.txt", "type": "text/plain"}, {"name": "查询结果（共1条，显示前50条）", "source": "3727ac1f-49d4-4607-9fd0-2c5e0ad9176e-attachment.json", "type": "application/json"}], "start": 1755684659796, "stop": 1755684659797}], "attachments": [{"name": "等待超时", "source": "7ef45079-1d93-4c81-af04-3c7770619ec0-attachment.txt", "type": "text/plain"}, {"name": "验证结果", "source": "2feaac90-f807-440d-98d6-278676170014-attachment.attach"}], "start": 1755684653281, "stop": 1755684659798}], "attachments": [{"name": "log", "source": "fc44465e-ba45-4d7d-9f5b-ec654150419f-attachment.txt", "type": "text/plain"}], "start": 1755684653281, "stop": 1755684659799, "uuid": "253be4ec-8b29-44da-952a-3c1c3921c766", "historyId": "1439bad01304665c7f9afc9448c170ca", "testCaseId": "1439bad01304665c7f9afc9448c170ca", "fullName": "test_vps.test_delete_scene.TestDeleteTrader#test_dbdelete_vpstrader", "labels": [{"name": "feature", "value": "删除跟单账号和策略账号"}, {"name": "parentSuite", "value": "test_vps"}, {"name": "suite", "value": "test_delete_scene"}, {"name": "subSuite", "value": "TestDeleteTrader"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "48228-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_vps.test_delete_scene"}]}