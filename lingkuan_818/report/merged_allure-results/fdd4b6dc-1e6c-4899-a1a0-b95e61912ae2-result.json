{"name": "数据库校验-策略开仓-主指令及订单详情数据检查", "status": "failed", "statusDetails": {"message": "AssertionError: 下单总手数是：1.00,订单详情总手数是：2.0\nassert False\n +  where False = <built-in function isclose>(1.0, 2.0, rel_tol=1e-09)\n +    where <built-in function isclose> = math.isclose\n +    and   1.0 = float('1.00')\n +    and   2.0 = float(2.0)", "trace": "self = <lingkuan_818.test_vps.test_vps_Leakage_level.TestLeakagelevel object at 0x000001DFD46BACD0>\nvar_manager = <lingkuan_818.commons.variable_manager.VariableManager object at 0x000001DFD4923FD0>\ndb_transaction = <pymysql.connections.Connection object at 0x000001DFD4712040>\n\n    @allure.title(\"数据库校验-策略开仓-主指令及订单详情数据检查\")\n    def test_dbquery_orderSend(self, var_manager, db_transaction):\n        with allure.step(\"1. 获取订单详情表账号数据\"):\n            new_user = var_manager.get_variable(\"new_user\")\n            sql = f\"\"\"\n                SELECT\n                    fod.size,\n                    fod.send_no,\n                    fod.magical,\n                    fod.open_price,\n                    fod.open_time,\n                    fod.symbol,\n                    fod.order_no,\n                    foi.true_total_lots,\n                    foi.order_no,\n                    foi.operation_type,\n                    foi.create_time,\n                    foi.status,\n                    foi.min_lot_size,\n                    foi.max_lot_size,\n                    foi.total_lots,\n                    foi.total_orders\n                FROM\n                    follow_order_detail fod\n                INNER JOIN\n                    follow_order_instruct foi\n                ON\n                    foi.order_no = fod.send_no COLLATE utf8mb4_0900_ai_ci\n                WHERE foi.operation_type = %s\n                    AND fod.account = %s\n                    \"\"\"\n            params = (\n                '0',\n                new_user[\"account\"],\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n            db_data = self.wait_for_database_record_with_timezone(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"fod.open_time\"\n            )\n        with allure.step(\"2. 数据校验\"):\n            trader_ordersend = var_manager.get_variable(\"trader_ordersend\")\n            if not db_data:\n                pytest.fail(\"数据库查询结果为空，无法提取数据\")\n    \n            status = db_data[0][\"status\"]\n            assert status in (0, 1), f\"订单状态status应为0(处理中)或1(全部成功)，实际状态为: {status}\"\n            logging.info(f\"订单状态status应为0(处理中)或1(全部成功)，实际状态为: {status}\")\n    \n            min_lot_size = db_data[0][\"min_lot_size\"]\n            endsize = trader_ordersend[\"endSize\"]\n            assert math.isclose(float(endsize), float(min_lot_size), rel_tol=1e-9), \\\n                f'手数范围：结束手数是：{endsize}，实际是：{min_lot_size}'\n            logging.info(f'手数范围：结束手数是：{endsize}，实际是：{min_lot_size}')\n    \n            max_lot_size = db_data[0][\"max_lot_size\"]\n            startSize = trader_ordersend[\"startSize\"]\n            assert math.isclose(float(startSize), float(max_lot_size), rel_tol=1e-9), \\\n                f'手数范围：开始手数是：{startSize}，实际是：{max_lot_size}'\n            logging.info(f'手数范围：开始手数是：{startSize}，实际是：{max_lot_size}')\n    \n            total_orders = db_data[0][\"total_orders\"]\n            totalNum = trader_ordersend[\"totalNum\"]\n            assert math.isclose(float(totalNum), float(total_orders), rel_tol=1e-9), \\\n                f'总订单数量是：{totalNum}，实际是：{total_orders}'\n            logging.info(f'总订单数量是：{totalNum}，实际是：{total_orders}')\n    \n            total_lots = db_data[0][\"total_lots\"]\n            totalSzie = trader_ordersend[\"totalSzie\"]\n            assert math.isclose(float(totalSzie), float(total_lots), rel_tol=1e-9), \\\n                f'下单总手数是：{totalSzie}，实际是：{total_lots}'\n            logging.info(f'下单总手数是：{totalSzie}，实际是：{total_lots}')\n    \n            totalSzie = trader_ordersend[\"totalSzie\"]\n            size = [record[\"size\"] for record in db_data]\n            total = sum(size)\n>           assert math.isclose(float(totalSzie), float(total), rel_tol=1e-9), \\\n                f'下单总手数是：{totalSzie},订单详情总手数是：{total}'\nE           AssertionError: 下单总手数是：1.00,订单详情总手数是：2.0\nE           assert False\nE            +  where False = <built-in function isclose>(1.0, 2.0, rel_tol=1e-09)\nE            +    where <built-in function isclose> = math.isclose\nE            +    and   1.0 = float('1.00')\nE            +    and   2.0 = float(2.0)\n\ntest_vps\\test_vps_Leakage_level.py:218: AssertionError"}, "description": "\n### 用例说明\n- 前置条件：有vps策略和vps跟单\n- 操作步骤：\n  1. 修改vps跟单账号开仓-关闭\n  2. 进行开仓\n  3. 跟单账号开仓失败，有漏单数据，把redis数据和MySQL数据进行校验\n  4. 修改vps跟单账号开仓-开启\n  5. 进行补单操作，然后平仓\n- 预期结果：vps跟单账号开仓-关闭，有漏单数据\n", "steps": [{"name": "1. 获取订单详情表账号数据", "status": "passed", "steps": [{"name": "等待数据库记录稳定（时区: +05:00，超时: 30秒）", "status": "passed", "start": 1755512543866, "stop": 1755512543866}, {"name": "数据库查询结果（最终稳定结果）", "status": "passed", "attachments": [{"name": "执行SQL", "source": "74e9fc9e-da04-4048-aba8-1ede830b419a-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "497dd45e-8056-491b-af18-8e8b13a43aed-attachment.txt", "type": "text/plain"}, {"name": "查询结果（共5条，显示前5条）", "source": "4f2224c2-ee76-4f12-bdc7-892250f7e722-attachment.json", "type": "application/json"}], "start": 1755512553096, "stop": 1755512553097}], "attachments": [{"name": "等待结果", "source": "37d17fa2-5d3b-4622-8b53-39c4d38df251-attachment.txt", "type": "text/plain"}], "start": 1755512543866, "stop": 1755512553097}, {"name": "2. 数据校验", "status": "failed", "statusDetails": {"message": "AssertionError: 下单总手数是：1.00,订单详情总手数是：2.0\nassert False\n +  where False = <built-in function isclose>(1.0, 2.0, rel_tol=1e-09)\n +    where <built-in function isclose> = math.isclose\n +    and   1.0 = float('1.00')\n +    and   2.0 = float(2.0)\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_818\\test_vps\\test_vps_Leakage_level.py\", line 218, in test_dbquery_orderSend\n    assert math.isclose(float(totalSzie), float(total), rel_tol=1e-9), \\\n"}, "start": 1755512553097, "stop": 1755512553098}], "attachments": [{"name": "log", "source": "b2538b9a-0c79-451e-9f95-a8c962872a95-attachment.txt", "type": "text/plain"}], "start": 1755512543866, "stop": 1755512553098, "uuid": "7800eaa5-41fd-4071-a603-1394f4784b82", "historyId": "71b10313aadf98a9cd8339733ccec4b6", "testCaseId": "71b10313aadf98a9cd8339733ccec4b6", "fullName": "test_vps.test_vps_Leakage_level.TestLeakagelevel#test_dbquery_orderSend", "labels": [{"name": "feature", "value": "VPS策略下单-漏平"}, {"name": "parentSuite", "value": "test_vps"}, {"name": "suite", "value": "test_vps_Leakage_level"}, {"name": "subSuite", "value": "TestLeakagelevel"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "6824-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_vps.test_vps_Leakage_level"}]}