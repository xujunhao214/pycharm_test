{
  "uid" : "af7f9e4297de4bf6",
  "name" : "数据库校验-组别列表-删除VPS组别",
  "fullName" : "test_foundation.test_delete.TestDeleteUser#test_dbdelete_group",
  "historyId" : "5bda0405d7f982976032db69b98ba481",
  "time" : {
    "start" : 1751629504428,
    "stop" : 1751629565400,
    "duration" : 60972
  },
  "status" : "broken",
  "statusMessage" : "TimeoutError: 等待超时（60秒），未查询到记录。\nSQL: SELECT * FROM follow_group WHERE name = %s\n参数: ('测试vps',)\n最终结果: ()",
  "statusTrace" : "self = <lingkuan_705.test_foundation.test_delete.TestDeleteUser object at 0x000002833A6AC1F0>\nvar_manager = <lingkuan_705.commons.variable_manager.VariableManager object at 0x000002833A6A8BE0>\ndb_transaction = <pymysql.connections.Connection object at 0x000002833A6A8DC0>\n\n    @allure.title(\"数据库校验-组别列表-删除VPS组别\")\n    def test_dbdelete_group(self, var_manager, db_transaction):\n        with allure.step(\"1. 查询数据库验证是否删除成功\"):\n            db_group = var_manager.get_variable(\"db_group\")\n            logging.info(f\"查询条件: table={db_group['table']}, name={db_group['name']}\")\n    \n            sql = f\"SELECT * FROM {db_group['table']} WHERE name = %s\"\n            params = (db_group[\"name\"],)\n    \n            # 调用轮询等待方法（带时间范围过滤）\n>           db_data = self.wait_for_database_record(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"create_time\",  # 按创建时间过滤\n                time_range=MYSQL_TIME,  # 只查前后1分钟的数据\n                timeout=WAIT_TIMEOUT,  # 最多等60秒\n                poll_interval=POLL_INTERVAL,  # 每2秒查一次\n                order_by=\"create_time DESC\"  # 按创建时间倒序\n            )\n\ntest_foundation\\test_delete.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_705.test_foundation.test_delete.TestDeleteUser object at 0x000002833A6AC1F0>\ndb_transaction = <pymysql.connections.Connection object at 0x000002833A6A8DC0>\nsql = 'SELECT * FROM follow_group WHERE name = %s', params = ('测试vps',)\ntime_field = 'create_time', time_range = 1, order_by = 'create_time DESC'\ntimeout = 60, poll_interval = 2\n\n    def wait_for_database_record(self, db_transaction: pymysql.connections.Connection,\n                                 sql: str,\n                                 params: tuple = (),\n                                 time_field: Optional[str] = None,  # 可选时间字段\n                                 time_range: int = 1,  # 时间范围（分钟）\n                                 order_by: str = \"create_time DESC\",\n                                 timeout: int = 60,  # 超时时间（秒）\n                                 poll_interval: int = 2) -> List[Dict[str, Any]]:\n        \"\"\"\n        轮询等待数据库记录出现\n        :param timeout: 最大等待时间\n        :param poll_interval: 轮询间隔（秒）\n        \"\"\"\n        import time\n        start_time = time.time()\n    \n        while time.time() - start_time < timeout:\n            # 每次查询前刷新事务，确保能看到最新数据\n            db_transaction.commit()\n    \n            # 根据是否需要时间范围选择查询方法\n            if time_field:\n                result = self.query_database_with_time(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params,\n                    time_field=time_field,\n                    time_range_minutes=time_range,\n                    order_by=order_by\n                )\n            else:\n                result = self.query_database(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params,\n                    order_by=order_by\n                )\n    \n            if result:\n                logging.info(f\"等待成功（耗时{time.time() - start_time:.1f}秒），结果: {result}\")\n                return result\n    \n            elapsed = time.time() - start_time\n            logging.info(f\"未查询到记录（已等待{elapsed:.1f}秒，剩余{timeout - elapsed:.1f}秒）\")\n            time.sleep(poll_interval)\n    \n        # 超时后最后一次查询\n        db_transaction.commit()\n        final_result = self.query_database_with_time(\n            db_transaction=db_transaction,\n            sql=sql,\n            params=params,\n            time_field=time_field,\n            time_range_minutes=time_range,\n            order_by=order_by\n        ) if time_field else self.query_database(\n            db_transaction=db_transaction,\n            sql=sql,\n            params=params,\n            order_by=order_by\n        )\n    \n>       raise TimeoutError(\n            f\"等待超时（{timeout}秒），未查询到记录。\\n\"\n            f\"SQL: {sql}\\n\"\n            f\"参数: {params}\\n\"\n            f\"最终结果: {final_result}\"\n        )\nE       TimeoutError: 等待超时（60秒），未查询到记录。\nE       SQL: SELECT * FROM follow_group WHERE name = %s\nE       参数: ('测试vps',)\nE       最终结果: ()\n\ncommons\\api_base.py:272: TimeoutError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "db",
    "time" : {
      "start" : 1751629498756,
      "stop" : 1751629498979,
      "duration" : 223
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "db_transaction",
    "time" : {
      "start" : 1751629504382,
      "stop" : 1751629504428,
      "duration" : 46
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "var_manager",
    "time" : {
      "start" : 1751629498755,
      "stop" : 1751629498756,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "db_config",
    "time" : {
      "start" : 1751629498756,
      "stop" : 1751629498756,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "environment",
    "time" : {
      "start" : 1751629498755,
      "stop" : 1751629498755,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "TimeoutError: 等待超时（60秒），未查询到记录。\nSQL: SELECT * FROM follow_group WHERE name = %s\n参数: ('测试vps',)\n最终结果: ()",
    "statusTrace" : "self = <lingkuan_705.test_foundation.test_delete.TestDeleteUser object at 0x000002833A6AC1F0>\nvar_manager = <lingkuan_705.commons.variable_manager.VariableManager object at 0x000002833A6A8BE0>\ndb_transaction = <pymysql.connections.Connection object at 0x000002833A6A8DC0>\n\n    @allure.title(\"数据库校验-组别列表-删除VPS组别\")\n    def test_dbdelete_group(self, var_manager, db_transaction):\n        with allure.step(\"1. 查询数据库验证是否删除成功\"):\n            db_group = var_manager.get_variable(\"db_group\")\n            logging.info(f\"查询条件: table={db_group['table']}, name={db_group['name']}\")\n    \n            sql = f\"SELECT * FROM {db_group['table']} WHERE name = %s\"\n            params = (db_group[\"name\"],)\n    \n            # 调用轮询等待方法（带时间范围过滤）\n>           db_data = self.wait_for_database_record(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"create_time\",  # 按创建时间过滤\n                time_range=MYSQL_TIME,  # 只查前后1分钟的数据\n                timeout=WAIT_TIMEOUT,  # 最多等60秒\n                poll_interval=POLL_INTERVAL,  # 每2秒查一次\n                order_by=\"create_time DESC\"  # 按创建时间倒序\n            )\n\ntest_foundation\\test_delete.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_705.test_foundation.test_delete.TestDeleteUser object at 0x000002833A6AC1F0>\ndb_transaction = <pymysql.connections.Connection object at 0x000002833A6A8DC0>\nsql = 'SELECT * FROM follow_group WHERE name = %s', params = ('测试vps',)\ntime_field = 'create_time', time_range = 1, order_by = 'create_time DESC'\ntimeout = 60, poll_interval = 2\n\n    def wait_for_database_record(self, db_transaction: pymysql.connections.Connection,\n                                 sql: str,\n                                 params: tuple = (),\n                                 time_field: Optional[str] = None,  # 可选时间字段\n                                 time_range: int = 1,  # 时间范围（分钟）\n                                 order_by: str = \"create_time DESC\",\n                                 timeout: int = 60,  # 超时时间（秒）\n                                 poll_interval: int = 2) -> List[Dict[str, Any]]:\n        \"\"\"\n        轮询等待数据库记录出现\n        :param timeout: 最大等待时间\n        :param poll_interval: 轮询间隔（秒）\n        \"\"\"\n        import time\n        start_time = time.time()\n    \n        while time.time() - start_time < timeout:\n            # 每次查询前刷新事务，确保能看到最新数据\n            db_transaction.commit()\n    \n            # 根据是否需要时间范围选择查询方法\n            if time_field:\n                result = self.query_database_with_time(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params,\n                    time_field=time_field,\n                    time_range_minutes=time_range,\n                    order_by=order_by\n                )\n            else:\n                result = self.query_database(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params,\n                    order_by=order_by\n                )\n    \n            if result:\n                logging.info(f\"等待成功（耗时{time.time() - start_time:.1f}秒），结果: {result}\")\n                return result\n    \n            elapsed = time.time() - start_time\n            logging.info(f\"未查询到记录（已等待{elapsed:.1f}秒，剩余{timeout - elapsed:.1f}秒）\")\n            time.sleep(poll_interval)\n    \n        # 超时后最后一次查询\n        db_transaction.commit()\n        final_result = self.query_database_with_time(\n            db_transaction=db_transaction,\n            sql=sql,\n            params=params,\n            time_field=time_field,\n            time_range_minutes=time_range,\n            order_by=order_by\n        ) if time_field else self.query_database(\n            db_transaction=db_transaction,\n            sql=sql,\n            params=params,\n            order_by=order_by\n        )\n    \n>       raise TimeoutError(\n            f\"等待超时（{timeout}秒），未查询到记录。\\n\"\n            f\"SQL: {sql}\\n\"\n            f\"参数: {params}\\n\"\n            f\"最终结果: {final_result}\"\n        )\nE       TimeoutError: 等待超时（60秒），未查询到记录。\nE       SQL: SELECT * FROM follow_group WHERE name = %s\nE       参数: ('测试vps',)\nE       最终结果: ()\n\ncommons\\api_base.py:272: TimeoutError",
    "steps" : [ {
      "name" : "1. 查询数据库验证是否删除成功",
      "time" : {
        "start" : 1751629504428,
        "stop" : 1751629565399,
        "duration" : 60971
      },
      "status" : "broken",
      "statusMessage" : "TimeoutError: 等待超时（60秒），未查询到记录。\nSQL: SELECT * FROM follow_group WHERE name = %s\n参数: ('测试vps',)\n最终结果: ()\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\lingkuan_705\\test_foundation\\test_delete.py\", line 61, in test_dbdelete_group\n    db_data = self.wait_for_database_record(\n  File \"D:\\pycharm_test\\lingkuan_705\\commons\\api_base.py\", line 272, in wait_for_database_record\n    raise TimeoutError(\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true
    } ],
    "attachments" : [ {
      "uid" : "f97f45c9d2bbc533",
      "name" : "log",
      "source" : "f97f45c9d2bbc533.txt",
      "type" : "text/plain",
      "size" : 10123
    } ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "hasContent" : true,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "db::0",
    "time" : {
      "start" : 1751629764539,
      "stop" : 1751629764540,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "db_transaction::0",
    "time" : {
      "start" : 1751629565508,
      "stop" : 1751629565553,
      "duration" : 45
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "var_manager::0",
    "time" : {
      "start" : 1751629764542,
      "stop" : 1751629764543,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "删除基本账号"
  }, {
    "name" : "parentSuite",
    "value" : "test_foundation"
  }, {
    "name" : "suite",
    "value" : "test_delete"
  }, {
    "name" : "subSuite",
    "value" : "TestDeleteUser"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "36156-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_foundation.test_delete"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "af7f9e4297de4bf6.json",
  "parameterValues" : [ ]
}