{
  "uid" : "cfe5ca7ece4dc2bc",
  "name" : "登录",
  "fullName" : "tests.test_api#test_login",
  "historyId" : "2de4b3168f8b51939cf2ec59f842fbc6",
  "time" : {
    "start" : 1749441657319,
    "stop" : 1749441657569,
    "duration" : 250
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert 'success' == '用户名或密码错误'\n  - 用户名或密码错误\n  + success",
  "statusTrace" : "session = <commons.session.JunhaoSession object at 0x000001BC249CFC10>\ndata = {'password': '045728bed050a84d080b26233d113882b09043565f6bbef289d40ebee9e33a65335cd7c1c9172675699f9ca309ba016de2b9885d...b8f9f201d80dd364738e56120caf68835e26074275047e2dd01e1199cfe99df35b7e1c7b8ce642101757524081830e1b', 'username': 'admin'}\ncode = 400\n\n    @pytest.mark.parametrize(\n        \"data, code\",\n        [\n            # 正确的用户名和密码\n            ({\"username\": \"admin\",\n              \"password\": \"04739db02172e04f63f5278211184deec745bad9d797882b343e7201898d8da1d9fced282f6b271d3815a5057482e62c6f6b88dacb642ba05632bd2ee348101c76cb1f86b70f91695fd1cff11fce76246f044ace477cdbfa1e3e1521b19b023b14c7165e82c5\"},\n             200),\n            # 错误的密码\n            ({\"username\": \"admin\",\n              \"password\": \"045728bed050a84d080b26233d113882b09043565f6bbef289d40ebee9e33a65335cd7c1c9172675699f9ca309ba016de2b9885deb6c3270aeb8f9f201d80dd364738e56120caf68835e26074275047e2dd01e1199cfe99df35b7e1c7b8ce642101757524081830e1b\"},\n             400),\n        ]\n    )\n    @allure.title(\"登录\")\n    def test_login(session, data, code):\n        headers = {\n            \"Authorization\": \"${token}\",\n            \"x-sign\": \"417B110F1E71BD2CFE96366E67849B0B\",\n        }\n    \n        with allure.step(\"1. 登录操作\"):\n            session.post('/sys/auth/login', json=data, headers=headers)\n        with allure.step(\"2. 校验登录是否成功\"):\n            msg = session.extract_jsonpath(\"$.msg\")\n            logging.info(f\"预期 'success'，实际 {msg}\")\n>           assert \"success\" == msg\nE           AssertionError: assert 'success' == '用户名或密码错误'\nE             - 用户名或密码错误\nE             + success\n\ntests\\test_api.py:33: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "session",
    "time" : {
      "start" : 1749441657075,
      "stop" : 1749441657075,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert 'success' == '用户名或密码错误'\n  - 用户名或密码错误\n  + success",
    "statusTrace" : "session = <commons.session.JunhaoSession object at 0x000001BC249CFC10>\ndata = {'password': '045728bed050a84d080b26233d113882b09043565f6bbef289d40ebee9e33a65335cd7c1c9172675699f9ca309ba016de2b9885d...b8f9f201d80dd364738e56120caf68835e26074275047e2dd01e1199cfe99df35b7e1c7b8ce642101757524081830e1b', 'username': 'admin'}\ncode = 400\n\n    @pytest.mark.parametrize(\n        \"data, code\",\n        [\n            # 正确的用户名和密码\n            ({\"username\": \"admin\",\n              \"password\": \"04739db02172e04f63f5278211184deec745bad9d797882b343e7201898d8da1d9fced282f6b271d3815a5057482e62c6f6b88dacb642ba05632bd2ee348101c76cb1f86b70f91695fd1cff11fce76246f044ace477cdbfa1e3e1521b19b023b14c7165e82c5\"},\n             200),\n            # 错误的密码\n            ({\"username\": \"admin\",\n              \"password\": \"045728bed050a84d080b26233d113882b09043565f6bbef289d40ebee9e33a65335cd7c1c9172675699f9ca309ba016de2b9885deb6c3270aeb8f9f201d80dd364738e56120caf68835e26074275047e2dd01e1199cfe99df35b7e1c7b8ce642101757524081830e1b\"},\n             400),\n        ]\n    )\n    @allure.title(\"登录\")\n    def test_login(session, data, code):\n        headers = {\n            \"Authorization\": \"${token}\",\n            \"x-sign\": \"417B110F1E71BD2CFE96366E67849B0B\",\n        }\n    \n        with allure.step(\"1. 登录操作\"):\n            session.post('/sys/auth/login', json=data, headers=headers)\n        with allure.step(\"2. 校验登录是否成功\"):\n            msg = session.extract_jsonpath(\"$.msg\")\n            logging.info(f\"预期 'success'，实际 {msg}\")\n>           assert \"success\" == msg\nE           AssertionError: assert 'success' == '用户名或密码错误'\nE             - 用户名或密码错误\nE             + success\n\ntests\\test_api.py:33: AssertionError",
    "steps" : [ {
      "name" : "1. 登录操作",
      "time" : {
        "start" : 1749441657319,
        "stop" : 1749441657564,
        "duration" : 245
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : false,
      "stepsCount" : 0,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0
    }, {
      "name" : "2. 校验登录是否成功",
      "time" : {
        "start" : 1749441657564,
        "stop" : 1749441657569,
        "duration" : 5
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: assert 'success' == '用户名或密码错误'\n  - 用户名或密码错误\n  + success\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\kuangjia2\\tests\\test_api.py\", line 33, in test_login\n    assert \"success\" == msg\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 0
    } ],
    "attachments" : [ {
      "uid" : "1e9f9c94c0011c03",
      "name" : "log",
      "source" : "1e9f9c94c0011c03.txt",
      "type" : "text/plain",
      "size" : 1554
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 2,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1
  },
  "afterStages" : [ {
    "name" : "session::0",
    "time" : {
      "start" : 1749441657737,
      "stop" : 1749441657737,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "22668-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "code",
    "value" : "400"
  }, {
    "name" : "data",
    "value" : "{'username': 'admin', 'password': '045728bed050a84d080b26233d113882b09043565f6bbef289d40ebee9e33a65335cd7c1c9172675699f9ca309ba016de2b9885deb6c3270aeb8f9f201d80dd364738e56120caf68835e26074275047e2dd01e1199cfe99df35b7e1c7b8ce642101757524081830e1b'}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "cfe5ca7ece4dc2bc.json",
  "parameterValues" : [ "400", "{'username': 'admin', 'password': '045728bed050a84d080b26233d113882b09043565f6bbef289d40ebee9e33a65335cd7c1c9172675699f9ca309ba016de2b9885deb6c3270aeb8f9f201d80dd364738e56120caf68835e26074275047e2dd01e1199cfe99df35b7e1c7b8ce642101757524081830e1b'}" ]
}