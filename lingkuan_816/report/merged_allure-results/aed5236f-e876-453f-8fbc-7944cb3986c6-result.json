{"name": "数据库校验-账号管理-交易下单-根据remark发现有漏单", "status": "broken", "statusDetails": {"message": "TimeoutError: 等待超时（30秒），未查询到任何数据。\nSQL: \n                SELECT \n                    fod.send_no,\n                    fod.magical,\n                    fod.remark,\n                    fod.symbol,\n                    fod.order_no,\n                    foi.true_total_lots,\n                    foi.order_no,\n                    foi.operation_type,\n                    foi.create_time,\n                    foi.status,\n                    foi.master_order,\n                    foi.cloud_account,\n                    foi.total_orders\n                FROM \n                    follow_order_detail fod\n                INNER JOIN \n                    follow_order_instruct foi \n                ON \n                    foi.order_no = fod.send_no COLLATE utf8mb4_0900_ai_ci\n                WHERE foi.operation_type = %s\n                    AND foi.cloud_account = %s\n                                        \n参数: ('0', '300160')", "trace": "self = <lingkuan_816.test_cloudTrader.test_cloudOrderSend_open.TestcloudTrader_open object at 0x000001DCDBA0F250>\nvar_manager = <lingkuan_816.commons.variable_manager.VariableManager object at 0x000001DCDBADBFD0>\ndb_transaction = <pymysql.connections.Connection object at 0x000001DCDB8DDE20>\n\n    @allure.title(\"数据库校验-账号管理-交易下单-根据remark发现有漏单\")\n    def test_dbquery_orderSend_addsalve(self, var_manager, db_transaction):\n        with allure.step(\"1. 查询数据库验证是否有跟单开仓指令\"):\n            cloudTrader_user_accounts_2 = var_manager.get_variable(\"cloudTrader_user_accounts_2\")\n    \n            sql = f\"\"\"\n                SELECT\n                    fod.send_no,\n                    fod.magical,\n                    fod.remark,\n                    fod.symbol,\n                    fod.order_no,\n                    foi.true_total_lots,\n                    foi.order_no,\n                    foi.operation_type,\n                    foi.create_time,\n                    foi.status,\n                    foi.master_order,\n                    foi.cloud_account,\n                    foi.total_orders\n                FROM\n                    follow_order_detail fod\n                INNER JOIN\n                    follow_order_instruct foi\n                ON\n                    foi.order_no = fod.send_no COLLATE utf8mb4_0900_ai_ci\n                WHERE foi.operation_type = %s\n                    AND foi.cloud_account = %s\n                                        \"\"\"\n            params = (\n                '0',\n                cloudTrader_user_accounts_2,\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n>           db_data = self.wait_for_database_record(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"foi.create_time\"\n            )\n\ntest_cloudTrader\\test_cloudOrderSend_open.py:162: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_816.test_cloudTrader.test_cloudOrderSend_open.TestcloudTrader_open object at 0x000001DCDBA0F250>\ndb_transaction = <pymysql.connections.Connection object at 0x000001DCDB8DDE20>\nsql = '\\n                SELECT \\n                    fod.send_no,\\n                    fod.magical,\\n                    fo...HERE foi.operation_type = %s\\n                    AND foi.cloud_account = %s\\n                                        '\nparams = ('0', '300160'), time_field = 'foi.create_time', time_range = 1\norder_by = 'create_time DESC', timeout = 30, poll_interval = 2\nstable_period = 3\n\n    def wait_for_database_record(\n            self,\n            db_transaction: pymysql.connections.Connection,\n            sql: str,\n            params: tuple = (),\n            time_field: Optional[str] = None,\n            time_range: int = MYSQL_TIME,\n            order_by: str = \"create_time DESC\",\n            timeout: int = WAIT_TIMEOUT,\n            poll_interval: int = POLL_INTERVAL,\n            stable_period: int = STBLE_PERIOD\n    ) -> List[Dict[str, Any]]:\n        \"\"\"\n        轮询等待数据库记录出现（等待数据稳定）\n        \"\"\"\n        import time\n        start_time = time.time()\n        last_result = None\n        stable_start_time = None\n        has_data = False  # 标记是否查询到过数据\n    \n        logger.info(\n            f\"[{DATETIME_NOW}] 开始等待数据库记录稳定 | \"\n            f\"SQL: {sql[:200]} | \"\n            f\"超时: {timeout}秒 | \"\n            f\"稳定期: {stable_period}秒\"\n        )\n    \n        while time.time() - start_time < timeout:\n            try:\n                db_transaction.commit()  # 刷新事务\n                result = self._execute_query(\n                    db_transaction, sql, params, time_field, order_by, time_range\n                )\n    \n                # 检查是否有数据\n                if len(result) > 0:\n                    has_data = True\n                    # 判断结果是否稳定（数量和内容都不变）\n                    if self._is_result_stable(result, last_result):\n                        if stable_start_time is None:\n                            stable_start_time = time.time()\n                            logger.debug(f\"[{DATETIME_NOW}] 数据首次稳定，开始计时\")\n                        elif time.time() - stable_start_time >= stable_period:\n                            logger.info(\n                                f\"[{DATETIME_NOW}] 数据已稳定{stable_period}秒（耗时{time.time() - start_time:.1f}秒）| \"\n                                f\"结果数: {len(result)}\"\n                            )\n                            return result\n                    else:\n                        stable_start_time = None  # 结果变化，重置稳定计时器\n                        logger.debug(f\"[{DATETIME_NOW}] 数据仍在变化，重置稳定计时器\")\n                else:\n                    # 结果为空，重置稳定计时器\n                    stable_start_time = None\n                    has_data = False\n                    logger.debug(f\"[{DATETIME_NOW}] 查询结果为空，继续等待\")\n    \n                last_result = result\n                elapsed = time.time() - start_time\n                logger.debug(\n                    f\"[{DATETIME_NOW}] 等待数据稳定（已等待{elapsed:.1f}秒）| \"\n                    f\"当前结果数: {len(result)} | \"\n                    f\"稳定时间: {time.time() - stable_start_time if stable_start_time else 0:.1f}/{stable_period}秒\"\n                )\n                time.sleep(poll_interval)\n    \n            except Exception as e:\n                logger.warning(f\"[{DATETIME_NOW}] 轮询查询异常: {str(e)} | 继续等待...\")\n                time.sleep(poll_interval)\n    \n        # 超时处理\n        final_result = self._execute_query(\n            db_transaction, sql, params, time_field, order_by, time_range\n        )\n    \n        if len(final_result) == 0:\n>           raise TimeoutError(\n                f\"等待超时（{timeout}秒），未查询到任何数据。\\n\"\n                f\"SQL: {sql}\\n\"\n                f\"参数: {params}\"\n            )\nE           TimeoutError: 等待超时（30秒），未查询到任何数据。\nE           SQL: \nE                           SELECT \nE                               fod.send_no,\nE                               fod.magical,\nE                               fod.remark,\nE                               fod.symbol,\nE                               fod.order_no,\nE                               foi.true_total_lots,\nE                               foi.order_no,\nE                               foi.operation_type,\nE                               foi.create_time,\nE                               foi.status,\nE                               foi.master_order,\nE                               foi.cloud_account,\nE                               foi.total_orders\nE                           FROM \nE                               follow_order_detail fod\nE                           INNER JOIN \nE                               follow_order_instruct foi \nE                           ON \nE                               foi.order_no = fod.send_no COLLATE utf8mb4_0900_ai_ci\nE                           WHERE foi.operation_type = %s\nE                               AND foi.cloud_account = %s\nE                                                   \nE           参数: ('0', '300160')\n\ncommons\\api_base.py:531: TimeoutError"}, "steps": [{"name": "1. 查询数据库验证是否有跟单开仓指令", "status": "broken", "statusDetails": {"message": "TimeoutError: 等待超时（30秒），未查询到任何数据。\nSQL: \n                SELECT \n                    fod.send_no,\n                    fod.magical,\n                    fod.remark,\n                    fod.symbol,\n                    fod.order_no,\n                    foi.true_total_lots,\n                    foi.order_no,\n                    foi.operation_type,\n                    foi.create_time,\n                    foi.status,\n                    foi.master_order,\n                    foi.cloud_account,\n                    foi.total_orders\n                FROM \n                    follow_order_detail fod\n                INNER JOIN \n                    follow_order_instruct foi \n                ON \n                    foi.order_no = fod.send_no COLLATE utf8mb4_0900_ai_ci\n                WHERE foi.operation_type = %s\n                    AND foi.cloud_account = %s\n                                        \n参数: ('0', '300160')\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_816\\test_cloudTrader\\test_cloudOrderSend_open.py\", line 162, in test_dbquery_orderSend_addsalve\n    db_data = self.wait_for_database_record(\n  File \"D:\\pycharm_test\\lingkuan_816\\commons\\api_base.py\", line 531, in wait_for_database_record\n    raise TimeoutError(\n"}, "start": 1755246985234, "stop": 1755247017503}], "attachments": [{"name": "log", "source": "433a3b49-3e47-4f6d-97de-5c597a0e4431-attachment.txt", "type": "text/plain"}], "start": 1755246985234, "stop": 1755247017503, "uuid": "4b92db6f-aae1-45c6-a965-c558c43501ff", "historyId": "1fac1ae703faa2136506e53782eba649", "testCaseId": "1fac1ae703faa2136506e53782eba649", "fullName": "test_cloudTrader.test_cloudOrderSend_open.TestcloudTrader_open#test_dbquery_orderSend_addsalve", "labels": [{"name": "feature", "value": "交易下单-云策略复制下单-漏开"}, {"name": "parentSuite", "value": "test_cloudTrader"}, {"name": "suite", "value": "test_cloudOrderSend_open"}, {"name": "subSuite", "value": "TestcloudTrader_open"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "34324-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cloudTrader.test_cloudOrderSend_open"}]}