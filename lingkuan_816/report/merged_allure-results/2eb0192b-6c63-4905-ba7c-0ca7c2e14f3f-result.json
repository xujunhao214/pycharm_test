{"name": "出现漏开-redis数据和数据库的数据做比对", "status": "failed", "statusDetails": {"message": "Failed: Redis中未查询到订单数据", "trace": "self = <lingkuan_816.test_cloudTrader.test_cloudstartegy_status.Testcloudstargy_status object at 0x000001DCDBA5C0A0>\nvar_manager = <lingkuan_816.commons.variable_manager.VariableManager object at 0x000001DCDBAFE5B0>\ndb_transaction = <pymysql.connections.Connection object at 0x000001DCDB8DDE20>\nredis_cloudTrader_data_send = []\n\n    @allure.title(\"出现漏开-redis数据和数据库的数据做比对\")\n    def test_dbquery_redis(self, var_manager, db_transaction, redis_cloudTrader_data_send):\n        with allure.step(\"1. 获取订单详情界面跟单账号数据\"):\n            cloudTrader_user_accounts_2 = var_manager.get_variable(\"cloudTrader_user_accounts_2\")\n            cloudOrderSend = var_manager.get_variable(\"cloudOrderSend\")\n            symbol = cloudOrderSend[\"symbol\"]\n    \n            sql = f\"\"\"\n                           SELECT *\n                           FROM follow_order_detail\n                           WHERE symbol LIKE %s\n                             AND source_user = %s\n                             AND account = %s\n                           \"\"\"\n            params = (\n                f\"%{symbol}%\",\n                cloudTrader_user_accounts_2,\n                cloudTrader_user_accounts_2,\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n            db_data = self.wait_for_database_record(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"create_time\"\n            )\n    \n        with allure.step(\"2. 转换Redis数据为可比较格式\"):\n            if not redis_cloudTrader_data_send:\n>               pytest.fail(\"Redis中未查询到订单数据\")\nE               Failed: Redis中未查询到订单数据\n\ntest_cloudTrader\\test_cloudstartegy_status.py:200: Failed"}, "description": "\n### 用例说明\n- 前置条件：有云策略和云跟单\n- 操作步骤：\n  1. 修改云策略 策略状态为关闭\n  2. 进行开仓\n  3. 跟单账号跟单失败，有漏单数据，把redis数据和MySQL数据进行校验\n  4. 修改云策略 策略状态为开启\n  5. 进行补单操作，然后平仓\n- 预期结果：云策略 策略状态为关闭，有漏单数据\n", "steps": [{"name": "1. 获取订单详情界面跟单账号数据", "status": "passed", "start": 1755247528678, "stop": 1755247540015}, {"name": "2. 转换Redis数据为可比较格式", "status": "failed", "statusDetails": {"message": "Failed: Redis中未查询到订单数据\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_816\\test_cloudTrader\\test_cloudstartegy_status.py\", line 200, in test_dbquery_redis\n    pytest.fail(\"Redis中未查询到订单数据\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "start": 1755247540015, "stop": 1755247540015}], "attachments": [{"name": "log", "source": "74c7e45f-094d-4c1b-b13c-b4f2effb5050-attachment.txt", "type": "text/plain"}], "start": 1755247528678, "stop": 1755247540016, "uuid": "7a65707c-ee74-4830-aee5-e00353ab39f0", "historyId": "f67eba6574e230f20a5854743d42246f", "testCaseId": "f67eba6574e230f20a5854743d42246f", "fullName": "test_cloudTrader.test_cloudstartegy_status.Testcloudstargy_status#test_dbquery_redis", "labels": [{"name": "feature", "value": "交易下单-云策略复制下单"}, {"name": "parentSuite", "value": "test_cloudTrader"}, {"name": "suite", "value": "test_cloudstartegy_status"}, {"name": "subSuite", "value": "Testcloudstargy_status"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "34324-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cloudTrader.test_cloudstartegy_status"}]}