{
  "uid" : "1377c64dd47361a7",
  "name" : "数据库校验-交易平仓-指令及订单详情数据检查",
  "fullName" : "test_cloudTrader.test_cloudOrderSend_level.TestcloudTrader_level#test_dbcloudTrader_cloudOrderClose",
  "historyId" : "ae705e88e8b8f38ae62531a4cfad2b89",
  "time" : {
    "start" : 1755253483865,
    "stop" : 1755253514082,
    "duration" : 30217
  },
  "status" : "broken",
  "statusMessage" : "TimeoutError: 等待超时（30秒），未查询到任何数据。\nSQL: \n                       SELECT \n                           fod.size,\n                           fod.close_no,\n                           fod.magical,\n                           fod.open_price,\n                           fod.symbol,\n                           fod.order_no,\n                           foi.true_total_lots,\n                           foi.order_no,\n                           foi.operation_type,\n                           foi.create_time,\n                           foi.status,\n                           foi.min_lot_size,\n                           foi.max_lot_size,\n                           foi.total_lots,\n                           foi.master_order,\n                           foi.total_orders\n                       FROM \n                           follow_order_detail fod\n                       INNER JOIN \n                           follow_order_instruct foi \n                       ON \n                           foi.master_order = fod.magical COLLATE utf8mb4_0900_ai_ci\n                       WHERE foi.operation_type = %s\n                           AND fod.account = %s\n                           \n参数: ('1', '300162')",
  "statusTrace" : "self = <lingkuan_816.test_cloudTrader.test_cloudOrderSend_level.TestcloudTrader_level object at 0x0000023005C1A070>\nvar_manager = <lingkuan_816.commons.variable_manager.VariableManager object at 0x0000023005BA0FA0>\ndb_transaction = <pymysql.connections.Connection object at 0x0000023005BA05E0>\n\n    @allure.title(\"数据库校验-交易平仓-指令及订单详情数据检查\")\n    def test_dbcloudTrader_cloudOrderClose(self, var_manager, db_transaction):\n        with allure.step(\"1. 获取订单详情界面跟单账号数据\"):\n            cloudTrader_user_accounts_4 = var_manager.get_variable(\"cloudTrader_user_accounts_4\")\n            sql = f\"\"\"\n                       SELECT\n                           fod.size,\n                           fod.close_no,\n                           fod.magical,\n                           fod.open_price,\n                           fod.symbol,\n                           fod.order_no,\n                           foi.true_total_lots,\n                           foi.order_no,\n                           foi.operation_type,\n                           foi.create_time,\n                           foi.status,\n                           foi.min_lot_size,\n                           foi.max_lot_size,\n                           foi.total_lots,\n                           foi.master_order,\n                           foi.total_orders\n                       FROM\n                           follow_order_detail fod\n                       INNER JOIN\n                           follow_order_instruct foi\n                       ON\n                           foi.master_order = fod.magical COLLATE utf8mb4_0900_ai_ci\n                       WHERE foi.operation_type = %s\n                           AND fod.account = %s\n                           \"\"\"\n            params = (\n                '1',\n                cloudTrader_user_accounts_4\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n>           db_data = self.wait_for_database_record(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"foi.create_time\"\n            )\n\ntest_cloudTrader\\test_cloudOrderSend_level.py:505: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_816.test_cloudTrader.test_cloudOrderSend_level.TestcloudTrader_level object at 0x0000023005C1A070>\ndb_transaction = <pymysql.connections.Connection object at 0x0000023005BA05E0>\nsql = '\\n                       SELECT \\n                           fod.size,\\n                           fod.close_no,\\n   ...           WHERE foi.operation_type = %s\\n                           AND fod.account = %s\\n                           '\nparams = ('1', '300162'), time_field = 'foi.create_time', time_range = 1\norder_by = 'create_time DESC', timeout = 30, poll_interval = 2\nstable_period = 3\n\n    def wait_for_database_record(\n            self,\n            db_transaction: pymysql.connections.Connection,\n            sql: str,\n            params: tuple = (),\n            time_field: Optional[str] = None,\n            time_range: int = MYSQL_TIME,\n            order_by: str = \"create_time DESC\",\n            timeout: int = WAIT_TIMEOUT,\n            poll_interval: int = POLL_INTERVAL,\n            stable_period: int = STBLE_PERIOD\n    ) -> List[Dict[str, Any]]:\n        \"\"\"\n        轮询等待数据库记录出现（等待数据稳定）\n        \"\"\"\n        import time\n        start_time = time.time()\n        last_result = None\n        stable_start_time = None\n        has_data = False  # 标记是否查询到过数据\n    \n        logger.info(\n            f\"[{DATETIME_NOW}] 开始等待数据库记录稳定 | \"\n            f\"SQL: {sql[:200]} | \"\n            f\"超时: {timeout}秒 | \"\n            f\"稳定期: {stable_period}秒\"\n        )\n    \n        while time.time() - start_time < timeout:\n            try:\n                db_transaction.commit()  # 刷新事务\n                result = self._execute_query(\n                    db_transaction, sql, params, time_field, order_by, time_range\n                )\n    \n                # 检查是否有数据\n                if len(result) > 0:\n                    has_data = True\n                    # 判断结果是否稳定（数量和内容都不变）\n                    if self._is_result_stable(result, last_result):\n                        if stable_start_time is None:\n                            stable_start_time = time.time()\n                            logger.debug(f\"[{DATETIME_NOW}] 数据首次稳定，开始计时\")\n                        elif time.time() - stable_start_time >= stable_period:\n                            logger.info(\n                                f\"[{DATETIME_NOW}] 数据已稳定{stable_period}秒（耗时{time.time() - start_time:.1f}秒）| \"\n                                f\"结果数: {len(result)}\"\n                            )\n                            return result\n                    else:\n                        stable_start_time = None  # 结果变化，重置稳定计时器\n                        logger.debug(f\"[{DATETIME_NOW}] 数据仍在变化，重置稳定计时器\")\n                else:\n                    # 结果为空，重置稳定计时器\n                    stable_start_time = None\n                    has_data = False\n                    logger.debug(f\"[{DATETIME_NOW}] 查询结果为空，继续等待\")\n    \n                last_result = result\n                elapsed = time.time() - start_time\n                logger.debug(\n                    f\"[{DATETIME_NOW}] 等待数据稳定（已等待{elapsed:.1f}秒）| \"\n                    f\"当前结果数: {len(result)} | \"\n                    f\"稳定时间: {time.time() - stable_start_time if stable_start_time else 0:.1f}/{stable_period}秒\"\n                )\n                time.sleep(poll_interval)\n    \n            except Exception as e:\n                logger.warning(f\"[{DATETIME_NOW}] 轮询查询异常: {str(e)} | 继续等待...\")\n                time.sleep(poll_interval)\n    \n        # 超时处理\n        final_result = self._execute_query(\n            db_transaction, sql, params, time_field, order_by, time_range\n        )\n    \n        if len(final_result) == 0:\n>           raise TimeoutError(\n                f\"等待超时（{timeout}秒），未查询到任何数据。\\n\"\n                f\"SQL: {sql}\\n\"\n                f\"参数: {params}\"\n            )\nE           TimeoutError: 等待超时（30秒），未查询到任何数据。\nE           SQL: \nE                                  SELECT \nE                                      fod.size,\nE                                      fod.close_no,\nE                                      fod.magical,\nE                                      fod.open_price,\nE                                      fod.symbol,\nE                                      fod.order_no,\nE                                      foi.true_total_lots,\nE                                      foi.order_no,\nE                                      foi.operation_type,\nE                                      foi.create_time,\nE                                      foi.status,\nE                                      foi.min_lot_size,\nE                                      foi.max_lot_size,\nE                                      foi.total_lots,\nE                                      foi.master_order,\nE                                      foi.total_orders\nE                                  FROM \nE                                      follow_order_detail fod\nE                                  INNER JOIN \nE                                      follow_order_instruct foi \nE                                  ON \nE                                      foi.master_order = fod.magical COLLATE utf8mb4_0900_ai_ci\nE                                  WHERE foi.operation_type = %s\nE                                      AND fod.account = %s\nE                                      \nE           参数: ('1', '300162')\n\ncommons\\api_base.py:531: TimeoutError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "db_transaction",
    "time" : {
      "start" : 1755253483819,
      "stop" : 1755253483865,
      "duration" : 46
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "TimeoutError: 等待超时（30秒），未查询到任何数据。\nSQL: \n                       SELECT \n                           fod.size,\n                           fod.close_no,\n                           fod.magical,\n                           fod.open_price,\n                           fod.symbol,\n                           fod.order_no,\n                           foi.true_total_lots,\n                           foi.order_no,\n                           foi.operation_type,\n                           foi.create_time,\n                           foi.status,\n                           foi.min_lot_size,\n                           foi.max_lot_size,\n                           foi.total_lots,\n                           foi.master_order,\n                           foi.total_orders\n                       FROM \n                           follow_order_detail fod\n                       INNER JOIN \n                           follow_order_instruct foi \n                       ON \n                           foi.master_order = fod.magical COLLATE utf8mb4_0900_ai_ci\n                       WHERE foi.operation_type = %s\n                           AND fod.account = %s\n                           \n参数: ('1', '300162')",
    "statusTrace" : "self = <lingkuan_816.test_cloudTrader.test_cloudOrderSend_level.TestcloudTrader_level object at 0x0000023005C1A070>\nvar_manager = <lingkuan_816.commons.variable_manager.VariableManager object at 0x0000023005BA0FA0>\ndb_transaction = <pymysql.connections.Connection object at 0x0000023005BA05E0>\n\n    @allure.title(\"数据库校验-交易平仓-指令及订单详情数据检查\")\n    def test_dbcloudTrader_cloudOrderClose(self, var_manager, db_transaction):\n        with allure.step(\"1. 获取订单详情界面跟单账号数据\"):\n            cloudTrader_user_accounts_4 = var_manager.get_variable(\"cloudTrader_user_accounts_4\")\n            sql = f\"\"\"\n                       SELECT\n                           fod.size,\n                           fod.close_no,\n                           fod.magical,\n                           fod.open_price,\n                           fod.symbol,\n                           fod.order_no,\n                           foi.true_total_lots,\n                           foi.order_no,\n                           foi.operation_type,\n                           foi.create_time,\n                           foi.status,\n                           foi.min_lot_size,\n                           foi.max_lot_size,\n                           foi.total_lots,\n                           foi.master_order,\n                           foi.total_orders\n                       FROM\n                           follow_order_detail fod\n                       INNER JOIN\n                           follow_order_instruct foi\n                       ON\n                           foi.master_order = fod.magical COLLATE utf8mb4_0900_ai_ci\n                       WHERE foi.operation_type = %s\n                           AND fod.account = %s\n                           \"\"\"\n            params = (\n                '1',\n                cloudTrader_user_accounts_4\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n>           db_data = self.wait_for_database_record(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"foi.create_time\"\n            )\n\ntest_cloudTrader\\test_cloudOrderSend_level.py:505: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_816.test_cloudTrader.test_cloudOrderSend_level.TestcloudTrader_level object at 0x0000023005C1A070>\ndb_transaction = <pymysql.connections.Connection object at 0x0000023005BA05E0>\nsql = '\\n                       SELECT \\n                           fod.size,\\n                           fod.close_no,\\n   ...           WHERE foi.operation_type = %s\\n                           AND fod.account = %s\\n                           '\nparams = ('1', '300162'), time_field = 'foi.create_time', time_range = 1\norder_by = 'create_time DESC', timeout = 30, poll_interval = 2\nstable_period = 3\n\n    def wait_for_database_record(\n            self,\n            db_transaction: pymysql.connections.Connection,\n            sql: str,\n            params: tuple = (),\n            time_field: Optional[str] = None,\n            time_range: int = MYSQL_TIME,\n            order_by: str = \"create_time DESC\",\n            timeout: int = WAIT_TIMEOUT,\n            poll_interval: int = POLL_INTERVAL,\n            stable_period: int = STBLE_PERIOD\n    ) -> List[Dict[str, Any]]:\n        \"\"\"\n        轮询等待数据库记录出现（等待数据稳定）\n        \"\"\"\n        import time\n        start_time = time.time()\n        last_result = None\n        stable_start_time = None\n        has_data = False  # 标记是否查询到过数据\n    \n        logger.info(\n            f\"[{DATETIME_NOW}] 开始等待数据库记录稳定 | \"\n            f\"SQL: {sql[:200]} | \"\n            f\"超时: {timeout}秒 | \"\n            f\"稳定期: {stable_period}秒\"\n        )\n    \n        while time.time() - start_time < timeout:\n            try:\n                db_transaction.commit()  # 刷新事务\n                result = self._execute_query(\n                    db_transaction, sql, params, time_field, order_by, time_range\n                )\n    \n                # 检查是否有数据\n                if len(result) > 0:\n                    has_data = True\n                    # 判断结果是否稳定（数量和内容都不变）\n                    if self._is_result_stable(result, last_result):\n                        if stable_start_time is None:\n                            stable_start_time = time.time()\n                            logger.debug(f\"[{DATETIME_NOW}] 数据首次稳定，开始计时\")\n                        elif time.time() - stable_start_time >= stable_period:\n                            logger.info(\n                                f\"[{DATETIME_NOW}] 数据已稳定{stable_period}秒（耗时{time.time() - start_time:.1f}秒）| \"\n                                f\"结果数: {len(result)}\"\n                            )\n                            return result\n                    else:\n                        stable_start_time = None  # 结果变化，重置稳定计时器\n                        logger.debug(f\"[{DATETIME_NOW}] 数据仍在变化，重置稳定计时器\")\n                else:\n                    # 结果为空，重置稳定计时器\n                    stable_start_time = None\n                    has_data = False\n                    logger.debug(f\"[{DATETIME_NOW}] 查询结果为空，继续等待\")\n    \n                last_result = result\n                elapsed = time.time() - start_time\n                logger.debug(\n                    f\"[{DATETIME_NOW}] 等待数据稳定（已等待{elapsed:.1f}秒）| \"\n                    f\"当前结果数: {len(result)} | \"\n                    f\"稳定时间: {time.time() - stable_start_time if stable_start_time else 0:.1f}/{stable_period}秒\"\n                )\n                time.sleep(poll_interval)\n    \n            except Exception as e:\n                logger.warning(f\"[{DATETIME_NOW}] 轮询查询异常: {str(e)} | 继续等待...\")\n                time.sleep(poll_interval)\n    \n        # 超时处理\n        final_result = self._execute_query(\n            db_transaction, sql, params, time_field, order_by, time_range\n        )\n    \n        if len(final_result) == 0:\n>           raise TimeoutError(\n                f\"等待超时（{timeout}秒），未查询到任何数据。\\n\"\n                f\"SQL: {sql}\\n\"\n                f\"参数: {params}\"\n            )\nE           TimeoutError: 等待超时（30秒），未查询到任何数据。\nE           SQL: \nE                                  SELECT \nE                                      fod.size,\nE                                      fod.close_no,\nE                                      fod.magical,\nE                                      fod.open_price,\nE                                      fod.symbol,\nE                                      fod.order_no,\nE                                      foi.true_total_lots,\nE                                      foi.order_no,\nE                                      foi.operation_type,\nE                                      foi.create_time,\nE                                      foi.status,\nE                                      foi.min_lot_size,\nE                                      foi.max_lot_size,\nE                                      foi.total_lots,\nE                                      foi.master_order,\nE                                      foi.total_orders\nE                                  FROM \nE                                      follow_order_detail fod\nE                                  INNER JOIN \nE                                      follow_order_instruct foi \nE                                  ON \nE                                      foi.master_order = fod.magical COLLATE utf8mb4_0900_ai_ci\nE                                  WHERE foi.operation_type = %s\nE                                      AND fod.account = %s\nE                                      \nE           参数: ('1', '300162')\n\ncommons\\api_base.py:531: TimeoutError",
    "steps" : [ {
      "name" : "1. 获取订单详情界面跟单账号数据",
      "time" : {
        "start" : 1755253483865,
        "stop" : 1755253514081,
        "duration" : 30216
      },
      "status" : "broken",
      "statusMessage" : "TimeoutError: 等待超时（30秒），未查询到任何数据。\nSQL: \n                       SELECT \n                           fod.size,\n                           fod.close_no,\n                           fod.magical,\n                           fod.open_price,\n                           fod.symbol,\n                           fod.order_no,\n                           foi.true_total_lots,\n                           foi.order_no,\n                           foi.operation_type,\n                           foi.create_time,\n                           foi.status,\n                           foi.min_lot_size,\n                           foi.max_lot_size,\n                           foi.total_lots,\n                           foi.master_order,\n                           foi.total_orders\n                       FROM \n                           follow_order_detail fod\n                       INNER JOIN \n                           follow_order_instruct foi \n                       ON \n                           foi.master_order = fod.magical COLLATE utf8mb4_0900_ai_ci\n                       WHERE foi.operation_type = %s\n                           AND fod.account = %s\n                           \n参数: ('1', '300162')\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\lingkuan_816\\test_cloudTrader\\test_cloudOrderSend_level.py\", line 505, in test_dbcloudTrader_cloudOrderClose\n    db_data = self.wait_for_database_record(\n  File \"D:\\pycharm_test\\lingkuan_816\\commons\\api_base.py\", line 531, in wait_for_database_record\n    raise TimeoutError(\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true,
      "stepsCount" : 0
    } ],
    "attachments" : [ {
      "uid" : "867541b0d7156309",
      "name" : "log",
      "source" : "867541b0d7156309.txt",
      "type" : "text/plain",
      "size" : 81963
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 1
  },
  "afterStages" : [ {
    "name" : "db_transaction::0",
    "time" : {
      "start" : 1755253514095,
      "stop" : 1755253514140,
      "duration" : 45
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "交易下单-云策略复制下单-漏开"
  }, {
    "name" : "parentSuite",
    "value" : "test_cloudTrader"
  }, {
    "name" : "suite",
    "value" : "test_cloudOrderSend_level"
  }, {
    "name" : "subSuite",
    "value" : "TestcloudTrader_level"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "39188-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_cloudTrader.test_cloudOrderSend_level"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "1377c64dd47361a7.json",
  "parameterValues" : [ ]
}