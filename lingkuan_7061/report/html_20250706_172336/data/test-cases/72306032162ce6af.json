{"uid":"72306032162ce6af","name":"VPS管理-VPS列表列表-清空VPS数据","fullName":"test_foundation.test_delete.TestDeleteUser#test_closeVps","historyId":"101bfd3fc318e10679207a46694b7762","time":{"start":1751794052107,"stop":1751794060250,"duration":8143},"status":"failed","statusMessage":"AssertionError: 响应msg字段应为success\nURL: http://39.99.136.49:9000/mascontrol/vps/deleteVps?vpsId=487\nJSON路径: $.msg\n实际值: 服务器异常，请稍后再试\n期望值: success","statusTrace":"self = <lingkuan_7061.test_foundation.test_delete.TestDeleteUser object at 0x0000013A40F04490>\napi_session = <lingkuan_7061.commons.session.EnvironmentSession object at 0x0000013A41124D30>\nvar_manager = <lingkuan_7061.commons.variable_manager.VariableManager object at 0x0000013A410246D0>\nlogged_session = <lingkuan_7061.commons.session.EnvironmentSession object at 0x0000013A41124D30>\ndb_transaction = <pymysql.connections.Connection object at 0x0000013A40F1F670>\n\n    @allure.title(\"VPS管理-VPS列表列表-清空VPS数据\")\n    def test_closeVps(self, api_session, var_manager, logged_session, db_transaction):\n        vps_list_id = var_manager.get_variable(\"vps_list_id\")\n        # 定义白名单（不可清空数据的ID列表）\n        WHITE_LIST_IDS = [\"6\", \"91\", \"22\", \"49\"]\n        if vps_list_id in WHITE_LIST_IDS:\n            logging.warning(f\"VPS ID {vps_list_id} 在白名单中，跳过清空数据操作。\")\n            assert False, f\"VPS ID {vps_list_id} 在白名单中，不能清空数据。\"\n    \n        # 1. 发送清空VPS数据请求\n        params = {\"vpsId\": f\"{vps_list_id}\"}\n        response = self.send_get_request(\n            api_session,\n            '/mascontrol/vps/deleteVps',\n            params=params\n        )\n    \n        # 2. 验证响应状态码\n        self.assert_response_status(\n            response,\n            200,\n            \"清空VPS数据失败\"\n        )\n    \n        # 3. 验证JSON返回内容\n>       self.assert_json_value(\n            response,\n            \"$.msg\",\n            \"success\",\n            \"响应msg字段应为success\"\n        )\n\ntest_foundation\\test_delete.py:101: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_7061.test_foundation.test_delete.TestDeleteUser object at 0x0000013A40F04490>\nresponse = <Response [200]>, json_path = '$.msg', expected_value = 'success'\nerror_msg = '响应msg字段应为success'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg):\n        \"\"\"断言JSON路径对应的值（增强错误处理）\"\"\"\n        try:\n            actual_value = response.extract_jsonpath(json_path)\n>           assert actual_value == expected_value, (\n                f\"{error_msg}\\n\"\n                f\"URL: {response.url}\\n\"\n                f\"JSON路径: {json_path}\\n\"\n                f\"实际值: {actual_value}\\n\"\n                f\"期望值: {expected_value}\"\n            )\nE           AssertionError: 响应msg字段应为success\nE           URL: http://39.99.136.49:9000/mascontrol/vps/deleteVps?vpsId=487\nE           JSON路径: $.msg\nE           实际值: 服务器异常，请稍后再试\nE           期望值: success\n\ncommons\\api_base.py:232: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"environment","time":{"start":1751793816273,"stop":1751793816273,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"db","time":{"start":1751793816274,"stop":1751793816523,"duration":249},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"db_config","time":{"start":1751793816274,"stop":1751793816274,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"var_manager","time":{"start":1751794045907,"stop":1751794045907,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"api_session","time":{"start":1751794051820,"stop":1751794051820,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"logged_session","time":{"start":1751794051820,"stop":1751794052053,"duration":233},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"db_transaction","time":{"start":1751794052053,"stop":1751794052106,"duration":53},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: 响应msg字段应为success\nURL: http://39.99.136.49:9000/mascontrol/vps/deleteVps?vpsId=487\nJSON路径: $.msg\n实际值: 服务器异常，请稍后再试\n期望值: success","statusTrace":"self = <lingkuan_7061.test_foundation.test_delete.TestDeleteUser object at 0x0000013A40F04490>\napi_session = <lingkuan_7061.commons.session.EnvironmentSession object at 0x0000013A41124D30>\nvar_manager = <lingkuan_7061.commons.variable_manager.VariableManager object at 0x0000013A410246D0>\nlogged_session = <lingkuan_7061.commons.session.EnvironmentSession object at 0x0000013A41124D30>\ndb_transaction = <pymysql.connections.Connection object at 0x0000013A40F1F670>\n\n    @allure.title(\"VPS管理-VPS列表列表-清空VPS数据\")\n    def test_closeVps(self, api_session, var_manager, logged_session, db_transaction):\n        vps_list_id = var_manager.get_variable(\"vps_list_id\")\n        # 定义白名单（不可清空数据的ID列表）\n        WHITE_LIST_IDS = [\"6\", \"91\", \"22\", \"49\"]\n        if vps_list_id in WHITE_LIST_IDS:\n            logging.warning(f\"VPS ID {vps_list_id} 在白名单中，跳过清空数据操作。\")\n            assert False, f\"VPS ID {vps_list_id} 在白名单中，不能清空数据。\"\n    \n        # 1. 发送清空VPS数据请求\n        params = {\"vpsId\": f\"{vps_list_id}\"}\n        response = self.send_get_request(\n            api_session,\n            '/mascontrol/vps/deleteVps',\n            params=params\n        )\n    \n        # 2. 验证响应状态码\n        self.assert_response_status(\n            response,\n            200,\n            \"清空VPS数据失败\"\n        )\n    \n        # 3. 验证JSON返回内容\n>       self.assert_json_value(\n            response,\n            \"$.msg\",\n            \"success\",\n            \"响应msg字段应为success\"\n        )\n\ntest_foundation\\test_delete.py:101: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_7061.test_foundation.test_delete.TestDeleteUser object at 0x0000013A40F04490>\nresponse = <Response [200]>, json_path = '$.msg', expected_value = 'success'\nerror_msg = '响应msg字段应为success'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg):\n        \"\"\"断言JSON路径对应的值（增强错误处理）\"\"\"\n        try:\n            actual_value = response.extract_jsonpath(json_path)\n>           assert actual_value == expected_value, (\n                f\"{error_msg}\\n\"\n                f\"URL: {response.url}\\n\"\n                f\"JSON路径: {json_path}\\n\"\n                f\"实际值: {actual_value}\\n\"\n                f\"期望值: {expected_value}\"\n            )\nE           AssertionError: 响应msg字段应为success\nE           URL: http://39.99.136.49:9000/mascontrol/vps/deleteVps?vpsId=487\nE           JSON路径: $.msg\nE           实际值: 服务器异常，请稍后再试\nE           期望值: success\n\ncommons\\api_base.py:232: AssertionError","steps":[{"name":"发送GET请求到 /mascontrol/vps/deleteVps","time":{"start":1751794052107,"stop":1751794060241,"duration":8134},"status":"passed","steps":[],"attachments":[{"uid":"e9a49360d2e7b379","name":"请求参数","source":"e9a49360d2e7b379.json","type":"application/json","size":16},{"uid":"3665490ac53942e1","name":"响应结果","source":"3665490ac53942e1.txt","type":"text/plain","size":89}],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":2}],"attachments":[{"uid":"53a3a6c0e4a26e75","name":"log","source":"53a3a6c0e4a26e75.txt","type":"text/plain","size":4632}],"parameters":[],"stepsCount":1,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":3},"afterStages":[{"name":"db_transaction::0","time":{"start":1751794060321,"stop":1751794060369,"duration":48},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"logged_session::0","time":{"start":1751794060370,"stop":1751794060370,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"api_session::0","time":{"start":1751794060371,"stop":1751794060371,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"db::0","time":{"start":1751794180946,"stop":1751794180947,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"var_manager::0","time":{"start":1751794180951,"stop":1751794180952,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"feature","value":"删除基本账号"},{"name":"parentSuite","value":"test_foundation"},{"name":"suite","value":"test_delete"},{"name":"subSuite","value":"TestDeleteUser"},{"name":"host","value":"xujunhao"},{"name":"thread","value":"5284-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_foundation.test_delete"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"72306032162ce6af.json","parameterValues":[]}