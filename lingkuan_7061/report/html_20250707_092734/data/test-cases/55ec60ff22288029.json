{
  "uid" : "55ec60ff22288029",
  "name" : "数据库校验-策略开仓-跟单开仓指令",
  "fullName" : "test_foundation.test_vps_Leakage_level.TestLeakagelevel#test_dbquery_orderSend_addsalve",
  "historyId" : "9d2182a76bac04540a0ad2df94940fc0",
  "time" : {
    "start" : 1751851780396,
    "stop" : 1751851780624,
    "duration" : 228
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: 订单详情的订单号：['1565093990111', '3406312051120', '8538917193898']和平仓指令的订单号：['1011497378315', '6765506090846']不一致",
  "statusTrace" : "self = <lingkuan_7061.test_foundation.test_vps_Leakage_level.TestLeakagelevel object at 0x000001816131BE50>\nvar_manager = <lingkuan_7061.commons.variable_manager.VariableManager object at 0x0000018161DF7190>\ndb_transaction = <pymysql.connections.Connection object at 0x0000018161C9A700>\n\n    @allure.title(\"数据库校验-策略开仓-跟单开仓指令\")\n    def test_dbquery_orderSend_addsalve(self, var_manager, db_transaction):\n        with allure.step(\"1. 根据订单详情数据库数据，校验跟单指令数据是否正确\"):\n            vps_trader_id = var_manager.get_variable(\"vps_trader_id\")\n            trader_ordersend = var_manager.get_variable(\"trader_ordersend\")\n    \n            table_name = trader_ordersend[\"table\"]\n            symbol = trader_ordersend[\"symbol\"]\n    \n            sql = f\"\"\"\n                    SELECT *\n                    FROM {table_name}\n                    WHERE symbol LIKE %s\n                      AND instruction_type = %s\n                      AND if_follow = %s\n                      AND master_order_status = %s\n                      AND type = %s\n                      AND trader_id = %s\n                    \"\"\"\n            params = (\n                f\"%{symbol}%\",\n                \"2\",\n                \"1\",\n                \"0\",\n                trader_ordersend[\"type\"],\n                vps_trader_id,\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n            db_data = self.wait_for_database_record(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"create_time\",  # 按创建时间过滤\n                time_range=MYSQL_TIME,  # 只查前后1分钟的数据\n                timeout=WAIT_TIMEOUT,  # 最多等60秒\n                poll_interval=POLL_INTERVAL,  # 每2秒查一次\n                order_by=\"create_time DESC\"  # 按创建时间倒序\n            )\n    \n        with allure.step(\"2. 验证下单指令的跟单账号数据\"):\n            send_nos = var_manager.get_variable(\"send_nos\")\n            order_no = [record[\"order_no\"] for record in db_data]\n            logging.info(f\"订单详情的订单号：{send_nos}下单指令的订单号：{order_no}\")\n>           self.assert_list_equal_ignore_order(\n                send_nos,\n                order_no,\n                f\"订单详情的订单号：{send_nos}和平仓指令的订单号：{order_no}不一致\"\n            )\n\ntest_foundation\\test_vps_Leakage_level.py:362: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_7061.test_foundation.test_vps_Leakage_level.TestLeakagelevel object at 0x000001816131BE50>\nlist1 = ['1565093990111', '3406312051120', '8538917193898']\nlist2 = ['1011497378315', '6765506090846']\nerror_msg = \"订单详情的订单号：['1565093990111', '3406312051120', '8538917193898']和平仓指令的订单号：['1011497378315', '6765506090846']不一致\"\n\n    def assert_list_equal_ignore_order(self, list1, list2, error_msg=\"列表元素不相等（忽略顺序）\"):\n        \"\"\"断言两个列表元素相同（忽略顺序）\"\"\"\n        from collections import Counter\n>       assert Counter(list1) == Counter(list2), error_msg\nE       AssertionError: 订单详情的订单号：['1565093990111', '3406312051120', '8538917193898']和平仓指令的订单号：['1011497378315', '6765506090846']不一致\n\ncommons\\api_base.py:499: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "var_manager",
    "time" : {
      "start" : 1751851766369,
      "stop" : 1751851766370,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "environment",
    "time" : {
      "start" : 1751851654967,
      "stop" : 1751851654967,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db_transaction",
    "time" : {
      "start" : 1751851780350,
      "stop" : 1751851780395,
      "duration" : 45
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db_config",
    "time" : {
      "start" : 1751851654968,
      "stop" : 1751851654968,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db",
    "time" : {
      "start" : 1751851654968,
      "stop" : 1751851655196,
      "duration" : 228
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: 订单详情的订单号：['1565093990111', '3406312051120', '8538917193898']和平仓指令的订单号：['1011497378315', '6765506090846']不一致",
    "statusTrace" : "self = <lingkuan_7061.test_foundation.test_vps_Leakage_level.TestLeakagelevel object at 0x000001816131BE50>\nvar_manager = <lingkuan_7061.commons.variable_manager.VariableManager object at 0x0000018161DF7190>\ndb_transaction = <pymysql.connections.Connection object at 0x0000018161C9A700>\n\n    @allure.title(\"数据库校验-策略开仓-跟单开仓指令\")\n    def test_dbquery_orderSend_addsalve(self, var_manager, db_transaction):\n        with allure.step(\"1. 根据订单详情数据库数据，校验跟单指令数据是否正确\"):\n            vps_trader_id = var_manager.get_variable(\"vps_trader_id\")\n            trader_ordersend = var_manager.get_variable(\"trader_ordersend\")\n    \n            table_name = trader_ordersend[\"table\"]\n            symbol = trader_ordersend[\"symbol\"]\n    \n            sql = f\"\"\"\n                    SELECT *\n                    FROM {table_name}\n                    WHERE symbol LIKE %s\n                      AND instruction_type = %s\n                      AND if_follow = %s\n                      AND master_order_status = %s\n                      AND type = %s\n                      AND trader_id = %s\n                    \"\"\"\n            params = (\n                f\"%{symbol}%\",\n                \"2\",\n                \"1\",\n                \"0\",\n                trader_ordersend[\"type\"],\n                vps_trader_id,\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n            db_data = self.wait_for_database_record(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"create_time\",  # 按创建时间过滤\n                time_range=MYSQL_TIME,  # 只查前后1分钟的数据\n                timeout=WAIT_TIMEOUT,  # 最多等60秒\n                poll_interval=POLL_INTERVAL,  # 每2秒查一次\n                order_by=\"create_time DESC\"  # 按创建时间倒序\n            )\n    \n        with allure.step(\"2. 验证下单指令的跟单账号数据\"):\n            send_nos = var_manager.get_variable(\"send_nos\")\n            order_no = [record[\"order_no\"] for record in db_data]\n            logging.info(f\"订单详情的订单号：{send_nos}下单指令的订单号：{order_no}\")\n>           self.assert_list_equal_ignore_order(\n                send_nos,\n                order_no,\n                f\"订单详情的订单号：{send_nos}和平仓指令的订单号：{order_no}不一致\"\n            )\n\ntest_foundation\\test_vps_Leakage_level.py:362: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_7061.test_foundation.test_vps_Leakage_level.TestLeakagelevel object at 0x000001816131BE50>\nlist1 = ['1565093990111', '3406312051120', '8538917193898']\nlist2 = ['1011497378315', '6765506090846']\nerror_msg = \"订单详情的订单号：['1565093990111', '3406312051120', '8538917193898']和平仓指令的订单号：['1011497378315', '6765506090846']不一致\"\n\n    def assert_list_equal_ignore_order(self, list1, list2, error_msg=\"列表元素不相等（忽略顺序）\"):\n        \"\"\"断言两个列表元素相同（忽略顺序）\"\"\"\n        from collections import Counter\n>       assert Counter(list1) == Counter(list2), error_msg\nE       AssertionError: 订单详情的订单号：['1565093990111', '3406312051120', '8538917193898']和平仓指令的订单号：['1011497378315', '6765506090846']不一致\n\ncommons\\api_base.py:499: AssertionError",
    "steps" : [ {
      "name" : "1. 根据订单详情数据库数据，校验跟单指令数据是否正确",
      "time" : {
        "start" : 1751851780396,
        "stop" : 1751851780624,
        "duration" : 228
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0
    }, {
      "name" : "2. 验证下单指令的跟单账号数据",
      "time" : {
        "start" : 1751851780624,
        "stop" : 1751851780624,
        "duration" : 0
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: 订单详情的订单号：['1565093990111', '3406312051120', '8538917193898']和平仓指令的订单号：['1011497378315', '6765506090846']不一致\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\lingkuan_7061\\test_foundation\\test_vps_Leakage_level.py\", line 362, in test_dbquery_orderSend_addsalve\n    self.assert_list_equal_ignore_order(\n  File \"D:\\pycharm_test\\lingkuan_7061\\commons\\api_base.py\", line 499, in assert_list_equal_ignore_order\n    assert Counter(list1) == Counter(list2), error_msg\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 0
    } ],
    "attachments" : [ {
      "uid" : "d703a4de0caf99f2",
      "name" : "log",
      "source" : "d703a4de0caf99f2.txt",
      "type" : "text/plain",
      "size" : 2649
    } ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1
  },
  "afterStages" : [ {
    "name" : "var_manager::0",
    "time" : {
      "start" : 1751852953399,
      "stop" : 1751852953400,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db_transaction::0",
    "time" : {
      "start" : 1751851780646,
      "stop" : 1751851780693,
      "duration" : 47
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db::0",
    "time" : {
      "start" : 1751852953386,
      "stop" : 1751852953386,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "VPS策略下单-漏平"
  }, {
    "name" : "parentSuite",
    "value" : "test_foundation"
  }, {
    "name" : "suite",
    "value" : "test_vps_Leakage_level"
  }, {
    "name" : "subSuite",
    "value" : "TestLeakagelevel"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "8168-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_foundation.test_vps_Leakage_level"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "55ec60ff22288029.json",
  "parameterValues" : [ ]
}