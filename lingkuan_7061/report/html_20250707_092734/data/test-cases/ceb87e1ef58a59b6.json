{
  "uid" : "ceb87e1ef58a59b6",
  "name" : "数据库校验-策略平仓-持仓检查跟单账号数据",
  "fullName" : "test_foundation.test_vps_Leakage_level.TestLeakagelevel#test_dbquery_addsalve_clsesdetail2",
  "historyId" : "bb85b9b0cafbf5f977e2d952260b7a56",
  "time" : {
    "start" : 1751851864668,
    "stop" : 1751851932784,
    "duration" : 68116
  },
  "status" : "broken",
  "statusMessage" : "TimeoutError: 等待超时（60秒），未找到记录。\nSQL: \n                    SELECT * \n                    FROM follow_order_detail \n                    WHERE symbol LIKE %s \n                      AND source_user = %s\n                      AND account = %s\n                    \n参数: ('%XAUUSD%', '119999305', '119999356')\n最终结果数: 0",
  "statusTrace" : "self = <lingkuan_7061.test_foundation.test_vps_Leakage_level.TestLeakagelevel object at 0x0000018161307130>\nvar_manager = <lingkuan_7061.commons.variable_manager.VariableManager object at 0x0000018161DF7190>\ndb_transaction = <pymysql.connections.Connection object at 0x0000018161C9A700>\n\n    @allure.title(\"数据库校验-策略平仓-持仓检查跟单账号数据\")\n    def test_dbquery_addsalve_clsesdetail2(self, var_manager, db_transaction):\n        with allure.step(\"1. 获取订单详情界面跟单账号数据\"):\n            trader_ordersend = var_manager.get_variable(\"trader_ordersend\")\n            vps_trader = var_manager.get_variable(\"vps_trader\")\n            user_accounts_1 = var_manager.get_variable(\"user_accounts_1\")\n            table_name = trader_ordersend[\"table_detail\"]\n            symbol = trader_ordersend[\"symbol\"]\n    \n            sql = f\"\"\"\n                    SELECT *\n                    FROM {table_name}\n                    WHERE symbol LIKE %s\n                      AND source_user = %s\n                      AND account = %s\n                    \"\"\"\n            params = (\n                f\"%{symbol}%\",\n                vps_trader[\"account\"],\n                user_accounts_1,\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n>           db_data = self.wait_for_database_record(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"create_time\",  # 按创建时间过滤\n                time_range=MYSQL_TIME,  # 只查前后1分钟的数据\n                timeout=WAIT_TIMEOUT,  # 最多等60秒\n                poll_interval=POLL_INTERVAL,  # 每2秒查一次\n                order_by=\"create_time DESC\"  # 按创建时间倒序\n            )\n\ntest_foundation\\test_vps_Leakage_level.py:692: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_7061.test_foundation.test_vps_Leakage_level.TestLeakagelevel object at 0x0000018161307130>\ndb_transaction = <pymysql.connections.Connection object at 0x0000018161C9A700>\nsql = '\\n                    SELECT * \\n                    FROM follow_order_detail \\n                    WHERE symbol LIKE %s \\n                      AND source_user = %s\\n                      AND account = %s\\n                    '\nparams = ('%XAUUSD%', '119999305', '119999356'), time_field = 'create_time'\ntime_range = 1, order_by = 'create_time DESC', timeout = 60, poll_interval = 2\n\n    def wait_for_database_record(self, db_transaction: pymysql.connections.Connection,\n                                 sql: str,\n                                 params: tuple = (),\n                                 time_field: Optional[str] = None,\n                                 time_range: int = 1,\n                                 order_by: str = \"create_time DESC\",\n                                 timeout: int = 60,\n                                 poll_interval: int = 2) -> List[Dict[str, Any]]:\n        \"\"\"轮询等待数据库记录出现（增强异常处理）\"\"\"\n        import time\n        start_time = time.time()\n        logger.info(f\"[{DATETIME_NOW}] 开始等待数据库记录 | SQL: {sql[:200]} | 超时: {timeout}秒\")\n    \n        while time.time() - start_time < timeout:\n            try:\n                db_transaction.commit()  # 刷新事务\n    \n                if time_field:\n                    result = self.query_database_with_time(\n                        db_transaction=db_transaction,\n                        sql=sql,\n                        params=params,\n                        time_field=time_field,\n                        time_range_minutes=time_range,\n                        order_by=order_by\n                    )\n                else:\n                    result = self.query_database(\n                        db_transaction=db_transaction,\n                        sql=sql,\n                        params=params,\n                        order_by=order_by\n                    )\n    \n                if result:\n                    logger.info(f\"[{DATETIME_NOW}] 记录已找到（耗时{time.time() - start_time:.1f}秒）| 结果数: {len(result)}\")\n                    return result\n    \n                elapsed = time.time() - start_time\n                logger.info(f\"[{DATETIME_NOW}] 未找到记录（已等待{elapsed:.1f}秒）| 剩余时间: {timeout - elapsed:.1f}秒\")\n                time.sleep(poll_interval)\n    \n            except Exception as e:\n                logger.warning(f\"[{DATETIME_NOW}] 轮询查询异常: {str(e)} | 继续等待...\")\n                time.sleep(poll_interval)\n    \n        # 超时处理\n        db_transaction.commit()\n        final_result = self.query_database_with_time(\n            db_transaction=db_transaction,\n            sql=sql,\n            params=params,\n            time_field=time_field,\n            time_range_minutes=time_range,\n            order_by=order_by\n        ) if time_field else self.query_database(\n            db_transaction=db_transaction,\n            sql=sql,\n            params=params,\n            order_by=order_by\n        )\n    \n>       raise TimeoutError(\n            f\"等待超时（{timeout}秒），未找到记录。\\n\"\n            f\"SQL: {sql}\\n\"\n            f\"参数: {params}\\n\"\n            f\"最终结果数: {len(final_result)}\"\n        )\nE       TimeoutError: 等待超时（60秒），未找到记录。\nE       SQL: \nE                           SELECT * \nE                           FROM follow_order_detail \nE                           WHERE symbol LIKE %s \nE                             AND source_user = %s\nE                             AND account = %s\nE                           \nE       参数: ('%XAUUSD%', '119999305', '119999356')\nE       最终结果数: 0\n\ncommons\\api_base.py:454: TimeoutError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "var_manager",
    "time" : {
      "start" : 1751851766369,
      "stop" : 1751851766370,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "environment",
    "time" : {
      "start" : 1751851654967,
      "stop" : 1751851654967,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db_transaction",
    "time" : {
      "start" : 1751851864625,
      "stop" : 1751851864668,
      "duration" : 43
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db_config",
    "time" : {
      "start" : 1751851654968,
      "stop" : 1751851654968,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db",
    "time" : {
      "start" : 1751851654968,
      "stop" : 1751851655196,
      "duration" : 228
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "TimeoutError: 等待超时（60秒），未找到记录。\nSQL: \n                    SELECT * \n                    FROM follow_order_detail \n                    WHERE symbol LIKE %s \n                      AND source_user = %s\n                      AND account = %s\n                    \n参数: ('%XAUUSD%', '119999305', '119999356')\n最终结果数: 0",
    "statusTrace" : "self = <lingkuan_7061.test_foundation.test_vps_Leakage_level.TestLeakagelevel object at 0x0000018161307130>\nvar_manager = <lingkuan_7061.commons.variable_manager.VariableManager object at 0x0000018161DF7190>\ndb_transaction = <pymysql.connections.Connection object at 0x0000018161C9A700>\n\n    @allure.title(\"数据库校验-策略平仓-持仓检查跟单账号数据\")\n    def test_dbquery_addsalve_clsesdetail2(self, var_manager, db_transaction):\n        with allure.step(\"1. 获取订单详情界面跟单账号数据\"):\n            trader_ordersend = var_manager.get_variable(\"trader_ordersend\")\n            vps_trader = var_manager.get_variable(\"vps_trader\")\n            user_accounts_1 = var_manager.get_variable(\"user_accounts_1\")\n            table_name = trader_ordersend[\"table_detail\"]\n            symbol = trader_ordersend[\"symbol\"]\n    \n            sql = f\"\"\"\n                    SELECT *\n                    FROM {table_name}\n                    WHERE symbol LIKE %s\n                      AND source_user = %s\n                      AND account = %s\n                    \"\"\"\n            params = (\n                f\"%{symbol}%\",\n                vps_trader[\"account\"],\n                user_accounts_1,\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n>           db_data = self.wait_for_database_record(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"create_time\",  # 按创建时间过滤\n                time_range=MYSQL_TIME,  # 只查前后1分钟的数据\n                timeout=WAIT_TIMEOUT,  # 最多等60秒\n                poll_interval=POLL_INTERVAL,  # 每2秒查一次\n                order_by=\"create_time DESC\"  # 按创建时间倒序\n            )\n\ntest_foundation\\test_vps_Leakage_level.py:692: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_7061.test_foundation.test_vps_Leakage_level.TestLeakagelevel object at 0x0000018161307130>\ndb_transaction = <pymysql.connections.Connection object at 0x0000018161C9A700>\nsql = '\\n                    SELECT * \\n                    FROM follow_order_detail \\n                    WHERE symbol LIKE %s \\n                      AND source_user = %s\\n                      AND account = %s\\n                    '\nparams = ('%XAUUSD%', '119999305', '119999356'), time_field = 'create_time'\ntime_range = 1, order_by = 'create_time DESC', timeout = 60, poll_interval = 2\n\n    def wait_for_database_record(self, db_transaction: pymysql.connections.Connection,\n                                 sql: str,\n                                 params: tuple = (),\n                                 time_field: Optional[str] = None,\n                                 time_range: int = 1,\n                                 order_by: str = \"create_time DESC\",\n                                 timeout: int = 60,\n                                 poll_interval: int = 2) -> List[Dict[str, Any]]:\n        \"\"\"轮询等待数据库记录出现（增强异常处理）\"\"\"\n        import time\n        start_time = time.time()\n        logger.info(f\"[{DATETIME_NOW}] 开始等待数据库记录 | SQL: {sql[:200]} | 超时: {timeout}秒\")\n    \n        while time.time() - start_time < timeout:\n            try:\n                db_transaction.commit()  # 刷新事务\n    \n                if time_field:\n                    result = self.query_database_with_time(\n                        db_transaction=db_transaction,\n                        sql=sql,\n                        params=params,\n                        time_field=time_field,\n                        time_range_minutes=time_range,\n                        order_by=order_by\n                    )\n                else:\n                    result = self.query_database(\n                        db_transaction=db_transaction,\n                        sql=sql,\n                        params=params,\n                        order_by=order_by\n                    )\n    \n                if result:\n                    logger.info(f\"[{DATETIME_NOW}] 记录已找到（耗时{time.time() - start_time:.1f}秒）| 结果数: {len(result)}\")\n                    return result\n    \n                elapsed = time.time() - start_time\n                logger.info(f\"[{DATETIME_NOW}] 未找到记录（已等待{elapsed:.1f}秒）| 剩余时间: {timeout - elapsed:.1f}秒\")\n                time.sleep(poll_interval)\n    \n            except Exception as e:\n                logger.warning(f\"[{DATETIME_NOW}] 轮询查询异常: {str(e)} | 继续等待...\")\n                time.sleep(poll_interval)\n    \n        # 超时处理\n        db_transaction.commit()\n        final_result = self.query_database_with_time(\n            db_transaction=db_transaction,\n            sql=sql,\n            params=params,\n            time_field=time_field,\n            time_range_minutes=time_range,\n            order_by=order_by\n        ) if time_field else self.query_database(\n            db_transaction=db_transaction,\n            sql=sql,\n            params=params,\n            order_by=order_by\n        )\n    \n>       raise TimeoutError(\n            f\"等待超时（{timeout}秒），未找到记录。\\n\"\n            f\"SQL: {sql}\\n\"\n            f\"参数: {params}\\n\"\n            f\"最终结果数: {len(final_result)}\"\n        )\nE       TimeoutError: 等待超时（60秒），未找到记录。\nE       SQL: \nE                           SELECT * \nE                           FROM follow_order_detail \nE                           WHERE symbol LIKE %s \nE                             AND source_user = %s\nE                             AND account = %s\nE                           \nE       参数: ('%XAUUSD%', '119999305', '119999356')\nE       最终结果数: 0\n\ncommons\\api_base.py:454: TimeoutError",
    "steps" : [ {
      "name" : "1. 获取订单详情界面跟单账号数据",
      "time" : {
        "start" : 1751851864668,
        "stop" : 1751851932783,
        "duration" : 68115
      },
      "status" : "broken",
      "statusMessage" : "TimeoutError: 等待超时（60秒），未找到记录。\nSQL: \n                    SELECT * \n                    FROM follow_order_detail \n                    WHERE symbol LIKE %s \n                      AND source_user = %s\n                      AND account = %s\n                    \n参数: ('%XAUUSD%', '119999305', '119999356')\n最终结果数: 0\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\lingkuan_7061\\test_foundation\\test_vps_Leakage_level.py\", line 692, in test_dbquery_addsalve_clsesdetail2\n    db_data = self.wait_for_database_record(\n  File \"D:\\pycharm_test\\lingkuan_7061\\commons\\api_base.py\", line 454, in wait_for_database_record\n    raise TimeoutError(\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 0
    } ],
    "attachments" : [ {
      "uid" : "b86688dc0b2875b0",
      "name" : "log",
      "source" : "b86688dc0b2875b0.txt",
      "type" : "text/plain",
      "size" : 14396
    } ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1
  },
  "afterStages" : [ {
    "name" : "var_manager::0",
    "time" : {
      "start" : 1751852953399,
      "stop" : 1751852953400,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db_transaction::0",
    "time" : {
      "start" : 1751851932796,
      "stop" : 1751851932872,
      "duration" : 76
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db::0",
    "time" : {
      "start" : 1751852953386,
      "stop" : 1751852953386,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "VPS策略下单-漏平"
  }, {
    "name" : "parentSuite",
    "value" : "test_foundation"
  }, {
    "name" : "suite",
    "value" : "test_vps_Leakage_level"
  }, {
    "name" : "subSuite",
    "value" : "TestLeakagelevel"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "8168-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_foundation.test_vps_Leakage_level"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "ceb87e1ef58a59b6.json",
  "parameterValues" : [ ]
}