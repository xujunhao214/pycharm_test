{
  "uid" : "7ac4e862e458cf01",
  "name" : "数据库校验-策略平仓-跟单平仓指令",
  "fullName" : "test_foundation.test_vps_ordersend.TestVPSOrderSend#test_dbquery_close_addsalve",
  "historyId" : "3b73f068357e8008d737694b04aa8e75",
  "time" : {
    "start" : 1751851766028,
    "stop" : 1751851766271,
    "duration" : 243
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: 订单详情的订单号：['2734859607691', '9175102069630']和平仓指令的订单号：['1468805769631', '9175102069630', '2734859607691']不一致",
  "statusTrace" : "self = <lingkuan_7061.test_foundation.test_vps_ordersend.TestVPSOrderSend object at 0x00000181613B44F0>\nvar_manager = <lingkuan_7061.commons.variable_manager.VariableManager object at 0x0000018161D185E0>\ndb_transaction = <pymysql.connections.Connection object at 0x0000018161C9A700>\n\n    @allure.title(\"数据库校验-策略平仓-跟单平仓指令\")\n    def test_dbquery_close_addsalve(self, var_manager, db_transaction):\n        with allure.step(\"1. 根据订单详情数据库数据，校验跟单指令数据是否正确\"):\n            vps_trader_id = var_manager.get_variable(\"vps_trader_id\")\n            trader_ordersend = var_manager.get_variable(\"trader_ordersend\")\n    \n            table_name = trader_ordersend[\"table\"]\n            symbol = trader_ordersend[\"symbol\"]\n    \n            sql = f\"\"\"\n                    SELECT *\n                    FROM {table_name}\n                    WHERE symbol LIKE %s\n                      AND instruction_type = %s\n                      AND if_follow = %s\n                      AND master_order_status = %s\n                      AND type = %s\n                      AND trader_id = %s\n                      AND operation_type = %s\n                    \"\"\"\n            params = (\n                f\"%{symbol}%\",\n                \"2\",\n                \"1\",\n                \"1\",\n                trader_ordersend[\"type\"],\n                vps_trader_id,\n                \"1\",\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n            db_data = self.wait_for_database_record(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"create_time\",  # 按创建时间过滤\n                time_range=MYSQL_TIME,  # 只查前后1分钟的数据\n                timeout=WAIT_TIMEOUT,  # 最多等60秒\n                poll_interval=POLL_INTERVAL,  # 每2秒查一次\n                order_by=\"create_time DESC\"  # 按创建时间倒序\n            )\n    \n        with allure.step(\"2. 验证下单指令的跟单账号数据\"):\n            close_send_nos = var_manager.get_variable(\"close_send_nos\")\n            order_no_close = [record[\"order_no\"] for record in db_data]\n            logging.info(f\"订单详情的订单号：{close_send_nos} 平仓指令的订单号：{order_no_close}\")\n            var_manager.set_runtime_variable(\"order_no_close\", order_no_close)\n>           self.assert_list_equal_ignore_order(\n                close_send_nos,\n                order_no_close,\n                f\"订单详情的订单号：{close_send_nos}和平仓指令的订单号：{order_no_close}不一致\"\n            )\n\ntest_foundation\\test_vps_ordersend.py:532: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_7061.test_foundation.test_vps_ordersend.TestVPSOrderSend object at 0x00000181613B44F0>\nlist1 = ['2734859607691', '9175102069630']\nlist2 = ['1468805769631', '9175102069630', '2734859607691']\nerror_msg = \"订单详情的订单号：['2734859607691', '9175102069630']和平仓指令的订单号：['1468805769631', '9175102069630', '2734859607691']不一致\"\n\n    def assert_list_equal_ignore_order(self, list1, list2, error_msg=\"列表元素不相等（忽略顺序）\"):\n        \"\"\"断言两个列表元素相同（忽略顺序）\"\"\"\n        from collections import Counter\n>       assert Counter(list1) == Counter(list2), error_msg\nE       AssertionError: 订单详情的订单号：['2734859607691', '9175102069630']和平仓指令的订单号：['1468805769631', '9175102069630', '2734859607691']不一致\n\ncommons\\api_base.py:499: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "var_manager",
    "time" : {
      "start" : 1751851732098,
      "stop" : 1751851732098,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "environment",
    "time" : {
      "start" : 1751851654967,
      "stop" : 1751851654967,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db_transaction",
    "time" : {
      "start" : 1751851765982,
      "stop" : 1751851766028,
      "duration" : 46
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db_config",
    "time" : {
      "start" : 1751851654968,
      "stop" : 1751851654968,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db",
    "time" : {
      "start" : 1751851654968,
      "stop" : 1751851655196,
      "duration" : 228
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: 订单详情的订单号：['2734859607691', '9175102069630']和平仓指令的订单号：['1468805769631', '9175102069630', '2734859607691']不一致",
    "statusTrace" : "self = <lingkuan_7061.test_foundation.test_vps_ordersend.TestVPSOrderSend object at 0x00000181613B44F0>\nvar_manager = <lingkuan_7061.commons.variable_manager.VariableManager object at 0x0000018161D185E0>\ndb_transaction = <pymysql.connections.Connection object at 0x0000018161C9A700>\n\n    @allure.title(\"数据库校验-策略平仓-跟单平仓指令\")\n    def test_dbquery_close_addsalve(self, var_manager, db_transaction):\n        with allure.step(\"1. 根据订单详情数据库数据，校验跟单指令数据是否正确\"):\n            vps_trader_id = var_manager.get_variable(\"vps_trader_id\")\n            trader_ordersend = var_manager.get_variable(\"trader_ordersend\")\n    \n            table_name = trader_ordersend[\"table\"]\n            symbol = trader_ordersend[\"symbol\"]\n    \n            sql = f\"\"\"\n                    SELECT *\n                    FROM {table_name}\n                    WHERE symbol LIKE %s\n                      AND instruction_type = %s\n                      AND if_follow = %s\n                      AND master_order_status = %s\n                      AND type = %s\n                      AND trader_id = %s\n                      AND operation_type = %s\n                    \"\"\"\n            params = (\n                f\"%{symbol}%\",\n                \"2\",\n                \"1\",\n                \"1\",\n                trader_ordersend[\"type\"],\n                vps_trader_id,\n                \"1\",\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n            db_data = self.wait_for_database_record(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"create_time\",  # 按创建时间过滤\n                time_range=MYSQL_TIME,  # 只查前后1分钟的数据\n                timeout=WAIT_TIMEOUT,  # 最多等60秒\n                poll_interval=POLL_INTERVAL,  # 每2秒查一次\n                order_by=\"create_time DESC\"  # 按创建时间倒序\n            )\n    \n        with allure.step(\"2. 验证下单指令的跟单账号数据\"):\n            close_send_nos = var_manager.get_variable(\"close_send_nos\")\n            order_no_close = [record[\"order_no\"] for record in db_data]\n            logging.info(f\"订单详情的订单号：{close_send_nos} 平仓指令的订单号：{order_no_close}\")\n            var_manager.set_runtime_variable(\"order_no_close\", order_no_close)\n>           self.assert_list_equal_ignore_order(\n                close_send_nos,\n                order_no_close,\n                f\"订单详情的订单号：{close_send_nos}和平仓指令的订单号：{order_no_close}不一致\"\n            )\n\ntest_foundation\\test_vps_ordersend.py:532: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_7061.test_foundation.test_vps_ordersend.TestVPSOrderSend object at 0x00000181613B44F0>\nlist1 = ['2734859607691', '9175102069630']\nlist2 = ['1468805769631', '9175102069630', '2734859607691']\nerror_msg = \"订单详情的订单号：['2734859607691', '9175102069630']和平仓指令的订单号：['1468805769631', '9175102069630', '2734859607691']不一致\"\n\n    def assert_list_equal_ignore_order(self, list1, list2, error_msg=\"列表元素不相等（忽略顺序）\"):\n        \"\"\"断言两个列表元素相同（忽略顺序）\"\"\"\n        from collections import Counter\n>       assert Counter(list1) == Counter(list2), error_msg\nE       AssertionError: 订单详情的订单号：['2734859607691', '9175102069630']和平仓指令的订单号：['1468805769631', '9175102069630', '2734859607691']不一致\n\ncommons\\api_base.py:499: AssertionError",
    "steps" : [ {
      "name" : "1. 根据订单详情数据库数据，校验跟单指令数据是否正确",
      "time" : {
        "start" : 1751851766028,
        "stop" : 1751851766269,
        "duration" : 241
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0
    }, {
      "name" : "2. 验证下单指令的跟单账号数据",
      "time" : {
        "start" : 1751851766269,
        "stop" : 1751851766270,
        "duration" : 1
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: 订单详情的订单号：['2734859607691', '9175102069630']和平仓指令的订单号：['1468805769631', '9175102069630', '2734859607691']不一致\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\lingkuan_7061\\test_foundation\\test_vps_ordersend.py\", line 532, in test_dbquery_close_addsalve\n    self.assert_list_equal_ignore_order(\n  File \"D:\\pycharm_test\\lingkuan_7061\\commons\\api_base.py\", line 499, in assert_list_equal_ignore_order\n    assert Counter(list1) == Counter(list2), error_msg\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 0
    } ],
    "attachments" : [ {
      "uid" : "1a207725afda7f09",
      "name" : "log",
      "source" : "1a207725afda7f09.txt",
      "type" : "text/plain",
      "size" : 2813
    } ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1
  },
  "afterStages" : [ {
    "name" : "var_manager::0",
    "time" : {
      "start" : 1751852953402,
      "stop" : 1751852953403,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db_transaction::0",
    "time" : {
      "start" : 1751851766294,
      "stop" : 1751851766366,
      "duration" : 72
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db::0",
    "time" : {
      "start" : 1751852953386,
      "stop" : 1751852953386,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "VPS策略下单-正常开仓平仓"
  }, {
    "name" : "parentSuite",
    "value" : "test_foundation"
  }, {
    "name" : "suite",
    "value" : "test_vps_ordersend"
  }, {
    "name" : "subSuite",
    "value" : "TestVPSOrderSend"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "8168-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_foundation.test_vps_ordersend"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "7ac4e862e458cf01.json",
  "parameterValues" : [ ]
}