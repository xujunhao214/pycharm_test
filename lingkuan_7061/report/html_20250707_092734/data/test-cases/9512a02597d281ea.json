{
  "uid" : "9512a02597d281ea",
  "name" : "数据库校验-策略平仓-检查平仓订单是否出现漏平",
  "fullName" : "test_foundation.test_vps_Leakage_level.TestLeakagelevel#test_dbquery_addsalve_clsesdetail",
  "historyId" : "b9d5fc96d71694b6e166f8acef2fc085",
  "time" : {
    "start" : 1751851786084,
    "stop" : 1751851789875,
    "duration" : 3791
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: 出现漏平，平仓异常信息应该是未开通平仓状态，实际是：None\nassert None == '未开通平仓状态'",
  "statusTrace" : "self = <lingkuan_7061.test_foundation.test_vps_Leakage_level.TestLeakagelevel object at 0x00000181613FAD30>\nvar_manager = <lingkuan_7061.commons.variable_manager.VariableManager object at 0x0000018161DF7190>\ndb_transaction = <pymysql.connections.Connection object at 0x0000018161C9A700>\n\n    @allure.title(\"数据库校验-策略平仓-检查平仓订单是否出现漏平\")\n    def test_dbquery_addsalve_clsesdetail(self, var_manager, db_transaction):\n        with allure.step(\"1. 获取订单详情界面跟单账号数据\"):\n            trader_ordersend = var_manager.get_variable(\"trader_ordersend\")\n            vps_trader = var_manager.get_variable(\"vps_trader\")\n            user_accounts_1 = var_manager.get_variable(\"user_accounts_1\")\n            table_name = trader_ordersend[\"table_detail\"]\n            symbol = trader_ordersend[\"symbol\"]\n    \n            sql = f\"\"\"\n                    SELECT *\n                    FROM {table_name}\n                    WHERE symbol LIKE %s\n                      AND source_user = %s\n                      AND account = %s\n                    \"\"\"\n            params = (\n                f\"%{symbol}%\",\n                vps_trader[\"account\"],\n                user_accounts_1,\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n            db_data = self.wait_for_database_record(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"create_time\",  # 按创建时间过滤\n                time_range=MYSQL_TIME,  # 只查前后1分钟的数据\n                timeout=WAIT_TIMEOUT,  # 最多等60秒\n                poll_interval=POLL_INTERVAL,  # 每2秒查一次\n                order_by=\"create_time DESC\"  # 按创建时间倒序\n            )\n        with allure.step(\"2. 校验数据\"):\n            close_status = db_data[0][\"close_status\"]\n            logging.info(f\"出现漏平，平仓状态应该是0，实际是：{close_status}\")\n            assert close_status == 0, f\"出现漏平，平仓状态应该是0，实际是：{close_status}\"\n    \n            close_remark = db_data[0][\"close_remark\"]\n            logging.info(f\"出现漏平，平仓异常信息应该是未开通平仓状态，实际是：{close_remark}\")\n>           assert close_remark == \"未开通平仓状态\", f\"出现漏平，平仓异常信息应该是未开通平仓状态，实际是：{close_remark}\"\nE           AssertionError: 出现漏平，平仓异常信息应该是未开通平仓状态，实际是：None\nE           assert None == '未开通平仓状态'\n\ntest_foundation\\test_vps_Leakage_level.py:555: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "var_manager",
    "time" : {
      "start" : 1751851766369,
      "stop" : 1751851766370,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "environment",
    "time" : {
      "start" : 1751851654967,
      "stop" : 1751851654967,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db_transaction",
    "time" : {
      "start" : 1751851786035,
      "stop" : 1751851786084,
      "duration" : 49
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db_config",
    "time" : {
      "start" : 1751851654968,
      "stop" : 1751851654968,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db",
    "time" : {
      "start" : 1751851654968,
      "stop" : 1751851655196,
      "duration" : 228
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: 出现漏平，平仓异常信息应该是未开通平仓状态，实际是：None\nassert None == '未开通平仓状态'",
    "statusTrace" : "self = <lingkuan_7061.test_foundation.test_vps_Leakage_level.TestLeakagelevel object at 0x00000181613FAD30>\nvar_manager = <lingkuan_7061.commons.variable_manager.VariableManager object at 0x0000018161DF7190>\ndb_transaction = <pymysql.connections.Connection object at 0x0000018161C9A700>\n\n    @allure.title(\"数据库校验-策略平仓-检查平仓订单是否出现漏平\")\n    def test_dbquery_addsalve_clsesdetail(self, var_manager, db_transaction):\n        with allure.step(\"1. 获取订单详情界面跟单账号数据\"):\n            trader_ordersend = var_manager.get_variable(\"trader_ordersend\")\n            vps_trader = var_manager.get_variable(\"vps_trader\")\n            user_accounts_1 = var_manager.get_variable(\"user_accounts_1\")\n            table_name = trader_ordersend[\"table_detail\"]\n            symbol = trader_ordersend[\"symbol\"]\n    \n            sql = f\"\"\"\n                    SELECT *\n                    FROM {table_name}\n                    WHERE symbol LIKE %s\n                      AND source_user = %s\n                      AND account = %s\n                    \"\"\"\n            params = (\n                f\"%{symbol}%\",\n                vps_trader[\"account\"],\n                user_accounts_1,\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n            db_data = self.wait_for_database_record(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"create_time\",  # 按创建时间过滤\n                time_range=MYSQL_TIME,  # 只查前后1分钟的数据\n                timeout=WAIT_TIMEOUT,  # 最多等60秒\n                poll_interval=POLL_INTERVAL,  # 每2秒查一次\n                order_by=\"create_time DESC\"  # 按创建时间倒序\n            )\n        with allure.step(\"2. 校验数据\"):\n            close_status = db_data[0][\"close_status\"]\n            logging.info(f\"出现漏平，平仓状态应该是0，实际是：{close_status}\")\n            assert close_status == 0, f\"出现漏平，平仓状态应该是0，实际是：{close_status}\"\n    \n            close_remark = db_data[0][\"close_remark\"]\n            logging.info(f\"出现漏平，平仓异常信息应该是未开通平仓状态，实际是：{close_remark}\")\n>           assert close_remark == \"未开通平仓状态\", f\"出现漏平，平仓异常信息应该是未开通平仓状态，实际是：{close_remark}\"\nE           AssertionError: 出现漏平，平仓异常信息应该是未开通平仓状态，实际是：None\nE           assert None == '未开通平仓状态'\n\ntest_foundation\\test_vps_Leakage_level.py:555: AssertionError",
    "steps" : [ {
      "name" : "1. 获取订单详情界面跟单账号数据",
      "time" : {
        "start" : 1751851786084,
        "stop" : 1751851789874,
        "duration" : 3790
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0
    }, {
      "name" : "2. 校验数据",
      "time" : {
        "start" : 1751851789874,
        "stop" : 1751851789875,
        "duration" : 1
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: 出现漏平，平仓异常信息应该是未开通平仓状态，实际是：None\nassert None == '未开通平仓状态'\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\lingkuan_7061\\test_foundation\\test_vps_Leakage_level.py\", line 555, in test_dbquery_addsalve_clsesdetail\n    assert close_remark == \"未开通平仓状态\", f\"出现漏平，平仓异常信息应该是未开通平仓状态，实际是：{close_remark}\"\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 0
    } ],
    "attachments" : [ {
      "uid" : "1d3820423705007a",
      "name" : "log",
      "source" : "1d3820423705007a.txt",
      "type" : "text/plain",
      "size" : 2553
    } ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1
  },
  "afterStages" : [ {
    "name" : "var_manager::0",
    "time" : {
      "start" : 1751852953399,
      "stop" : 1751852953400,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db_transaction::0",
    "time" : {
      "start" : 1751851789884,
      "stop" : 1751851789935,
      "duration" : 51
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db::0",
    "time" : {
      "start" : 1751852953386,
      "stop" : 1751852953386,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "VPS策略下单-漏平"
  }, {
    "name" : "parentSuite",
    "value" : "test_foundation"
  }, {
    "name" : "suite",
    "value" : "test_vps_Leakage_level"
  }, {
    "name" : "subSuite",
    "value" : "TestLeakagelevel"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "8168-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_foundation.test_vps_Leakage_level"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "9512a02597d281ea.json",
  "parameterValues" : [ ]
}