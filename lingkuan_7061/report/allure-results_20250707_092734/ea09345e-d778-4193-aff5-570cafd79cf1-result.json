{"name": "数据库校验-VPS数据-修改跟单账号是否成功", "status": "broken", "statusDetails": {"message": "TimeoutError: 等待超时（60秒），未找到记录。\nSQL: SELECT * FROM follow_trader_subscribe WHERE slave_account = %s\n参数: ('119999356',)\n最终结果数: 0", "trace": "self = <lingkuan_7061.test_foundation.test_vps_Leakage_open.TestLeakageopen object at 0x000001816140EE50>\nvar_manager = <lingkuan_7061.commons.variable_manager.VariableManager object at 0x0000018161E71280>\ndb_transaction = <pymysql.connections.Connection object at 0x0000018161C9A700>\n\n    @allure.title(\"数据库校验-VPS数据-修改跟单账号是否成功\")\n    def test_dbquery_updateslave(self, var_manager, db_transaction):\n        with allure.step(\"1. 查询数据库验证是否修改成功\"):\n            follow_trader_subscribe = var_manager.get_variable(\"follow_trader_subscribe\")\n            user_accounts_1 = var_manager.get_variable(\"user_accounts_1\")\n            sql = f\"SELECT * FROM {follow_trader_subscribe['table']} WHERE slave_account = %s\"\n            params = (user_accounts_1,)\n    \n            # 调用轮询等待方法（带时间范围过滤）\n>           db_data = self.wait_for_database_record(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"create_time\",  # 按创建时间过滤\n                time_range=MYSQL_TIME,  # 只查前后1分钟的数据\n                timeout=WAIT_TIMEOUT,  # 最多等60秒\n                poll_interval=POLL_INTERVAL,  # 每2秒查一次\n                order_by=\"create_time DESC\"  # 按创建时间倒序\n            )\n\ntest_foundation\\test_vps_Leakage_open.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_7061.test_foundation.test_vps_Leakage_open.TestLeakageopen object at 0x000001816140EE50>\ndb_transaction = <pymysql.connections.Connection object at 0x0000018161C9A700>\nsql = 'SELECT * FROM follow_trader_subscribe WHERE slave_account = %s'\nparams = ('119999356',), time_field = 'create_time', time_range = 1\norder_by = 'create_time DESC', timeout = 60, poll_interval = 2\n\n    def wait_for_database_record(self, db_transaction: pymysql.connections.Connection,\n                                 sql: str,\n                                 params: tuple = (),\n                                 time_field: Optional[str] = None,\n                                 time_range: int = 1,\n                                 order_by: str = \"create_time DESC\",\n                                 timeout: int = 60,\n                                 poll_interval: int = 2) -> List[Dict[str, Any]]:\n        \"\"\"轮询等待数据库记录出现（增强异常处理）\"\"\"\n        import time\n        start_time = time.time()\n        logger.info(f\"[{DATETIME_NOW}] 开始等待数据库记录 | SQL: {sql[:200]} | 超时: {timeout}秒\")\n    \n        while time.time() - start_time < timeout:\n            try:\n                db_transaction.commit()  # 刷新事务\n    \n                if time_field:\n                    result = self.query_database_with_time(\n                        db_transaction=db_transaction,\n                        sql=sql,\n                        params=params,\n                        time_field=time_field,\n                        time_range_minutes=time_range,\n                        order_by=order_by\n                    )\n                else:\n                    result = self.query_database(\n                        db_transaction=db_transaction,\n                        sql=sql,\n                        params=params,\n                        order_by=order_by\n                    )\n    \n                if result:\n                    logger.info(f\"[{DATETIME_NOW}] 记录已找到（耗时{time.time() - start_time:.1f}秒）| 结果数: {len(result)}\")\n                    return result\n    \n                elapsed = time.time() - start_time\n                logger.info(f\"[{DATETIME_NOW}] 未找到记录（已等待{elapsed:.1f}秒）| 剩余时间: {timeout - elapsed:.1f}秒\")\n                time.sleep(poll_interval)\n    \n            except Exception as e:\n                logger.warning(f\"[{DATETIME_NOW}] 轮询查询异常: {str(e)} | 继续等待...\")\n                time.sleep(poll_interval)\n    \n        # 超时处理\n        db_transaction.commit()\n        final_result = self.query_database_with_time(\n            db_transaction=db_transaction,\n            sql=sql,\n            params=params,\n            time_field=time_field,\n            time_range_minutes=time_range,\n            order_by=order_by\n        ) if time_field else self.query_database(\n            db_transaction=db_transaction,\n            sql=sql,\n            params=params,\n            order_by=order_by\n        )\n    \n>       raise TimeoutError(\n            f\"等待超时（{timeout}秒），未找到记录。\\n\"\n            f\"SQL: {sql}\\n\"\n            f\"参数: {params}\\n\"\n            f\"最终结果数: {len(final_result)}\"\n        )\nE       TimeoutError: 等待超时（60秒），未找到记录。\nE       SQL: SELECT * FROM follow_trader_subscribe WHERE slave_account = %s\nE       参数: ('119999356',)\nE       最终结果数: 0\n\ncommons\\api_base.py:454: TimeoutError"}, "steps": [{"name": "1. 查询数据库验证是否修改成功", "status": "broken", "statusDetails": {"message": "TimeoutError: 等待超时（60秒），未找到记录。\nSQL: SELECT * FROM follow_trader_subscribe WHERE slave_account = %s\n参数: ('119999356',)\n最终结果数: 0\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_7061\\test_foundation\\test_vps_Leakage_open.py\", line 83, in test_dbquery_updateslave\n    db_data = self.wait_for_database_record(\n  File \"D:\\pycharm_test\\lingkuan_7061\\commons\\api_base.py\", line 454, in wait_for_database_record\n    raise TimeoutError(\n"}, "start": 1751852000525, "stop": 1751852061768}], "attachments": [{"name": "log", "source": "a98822bb-ad44-41a3-b568-87569345f3e1-attachment.txt", "type": "text/plain"}], "start": 1751852000525, "stop": 1751852061768, "uuid": "21c3e296-3d48-47d7-9eb1-dc49eae29044", "historyId": "7ec5532f24724a23978b41aa8e5434d6", "testCaseId": "7ec5532f24724a23978b41aa8e5434d6", "fullName": "test_foundation.test_vps_Leakage_open.TestLeakageopen#test_dbquery_updateslave", "labels": [{"name": "feature", "value": "VPS策略下单-漏开"}, {"name": "parentSuite", "value": "test_foundation"}, {"name": "suite", "value": "test_vps_Leakage_open"}, {"name": "subSuite", "value": "TestLeakageopen"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "8168-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_foundation.test_vps_Leakage_open"}]}