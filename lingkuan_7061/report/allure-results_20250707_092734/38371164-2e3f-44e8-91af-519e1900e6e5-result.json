{"name": "数据库校验-策略平仓-检查平仓订单是否出现漏平", "status": "failed", "statusDetails": {"message": "AssertionError: 出现漏平，平仓异常信息应该是未开通平仓状态，实际是：None\nassert None == '未开通平仓状态'", "trace": "self = <lingkuan_7061.test_foundation.test_vps_Leakage_level.TestLeakagelevel object at 0x00000181613FAD30>\nvar_manager = <lingkuan_7061.commons.variable_manager.VariableManager object at 0x0000018161DF7190>\ndb_transaction = <pymysql.connections.Connection object at 0x0000018161C9A700>\n\n    @allure.title(\"数据库校验-策略平仓-检查平仓订单是否出现漏平\")\n    def test_dbquery_addsalve_clsesdetail(self, var_manager, db_transaction):\n        with allure.step(\"1. 获取订单详情界面跟单账号数据\"):\n            trader_ordersend = var_manager.get_variable(\"trader_ordersend\")\n            vps_trader = var_manager.get_variable(\"vps_trader\")\n            user_accounts_1 = var_manager.get_variable(\"user_accounts_1\")\n            table_name = trader_ordersend[\"table_detail\"]\n            symbol = trader_ordersend[\"symbol\"]\n    \n            sql = f\"\"\"\n                    SELECT *\n                    FROM {table_name}\n                    WHERE symbol LIKE %s\n                      AND source_user = %s\n                      AND account = %s\n                    \"\"\"\n            params = (\n                f\"%{symbol}%\",\n                vps_trader[\"account\"],\n                user_accounts_1,\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n            db_data = self.wait_for_database_record(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"create_time\",  # 按创建时间过滤\n                time_range=MYSQL_TIME,  # 只查前后1分钟的数据\n                timeout=WAIT_TIMEOUT,  # 最多等60秒\n                poll_interval=POLL_INTERVAL,  # 每2秒查一次\n                order_by=\"create_time DESC\"  # 按创建时间倒序\n            )\n        with allure.step(\"2. 校验数据\"):\n            close_status = db_data[0][\"close_status\"]\n            logging.info(f\"出现漏平，平仓状态应该是0，实际是：{close_status}\")\n            assert close_status == 0, f\"出现漏平，平仓状态应该是0，实际是：{close_status}\"\n    \n            close_remark = db_data[0][\"close_remark\"]\n            logging.info(f\"出现漏平，平仓异常信息应该是未开通平仓状态，实际是：{close_remark}\")\n>           assert close_remark == \"未开通平仓状态\", f\"出现漏平，平仓异常信息应该是未开通平仓状态，实际是：{close_remark}\"\nE           AssertionError: 出现漏平，平仓异常信息应该是未开通平仓状态，实际是：None\nE           assert None == '未开通平仓状态'\n\ntest_foundation\\test_vps_Leakage_level.py:555: AssertionError"}, "steps": [{"name": "1. 获取订单详情界面跟单账号数据", "status": "passed", "start": 1751851786084, "stop": 1751851789874}, {"name": "2. 校验数据", "status": "failed", "statusDetails": {"message": "AssertionError: 出现漏平，平仓异常信息应该是未开通平仓状态，实际是：None\nassert None == '未开通平仓状态'\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_7061\\test_foundation\\test_vps_Leakage_level.py\", line 555, in test_dbquery_addsalve_clsesdetail\n    assert close_remark == \"未开通平仓状态\", f\"出现漏平，平仓异常信息应该是未开通平仓状态，实际是：{close_remark}\"\n"}, "start": 1751851789874, "stop": 1751851789875}], "attachments": [{"name": "log", "source": "3e450ce0-aa9e-4ce2-8636-41b5a4f7c6c3-attachment.txt", "type": "text/plain"}], "start": 1751851786084, "stop": 1751851789875, "uuid": "6a6f9aef-0900-48f1-89ee-8114f75ad280", "historyId": "b9d5fc96d71694b6e166f8acef2fc085", "testCaseId": "b9d5fc96d71694b6e166f8acef2fc085", "fullName": "test_foundation.test_vps_Leakage_level.TestLeakagelevel#test_dbquery_addsalve_clsesdetail", "labels": [{"name": "feature", "value": "VPS策略下单-漏平"}, {"name": "parentSuite", "value": "test_foundation"}, {"name": "suite", "value": "test_vps_Leakage_level"}, {"name": "subSuite", "value": "TestLeakagelevel"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "8168-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_foundation.test_vps_Leakage_level"}]}