{"uid":"a4c08d3a89d2822e","name":"数据库校验-账号列表-删除账号","fullName":"test_foundation.test_delete_scene.TestDeleteTrader#test_dbdelete_user","historyId":"7c4a4329f07feea6257e9f2922ea1e7d","time":{"start":1751769344794,"stop":1751769406048,"duration":61254},"status":"failed","statusMessage":"Failed: 删除失败: 等待超时（60秒），记录仍然存在。\nSQL: SELECT * FROM FOLLOW_TRADER_USER WHERE account = %s\n参数: ('119999305',)\n最终结果: [{'id': 4047, 'account': '119999305', 'password': '60e230abc816a01749f119307e24efb7', 'platform_id': 390, 'platform': 'FXAdamantStone-Demo', 'account_type': '0', 'server_node': '47.83.21.167:443', 'group_name': None, 'group_id': None, 'sort': 12, 'status': 1, 'remark': '测试数据', 'version': 0, 'deleted': 0, 'creator': 10000, 'create_time': datetime.datetime(2025, 7, 6, 10, 10, 24), 'updater': 10000, 'update_time': datetime.datetime(2025, 7, 6, 10, 11, 6)}]","statusTrace":"self = <lingkuan_706.test_foundation.test_delete_scene.TestDeleteTrader object at 0x00000289FABE1910>\nvar_manager = <lingkuan_706.commons.variable_manager.VariableManager object at 0x00000289FACA4190>\ndb_transaction = <pymysql.connections.Connection object at 0x00000289FABE18B0>\n\n    def test_dbdelete_user(self, var_manager, db_transaction):\n        with allure.step(\"1. 查询数据库验证是否删除成功\"):\n            db_query = var_manager.get_variable(\"db_query\")\n            logging.info(f\"查询条件: table={db_query['table']}, name={db_query['account']}\")\n    \n            # 定义数据库查询\n            sql = f\"SELECT * FROM {db_query['table']} WHERE account = %s\"\n            params = (db_query[\"account\"],)\n            try:\n                self.wait_for_database_deletion(\n>                   db_transaction=db_transaction,\n                    sql=sql,\n                    params=params,\n                    timeout=WAIT_TIMEOUT,  # 设置60秒超时时间\n                    poll_interval=POLL_INTERVAL  # 每2秒查询一次\n                )\n\ntest_foundation\\test_delete_scene.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_706.test_foundation.test_delete_scene.TestDeleteTrader object at 0x00000289FABE1910>\ndb_transaction = <pymysql.connections.Connection object at 0x00000289FABE18B0>\nsql = 'SELECT * FROM FOLLOW_TRADER_USER WHERE account = %s'\nparams = ('119999305',), time_field = None, time_range = 1\norder_by = 'create_time DESC', timeout = 60, poll_interval = 2\n\n    def wait_for_database_deletion(self, db_transaction: pymysql.connections.Connection,\n                                   sql: str,\n                                   params: tuple = (),\n                                   time_field: Optional[str] = None,  # 可选时间字段\n                                   time_range: int = 1,  # 时间范围（分钟）\n                                   order_by: str = \"create_time DESC\",\n                                   timeout: int = 60,  # 超时时间（秒）\n                                   poll_interval: int = 2) -> None:\n        \"\"\"\n        轮询等待数据库记录被删除（即查询结果为空）\n        :param timeout: 最大等待时间\n        :param poll_interval: 轮询间隔（秒）\n        \"\"\"\n        import time\n        start_time = time.time()\n    \n        while time.time() - start_time < timeout:\n            # 每次查询前刷新事务，确保能看到最新数据\n            db_transaction.commit()\n    \n            # 根据是否需要时间范围选择查询方法\n            if time_field:\n                result = self.query_database_with_time(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params,\n                    time_field=time_field,\n                    time_range_minutes=time_range,\n                    order_by=order_by\n                )\n            else:\n                result = self.query_database(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params,\n                    order_by=order_by\n                )\n    \n            # 修改判断逻辑：如果结果为空，表示数据已删除\n            if not result:\n                logging.info(f\"删除成功（耗时{time.time() - start_time:.1f}秒），记录已不存在\")\n                return\n    \n            elapsed = time.time() - start_time\n            logging.info(f\"记录仍存在（已等待{elapsed:.1f}秒，剩余{timeout - elapsed:.1f}秒），结果: {result}\")\n            time.sleep(poll_interval)\n    \n        # 超时后最后一次查询\n        db_transaction.commit()\n        final_result = self.query_database_with_time(\n            db_transaction=db_transaction,\n            sql=sql,\n            params=params,\n            time_field=time_field,\n            time_range_minutes=time_range,\n            order_by=order_by\n        ) if time_field else self.query_database(\n            db_transaction=db_transaction,\n            sql=sql,\n            params=params,\n            order_by=order_by\n        )\n    \n>       raise TimeoutError(\n            f\"等待超时（{timeout}秒），记录仍然存在。\\n\"\n            f\"SQL: {sql}\\n\"\n            f\"参数: {params}\\n\"\n            f\"最终结果: {final_result}\"\n        )\nE       TimeoutError: 等待超时（60秒），记录仍然存在。\nE       SQL: SELECT * FROM FOLLOW_TRADER_USER WHERE account = %s\nE       参数: ('119999305',)\nE       最终结果: [{'id': 4047, 'account': '119999305', 'password': '60e230abc816a01749f119307e24efb7', 'platform_id': 390, 'platform': 'FXAdamantStone-Demo', 'account_type': '0', 'server_node': '47.83.21.167:443', 'group_name': None, 'group_id': None, 'sort': 12, 'status': 1, 'remark': '测试数据', 'version': 0, 'deleted': 0, 'creator': 10000, 'create_time': datetime.datetime(2025, 7, 6, 10, 10, 24), 'updater': 10000, 'update_time': datetime.datetime(2025, 7, 6, 10, 11, 6)}]\n\ncommons\\api_base.py:273: TimeoutError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <lingkuan_706.test_foundation.test_delete_scene.TestDeleteTrader object at 0x00000289FABE1910>\nvar_manager = <lingkuan_706.commons.variable_manager.VariableManager object at 0x00000289FACA4190>\ndb_transaction = <pymysql.connections.Connection object at 0x00000289FABE18B0>\n\n>   ???\nE   Failed: 删除失败: 等待超时（60秒），记录仍然存在。\nE   SQL: SELECT * FROM FOLLOW_TRADER_USER WHERE account = %s\nE   参数: ('119999305',)\nE   最终结果: [{'id': 4047, 'account': '119999305', 'password': '60e230abc816a01749f119307e24efb7', 'platform_id': 390, 'platform': 'FXAdamantStone-Demo', 'account_type': '0', 'server_node': '47.83.21.167:443', 'group_name': None, 'group_id': None, 'sort': 12, 'status': 1, 'remark': '测试数据', 'version': 0, 'deleted': 0, 'creator': 10000, 'create_time': datetime.datetime(2025, 7, 6, 10, 10, 24), 'updater': 10000, 'update_time': datetime.datetime(2025, 7, 6, 10, 11, 6)}]\n\ntest_foundation\\test_delete_scene.py:331: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"db","time":{"start":1751769074613,"stop":1751769074863,"duration":250},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"db_config","time":{"start":1751769074613,"stop":1751769074613,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"environment","time":{"start":1751769074613,"stop":1751769074613,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"var_manager","time":{"start":1751769108571,"stop":1751769108572,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"db_transaction","time":{"start":1751769344744,"stop":1751769344793,"duration":49},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"Failed: 删除失败: 等待超时（60秒），记录仍然存在。\nSQL: SELECT * FROM FOLLOW_TRADER_USER WHERE account = %s\n参数: ('119999305',)\n最终结果: [{'id': 4047, 'account': '119999305', 'password': '60e230abc816a01749f119307e24efb7', 'platform_id': 390, 'platform': 'FXAdamantStone-Demo', 'account_type': '0', 'server_node': '47.83.21.167:443', 'group_name': None, 'group_id': None, 'sort': 12, 'status': 1, 'remark': '测试数据', 'version': 0, 'deleted': 0, 'creator': 10000, 'create_time': datetime.datetime(2025, 7, 6, 10, 10, 24), 'updater': 10000, 'update_time': datetime.datetime(2025, 7, 6, 10, 11, 6)}]","statusTrace":"self = <lingkuan_706.test_foundation.test_delete_scene.TestDeleteTrader object at 0x00000289FABE1910>\nvar_manager = <lingkuan_706.commons.variable_manager.VariableManager object at 0x00000289FACA4190>\ndb_transaction = <pymysql.connections.Connection object at 0x00000289FABE18B0>\n\n    def test_dbdelete_user(self, var_manager, db_transaction):\n        with allure.step(\"1. 查询数据库验证是否删除成功\"):\n            db_query = var_manager.get_variable(\"db_query\")\n            logging.info(f\"查询条件: table={db_query['table']}, name={db_query['account']}\")\n    \n            # 定义数据库查询\n            sql = f\"SELECT * FROM {db_query['table']} WHERE account = %s\"\n            params = (db_query[\"account\"],)\n            try:\n                self.wait_for_database_deletion(\n>                   db_transaction=db_transaction,\n                    sql=sql,\n                    params=params,\n                    timeout=WAIT_TIMEOUT,  # 设置60秒超时时间\n                    poll_interval=POLL_INTERVAL  # 每2秒查询一次\n                )\n\ntest_foundation\\test_delete_scene.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_706.test_foundation.test_delete_scene.TestDeleteTrader object at 0x00000289FABE1910>\ndb_transaction = <pymysql.connections.Connection object at 0x00000289FABE18B0>\nsql = 'SELECT * FROM FOLLOW_TRADER_USER WHERE account = %s'\nparams = ('119999305',), time_field = None, time_range = 1\norder_by = 'create_time DESC', timeout = 60, poll_interval = 2\n\n    def wait_for_database_deletion(self, db_transaction: pymysql.connections.Connection,\n                                   sql: str,\n                                   params: tuple = (),\n                                   time_field: Optional[str] = None,  # 可选时间字段\n                                   time_range: int = 1,  # 时间范围（分钟）\n                                   order_by: str = \"create_time DESC\",\n                                   timeout: int = 60,  # 超时时间（秒）\n                                   poll_interval: int = 2) -> None:\n        \"\"\"\n        轮询等待数据库记录被删除（即查询结果为空）\n        :param timeout: 最大等待时间\n        :param poll_interval: 轮询间隔（秒）\n        \"\"\"\n        import time\n        start_time = time.time()\n    \n        while time.time() - start_time < timeout:\n            # 每次查询前刷新事务，确保能看到最新数据\n            db_transaction.commit()\n    \n            # 根据是否需要时间范围选择查询方法\n            if time_field:\n                result = self.query_database_with_time(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params,\n                    time_field=time_field,\n                    time_range_minutes=time_range,\n                    order_by=order_by\n                )\n            else:\n                result = self.query_database(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params,\n                    order_by=order_by\n                )\n    \n            # 修改判断逻辑：如果结果为空，表示数据已删除\n            if not result:\n                logging.info(f\"删除成功（耗时{time.time() - start_time:.1f}秒），记录已不存在\")\n                return\n    \n            elapsed = time.time() - start_time\n            logging.info(f\"记录仍存在（已等待{elapsed:.1f}秒，剩余{timeout - elapsed:.1f}秒），结果: {result}\")\n            time.sleep(poll_interval)\n    \n        # 超时后最后一次查询\n        db_transaction.commit()\n        final_result = self.query_database_with_time(\n            db_transaction=db_transaction,\n            sql=sql,\n            params=params,\n            time_field=time_field,\n            time_range_minutes=time_range,\n            order_by=order_by\n        ) if time_field else self.query_database(\n            db_transaction=db_transaction,\n            sql=sql,\n            params=params,\n            order_by=order_by\n        )\n    \n>       raise TimeoutError(\n            f\"等待超时（{timeout}秒），记录仍然存在。\\n\"\n            f\"SQL: {sql}\\n\"\n            f\"参数: {params}\\n\"\n            f\"最终结果: {final_result}\"\n        )\nE       TimeoutError: 等待超时（60秒），记录仍然存在。\nE       SQL: SELECT * FROM FOLLOW_TRADER_USER WHERE account = %s\nE       参数: ('119999305',)\nE       最终结果: [{'id': 4047, 'account': '119999305', 'password': '60e230abc816a01749f119307e24efb7', 'platform_id': 390, 'platform': 'FXAdamantStone-Demo', 'account_type': '0', 'server_node': '47.83.21.167:443', 'group_name': None, 'group_id': None, 'sort': 12, 'status': 1, 'remark': '测试数据', 'version': 0, 'deleted': 0, 'creator': 10000, 'create_time': datetime.datetime(2025, 7, 6, 10, 10, 24), 'updater': 10000, 'update_time': datetime.datetime(2025, 7, 6, 10, 11, 6)}]\n\ncommons\\api_base.py:273: TimeoutError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <lingkuan_706.test_foundation.test_delete_scene.TestDeleteTrader object at 0x00000289FABE1910>\nvar_manager = <lingkuan_706.commons.variable_manager.VariableManager object at 0x00000289FACA4190>\ndb_transaction = <pymysql.connections.Connection object at 0x00000289FABE18B0>\n\n>   ???\nE   Failed: 删除失败: 等待超时（60秒），记录仍然存在。\nE   SQL: SELECT * FROM FOLLOW_TRADER_USER WHERE account = %s\nE   参数: ('119999305',)\nE   最终结果: [{'id': 4047, 'account': '119999305', 'password': '60e230abc816a01749f119307e24efb7', 'platform_id': 390, 'platform': 'FXAdamantStone-Demo', 'account_type': '0', 'server_node': '47.83.21.167:443', 'group_name': None, 'group_id': None, 'sort': 12, 'status': 1, 'remark': '测试数据', 'version': 0, 'deleted': 0, 'creator': 10000, 'create_time': datetime.datetime(2025, 7, 6, 10, 10, 24), 'updater': 10000, 'update_time': datetime.datetime(2025, 7, 6, 10, 11, 6)}]\n\ntest_foundation\\test_delete_scene.py:331: Failed","steps":[{"name":"1. 查询数据库验证是否删除成功","time":{"start":1751769344794,"stop":1751769406047,"duration":61253},"status":"failed","statusMessage":"Failed: 删除失败: 等待超时（60秒），记录仍然存在。\nSQL: SELECT * FROM FOLLOW_TRADER_USER WHERE account = %s\n参数: ('119999305',)\n最终结果: [{'id': 4047, 'account': '119999305', 'password': '60e230abc816a01749f119307e24efb7', 'platform_id': 390, 'platform': 'FXAdamantStone-Demo', 'account_type': '0', 'server_node': '47.83.21.167:443', 'group_name': None, 'group_id': None, 'sort': 12, 'status': 1, 'remark': '测试数据', 'version': 0, 'deleted': 0, 'creator': 10000, 'create_time': datetime.datetime(2025, 7, 6, 10, 10, 24), 'updater': 10000, 'update_time': datetime.datetime(2025, 7, 6, 10, 11, 6)}]\n","statusTrace":"  File \"D:\\Practice\\pycharm_test\\pycharm_test\\lingkuan_706\\test_foundation\\test_delete_scene.py\", line 331, in test_dbdelete_user\n  File \"D:\\Practice\\python\\ronghuai_interfaceTest\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 198, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[{"uid":"2e666698f4f5ad9e","name":"验证结果","source":"2e666698f4f5ad9e.attach","type":"text/plain","size":621}],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true,"stepsCount":0,"attachmentStep":false}],"attachments":[{"uid":"c40c2241294e85e6","name":"log","source":"c40c2241294e85e6.txt","type":"text/plain","size":35493}],"parameters":[],"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true,"stepsCount":1,"attachmentStep":false},"afterStages":[{"name":"db_transaction::0","time":{"start":1751769406061,"stop":1751769406110,"duration":49},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"db::0","time":{"start":1751769443049,"stop":1751769443049,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"var_manager::0","time":{"start":1751769443052,"stop":1751769443052,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0,"attachmentStep":false}],"labels":[{"name":"feature","value":"删除跟单账号和策略账号"},{"name":"parentSuite","value":"test_foundation"},{"name":"suite","value":"test_delete_scene"},{"name":"subSuite","value":"TestDeleteTrader"},{"name":"host","value":"xujunhao"},{"name":"thread","value":"22792-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_foundation.test_delete_scene"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"a4c08d3a89d2822e.json","parameterValues":[]}