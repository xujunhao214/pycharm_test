{"uid":"4de31866140adac","name":"数据库校验-VPS数据-批量删除跟单账号","fullName":"test_foundation.test_delete_scene.TestDeleteTrader#test_dbdelete_addsalvelist","historyId":"dce892d0eaccf0e9dff549627b696d35","time":{"start":1751769145108,"stop":1751769206579,"duration":61471},"status":"failed","statusMessage":"Failed: 删除失败: 等待超时（60秒），记录仍然存在。\nSQL: SELECT * FROM follow_trader WHERE account = %s\n参数: ('119999354',)\n最终结果: [{'id': 5864, 'account': '119999354', 'is_demo': 1, 'type': 1, 'password': '60e230abc816a01749f119307e24efb7', 'platform_id': 390, 'platform': 'FXAdamantStone-Demo', 'status': 0, 'status_extra': '启动成功', 'ip_addr': '39.99.136.49', 'server_id': 6, 'server_name': '主VPS', 'euqit': 100022978.13, 'balance': 100022978.13, 'free_margin': 100022978.13, 'margin_proportion': 0.0, 'leverage': 1, 'profit_loss': 0.0, 'multiple': 0.0, 'diff': 3, 'version': 0, 'remark': '测试数据', 'deleted': 0, 'creator': 10000, 'create_time': datetime.datetime(2025, 7, 6, 10, 11, 23), 'updater': 10000, 'update_time': datetime.datetime(2025, 7, 6, 10, 12, 12), 'template_id': 1, 'follow_status': 1, 'is_first_sync': 0, 'login_node': '47.83.21.167:443', 'cfd': '', 'forex': '', 'node_type': 0, 'login_last_time': datetime.datetime(2025, 7, 6, 10, 11, 22), 'ab_remark': ''}]","statusTrace":"self = <lingkuan_706.test_foundation.test_delete_scene.TestDeleteTrader object at 0x00000289FABB5100>\nvar_manager = <lingkuan_706.commons.variable_manager.VariableManager object at 0x00000289FACA4190>\ndb_transaction = <pymysql.connections.Connection object at 0x00000289FABE18B0>\n\n    @allure.title(\"数据库校验-VPS数据-批量删除跟单账号\")\n    def test_dbdelete_addsalvelist(self, var_manager, db_transaction):\n        # 1. 获取账号总数和所有账号信息\n        addslave_count = var_manager.get_variable(\"addslave_count\", 0)\n        if addslave_count <= 0:\n            pytest.fail(\"未找到需要验证的账号数量，请检查前置步骤\")\n    \n        db_addslave_query = var_manager.get_variable(\"db_addslave_query\")\n        table = db_addslave_query[\"table\"]\n    \n        # 2. 循环验证每个账号的删除状态\n        for i in range(1, addslave_count + 1):\n            with allure.step(f\"验证第{i}个账号是否删除成功\"):\n                # 获取单个账号（与删除的ID对应）\n                account = var_manager.get_variable(f\"user_accounts_{i}\")\n                if not account:\n                    pytest.fail(f\"未找到需要验证的账号：user_accounts_{i}\")\n    \n                sql = f\"SELECT * FROM {table} WHERE account = %s\"\n                # 调用轮询等待方法（带时间范围过滤）\n                try:\n>                   self.wait_for_database_deletion(\n                        db_transaction=db_transaction,\n                        sql=sql,\n                        params=(account,),\n                        timeout=WAIT_TIMEOUT,  # 设置60秒超时时间\n                        poll_interval=POLL_INTERVAL  # 每2秒查询一次\n                    )\n\ntest_foundation\\test_delete_scene.py:146: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_706.test_foundation.test_delete_scene.TestDeleteTrader object at 0x00000289FABB5100>\ndb_transaction = <pymysql.connections.Connection object at 0x00000289FABE18B0>\nsql = 'SELECT * FROM follow_trader WHERE account = %s', params = ('119999354',)\ntime_field = None, time_range = 1, order_by = 'create_time DESC', timeout = 60\npoll_interval = 2\n\n    def wait_for_database_deletion(self, db_transaction: pymysql.connections.Connection,\n                                   sql: str,\n                                   params: tuple = (),\n                                   time_field: Optional[str] = None,  # 可选时间字段\n                                   time_range: int = 1,  # 时间范围（分钟）\n                                   order_by: str = \"create_time DESC\",\n                                   timeout: int = 60,  # 超时时间（秒）\n                                   poll_interval: int = 2) -> None:\n        \"\"\"\n        轮询等待数据库记录被删除（即查询结果为空）\n        :param timeout: 最大等待时间\n        :param poll_interval: 轮询间隔（秒）\n        \"\"\"\n        import time\n        start_time = time.time()\n    \n        while time.time() - start_time < timeout:\n            # 每次查询前刷新事务，确保能看到最新数据\n            db_transaction.commit()\n    \n            # 根据是否需要时间范围选择查询方法\n            if time_field:\n                result = self.query_database_with_time(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params,\n                    time_field=time_field,\n                    time_range_minutes=time_range,\n                    order_by=order_by\n                )\n            else:\n                result = self.query_database(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params,\n                    order_by=order_by\n                )\n    \n            # 修改判断逻辑：如果结果为空，表示数据已删除\n            if not result:\n                logging.info(f\"删除成功（耗时{time.time() - start_time:.1f}秒），记录已不存在\")\n                return\n    \n            elapsed = time.time() - start_time\n            logging.info(f\"记录仍存在（已等待{elapsed:.1f}秒，剩余{timeout - elapsed:.1f}秒），结果: {result}\")\n            time.sleep(poll_interval)\n    \n        # 超时后最后一次查询\n        db_transaction.commit()\n        final_result = self.query_database_with_time(\n            db_transaction=db_transaction,\n            sql=sql,\n            params=params,\n            time_field=time_field,\n            time_range_minutes=time_range,\n            order_by=order_by\n        ) if time_field else self.query_database(\n            db_transaction=db_transaction,\n            sql=sql,\n            params=params,\n            order_by=order_by\n        )\n    \n>       raise TimeoutError(\n            f\"等待超时（{timeout}秒），记录仍然存在。\\n\"\n            f\"SQL: {sql}\\n\"\n            f\"参数: {params}\\n\"\n            f\"最终结果: {final_result}\"\n        )\nE       TimeoutError: 等待超时（60秒），记录仍然存在。\nE       SQL: SELECT * FROM follow_trader WHERE account = %s\nE       参数: ('119999354',)\nE       最终结果: [{'id': 5864, 'account': '119999354', 'is_demo': 1, 'type': 1, 'password': '60e230abc816a01749f119307e24efb7', 'platform_id': 390, 'platform': 'FXAdamantStone-Demo', 'status': 0, 'status_extra': '启动成功', 'ip_addr': '39.99.136.49', 'server_id': 6, 'server_name': '主VPS', 'euqit': 100022978.13, 'balance': 100022978.13, 'free_margin': 100022978.13, 'margin_proportion': 0.0, 'leverage': 1, 'profit_loss': 0.0, 'multiple': 0.0, 'diff': 3, 'version': 0, 'remark': '测试数据', 'deleted': 0, 'creator': 10000, 'create_time': datetime.datetime(2025, 7, 6, 10, 11, 23), 'updater': 10000, 'update_time': datetime.datetime(2025, 7, 6, 10, 12, 12), 'template_id': 1, 'follow_status': 1, 'is_first_sync': 0, 'login_node': '47.83.21.167:443', 'cfd': '', 'forex': '', 'node_type': 0, 'login_last_time': datetime.datetime(2025, 7, 6, 10, 11, 22), 'ab_remark': ''}]\n\ncommons\\api_base.py:273: TimeoutError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <lingkuan_706.test_foundation.test_delete_scene.TestDeleteTrader object at 0x00000289FABB5100>\nvar_manager = <lingkuan_706.commons.variable_manager.VariableManager object at 0x00000289FACA4190>\ndb_transaction = <pymysql.connections.Connection object at 0x00000289FABE18B0>\n\n    @allure.title(\"数据库校验-VPS数据-批量删除跟单账号\")\n    def test_dbdelete_addsalvelist(self, var_manager, db_transaction):\n        # 1. 获取账号总数和所有账号信息\n        addslave_count = var_manager.get_variable(\"addslave_count\", 0)\n        if addslave_count <= 0:\n            pytest.fail(\"未找到需要验证的账号数量，请检查前置步骤\")\n    \n        db_addslave_query = var_manager.get_variable(\"db_addslave_query\")\n        table = db_addslave_query[\"table\"]\n    \n        # 2. 循环验证每个账号的删除状态\n        for i in range(1, addslave_count + 1):\n            with allure.step(f\"验证第{i}个账号是否删除成功\"):\n                # 获取单个账号（与删除的ID对应）\n                account = var_manager.get_variable(f\"user_accounts_{i}\")\n                if not account:\n                    pytest.fail(f\"未找到需要验证的账号：user_accounts_{i}\")\n    \n                sql = f\"SELECT * FROM {table} WHERE account = %s\"\n                # 调用轮询等待方法（带时间范围过滤）\n                try:\n                    self.wait_for_database_deletion(\n                        db_transaction=db_transaction,\n                        sql=sql,\n                        params=(account,),\n                        timeout=WAIT_TIMEOUT,  # 设置60秒超时时间\n                        poll_interval=POLL_INTERVAL  # 每2秒查询一次\n                    )\n                    allure.attach(f\"跟单账号 {account} 已成功从数据库删除\", \"验证结果\")\n                except TimeoutError as e:\n                    allure.attach(f\"删除超时: {str(e)}\", \"验证结果\")\n>                   pytest.fail(f\"删除失败: {str(e)}\")\nE                   Failed: 删除失败: 等待超时（60秒），记录仍然存在。\nE                   SQL: SELECT * FROM follow_trader WHERE account = %s\nE                   参数: ('119999354',)\nE                   最终结果: [{'id': 5864, 'account': '119999354', 'is_demo': 1, 'type': 1, 'password': '60e230abc816a01749f119307e24efb7', 'platform_id': 390, 'platform': 'FXAdamantStone-Demo', 'status': 0, 'status_extra': '启动成功', 'ip_addr': '39.99.136.49', 'server_id': 6, 'server_name': '主VPS', 'euqit': 100022978.13, 'balance': 100022978.13, 'free_margin': 100022978.13, 'margin_proportion': 0.0, 'leverage': 1, 'profit_loss': 0.0, 'multiple': 0.0, 'diff': 3, 'version': 0, 'remark': '测试数据', 'deleted': 0, 'creator': 10000, 'create_time': datetime.datetime(2025, 7, 6, 10, 11, 23), 'updater': 10000, 'update_time': datetime.datetime(2025, 7, 6, 10, 12, 12), 'template_id': 1, 'follow_status': 1, 'is_first_sync': 0, 'login_node': '47.83.21.167:443', 'cfd': '', 'forex': '', 'node_type': 0, 'login_last_time': datetime.datetime(2025, 7, 6, 10, 11, 22), 'ab_remark': ''}]\n\ntest_foundation\\test_delete_scene.py:156: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"db","time":{"start":1751769074613,"stop":1751769074863,"duration":250},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"db_config","time":{"start":1751769074613,"stop":1751769074613,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"environment","time":{"start":1751769074613,"stop":1751769074613,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"var_manager","time":{"start":1751769108571,"stop":1751769108572,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"db_transaction","time":{"start":1751769145057,"stop":1751769145106,"duration":49},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"Failed: 删除失败: 等待超时（60秒），记录仍然存在。\nSQL: SELECT * FROM follow_trader WHERE account = %s\n参数: ('119999354',)\n最终结果: [{'id': 5864, 'account': '119999354', 'is_demo': 1, 'type': 1, 'password': '60e230abc816a01749f119307e24efb7', 'platform_id': 390, 'platform': 'FXAdamantStone-Demo', 'status': 0, 'status_extra': '启动成功', 'ip_addr': '39.99.136.49', 'server_id': 6, 'server_name': '主VPS', 'euqit': 100022978.13, 'balance': 100022978.13, 'free_margin': 100022978.13, 'margin_proportion': 0.0, 'leverage': 1, 'profit_loss': 0.0, 'multiple': 0.0, 'diff': 3, 'version': 0, 'remark': '测试数据', 'deleted': 0, 'creator': 10000, 'create_time': datetime.datetime(2025, 7, 6, 10, 11, 23), 'updater': 10000, 'update_time': datetime.datetime(2025, 7, 6, 10, 12, 12), 'template_id': 1, 'follow_status': 1, 'is_first_sync': 0, 'login_node': '47.83.21.167:443', 'cfd': '', 'forex': '', 'node_type': 0, 'login_last_time': datetime.datetime(2025, 7, 6, 10, 11, 22), 'ab_remark': ''}]","statusTrace":"self = <lingkuan_706.test_foundation.test_delete_scene.TestDeleteTrader object at 0x00000289FABB5100>\nvar_manager = <lingkuan_706.commons.variable_manager.VariableManager object at 0x00000289FACA4190>\ndb_transaction = <pymysql.connections.Connection object at 0x00000289FABE18B0>\n\n    @allure.title(\"数据库校验-VPS数据-批量删除跟单账号\")\n    def test_dbdelete_addsalvelist(self, var_manager, db_transaction):\n        # 1. 获取账号总数和所有账号信息\n        addslave_count = var_manager.get_variable(\"addslave_count\", 0)\n        if addslave_count <= 0:\n            pytest.fail(\"未找到需要验证的账号数量，请检查前置步骤\")\n    \n        db_addslave_query = var_manager.get_variable(\"db_addslave_query\")\n        table = db_addslave_query[\"table\"]\n    \n        # 2. 循环验证每个账号的删除状态\n        for i in range(1, addslave_count + 1):\n            with allure.step(f\"验证第{i}个账号是否删除成功\"):\n                # 获取单个账号（与删除的ID对应）\n                account = var_manager.get_variable(f\"user_accounts_{i}\")\n                if not account:\n                    pytest.fail(f\"未找到需要验证的账号：user_accounts_{i}\")\n    \n                sql = f\"SELECT * FROM {table} WHERE account = %s\"\n                # 调用轮询等待方法（带时间范围过滤）\n                try:\n>                   self.wait_for_database_deletion(\n                        db_transaction=db_transaction,\n                        sql=sql,\n                        params=(account,),\n                        timeout=WAIT_TIMEOUT,  # 设置60秒超时时间\n                        poll_interval=POLL_INTERVAL  # 每2秒查询一次\n                    )\n\ntest_foundation\\test_delete_scene.py:146: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_706.test_foundation.test_delete_scene.TestDeleteTrader object at 0x00000289FABB5100>\ndb_transaction = <pymysql.connections.Connection object at 0x00000289FABE18B0>\nsql = 'SELECT * FROM follow_trader WHERE account = %s', params = ('119999354',)\ntime_field = None, time_range = 1, order_by = 'create_time DESC', timeout = 60\npoll_interval = 2\n\n    def wait_for_database_deletion(self, db_transaction: pymysql.connections.Connection,\n                                   sql: str,\n                                   params: tuple = (),\n                                   time_field: Optional[str] = None,  # 可选时间字段\n                                   time_range: int = 1,  # 时间范围（分钟）\n                                   order_by: str = \"create_time DESC\",\n                                   timeout: int = 60,  # 超时时间（秒）\n                                   poll_interval: int = 2) -> None:\n        \"\"\"\n        轮询等待数据库记录被删除（即查询结果为空）\n        :param timeout: 最大等待时间\n        :param poll_interval: 轮询间隔（秒）\n        \"\"\"\n        import time\n        start_time = time.time()\n    \n        while time.time() - start_time < timeout:\n            # 每次查询前刷新事务，确保能看到最新数据\n            db_transaction.commit()\n    \n            # 根据是否需要时间范围选择查询方法\n            if time_field:\n                result = self.query_database_with_time(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params,\n                    time_field=time_field,\n                    time_range_minutes=time_range,\n                    order_by=order_by\n                )\n            else:\n                result = self.query_database(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params,\n                    order_by=order_by\n                )\n    \n            # 修改判断逻辑：如果结果为空，表示数据已删除\n            if not result:\n                logging.info(f\"删除成功（耗时{time.time() - start_time:.1f}秒），记录已不存在\")\n                return\n    \n            elapsed = time.time() - start_time\n            logging.info(f\"记录仍存在（已等待{elapsed:.1f}秒，剩余{timeout - elapsed:.1f}秒），结果: {result}\")\n            time.sleep(poll_interval)\n    \n        # 超时后最后一次查询\n        db_transaction.commit()\n        final_result = self.query_database_with_time(\n            db_transaction=db_transaction,\n            sql=sql,\n            params=params,\n            time_field=time_field,\n            time_range_minutes=time_range,\n            order_by=order_by\n        ) if time_field else self.query_database(\n            db_transaction=db_transaction,\n            sql=sql,\n            params=params,\n            order_by=order_by\n        )\n    \n>       raise TimeoutError(\n            f\"等待超时（{timeout}秒），记录仍然存在。\\n\"\n            f\"SQL: {sql}\\n\"\n            f\"参数: {params}\\n\"\n            f\"最终结果: {final_result}\"\n        )\nE       TimeoutError: 等待超时（60秒），记录仍然存在。\nE       SQL: SELECT * FROM follow_trader WHERE account = %s\nE       参数: ('119999354',)\nE       最终结果: [{'id': 5864, 'account': '119999354', 'is_demo': 1, 'type': 1, 'password': '60e230abc816a01749f119307e24efb7', 'platform_id': 390, 'platform': 'FXAdamantStone-Demo', 'status': 0, 'status_extra': '启动成功', 'ip_addr': '39.99.136.49', 'server_id': 6, 'server_name': '主VPS', 'euqit': 100022978.13, 'balance': 100022978.13, 'free_margin': 100022978.13, 'margin_proportion': 0.0, 'leverage': 1, 'profit_loss': 0.0, 'multiple': 0.0, 'diff': 3, 'version': 0, 'remark': '测试数据', 'deleted': 0, 'creator': 10000, 'create_time': datetime.datetime(2025, 7, 6, 10, 11, 23), 'updater': 10000, 'update_time': datetime.datetime(2025, 7, 6, 10, 12, 12), 'template_id': 1, 'follow_status': 1, 'is_first_sync': 0, 'login_node': '47.83.21.167:443', 'cfd': '', 'forex': '', 'node_type': 0, 'login_last_time': datetime.datetime(2025, 7, 6, 10, 11, 22), 'ab_remark': ''}]\n\ncommons\\api_base.py:273: TimeoutError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <lingkuan_706.test_foundation.test_delete_scene.TestDeleteTrader object at 0x00000289FABB5100>\nvar_manager = <lingkuan_706.commons.variable_manager.VariableManager object at 0x00000289FACA4190>\ndb_transaction = <pymysql.connections.Connection object at 0x00000289FABE18B0>\n\n    @allure.title(\"数据库校验-VPS数据-批量删除跟单账号\")\n    def test_dbdelete_addsalvelist(self, var_manager, db_transaction):\n        # 1. 获取账号总数和所有账号信息\n        addslave_count = var_manager.get_variable(\"addslave_count\", 0)\n        if addslave_count <= 0:\n            pytest.fail(\"未找到需要验证的账号数量，请检查前置步骤\")\n    \n        db_addslave_query = var_manager.get_variable(\"db_addslave_query\")\n        table = db_addslave_query[\"table\"]\n    \n        # 2. 循环验证每个账号的删除状态\n        for i in range(1, addslave_count + 1):\n            with allure.step(f\"验证第{i}个账号是否删除成功\"):\n                # 获取单个账号（与删除的ID对应）\n                account = var_manager.get_variable(f\"user_accounts_{i}\")\n                if not account:\n                    pytest.fail(f\"未找到需要验证的账号：user_accounts_{i}\")\n    \n                sql = f\"SELECT * FROM {table} WHERE account = %s\"\n                # 调用轮询等待方法（带时间范围过滤）\n                try:\n                    self.wait_for_database_deletion(\n                        db_transaction=db_transaction,\n                        sql=sql,\n                        params=(account,),\n                        timeout=WAIT_TIMEOUT,  # 设置60秒超时时间\n                        poll_interval=POLL_INTERVAL  # 每2秒查询一次\n                    )\n                    allure.attach(f\"跟单账号 {account} 已成功从数据库删除\", \"验证结果\")\n                except TimeoutError as e:\n                    allure.attach(f\"删除超时: {str(e)}\", \"验证结果\")\n>                   pytest.fail(f\"删除失败: {str(e)}\")\nE                   Failed: 删除失败: 等待超时（60秒），记录仍然存在。\nE                   SQL: SELECT * FROM follow_trader WHERE account = %s\nE                   参数: ('119999354',)\nE                   最终结果: [{'id': 5864, 'account': '119999354', 'is_demo': 1, 'type': 1, 'password': '60e230abc816a01749f119307e24efb7', 'platform_id': 390, 'platform': 'FXAdamantStone-Demo', 'status': 0, 'status_extra': '启动成功', 'ip_addr': '39.99.136.49', 'server_id': 6, 'server_name': '主VPS', 'euqit': 100022978.13, 'balance': 100022978.13, 'free_margin': 100022978.13, 'margin_proportion': 0.0, 'leverage': 1, 'profit_loss': 0.0, 'multiple': 0.0, 'diff': 3, 'version': 0, 'remark': '测试数据', 'deleted': 0, 'creator': 10000, 'create_time': datetime.datetime(2025, 7, 6, 10, 11, 23), 'updater': 10000, 'update_time': datetime.datetime(2025, 7, 6, 10, 12, 12), 'template_id': 1, 'follow_status': 1, 'is_first_sync': 0, 'login_node': '47.83.21.167:443', 'cfd': '', 'forex': '', 'node_type': 0, 'login_last_time': datetime.datetime(2025, 7, 6, 10, 11, 22), 'ab_remark': ''}]\n\ntest_foundation\\test_delete_scene.py:156: Failed","steps":[{"name":"验证第1个账号是否删除成功","time":{"start":1751769145108,"stop":1751769145264,"duration":156},"status":"passed","steps":[],"attachments":[{"uid":"738e3dbadad30725","name":"验证结果","source":"738e3dbadad30725.attach","type":"text/plain","size":50}],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true,"stepsCount":0,"attachmentStep":false},{"name":"验证第2个账号是否删除成功","time":{"start":1751769145264,"stop":1751769206577,"duration":61313},"status":"failed","statusMessage":"Failed: 删除失败: 等待超时（60秒），记录仍然存在。\nSQL: SELECT * FROM follow_trader WHERE account = %s\n参数: ('119999354',)\n最终结果: [{'id': 5864, 'account': '119999354', 'is_demo': 1, 'type': 1, 'password': '60e230abc816a01749f119307e24efb7', 'platform_id': 390, 'platform': 'FXAdamantStone-Demo', 'status': 0, 'status_extra': '启动成功', 'ip_addr': '39.99.136.49', 'server_id': 6, 'server_name': '主VPS', 'euqit': 100022978.13, 'balance': 100022978.13, 'free_margin': 100022978.13, 'margin_proportion': 0.0, 'leverage': 1, 'profit_loss': 0.0, 'multiple': 0.0, 'diff': 3, 'version': 0, 'remark': '测试数据', 'deleted': 0, 'creator': 10000, 'create_time': datetime.datetime(2025, 7, 6, 10, 11, 23), 'updater': 10000, 'update_time': datetime.datetime(2025, 7, 6, 10, 12, 12), 'template_id': 1, 'follow_status': 1, 'is_first_sync': 0, 'login_node': '47.83.21.167:443', 'cfd': '', 'forex': '', 'node_type': 0, 'login_last_time': datetime.datetime(2025, 7, 6, 10, 11, 22), 'ab_remark': ''}]\n","statusTrace":"  File \"D:\\Practice\\pycharm_test\\pycharm_test\\lingkuan_706\\test_foundation\\test_delete_scene.py\", line 156, in test_dbdelete_addsalvelist\n    pytest.fail(f\"删除失败: {str(e)}\")\n  File \"D:\\Practice\\python\\ronghuai_interfaceTest\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 198, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[{"uid":"50c63f85a2ed0f3a","name":"验证结果","source":"50c63f85a2ed0f3a.attach","type":"text/plain","size":1013}],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true,"stepsCount":0,"attachmentStep":false}],"attachments":[{"uid":"e9444e920d2358","name":"log","source":"e9444e920d2358.txt","type":"text/plain","size":59086}],"parameters":[],"attachmentsCount":3,"shouldDisplayMessage":true,"hasContent":true,"stepsCount":2,"attachmentStep":false},"afterStages":[{"name":"db_transaction::0","time":{"start":1751769206653,"stop":1751769206701,"duration":48},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"db::0","time":{"start":1751769443049,"stop":1751769443049,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"var_manager::0","time":{"start":1751769443052,"stop":1751769443052,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0,"attachmentStep":false}],"labels":[{"name":"feature","value":"删除跟单账号和策略账号"},{"name":"parentSuite","value":"test_foundation"},{"name":"suite","value":"test_delete_scene"},{"name":"subSuite","value":"TestDeleteTrader"},{"name":"host","value":"xujunhao"},{"name":"thread","value":"22792-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_foundation.test_delete_scene"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"4de31866140adac.json","parameterValues":[]}