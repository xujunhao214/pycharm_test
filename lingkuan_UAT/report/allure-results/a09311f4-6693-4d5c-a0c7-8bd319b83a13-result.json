{"name": "账号管理-账号列表-新增单个用户", "status": "failed", "statusDetails": {"message": "Failed: 经过 3 次重试后仍登录失败，请检查MFA密钥或账号密码", "trace": "api_session = <lingkuan_UAT.commons.session.EnvironmentSession object at 0x000002872CC1A7C0>\nvar_manager = <lingkuan_UAT.commons.variable_manager.VariableManager object at 0x000002872CC1AE20>\nrequest = <SubRequest 'logged_session' for <Function test_create_user>>\n\n    @pytest.fixture(scope=\"function\")\n    def logged_session(api_session, var_manager, request):\n        # 1. 配置重试参数（可根据需求调整）\n        max_retries = 3  # 最大重试次数\n        retry_interval = 15  # 重试间隔（秒），确保验证码刷新（30秒有效期内）\n    \n        # 2. 始终使用base_url进行登录\n        api_session.use_base_url()\n        logger.info(f\"[{DATETIME_NOW}] 用例 {request.node.nodeid} 使用默认URL登录: {api_session.base_url}\")\n    \n        # 3. 执行带重试的登录逻辑\n        login_data = var_manager.get_variable(\"login\")\n        access_token = None\n    \n        for attempt in range(max_retries):\n            try:\n                # 生成新的验证码（每次重试都重新生成，避免过期）\n                mfa_code = generate_code(MFA_SECRET_KEY)\n                logger.info(f\"登录尝试 {attempt + 1}/{max_retries}，生成MFA验证码: {mfa_code}\")\n    \n                # 构建登录请求数据\n                json_data = {\n                    \"username\": login_data[\"username\"],\n                    \"password\": login_data[\"password\"],\n                    \"captcha\": \"\",\n                    \"key\": \"\",\n                    \"secretKey\": \"\",\n                    \"code\": mfa_code,\n                    \"isMfaVerified\": 1,\n                    \"isStartMfaVerify\": 1\n                }\n    \n                # 发送登录请求\n                response = api_session.post(\"/sys/auth/login\", json=json_data)\n                response.raise_for_status()  # 触发HTTP错误（如500/401）\n                response_json = response.json()\n    \n                # 验证登录成功（根据实际响应调整）\n                if response_json.get(\"code\") != 0:  # 假设code=0为成功\n                    raise ValueError(f\"登录失败: {response_json.get('msg', '未知错误')}\")\n    \n                # 提取并设置token\n                access_token = response_json[\"data\"][\"access_token\"]\n                if not access_token:\n                    raise ValueError(\"登录成功但未返回access_token\")\n    \n                # 登录成功，跳出循环\n                logger.info(f\"登录成功（第{attempt + 1}次尝试），获取到token\")\n                break\n    \n            except Exception as e:\n                # 捕获所有登录相关错误（网络错误、验证码无效、服务器错误等）\n                logger.warning(f\"第{attempt + 1}次登录失败: {str(e)}\")\n                if attempt < max_retries - 1:\n                    logger.info(f\"等待 {retry_interval} 秒后重试...\")\n                    time.sleep(retry_interval)  # 等待后重试\n    \n        # 4. 登录最终结果判断\n        if not access_token:\n            # 所有重试都失败，标记用例失败\n>           pytest.fail(f\"经过 {max_retries} 次重试后仍登录失败，请检查MFA密钥或账号密码\")\nE           Failed: 经过 3 次重试后仍登录失败，请检查MFA密钥或账号密码\n\nconftest.py:117: Failed"}, "attachments": [{"name": "log", "source": "2791fdfe-4b2b-4363-b010-b970f4054d0a-attachment.txt", "type": "text/plain"}], "start": 1754534070154, "stop": 1754534070154, "uuid": "4f414b08-ad29-4425-9e9d-2b1690aa80b7", "historyId": "9e53eb78533d7b7a174e7b5edf17fc33", "testCaseId": "9e53eb78533d7b7a174e7b5edf17fc33", "fullName": "test_vps.test_create.TestCreate#test_create_user", "labels": [{"name": "feature", "value": "账号管理-创建基本信息"}, {"name": "parentSuite", "value": "test_vps"}, {"name": "suite", "value": "test_create"}, {"name": "subSuite", "value": "TestCreate"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "30300-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_vps.test_create"}]}