{"name": "数据库校验-策略开仓-持仓检查主账号数据", "status": "broken", "statusDetails": {"message": "TimeoutError: 等待超时（30秒），未查询到任何数据。\nSQL: \n                SELECT * \n                FROM follow_order_detail \n                WHERE symbol LIKE %s \n                  AND send_no = %s \n                  AND type = %s \n                  AND trader_id = %s\n                \n参数: ('%XAUUSD%', None, '0', 5458)", "trace": "self = <lingkuan_UAT.test_vps.test_vps_Leakage_open2.TestLeakageopen object at 0x000001DEDCC7BFD0>\nvar_manager = <lingkuan_UAT.commons.variable_manager.VariableManager object at 0x000001DEDCC2E2B0>\ndb_transaction = <pymysql.connections.Connection object at 0x000001DEDCCF54C0>\n\n    @allure.title(\"数据库校验-策略开仓-持仓检查主账号数据\")\n    def test_dbquery_order_detail(self, var_manager, db_transaction):\n        with allure.step(\"1. 根据下单指令仓库的order_no字段获取订单详情\"):\n            order_no = var_manager.get_variable(\"order_no\")\n            vps_trader_id = var_manager.get_variable(\"vps_trader_id\")\n            trader_ordersend = var_manager.get_variable(\"trader_ordersend\")\n            symbol = trader_ordersend[\"symbol\"]\n    \n            sql = f\"\"\"\n                SELECT *\n                FROM follow_order_detail\n                WHERE symbol LIKE %s\n                  AND send_no = %s\n                  AND type = %s\n                  AND trader_id = %s\n                \"\"\"\n            params = (\n                f\"%{symbol}%\",\n                order_no,\n                trader_ordersend[\"type\"],\n                vps_trader_id\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n>           db_data = self.wait_for_database_record(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"create_time\",  # 按创建时间过滤\n                time_range=MYSQL_TIME,  # 只查前后2分钟的数据\n                timeout=WAIT_TIMEOUT,  # 最多等36秒\n                poll_interval=POLL_INTERVAL,  # 每2秒查一次\n                stable_period=STBLE_PERIOD,  # 新增：数据连续3秒不变则认为加载完成\n                order_by=\"create_time DESC\"  # 按创建时间倒序\n            )\n\ntest_vps\\test_vps_Leakage_open2.py:227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_UAT.test_vps.test_vps_Leakage_open2.TestLeakageopen object at 0x000001DEDCC7BFD0>\ndb_transaction = <pymysql.connections.Connection object at 0x000001DEDCCF54C0>\nsql = '\\n                SELECT * \\n                FROM follow_order_detail \\n                WHERE symbol LIKE %s \\n                  AND send_no = %s \\n                  AND type = %s \\n                  AND trader_id = %s\\n                '\nparams = ('%XAUUSD%', None, '0', 5458), time_field = 'create_time'\ntime_range = 1, order_by = 'create_time DESC', timeout = 30, poll_interval = 2\nstable_period = 3\n\n    def wait_for_database_record(\n            self,\n            db_transaction: pymysql.connections.Connection,\n            sql: str,\n            params: tuple = (),\n            time_field: Optional[str] = None,\n            time_range: int = 1,\n            order_by: str = \"create_time DESC\",\n            timeout: int = 60,\n            poll_interval: int = 2,\n            stable_period: int = 5  # 稳定期（秒）：数据连续N秒不变则认为加载完成\n    ) -> List[Dict[str, Any]]:\n        \"\"\"\n        轮询等待数据库记录出现（等待数据稳定）\n        \"\"\"\n        import time\n        start_time = time.time()\n        last_result = None\n        stable_start_time = None\n        has_data = False  # 标记是否查询到过数据\n    \n        logger.info(\n            f\"[{DATETIME_NOW}] 开始等待数据库记录稳定 | \"\n            f\"SQL: {sql[:200]} | \"\n            f\"超时: {timeout}秒 | \"\n            f\"稳定期: {stable_period}秒\"\n        )\n    \n        while time.time() - start_time < timeout:\n            try:\n                db_transaction.commit()  # 刷新事务\n                result = self._execute_query(\n                    db_transaction, sql, params, time_field, order_by, time_range\n                )\n    \n                # 检查是否有数据\n                if len(result) > 0:\n                    has_data = True\n                    # 判断结果是否稳定（数量和内容都不变）\n                    if self._is_result_stable(result, last_result):\n                        if stable_start_time is None:\n                            stable_start_time = time.time()\n                            logger.debug(f\"[{DATETIME_NOW}] 数据首次稳定，开始计时\")\n                        elif time.time() - stable_start_time >= stable_period:\n                            logger.info(\n                                f\"[{DATETIME_NOW}] 数据已稳定{stable_period}秒（耗时{time.time() - start_time:.1f}秒）| \"\n                                f\"结果数: {len(result)}\"\n                            )\n                            return result\n                    else:\n                        stable_start_time = None  # 结果变化，重置稳定计时器\n                        logger.debug(f\"[{DATETIME_NOW}] 数据仍在变化，重置稳定计时器\")\n                else:\n                    # 结果为空，重置稳定计时器\n                    stable_start_time = None\n                    has_data = False\n                    logger.debug(f\"[{DATETIME_NOW}] 查询结果为空，继续等待\")\n    \n                last_result = result\n                elapsed = time.time() - start_time\n                logger.debug(\n                    f\"[{DATETIME_NOW}] 等待数据稳定（已等待{elapsed:.1f}秒）| \"\n                    f\"当前结果数: {len(result)} | \"\n                    f\"稳定时间: {time.time() - stable_start_time if stable_start_time else 0:.1f}/{stable_period}秒\"\n                )\n                time.sleep(poll_interval)\n    \n            except Exception as e:\n                logger.warning(f\"[{DATETIME_NOW}] 轮询查询异常: {str(e)} | 继续等待...\")\n                time.sleep(poll_interval)\n    \n        # 超时处理\n        final_result = self._execute_query(\n            db_transaction, sql, params, time_field, order_by, time_range\n        )\n    \n        if len(final_result) == 0:\n>           raise TimeoutError(\n                f\"等待超时（{timeout}秒），未查询到任何数据。\\n\"\n                f\"SQL: {sql}\\n\"\n                f\"参数: {params}\"\n            )\nE           TimeoutError: 等待超时（30秒），未查询到任何数据。\nE           SQL: \nE                           SELECT * \nE                           FROM follow_order_detail \nE                           WHERE symbol LIKE %s \nE                             AND send_no = %s \nE                             AND type = %s \nE                             AND trader_id = %s\nE                           \nE           参数: ('%XAUUSD%', None, '0', 5458)\n\ncommons\\api_base.py:482: TimeoutError"}, "steps": [{"name": "1. 根据下单指令仓库的order_no字段获取订单详情", "status": "broken", "statusDetails": {"message": "TimeoutError: 等待超时（30秒），未查询到任何数据。\nSQL: \n                SELECT * \n                FROM follow_order_detail \n                WHERE symbol LIKE %s \n                  AND send_no = %s \n                  AND type = %s \n                  AND trader_id = %s\n                \n参数: ('%XAUUSD%', None, '0', 5458)\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_UAT\\test_vps\\test_vps_Leakage_open2.py\", line 227, in test_dbquery_order_detail\n    db_data = self.wait_for_database_record(\n  File \"D:\\pycharm_test\\lingkuan_UAT\\commons\\api_base.py\", line 482, in wait_for_database_record\n    raise TimeoutError(\n"}, "start": 1753236985014, "stop": 1753237016704}], "attachments": [{"name": "log", "source": "5ba9e699-027e-4b15-a1ef-fc99c96d13bd-attachment.txt", "type": "text/plain"}], "start": 1753236985014, "stop": 1753237016704, "uuid": "9b865a19-66c6-45c0-91d2-66b8619ce3f0", "historyId": "20625a387e56d13298e38df109862d65", "testCaseId": "20625a387e56d13298e38df109862d65", "fullName": "test_vps.test_vps_Leakage_open2.TestLeakageopen#test_dbquery_order_detail", "labels": [{"name": "feature", "value": "VPS策略下单-漏开"}, {"name": "parentSuite", "value": "test_vps"}, {"name": "suite", "value": "test_vps_Leakage_open2"}, {"name": "subSuite", "value": "TestLeakageopen"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "43092-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_vps.test_vps_Leakage_open2"}]}