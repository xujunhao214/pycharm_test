{"name": "数据库校验-策略开仓-跟单开仓指令", "status": "broken", "statusDetails": {"message": "TimeoutError: 数据库查询超时，未找到记录 (SQL: \n                SELECT * \n                FROM follow_order_instruct \n                WHERE symbol LIKE %s \n                  AND status = %s \n                  AND if_follow = %s\n                  AND master_order_status = %s \n                  AND type = %s \n                  AND trader_id = %s\n                , PARAMS: ('%XAUUSD%', '1', '1', '0', '0', 5429))", "trace": "self = <lingkuan_youhua10.test_youhua.test_vps_ordersend.TestVPSOrderSend object at 0x000001FC156B99D0>\nvar_manager = <lingkuan_youhua10.commons.variable_manager.VariableManager object at 0x000001FC156CE730>\ndb_transaction = <pymysql.connections.Connection object at 0x000001FC15745DC0>\n\n    @allure.title(\"数据库校验-策略开仓-跟单开仓指令\")\n    def test_dbquery_orderSend_addsalve(self, var_manager, db_transaction):\n        with allure.step(\"1. 查询数据库验证是否有跟单开仓指令\"):\n            vps_trader_id = var_manager.get_variable(\"vps_trader_id\")\n            trader_ordersend = var_manager.get_variable(\"trader_ordersend\")\n            add_Slave = var_manager.get_variable(\"add_Slave\")\n    \n            table_name = trader_ordersend[\"table\"]\n            symbol = trader_ordersend[\"symbol\"]\n    \n            sql = f\"\"\"\n                SELECT *\n                FROM {table_name}\n                WHERE symbol LIKE %s\n                  AND status = %s\n                  AND if_follow = %s\n                  AND master_order_status = %s\n                  AND type = %s\n                  AND trader_id = %s\n                \"\"\"\n            params = (\n                f\"%{symbol}%\",\n                \"1\",\n                \"1\",\n                \"0\",\n                trader_ordersend[\"type\"],\n                vps_trader_id\n            )\n    \n            # 使用智能等待查询\n>           db_data = self.wait_for_database_record(\n                db_transaction,\n                sql,\n                params,\n                time_field=\"create_time\",\n                time_range=MYSQL_TIME,\n                timeout=WAIT_TIMEOUT,\n                poll_interval=POLL_INTERVAL\n            )\n\ntest_youhua\\test_vps_ordersend.py:159: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommons\\api_base.py:155: in wait_for_database_record\n    return wait_for_condition(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncondition = <function APITestBase.wait_for_database_record.<locals>.check_db at 0x000001FC15759700>\ntimeout = 30, poll_interval = 2\nerror_message = \"数据库查询超时，未找到记录 (SQL: \\n                SELECT * \\n                FROM follow_order_instruct \\n                WHERE s...ND type = %s \\n                  AND trader_id = %s\\n                , PARAMS: ('%XAUUSD%', '1', '1', '0', '0', 5429))\"\nstep_title = '等待数据库记录出现'\n\n    def wait_for_condition(\n            condition: Callable[[], Any],\n            timeout: int = 30,\n            poll_interval: float = 1.0,\n            error_message: str = \"等待条件超时未满足\",\n            step_title: Optional[str] = None\n    ) -> Any:\n        \"\"\"\n        智能等待条件满足，同时记录Allure步骤\n    \n        Args:\n            condition: 检查条件的函数，返回结果表示条件是否满足\n            timeout: 最长等待时间（秒）\n            poll_interval: 轮询间隔（秒）\n            error_message: 超时错误信息\n            step_title: Allure步骤标题，默认为\"等待条件满足\"\n    \n        Returns:\n            条件函数的返回值\n        \"\"\"\n        step_title = step_title or f\"等待条件满足 (超时: {timeout}秒)\"\n    \n        with allure.step(step_title):\n            start_time = time.time()\n            elapsed_time = 0\n            last_result = None\n    \n            while elapsed_time < timeout:\n                try:\n                    last_result = condition()\n                    allure.attach(\n                        f\"轮询检查结果 (已等待 {elapsed_time:.1f}秒): {last_result}\",\n                        name=\"条件检查日志\",\n                        attachment_type=allure.attachment_type.TEXT\n                    )\n    \n                    if last_result:\n                        allure.attach(\n                            f\"条件满足，耗时: {elapsed_time:.1f}秒\",\n                            name=\"最终结果\",\n                            attachment_type=allure.attachment_type.TEXT\n                        )\n                        return last_result\n                except Exception as e:\n                    allure.attach(\n                        f\"轮询异常 (已等待 {elapsed_time:.1f}秒): {str(e)}\",\n                        name=\"异常信息\",\n                        attachment_type=allure.attachment_type.TEXT\n                    )\n                    raise\n    \n                time.sleep(poll_interval)\n                elapsed_time = time.time() - start_time\n    \n            # 超时处理\n            allure.attach(\n                f\"等待超时 ({timeout}秒)，最终检查结果: {last_result}\",\n                name=\"超时信息\",\n                attachment_type=allure.attachment_type.TEXT\n            )\n>           raise TimeoutError(error_message)\nE           TimeoutError: 数据库查询超时，未找到记录 (SQL: \nE                           SELECT * \nE                           FROM follow_order_instruct \nE                           WHERE symbol LIKE %s \nE                             AND status = %s \nE                             AND if_follow = %s\nE                             AND master_order_status = %s \nE                             AND type = %s \nE                             AND trader_id = %s\nE                           , PARAMS: ('%XAUUSD%', '1', '1', '0', '0', 5429))\n\ncommons\\wait_utils.py:70: TimeoutError"}, "steps": [{"name": "1. 查询数据库验证是否有跟单开仓指令", "status": "broken", "statusDetails": {"message": "TimeoutError: 数据库查询超时，未找到记录 (SQL: \n                SELECT * \n                FROM follow_order_instruct \n                WHERE symbol LIKE %s \n                  AND status = %s \n                  AND if_follow = %s\n                  AND master_order_status = %s \n                  AND type = %s \n                  AND trader_id = %s\n                , PARAMS: ('%XAUUSD%', '1', '1', '0', '0', 5429))\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_youhua10\\test_youhua\\test_vps_ordersend.py\", line 159, in test_dbquery_orderSend_addsalve\n    db_data = self.wait_for_database_record(\n  File \"D:\\pycharm_test\\lingkuan_youhua10\\commons\\api_base.py\", line 155, in wait_for_database_record\n    return wait_for_condition(\n  File \"D:\\pycharm_test\\lingkuan_youhua10\\commons\\wait_utils.py\", line 70, in wait_for_condition\n    raise TimeoutError(error_message)\n"}, "steps": [{"name": "等待数据库记录出现", "status": "broken", "statusDetails": {"message": "TimeoutError: 数据库查询超时，未找到记录 (SQL: \n                SELECT * \n                FROM follow_order_instruct \n                WHERE symbol LIKE %s \n                  AND status = %s \n                  AND if_follow = %s\n                  AND master_order_status = %s \n                  AND type = %s \n                  AND trader_id = %s\n                , PARAMS: ('%XAUUSD%', '1', '1', '0', '0', 5429))\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_youhua10\\commons\\wait_utils.py\", line 70, in wait_for_condition\n    raise TimeoutError(error_message)\n"}, "attachments": [{"name": "条件检查日志", "source": "3d7ffb45-c0e4-4e75-9bcc-419a0c1c4a51-attachment.txt", "type": "text/plain"}, {"name": "条件检查日志", "source": "cb799121-b1a9-45df-a59c-4da78371c8ca-attachment.txt", "type": "text/plain"}, {"name": "条件检查日志", "source": "bb1ce77c-7325-4b02-b408-79b400356330-attachment.txt", "type": "text/plain"}, {"name": "条件检查日志", "source": "6ffd5b05-0c85-4466-a1f8-bbb9344f23ab-attachment.txt", "type": "text/plain"}, {"name": "条件检查日志", "source": "6a578732-2ace-44cb-9154-78a204e02968-attachment.txt", "type": "text/plain"}, {"name": "条件检查日志", "source": "c5272f84-80a2-4bc2-9e04-452780e825a4-attachment.txt", "type": "text/plain"}, {"name": "条件检查日志", "source": "1714810b-a31c-4dd6-91e7-f8ee9e9e79f4-attachment.txt", "type": "text/plain"}, {"name": "条件检查日志", "source": "97663c11-cfc5-4040-97f6-7e190ede4bbd-attachment.txt", "type": "text/plain"}, {"name": "条件检查日志", "source": "5b5e6477-c10d-4fcb-b466-737d08e6d147-attachment.txt", "type": "text/plain"}, {"name": "条件检查日志", "source": "bc62dd71-f368-4623-98f4-7083e92fc743-attachment.txt", "type": "text/plain"}, {"name": "条件检查日志", "source": "a74d4b4a-7051-4b01-aa66-a5a288035cf1-attachment.txt", "type": "text/plain"}, {"name": "条件检查日志", "source": "bedf062c-f5f3-4659-92d7-405db02164b7-attachment.txt", "type": "text/plain"}, {"name": "条件检查日志", "source": "d85a4a18-7672-4994-b3b0-456a8f48ff5f-attachment.txt", "type": "text/plain"}, {"name": "条件检查日志", "source": "c6b38013-b4cb-4608-bac0-09e86ed2d051-attachment.txt", "type": "text/plain"}, {"name": "条件检查日志", "source": "4a756d0a-3fa8-4eed-9124-8aed81012860-attachment.txt", "type": "text/plain"}, {"name": "超时信息", "source": "34674f70-d000-48eb-9025-ceed1dc0c4d2-attachment.txt", "type": "text/plain"}], "start": 1751026345009, "stop": 1751026376273}], "start": 1751026345008, "stop": 1751026376273}], "attachments": [{"name": "log", "source": "c8a1556e-24ac-418a-9bcb-d03c1e4612be-attachment.txt", "type": "text/plain"}], "start": 1751026345008, "stop": 1751026376274, "uuid": "56fc36b2-31ab-4b85-bbbd-200707de7603", "historyId": "87e66cd996505e06c2bb6b9b4dc61793", "testCaseId": "87e66cd996505e06c2bb6b9b4dc61793", "fullName": "test_youhua.test_vps_ordersend.TestVPSOrderSend#test_dbquery_orderSend_addsalve", "labels": [{"name": "feature", "value": "VPS策略下单-正常开仓平仓"}, {"name": "parentSuite", "value": "test_youhua"}, {"name": "suite", "value": "test_vps_ordersend"}, {"name": "subSuite", "value": "TestVPSOrderSend"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "24720-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_youhua.test_vps_ordersend"}]}