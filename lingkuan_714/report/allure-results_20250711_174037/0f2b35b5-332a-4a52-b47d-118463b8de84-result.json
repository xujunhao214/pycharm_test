{"name": "数据库校验-云策略列表-复制下单", "status": "broken", "statusDetails": {"message": "pymysql.err.ProgrammingError: (1146, \"Table 'follow-order-cp.none' doesn't exist\")", "trace": "self = <lingkuan_714.test_cloudTrader.test_cloudOrderSend_copy.TestMasordersend object at 0x000001B8616FC2E0>\nvar_manager = <lingkuan_714.commons.variable_manager.VariableManager object at 0x000001B861817790>\ndb_transaction = <pymysql.connections.Connection object at 0x000001B8615C4A30>\n\n    @allure.title(\"数据库校验-云策略列表-复制下单\")\n    def test_dbcloudTrader_cloudOrderSend(self, var_manager, db_transaction):\n        with allure.step(\"1. 查询数据库验证是否有下单\"):\n            cloudOrderSend = var_manager.get_variable(\"cloudOrderSend\")\n            follow_order_instruct = var_manager.get_variable(\"follow_order_instruct\")\n            vps_cloudTrader_ids_3 = var_manager.get_variable(\"vps_cloudTrader_ids_3\")\n            symbol = cloudOrderSend[\"symbol\"]\n    \n            sql = f\"\"\"\n            SELECT *\n            FROM {follow_order_instruct}\n            WHERE symbol LIKE %s\n              AND master_order_status = %s\n              AND type = %s\n              AND min_lot_size = %s\n              AND max_lot_size = %s\n              AND remark = %s\n              AND total_lots = %s\n              AND trader_id = %s\n            \"\"\"\n            params = (\n                f\"%{symbol}%\",\n                \"0\",\n                cloudOrderSend[\"type\"],\n                cloudOrderSend[\"endSize\"],\n                cloudOrderSend[\"startSize\"],\n                cloudOrderSend[\"remark\"],\n                cloudOrderSend[\"totalSzie\"],\n                vps_cloudTrader_ids_3\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n>           db_data = self.wait_for_database_record(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"create_time\",  # 按创建时间过滤\n                time_range=MYSQL_TIME,  # 只查前后2分钟的数据\n                timeout=WAIT_TIMEOUT,  # 最多等36秒\n                poll_interval=POLL_INTERVAL,  # 每2秒查一次\n                stable_period=STBLE_PERIOD,  # 新增：数据连续3秒不变则认为加载完成\n                order_by=\"create_time DESC\"  # 按创建时间倒序\n            )\n\ntest_cloudTrader\\test_cloudOrderSend_copy.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommons\\api_base.py:477: in wait_for_database_record\n    final_result = self._execute_query(\ncommons\\api_base.py:507: in _execute_query\n    return self.query_database_with_time(\ncommons\\api_base.py:327: in query_database_with_time\n    return self.query_database(\ncommons\\api_base.py:274: in query_database\n    cursor.execute(final_sql, params)\n..\\venv\\lib\\site-packages\\pymysql\\cursors.py:153: in execute\n    result = self._query(query)\n..\\venv\\lib\\site-packages\\pymysql\\cursors.py:322: in _query\n    conn.query(q)\n..\\venv\\lib\\site-packages\\pymysql\\connections.py:563: in query\n    self._affected_rows = self._read_query_result(unbuffered=unbuffered)\n..\\venv\\lib\\site-packages\\pymysql\\connections.py:825: in _read_query_result\n    result.read()\n..\\venv\\lib\\site-packages\\pymysql\\connections.py:1199: in read\n    first_packet = self.connection._read_packet()\n..\\venv\\lib\\site-packages\\pymysql\\connections.py:775: in _read_packet\n    packet.raise_for_error()\n..\\venv\\lib\\site-packages\\pymysql\\protocol.py:219: in raise_for_error\n    err.raise_mysql_exception(self._data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = b\"\\xffz\\x04#42S02Table 'follow-order-cp.none' doesn't exist\"\n\n    def raise_mysql_exception(data):\n        errno = struct.unpack(\"<h\", data[1:3])[0]\n        # https://dev.mysql.com/doc/dev/mysql-server/latest/page_protocol_basic_err_packet.html\n        # Error packet has optional sqlstate that is 5 bytes and starts with '#'.\n        if data[3] == 0x23:  # '#'\n            # sqlstate = data[4:9].decode()\n            # TODO: Append (sqlstate) in the error message. This will be come in next minor release.\n            errval = data[9:].decode(\"utf-8\", \"replace\")\n        else:\n            errval = data[3:].decode(\"utf-8\", \"replace\")\n        errorclass = error_map.get(errno)\n        if errorclass is None:\n            errorclass = InternalError if errno < 1000 else OperationalError\n>       raise errorclass(errno, errval)\nE       pymysql.err.ProgrammingError: (1146, \"Table 'follow-order-cp.none' doesn't exist\")\n\n..\\venv\\lib\\site-packages\\pymysql\\err.py:150: ProgrammingError"}, "steps": [{"name": "1. 查询数据库验证是否有下单", "status": "broken", "statusDetails": {"message": "pymysql.err.ProgrammingError: (1146, \"Table 'follow-order-cp.none' doesn't exist\")\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_714\\test_cloudTrader\\test_cloudOrderSend_copy.py\", line 82, in test_dbcloudTrader_cloudOrderSend\n    db_data = self.wait_for_database_record(\n  File \"D:\\pycharm_test\\lingkuan_714\\commons\\api_base.py\", line 477, in wait_for_database_record\n    final_result = self._execute_query(\n  File \"D:\\pycharm_test\\lingkuan_714\\commons\\api_base.py\", line 507, in _execute_query\n    return self.query_database_with_time(\n  File \"D:\\pycharm_test\\lingkuan_714\\commons\\api_base.py\", line 327, in query_database_with_time\n    return self.query_database(\n  File \"D:\\pycharm_test\\lingkuan_714\\commons\\api_base.py\", line 274, in query_database\n    cursor.execute(final_sql, params)\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\pymysql\\cursors.py\", line 153, in execute\n    result = self._query(query)\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\pymysql\\cursors.py\", line 322, in _query\n    conn.query(q)\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\pymysql\\connections.py\", line 563, in query\n    self._affected_rows = self._read_query_result(unbuffered=unbuffered)\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\pymysql\\connections.py\", line 825, in _read_query_result\n    result.read()\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\pymysql\\connections.py\", line 1199, in read\n    first_packet = self.connection._read_packet()\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\pymysql\\connections.py\", line 775, in _read_packet\n    packet.raise_for_error()\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\pymysql\\protocol.py\", line 219, in raise_for_error\n    err.raise_mysql_exception(self._data)\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\pymysql\\err.py\", line 150, in raise_mysql_exception\n    raise errorclass(errno, errval)\n"}, "start": 1752227074392, "stop": 1752227106020}], "attachments": [{"name": "log", "source": "6451cef6-a98a-4793-b7a1-f9226def5449-attachment.txt", "type": "text/plain"}], "start": 1752227074392, "stop": 1752227106020, "uuid": "d33f4962-33d1-4692-82d3-3fc8fd665a93", "historyId": "4c25f3bab6b14b3406cd24492d681d75", "testCaseId": "4c25f3bab6b14b3406cd24492d681d75", "fullName": "test_cloudTrader.test_cloudOrderSend_copy.TestMasordersend#test_dbcloudTrader_cloudOrderSend", "labels": [{"name": "feature", "value": "云策略-复制下单"}, {"name": "parentSuite", "value": "test_cloudTrader"}, {"name": "suite", "value": "test_cloudOrderSend_copy"}, {"name": "subSuite", "value": "TestMasordersend"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "43456-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cloudTrader.test_cloudOrderSend_copy"}]}