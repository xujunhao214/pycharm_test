{"name": "出现漏开-redis数据和数据库的数据做比对", "status": "failed", "statusDetails": {"message": "AssertionError: 数据长度不一致: actual=2, expected=678", "trace": "self = <lingkuan_730.test_vps.test_vps_Leakage_open.TestLeakageopen object at 0x000001B528DD5070>\nvar_manager = <lingkuan_730.commons.variable_manager.VariableManager object at 0x000001B529099190>\ndb_transaction = <pymysql.connections.Connection object at 0x000001B528EA2E80>\nredis_order_data_send = [{'lots': 0.97, 'magic': 42122, 'openPrice': 3330.16, 'symbol': 'XAUUSD', ...}, {'lots': 0.03, 'magic': 57976, 'openPrice': 3330.16, 'symbol': 'XAUUSD', ...}]\n\n    @allure.title(\"出现漏开-redis数据和数据库的数据做比对\")\n    def test_dbquery_redis(self, var_manager, db_transaction, redis_order_data_send):\n        with allure.step(\"1. 获取订单详情界面跟单账号数据\"):\n            trader_ordersend = var_manager.get_variable(\"trader_ordersend\")\n            new_user = var_manager.get_variable(\"new_user\")\n            symbol = trader_ordersend[\"symbol\"]\n    \n            sql = f\"\"\"\n                       SELECT *\n                       FROM follow_order_detail\n                       WHERE symbol LIKE %s\n                         AND source_user = %s\n                         AND account = %s\n                       \"\"\"\n            params = (\n                f\"%{symbol}%\",\n                new_user[\"account\"],\n                new_user[\"account\"],\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n            db_data = self.wait_for_database_record(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params\n            )\n    \n        with allure.step(\"2. 转换Redis数据为可比较格式\"):\n            if not redis_order_data_send:\n                pytest.fail(\"Redis中未查询到订单数据\")\n    \n            # 转换Redis数据为与数据库一致的格式\n            redis_comparable_list = convert_redis_orders_to_comparable_list(redis_order_data_send)\n            logging.info(f\"转换后的Redis数据: {redis_comparable_list}\")\n    \n            # 将转换后的数据存入变量管理器\n            var_manager.set_runtime_variable(\"redis_comparable_list\", redis_comparable_list)\n    \n        with allure.step(\"5. 比较Redis与数据库数据\"):\n            # 假设db_data是之前从数据库查询的结果\n            if not db_data:\n                pytest.fail(\"数据库中未查询到订单数据\")\n    \n            # 提取数据库中的关键字段（根据实际数据库表结构调整）\n            db_comparable_list = [\n                {\n                    \"order_no\": record[\"order_no\"],  # 数据库order_no → 统一字段order_no\n                    \"magical\": record[\"magical\"],  # 数据库magical → 统一字段magical\n                    \"size\": float(record[\"size\"]),  # 数据库size → 统一字段size\n                    \"open_price\": float(record[\"open_price\"]),\n                    \"symbol\": record[\"symbol\"]\n                }\n                for record in db_data\n            ]\n            logging.info(f\"数据库转换后: {db_comparable_list}\")\n            # 比较两个列表（可根据需要调整比较逻辑）\n>           self.assert_data_lists_equal(\n                actual=redis_comparable_list,\n                expected=db_comparable_list,\n                fields_to_compare=[\"order_no\", \"magical\", \"size\", \"open_price\", \"symbol\"],\n                tolerance=1e-6  # 浮点数比较容差\n            )\n\ntest_vps\\test_vps_Leakage_open.py:314: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_730.test_vps.test_vps_Leakage_open.TestLeakageopen object at 0x000001B528DD5070>\nactual = [{'magical': 42122, 'open_price': 3330.16, 'order_no': 332569, 'size': 0.97, ...}, {'magical': 57976, 'open_price': 3330.16, 'order_no': 332570, 'size': 0.03, ...}]\nexpected = [{'magical': 42122, 'open_price': 3330.16, 'order_no': 332569, 'size': 0.97, ...}, {'magical': 57976, 'open_price': 33...no': 332563, 'size': 0.59, ...}, {'magical': 85809, 'open_price': 3326.46, 'order_no': 332547, 'size': 0.67, ...}, ...]\nfields_to_compare = ['order_no', 'magical', 'size', 'open_price', 'symbol']\ntolerance = 1e-06\n\n    def assert_data_lists_equal(self, actual, expected, fields_to_compare, tolerance=1e-9):\n        # 按统一字段order_no排序（替换原来的ticket）\n        actual_sorted = sorted(actual, key=lambda x: x[\"order_no\"])\n        expected_sorted = sorted(expected, key=lambda x: x[\"order_no\"])\n    \n        # 检查长度\n>       assert len(actual_sorted) == len(expected_sorted), \\\n            f\"数据长度不一致: actual={len(actual_sorted)}, expected={len(expected_sorted)}\"\nE       AssertionError: 数据长度不一致: actual=2, expected=678\n\ncommons\\api_base.py:824: AssertionError"}, "steps": [{"name": "1. 获取订单详情界面跟单账号数据", "status": "passed", "start": 1753877031713, "stop": 1753877045285}, {"name": "2. 转换Redis数据为可比较格式", "status": "passed", "start": 1753877045286, "stop": 1753877045287}, {"name": "5. 比较Redis与数据库数据", "status": "failed", "statusDetails": {"message": "AssertionError: 数据长度不一致: actual=2, expected=678\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_730\\test_vps\\test_vps_Leakage_open.py\", line 314, in test_dbquery_redis\n    self.assert_data_lists_equal(\n  File \"D:\\pycharm_test\\lingkuan_730\\commons\\api_base.py\", line 824, in assert_data_lists_equal\n    assert len(actual_sorted) == len(expected_sorted), \\\n"}, "start": 1753877045287, "stop": 1753877045289}], "attachments": [{"name": "log", "source": "645fc6a3-3fed-44f3-9e21-3d49f7b97e66-attachment.txt", "type": "text/plain"}], "start": 1753877031713, "stop": 1753877045290, "uuid": "bb77942e-9230-43bd-bd3d-be5d6ec224e0", "historyId": "632fe0c361885095e894f134e4dae946", "testCaseId": "632fe0c361885095e894f134e4dae946", "fullName": "test_vps.test_vps_Leakage_open.TestLeakageopen#test_dbquery_redis", "labels": [{"name": "feature", "value": "VPS策略下单-漏开"}, {"name": "parentSuite", "value": "test_vps"}, {"name": "suite", "value": "test_vps_Leakage_open"}, {"name": "subSuite", "value": "TestLeakageopen"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "33948-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_vps.test_vps_Leakage_open"}]}