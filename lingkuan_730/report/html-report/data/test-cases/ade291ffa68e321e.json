{
  "uid" : "ade291ffa68e321e",
  "name" : "出现漏开-redis数据和数据库的数据做比对",
  "fullName" : "test_vps.test_vps_Leakage_open.TestLeakageopen#test_dbquery_redis",
  "historyId" : "632fe0c361885095e894f134e4dae946",
  "time" : {
    "start" : 1753875723141,
    "stop" : 1753875736996,
    "duration" : 13855
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: 数据长度不一致: actual=3, expected=665",
  "statusTrace" : "self = <lingkuan_730.test_vps.test_vps_Leakage_open.TestLeakageopen object at 0x000002518DCE29D0>\nvar_manager = <lingkuan_730.commons.variable_manager.VariableManager object at 0x000002518DEF5D90>\ndb_transaction = <pymysql.connections.Connection object at 0x000002518DD221C0>\nredis_order_data_send = [{'lots': 0.4, 'magic': 66415, 'openPrice': 3327.64, 'symbol': 'XAUUSD', ...}, {'lots': 0.28, 'magic': 31462, 'openPrice': 3327.64, 'symbol': 'XAUUSD', ...}, {'lots': 0.32, 'magic': 66349, 'openPrice': 3327.64, 'symbol': 'XAUUSD', ...}]\n\n    @allure.title(\"出现漏开-redis数据和数据库的数据做比对\")\n    def test_dbquery_redis(self, var_manager, db_transaction, redis_order_data_send):\n        with allure.step(\"1. 获取订单详情界面跟单账号数据\"):\n            trader_ordersend = var_manager.get_variable(\"trader_ordersend\")\n            new_user = var_manager.get_variable(\"new_user\")\n            symbol = trader_ordersend[\"symbol\"]\n    \n            sql = f\"\"\"\n                       SELECT *\n                       FROM follow_order_detail\n                       WHERE symbol LIKE %s\n                         AND source_user = %s\n                         AND account = %s\n                       \"\"\"\n            params = (\n                f\"%{symbol}%\",\n                new_user[\"account\"],\n                new_user[\"account\"],\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n            db_data = self.wait_for_database_record(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params\n            )\n    \n        with allure.step(\"2. 转换Redis数据为可比较格式\"):\n            if not redis_order_data_send:\n                pytest.fail(\"Redis中未查询到订单数据\")\n    \n            # 转换Redis数据为与数据库一致的格式\n            redis_comparable_list = convert_redis_orders_to_comparable_list(redis_order_data_send)\n            logging.info(f\"转换后的Redis数据: {redis_comparable_list}\")\n    \n            # 将转换后的数据存入变量管理器\n            var_manager.set_runtime_variable(\"redis_comparable_list\", redis_comparable_list)\n    \n        with allure.step(\"5. 比较Redis与数据库数据\"):\n            # 假设db_data是之前从数据库查询的结果\n            if not db_data:\n                pytest.fail(\"数据库中未查询到订单数据\")\n    \n            # 提取数据库中的关键字段（根据实际数据库表结构调整）\n            db_comparable_list = [\n                {\n                    \"order_no\": record[\"order_no\"],  # 数据库order_no → 统一字段order_no\n                    \"magical\": record[\"magical\"],  # 数据库magical → 统一字段magical\n                    \"size\": float(record[\"size\"]),  # 数据库size → 统一字段size\n                    \"open_price\": float(record[\"open_price\"]),\n                    \"symbol\": record[\"symbol\"]\n                }\n                for record in db_data\n            ]\n            logging.info(f\"数据库转换后: {db_comparable_list}\")\n            # 比较两个列表（可根据需要调整比较逻辑）\n>           self.assert_data_lists_equal(\n                actual=redis_comparable_list,\n                expected=db_comparable_list,\n                fields_to_compare=[\"order_no\", \"magical\", \"size\", \"open_price\", \"symbol\"],\n                tolerance=1e-6  # 浮点数比较容差\n            )\n\ntest_vps\\test_vps_Leakage_open.py:314: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_730.test_vps.test_vps_Leakage_open.TestLeakageopen object at 0x000002518DCE29D0>\nactual = [{'magical': 66415, 'open_price': 3327.64, 'order_no': 332519, 'size': 0.4, ...}, {'magical': 31462, 'open_price': 332...rder_no': 332517, 'size': 0.28, ...}, {'magical': 66349, 'open_price': 3327.64, 'order_no': 332518, 'size': 0.32, ...}]\nexpected = [{'magical': 31462, 'open_price': 3327.64, 'order_no': 332517, 'size': 0.28, ...}, {'magical': 66349, 'open_price': 33...no': 332507, 'size': 0.93, ...}, {'magical': 11075, 'open_price': 3328.92, 'order_no': 332453, 'size': 0.52, ...}, ...]\nfields_to_compare = ['order_no', 'magical', 'size', 'open_price', 'symbol']\ntolerance = 1e-06\n\n    def assert_data_lists_equal(self, actual, expected, fields_to_compare, tolerance=1e-9):\n        # 按统一字段order_no排序（替换原来的ticket）\n        actual_sorted = sorted(actual, key=lambda x: x[\"order_no\"])\n        expected_sorted = sorted(expected, key=lambda x: x[\"order_no\"])\n    \n        # 检查长度\n>       assert len(actual_sorted) == len(expected_sorted), \\\n            f\"数据长度不一致: actual={len(actual_sorted)}, expected={len(expected_sorted)}\"\nE       AssertionError: 数据长度不一致: actual=3, expected=665\n\ncommons\\api_base.py:824: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "redis_order_data_send",
    "time" : {
      "start" : 1753875722679,
      "stop" : 1753875723140,
      "duration" : 461
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "var_manager",
    "time" : {
      "start" : 1753875693582,
      "stop" : 1753875693583,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "db_config",
    "time" : {
      "start" : 1753875526521,
      "stop" : 1753875526521,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "redis_client",
    "time" : {
      "start" : 1753875722679,
      "stop" : 1753875722679,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "db",
    "time" : {
      "start" : 1753875526521,
      "stop" : 1753875526760,
      "duration" : 239
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "environment",
    "time" : {
      "start" : 1753875523273,
      "stop" : 1753875523273,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "db_transaction",
    "time" : {
      "start" : 1753875722632,
      "stop" : 1753875722679,
      "duration" : 47
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: 数据长度不一致: actual=3, expected=665",
    "statusTrace" : "self = <lingkuan_730.test_vps.test_vps_Leakage_open.TestLeakageopen object at 0x000002518DCE29D0>\nvar_manager = <lingkuan_730.commons.variable_manager.VariableManager object at 0x000002518DEF5D90>\ndb_transaction = <pymysql.connections.Connection object at 0x000002518DD221C0>\nredis_order_data_send = [{'lots': 0.4, 'magic': 66415, 'openPrice': 3327.64, 'symbol': 'XAUUSD', ...}, {'lots': 0.28, 'magic': 31462, 'openPrice': 3327.64, 'symbol': 'XAUUSD', ...}, {'lots': 0.32, 'magic': 66349, 'openPrice': 3327.64, 'symbol': 'XAUUSD', ...}]\n\n    @allure.title(\"出现漏开-redis数据和数据库的数据做比对\")\n    def test_dbquery_redis(self, var_manager, db_transaction, redis_order_data_send):\n        with allure.step(\"1. 获取订单详情界面跟单账号数据\"):\n            trader_ordersend = var_manager.get_variable(\"trader_ordersend\")\n            new_user = var_manager.get_variable(\"new_user\")\n            symbol = trader_ordersend[\"symbol\"]\n    \n            sql = f\"\"\"\n                       SELECT *\n                       FROM follow_order_detail\n                       WHERE symbol LIKE %s\n                         AND source_user = %s\n                         AND account = %s\n                       \"\"\"\n            params = (\n                f\"%{symbol}%\",\n                new_user[\"account\"],\n                new_user[\"account\"],\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n            db_data = self.wait_for_database_record(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params\n            )\n    \n        with allure.step(\"2. 转换Redis数据为可比较格式\"):\n            if not redis_order_data_send:\n                pytest.fail(\"Redis中未查询到订单数据\")\n    \n            # 转换Redis数据为与数据库一致的格式\n            redis_comparable_list = convert_redis_orders_to_comparable_list(redis_order_data_send)\n            logging.info(f\"转换后的Redis数据: {redis_comparable_list}\")\n    \n            # 将转换后的数据存入变量管理器\n            var_manager.set_runtime_variable(\"redis_comparable_list\", redis_comparable_list)\n    \n        with allure.step(\"5. 比较Redis与数据库数据\"):\n            # 假设db_data是之前从数据库查询的结果\n            if not db_data:\n                pytest.fail(\"数据库中未查询到订单数据\")\n    \n            # 提取数据库中的关键字段（根据实际数据库表结构调整）\n            db_comparable_list = [\n                {\n                    \"order_no\": record[\"order_no\"],  # 数据库order_no → 统一字段order_no\n                    \"magical\": record[\"magical\"],  # 数据库magical → 统一字段magical\n                    \"size\": float(record[\"size\"]),  # 数据库size → 统一字段size\n                    \"open_price\": float(record[\"open_price\"]),\n                    \"symbol\": record[\"symbol\"]\n                }\n                for record in db_data\n            ]\n            logging.info(f\"数据库转换后: {db_comparable_list}\")\n            # 比较两个列表（可根据需要调整比较逻辑）\n>           self.assert_data_lists_equal(\n                actual=redis_comparable_list,\n                expected=db_comparable_list,\n                fields_to_compare=[\"order_no\", \"magical\", \"size\", \"open_price\", \"symbol\"],\n                tolerance=1e-6  # 浮点数比较容差\n            )\n\ntest_vps\\test_vps_Leakage_open.py:314: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_730.test_vps.test_vps_Leakage_open.TestLeakageopen object at 0x000002518DCE29D0>\nactual = [{'magical': 66415, 'open_price': 3327.64, 'order_no': 332519, 'size': 0.4, ...}, {'magical': 31462, 'open_price': 332...rder_no': 332517, 'size': 0.28, ...}, {'magical': 66349, 'open_price': 3327.64, 'order_no': 332518, 'size': 0.32, ...}]\nexpected = [{'magical': 31462, 'open_price': 3327.64, 'order_no': 332517, 'size': 0.28, ...}, {'magical': 66349, 'open_price': 33...no': 332507, 'size': 0.93, ...}, {'magical': 11075, 'open_price': 3328.92, 'order_no': 332453, 'size': 0.52, ...}, ...]\nfields_to_compare = ['order_no', 'magical', 'size', 'open_price', 'symbol']\ntolerance = 1e-06\n\n    def assert_data_lists_equal(self, actual, expected, fields_to_compare, tolerance=1e-9):\n        # 按统一字段order_no排序（替换原来的ticket）\n        actual_sorted = sorted(actual, key=lambda x: x[\"order_no\"])\n        expected_sorted = sorted(expected, key=lambda x: x[\"order_no\"])\n    \n        # 检查长度\n>       assert len(actual_sorted) == len(expected_sorted), \\\n            f\"数据长度不一致: actual={len(actual_sorted)}, expected={len(expected_sorted)}\"\nE       AssertionError: 数据长度不一致: actual=3, expected=665\n\ncommons\\api_base.py:824: AssertionError",
    "steps" : [ {
      "name" : "1. 获取订单详情界面跟单账号数据",
      "time" : {
        "start" : 1753875723141,
        "stop" : 1753875736993,
        "duration" : 13852
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "2. 转换Redis数据为可比较格式",
      "time" : {
        "start" : 1753875736993,
        "stop" : 1753875736994,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "5. 比较Redis与数据库数据",
      "time" : {
        "start" : 1753875736994,
        "stop" : 1753875736995,
        "duration" : 1
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: 数据长度不一致: actual=3, expected=665\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\lingkuan_730\\test_vps\\test_vps_Leakage_open.py\", line 314, in test_dbquery_redis\n    self.assert_data_lists_equal(\n  File \"D:\\pycharm_test\\lingkuan_730\\commons\\api_base.py\", line 824, in assert_data_lists_equal\n    assert len(actual_sorted) == len(expected_sorted), \\\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true
    } ],
    "attachments" : [ {
      "uid" : "c94e5c8b787362ad",
      "name" : "log",
      "source" : "c94e5c8b787362ad.txt",
      "type" : "text/plain",
      "size" : 70732
    } ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "hasContent" : true,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "var_manager::0",
    "time" : {
      "start" : 1753876590223,
      "stop" : 1753876590224,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "redis_client::0",
    "time" : {
      "start" : 1753875737109,
      "stop" : 1753875737110,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "db::0",
    "time" : {
      "start" : 1753876590230,
      "stop" : 1753876590230,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "db_transaction::0",
    "time" : {
      "start" : 1753875737110,
      "stop" : 1753875737158,
      "duration" : 48
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "VPS策略下单-漏开"
  }, {
    "name" : "parentSuite",
    "value" : "test_vps"
  }, {
    "name" : "suite",
    "value" : "test_vps_Leakage_open"
  }, {
    "name" : "subSuite",
    "value" : "TestLeakageopen"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "34544-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_vps.test_vps_Leakage_open"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "ade291ffa68e321e.json",
  "parameterValues" : [ ]
}