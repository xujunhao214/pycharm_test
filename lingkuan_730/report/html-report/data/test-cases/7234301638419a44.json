{
  "uid" : "7234301638419a44",
  "name" : "修改跟单账号（仅使用后6个数据与模板匹配）",
  "fullName" : "test_vps.test_create_scene.TestCreate_Scene#test_update_addSlave",
  "historyId" : "34c34b56e7b5bfd8a49060656641e52d",
  "time" : {
    "start" : 1753876046047,
    "stop" : 1753876049169,
    "duration" : 3122
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: 账号300153响应异常（模板：账号300153-固定手数（5倍））\nURL: http://39.99.136.49:9001/subcontrol/follow/updateSlave\nJSON路径: $.msg\n实际值: 修改失败java.lang.NullPointerException: Cannot invoke \"net.maku.followcom.entity.FollowTraderEntity.getPassword()\" because \"followTraderEntity\" is null\n期望值: success",
  "statusTrace" : "self = <lingkuan_730.test_vps.test_create_scene.TestCreate_Scene object at 0x000002518DC67160>\nvar_manager = <lingkuan_730.commons.variable_manager.VariableManager object at 0x000002518DDB9190>\nlogged_session = <lingkuan_730.commons.session.EnvironmentSession object at 0x000002518F2FC190>\nencrypted_password = 'fa1af751c83d311f091c9393a364068c'\n\n    @pytest.mark.url(\"vps\")\n    @allure.title(\"修改跟单账号（仅使用后6个数据与模板匹配）\")\n    def test_update_addSlave(self, var_manager, logged_session, encrypted_password):\n        # 1. 获取总用户数（需确保至少有7个，才能取后6个）\n        user_count = var_manager.get_variable(\"user_count\", 0)\n        if user_count < 7:\n            pytest.fail(f\"用户总数需至少为7，当前为{user_count}，无法提取后6个数据\")\n    \n        # 2. 仅提取后6个账号（索引1~6，对应user_accounts_2~user_accounts_7）\n        all_accounts = []\n        for i in range(2, 8):  # 直接指定取2~7共6个账号\n            account = var_manager.get_variable(f\"user_accounts_{i}\")\n            if not account:\n                pytest.fail(f\"未找到第{i}个账号（变量：user_accounts_{i}）\")\n            all_accounts.append(account)\n        print(f\"已提取后6个账号：{all_accounts}\")\n    \n        all_ids = []\n        for i in range(1, 7):  # 直接指定取1~7共6个账号\n            addslave_id = var_manager.get_variable(f\"vps_addslave_ids_{i}\")\n            if not addslave_id:\n                pytest.fail(f\"未找到第{i}个账号（变量：vps_addslave_ids_{i}）\")\n            all_ids.append(addslave_id)\n        print(f\"已提取后6个账号id：{all_ids}\")\n    \n        template_id = var_manager.get_variable(\"template_id\")\n    \n        # 3. 定义6个模板（与账号一一对应）\n        templates: List[Dict[str, Any]] = [\n            {\n                \"followMode\": 0,\n                \"followParam\": \"5.00\",\n                \"templateId\": 1,\n                \"remark\": \"测试数据\",\n                \"Cfd\": \"\",\n                \"mode_desc\": \"固定手数（5倍）\"\n            },\n            {\n                \"followMode\": 1,\n                \"followParam\": \"1\",\n                \"templateId\": template_id,\n                \"remark\": \"测试数据\",\n                \"Cfd\": \"\",\n                \"mode_desc\": \"修改品种（3倍）\"\n            },\n            {\n                \"followMode\": 2,\n                \"followParam\": \"1\",\n                \"templateId\": 1,\n                \"remark\": \"测试数据\",\n                \"Cfd\": \"\",\n                \"mode_desc\": \"净值比例\"\n            },\n            {\n                \"followMode\": 1,\n                \"followParam\": \"1\",\n                \"templateId\": 1,\n                \"remark\": \"测试数据\",\n                \"Cfd\": \"@\",\n                \"mode_desc\": \"修改币种，合约是100\"\n            },\n            {\n                \"followMode\": 1,\n                \"followParam\": \"1\",\n                \"templateId\": 1,\n                \"remark\": \"测试数据\",\n                \"Cfd\": \".p\",\n                \"mode_desc\": \"修改币种，合约是100000\"\n            },\n            {\n                \"followMode\": 1,\n                \"followParam\": \"1\",\n                \"templateId\": 1,\n                \"remark\": \"测试数据\",\n                \"Cfd\": \".min\",\n                \"mode_desc\": \"修改币种，合约是10\"\n            },\n        ]\n    \n        # 4. 生成参数化数据（后6个账号与6个模板一一对应）\n        parametrize_data = []\n        for i in range(len(all_accounts)):\n            account = all_accounts[i]\n            id = all_ids[i]\n            template = templates[i]  # 直接一一对应（账号1→模板1，账号2→模板2，...）\n            parametrize_data.append({\n                \"account\": account,\n                \"followMode\": template[\"followMode\"],\n                \"followParam\": template[\"followParam\"],\n                \"templateId\": template[\"templateId\"],\n                \"remark\": template[\"remark\"],  # 修改备注\n                \"Cfd\": template[\"Cfd\"],  # 修改Cfd参数\n                \"id\": id,\n                \"desc\": f\"账号{account}-{template['mode_desc']}\"\n            })\n        print(f\"生成{len(parametrize_data)}条参数化测试数据（后6个账号）\")\n    \n        # 5. 循环执行后6个账号的修改操作\n        for param in parametrize_data:\n            with allure.step(f\"执行参数: {param['desc']}\"):\n                # 获取基础配置\n                new_user = var_manager.get_variable(\"new_user\")\n                vps_trader_id = var_manager.get_variable(\"vps_trader_id\")\n    \n                # 构造请求数据\n                data = {\n                    \"traderId\": vps_trader_id,\n                    \"platform\": new_user[\"platform\"],\n                    \"account\": param[\"account\"],\n                    \"password\": encrypted_password,\n                    \"remark\": param[\"remark\"],  # 备注包含模板信息\n                    \"followMode\": param[\"followMode\"],\n                    \"followParam\": param[\"followParam\"],\n                    \"templateId\": param[\"templateId\"],\n                    \"followDirection\": 0,\n                    \"remainder\": 0,\n                    \"placedType\": 0,\n                    \"followStatus\": 1,\n                    \"followOpen\": 1,\n                    \"followClose\": 1,\n                    \"followRep\": 0,\n                    \"fixedComment\": new_user[\"fixedComment\"],\n                    \"commentType\": 2,\n                    \"digits\": 0,\n                    \"cfd\": param[\"Cfd\"],  # 使用模板中的Cfd值\n                    \"forex\": \"\",\n                    \"abRemark\": \"\",\n                    \"id\": param[\"id\"]\n                }\n    \n                # 发送请求并验证\n                response = self.send_post_request(\n                    logged_session, '/subcontrol/follow/updateSlave', json_data=data\n                )\n    \n                self.assert_response_status(\n                    response, 200,\n                    f\"账号{param['account']}修改失败（模板：{param['desc']}）\"\n                )\n>               self.assert_json_value(\n                    response, \"$.msg\", \"success\",\n                    f\"账号{param['account']}响应异常（模板：{param['desc']}）\"\n                )\n\ntest_vps\\test_create_scene.py:381: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_730.test_vps.test_create_scene.TestCreate_Scene object at 0x000002518DC67160>\nresponse = <Response [200]>, json_path = '$.msg', expected_value = 'success'\nerror_msg = '账号300153响应异常（模板：账号300153-固定手数（5倍））'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg):\n        \"\"\"断言JSON路径对应的值（增强错误处理）\"\"\"\n        try:\n            actual_value = response.extract_jsonpath(json_path)\n>           assert actual_value == expected_value, (\n                f\"{error_msg}\\n\"\n                f\"URL: {response.url}\\n\"\n                f\"JSON路径: {json_path}\\n\"\n                f\"实际值: {actual_value}\\n\"\n                f\"期望值: {expected_value}\"\n            )\nE           AssertionError: 账号300153响应异常（模板：账号300153-固定手数（5倍））\nE           URL: http://39.99.136.49:9001/subcontrol/follow/updateSlave\nE           JSON路径: $.msg\nE           实际值: 修改失败java.lang.NullPointerException: Cannot invoke \"net.maku.followcom.entity.FollowTraderEntity.getPassword()\" because \"followTraderEntity\" is null\nE           期望值: success\n\ncommons\\api_base.py:261: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "api_session",
    "time" : {
      "start" : 1753876044095,
      "stop" : 1753876044095,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "var_manager",
    "time" : {
      "start" : 1753876009943,
      "stop" : 1753876009944,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "encrypted_password",
    "time" : {
      "start" : 1753876046046,
      "stop" : 1753876046046,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "logged_session",
    "time" : {
      "start" : 1753876044095,
      "stop" : 1753876046046,
      "duration" : 1951
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "environment",
    "time" : {
      "start" : 1753875523273,
      "stop" : 1753875523273,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: 账号300153响应异常（模板：账号300153-固定手数（5倍））\nURL: http://39.99.136.49:9001/subcontrol/follow/updateSlave\nJSON路径: $.msg\n实际值: 修改失败java.lang.NullPointerException: Cannot invoke \"net.maku.followcom.entity.FollowTraderEntity.getPassword()\" because \"followTraderEntity\" is null\n期望值: success",
    "statusTrace" : "self = <lingkuan_730.test_vps.test_create_scene.TestCreate_Scene object at 0x000002518DC67160>\nvar_manager = <lingkuan_730.commons.variable_manager.VariableManager object at 0x000002518DDB9190>\nlogged_session = <lingkuan_730.commons.session.EnvironmentSession object at 0x000002518F2FC190>\nencrypted_password = 'fa1af751c83d311f091c9393a364068c'\n\n    @pytest.mark.url(\"vps\")\n    @allure.title(\"修改跟单账号（仅使用后6个数据与模板匹配）\")\n    def test_update_addSlave(self, var_manager, logged_session, encrypted_password):\n        # 1. 获取总用户数（需确保至少有7个，才能取后6个）\n        user_count = var_manager.get_variable(\"user_count\", 0)\n        if user_count < 7:\n            pytest.fail(f\"用户总数需至少为7，当前为{user_count}，无法提取后6个数据\")\n    \n        # 2. 仅提取后6个账号（索引1~6，对应user_accounts_2~user_accounts_7）\n        all_accounts = []\n        for i in range(2, 8):  # 直接指定取2~7共6个账号\n            account = var_manager.get_variable(f\"user_accounts_{i}\")\n            if not account:\n                pytest.fail(f\"未找到第{i}个账号（变量：user_accounts_{i}）\")\n            all_accounts.append(account)\n        print(f\"已提取后6个账号：{all_accounts}\")\n    \n        all_ids = []\n        for i in range(1, 7):  # 直接指定取1~7共6个账号\n            addslave_id = var_manager.get_variable(f\"vps_addslave_ids_{i}\")\n            if not addslave_id:\n                pytest.fail(f\"未找到第{i}个账号（变量：vps_addslave_ids_{i}）\")\n            all_ids.append(addslave_id)\n        print(f\"已提取后6个账号id：{all_ids}\")\n    \n        template_id = var_manager.get_variable(\"template_id\")\n    \n        # 3. 定义6个模板（与账号一一对应）\n        templates: List[Dict[str, Any]] = [\n            {\n                \"followMode\": 0,\n                \"followParam\": \"5.00\",\n                \"templateId\": 1,\n                \"remark\": \"测试数据\",\n                \"Cfd\": \"\",\n                \"mode_desc\": \"固定手数（5倍）\"\n            },\n            {\n                \"followMode\": 1,\n                \"followParam\": \"1\",\n                \"templateId\": template_id,\n                \"remark\": \"测试数据\",\n                \"Cfd\": \"\",\n                \"mode_desc\": \"修改品种（3倍）\"\n            },\n            {\n                \"followMode\": 2,\n                \"followParam\": \"1\",\n                \"templateId\": 1,\n                \"remark\": \"测试数据\",\n                \"Cfd\": \"\",\n                \"mode_desc\": \"净值比例\"\n            },\n            {\n                \"followMode\": 1,\n                \"followParam\": \"1\",\n                \"templateId\": 1,\n                \"remark\": \"测试数据\",\n                \"Cfd\": \"@\",\n                \"mode_desc\": \"修改币种，合约是100\"\n            },\n            {\n                \"followMode\": 1,\n                \"followParam\": \"1\",\n                \"templateId\": 1,\n                \"remark\": \"测试数据\",\n                \"Cfd\": \".p\",\n                \"mode_desc\": \"修改币种，合约是100000\"\n            },\n            {\n                \"followMode\": 1,\n                \"followParam\": \"1\",\n                \"templateId\": 1,\n                \"remark\": \"测试数据\",\n                \"Cfd\": \".min\",\n                \"mode_desc\": \"修改币种，合约是10\"\n            },\n        ]\n    \n        # 4. 生成参数化数据（后6个账号与6个模板一一对应）\n        parametrize_data = []\n        for i in range(len(all_accounts)):\n            account = all_accounts[i]\n            id = all_ids[i]\n            template = templates[i]  # 直接一一对应（账号1→模板1，账号2→模板2，...）\n            parametrize_data.append({\n                \"account\": account,\n                \"followMode\": template[\"followMode\"],\n                \"followParam\": template[\"followParam\"],\n                \"templateId\": template[\"templateId\"],\n                \"remark\": template[\"remark\"],  # 修改备注\n                \"Cfd\": template[\"Cfd\"],  # 修改Cfd参数\n                \"id\": id,\n                \"desc\": f\"账号{account}-{template['mode_desc']}\"\n            })\n        print(f\"生成{len(parametrize_data)}条参数化测试数据（后6个账号）\")\n    \n        # 5. 循环执行后6个账号的修改操作\n        for param in parametrize_data:\n            with allure.step(f\"执行参数: {param['desc']}\"):\n                # 获取基础配置\n                new_user = var_manager.get_variable(\"new_user\")\n                vps_trader_id = var_manager.get_variable(\"vps_trader_id\")\n    \n                # 构造请求数据\n                data = {\n                    \"traderId\": vps_trader_id,\n                    \"platform\": new_user[\"platform\"],\n                    \"account\": param[\"account\"],\n                    \"password\": encrypted_password,\n                    \"remark\": param[\"remark\"],  # 备注包含模板信息\n                    \"followMode\": param[\"followMode\"],\n                    \"followParam\": param[\"followParam\"],\n                    \"templateId\": param[\"templateId\"],\n                    \"followDirection\": 0,\n                    \"remainder\": 0,\n                    \"placedType\": 0,\n                    \"followStatus\": 1,\n                    \"followOpen\": 1,\n                    \"followClose\": 1,\n                    \"followRep\": 0,\n                    \"fixedComment\": new_user[\"fixedComment\"],\n                    \"commentType\": 2,\n                    \"digits\": 0,\n                    \"cfd\": param[\"Cfd\"],  # 使用模板中的Cfd值\n                    \"forex\": \"\",\n                    \"abRemark\": \"\",\n                    \"id\": param[\"id\"]\n                }\n    \n                # 发送请求并验证\n                response = self.send_post_request(\n                    logged_session, '/subcontrol/follow/updateSlave', json_data=data\n                )\n    \n                self.assert_response_status(\n                    response, 200,\n                    f\"账号{param['account']}修改失败（模板：{param['desc']}）\"\n                )\n>               self.assert_json_value(\n                    response, \"$.msg\", \"success\",\n                    f\"账号{param['account']}响应异常（模板：{param['desc']}）\"\n                )\n\ntest_vps\\test_create_scene.py:381: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_730.test_vps.test_create_scene.TestCreate_Scene object at 0x000002518DC67160>\nresponse = <Response [200]>, json_path = '$.msg', expected_value = 'success'\nerror_msg = '账号300153响应异常（模板：账号300153-固定手数（5倍））'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg):\n        \"\"\"断言JSON路径对应的值（增强错误处理）\"\"\"\n        try:\n            actual_value = response.extract_jsonpath(json_path)\n>           assert actual_value == expected_value, (\n                f\"{error_msg}\\n\"\n                f\"URL: {response.url}\\n\"\n                f\"JSON路径: {json_path}\\n\"\n                f\"实际值: {actual_value}\\n\"\n                f\"期望值: {expected_value}\"\n            )\nE           AssertionError: 账号300153响应异常（模板：账号300153-固定手数（5倍））\nE           URL: http://39.99.136.49:9001/subcontrol/follow/updateSlave\nE           JSON路径: $.msg\nE           实际值: 修改失败java.lang.NullPointerException: Cannot invoke \"net.maku.followcom.entity.FollowTraderEntity.getPassword()\" because \"followTraderEntity\" is null\nE           期望值: success\n\ncommons\\api_base.py:261: AssertionError",
    "steps" : [ {
      "name" : "执行参数: 账号300153-固定手数（5倍）",
      "time" : {
        "start" : 1753876046047,
        "stop" : 1753876049169,
        "duration" : 3122
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: 账号300153响应异常（模板：账号300153-固定手数（5倍））\nURL: http://39.99.136.49:9001/subcontrol/follow/updateSlave\nJSON路径: $.msg\n实际值: 修改失败java.lang.NullPointerException: Cannot invoke \"net.maku.followcom.entity.FollowTraderEntity.getPassword()\" because \"followTraderEntity\" is null\n期望值: success\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\lingkuan_730\\test_vps\\test_create_scene.py\", line 381, in test_update_addSlave\n    self.assert_json_value(\n  File \"D:\\pycharm_test\\lingkuan_730\\commons\\api_base.py\", line 261, in assert_json_value\n    assert actual_value == expected_value, (\n",
      "steps" : [ {
        "name" : "发送POST请求到 /subcontrol/follow/updateSlave",
        "time" : {
          "start" : 1753876046047,
          "stop" : 1753876049161,
          "duration" : 3114
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "c8845fc939a1098",
          "name" : "请求JSON数据",
          "source" : "c8845fc939a1098.json",
          "type" : "application/json",
          "size" : 438
        }, {
          "uid" : "fe922a9dbcbcbc5b",
          "name" : "请求URL",
          "source" : "fe922a9dbcbcbc5b.txt",
          "type" : "text/plain",
          "size" : 30
        }, {
          "uid" : "539fde754f53bff2",
          "name" : "响应结果",
          "source" : "539fde754f53bff2.txt",
          "type" : "text/plain",
          "size" : 215
        } ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "hasContent" : true,
        "attachmentsCount" : 3,
        "shouldDisplayMessage" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 1,
      "hasContent" : true,
      "attachmentsCount" : 3,
      "shouldDisplayMessage" : true
    } ],
    "attachments" : [ {
      "uid" : "a097f310fa3e2b27",
      "name" : "log",
      "source" : "a097f310fa3e2b27.txt",
      "type" : "text/plain",
      "size" : 6561
    } ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "hasContent" : true,
    "attachmentsCount" : 4,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "api_session::0",
    "time" : {
      "start" : 1753876049191,
      "stop" : 1753876049191,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "var_manager::0",
    "time" : {
      "start" : 1753876590216,
      "stop" : 1753876590217,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "logged_session::0",
    "time" : {
      "start" : 1753876049190,
      "stop" : 1753876049190,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "账号管理-创建跟单账号"
  }, {
    "name" : "tag",
    "value" : "url('vps')"
  }, {
    "name" : "parentSuite",
    "value" : "test_vps"
  }, {
    "name" : "suite",
    "value" : "test_create_scene"
  }, {
    "name" : "subSuite",
    "value" : "TestCreate_Scene"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "34544-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_vps.test_create_scene"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "url('vps')" ]
  },
  "source" : "7234301638419a44.json",
  "parameterValues" : [ ]
}