{
  "uid" : "161e4febc22b87e3",
  "name" : "数据库校验-VPS数据-删除策略账号",
  "fullName" : "test_foundation.test_delete_scene.TestDeleteTrader#test_dbdelete_vpstrader",
  "historyId" : "fb8d78a50bd82ab552a47b480b24b53f",
  "time" : {
    "start" : 1751868702004,
    "stop" : 1751868763129,
    "duration" : 61125
  },
  "status" : "failed",
  "statusMessage" : "Failed: 删除失败: 等待超时（60秒），记录仍然存在。\nSQL: SELECT * FROM follow_trader WHERE account = %s\n参数: ('119999305',)\n最终结果数: 1",
  "statusTrace" : "self = <lingkuan_707.test_foundation.test_delete_scene.TestDeleteTrader object at 0x0000020619FE2D60>\nvar_manager = <lingkuan_707.commons.variable_manager.VariableManager object at 0x000002061AAC2970>\ndb_transaction = <pymysql.connections.Connection object at 0x0000020619FEC8B0>\n\n    @allure.title(\"数据库校验-VPS数据-删除策略账号\")\n    def test_dbdelete_vpstrader(self, var_manager, db_transaction):\n        with allure.step(\"1. 查询数据库验证是否删除成功\"):\n            db_trader_query = var_manager.get_variable(\"db_trader_query\")\n            logging.info(f\"查询条件: table={db_trader_query['table']}, account={db_trader_query['account']}\")\n    \n            sql = f\"SELECT * FROM {db_trader_query['table']} WHERE account = %s\"\n            params = (db_trader_query[\"account\"],)\n            try:\n>               self.wait_for_database_deletion(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params,\n                    timeout=WAIT_TIMEOUT,  # 设置60秒超时时间\n                    poll_interval=POLL_INTERVAL  # 每2秒查询一次\n                )\n\ntest_foundation\\test_delete_scene.py:211: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_707.test_foundation.test_delete_scene.TestDeleteTrader object at 0x0000020619FE2D60>\ndb_transaction = <pymysql.connections.Connection object at 0x0000020619FEC8B0>\nsql = 'SELECT * FROM follow_trader WHERE account = %s', params = ('119999305',)\ntime_field = None, time_range = 1, order_by = 'create_time DESC', timeout = 60\npoll_interval = 2\n\n    def wait_for_database_deletion(self, db_transaction: pymysql.connections.Connection,\n                                   sql: str,\n                                   params: tuple = (),\n                                   time_field: Optional[str] = None,\n                                   time_range: int = 1,\n                                   order_by: str = \"create_time DESC\",\n                                   timeout: int = 60,\n                                   poll_interval: int = 2) -> None:\n        \"\"\"轮询等待数据库记录删除（增强日志）\"\"\"\n        import time\n        start_time = time.time()\n        logger.info(f\"[{DATETIME_NOW}] 开始等待数据库记录删除 | SQL: {sql[:200]} | 超时: {timeout}秒\")\n    \n        while time.time() - start_time < timeout:\n            try:\n                db_transaction.commit()  # 刷新事务\n    \n                if time_field:\n                    result = self.query_database_with_time(\n                        db_transaction=db_transaction,\n                        sql=sql,\n                        params=params,\n                        time_field=time_field,\n                        time_range_minutes=time_range,\n                        order_by=order_by\n                    )\n                else:\n                    result = self.query_database(\n                        db_transaction=db_transaction,\n                        sql=sql,\n                        params=params,\n                        order_by=order_by\n                    )\n    \n                if not result:\n                    logger.info(f\"[{DATETIME_NOW}] 删除成功（耗时{time.time() - start_time:.1f}秒）| SQL: {sql[:200]}\")\n                    return\n    \n                elapsed = time.time() - start_time\n                logger.info(\n                    f\"[{DATETIME_NOW}] 记录仍存在（已等待{elapsed:.1f}秒）| 剩余时间: {timeout - elapsed:.1f}秒 | 结果数: {len(result)}\")\n                time.sleep(poll_interval)\n    \n            except Exception as e:\n                logger.warning(f\"[{DATETIME_NOW}] 轮询查询异常: {str(e)} | 继续等待...\")\n                time.sleep(poll_interval)\n    \n        # 超时处理\n        db_transaction.commit()\n        final_result = self.query_database_with_time(\n            db_transaction=db_transaction,\n            sql=sql,\n            params=params,\n            time_field=time_field,\n            time_range_minutes=time_range,\n            order_by=order_by\n        ) if time_field else self.query_database(\n            db_transaction=db_transaction,\n            sql=sql,\n            params=params,\n            order_by=order_by\n        )\n    \n>       raise TimeoutError(\n            f\"等待超时（{timeout}秒），记录仍然存在。\\n\"\n            f\"SQL: {sql}\\n\"\n            f\"参数: {params}\\n\"\n            f\"最终结果数: {len(final_result)}\"\n        )\nE       TimeoutError: 等待超时（60秒），记录仍然存在。\nE       SQL: SELECT * FROM follow_trader WHERE account = %s\nE       参数: ('119999305',)\nE       最终结果数: 1\n\ncommons\\api_base.py:385: TimeoutError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <lingkuan_707.test_foundation.test_delete_scene.TestDeleteTrader object at 0x0000020619FE2D60>\nvar_manager = <lingkuan_707.commons.variable_manager.VariableManager object at 0x000002061AAC2970>\ndb_transaction = <pymysql.connections.Connection object at 0x0000020619FEC8B0>\n\n    @allure.title(\"数据库校验-VPS数据-删除策略账号\")\n    def test_dbdelete_vpstrader(self, var_manager, db_transaction):\n        with allure.step(\"1. 查询数据库验证是否删除成功\"):\n            db_trader_query = var_manager.get_variable(\"db_trader_query\")\n            logging.info(f\"查询条件: table={db_trader_query['table']}, account={db_trader_query['account']}\")\n    \n            sql = f\"SELECT * FROM {db_trader_query['table']} WHERE account = %s\"\n            params = (db_trader_query[\"account\"],)\n            try:\n                self.wait_for_database_deletion(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params,\n                    timeout=WAIT_TIMEOUT,  # 设置60秒超时时间\n                    poll_interval=POLL_INTERVAL  # 每2秒查询一次\n                )\n                allure.attach(f\"策略账号 {db_trader_query['account']} 已成功从数据库删除\", \"验证结果\")\n            except TimeoutError as e:\n                allure.attach(f\"删除超时: {str(e)}\", \"验证结果\")\n>               pytest.fail(f\"删除失败: {str(e)}\")\nE               Failed: 删除失败: 等待超时（60秒），记录仍然存在。\nE               SQL: SELECT * FROM follow_trader WHERE account = %s\nE               参数: ('119999305',)\nE               最终结果数: 1\n\ntest_foundation\\test_delete_scene.py:221: Failed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "environment",
    "time" : {
      "start" : 1751867181723,
      "stop" : 1751867181723,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "db_config",
    "time" : {
      "start" : 1751867181724,
      "stop" : 1751867181724,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "var_manager",
    "time" : {
      "start" : 1751868658619,
      "stop" : 1751868658619,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "db",
    "time" : {
      "start" : 1751867181724,
      "stop" : 1751867181958,
      "duration" : 234
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "db_transaction",
    "time" : {
      "start" : 1751868701957,
      "stop" : 1751868702004,
      "duration" : 47
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "Failed: 删除失败: 等待超时（60秒），记录仍然存在。\nSQL: SELECT * FROM follow_trader WHERE account = %s\n参数: ('119999305',)\n最终结果数: 1",
    "statusTrace" : "self = <lingkuan_707.test_foundation.test_delete_scene.TestDeleteTrader object at 0x0000020619FE2D60>\nvar_manager = <lingkuan_707.commons.variable_manager.VariableManager object at 0x000002061AAC2970>\ndb_transaction = <pymysql.connections.Connection object at 0x0000020619FEC8B0>\n\n    @allure.title(\"数据库校验-VPS数据-删除策略账号\")\n    def test_dbdelete_vpstrader(self, var_manager, db_transaction):\n        with allure.step(\"1. 查询数据库验证是否删除成功\"):\n            db_trader_query = var_manager.get_variable(\"db_trader_query\")\n            logging.info(f\"查询条件: table={db_trader_query['table']}, account={db_trader_query['account']}\")\n    \n            sql = f\"SELECT * FROM {db_trader_query['table']} WHERE account = %s\"\n            params = (db_trader_query[\"account\"],)\n            try:\n>               self.wait_for_database_deletion(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params,\n                    timeout=WAIT_TIMEOUT,  # 设置60秒超时时间\n                    poll_interval=POLL_INTERVAL  # 每2秒查询一次\n                )\n\ntest_foundation\\test_delete_scene.py:211: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_707.test_foundation.test_delete_scene.TestDeleteTrader object at 0x0000020619FE2D60>\ndb_transaction = <pymysql.connections.Connection object at 0x0000020619FEC8B0>\nsql = 'SELECT * FROM follow_trader WHERE account = %s', params = ('119999305',)\ntime_field = None, time_range = 1, order_by = 'create_time DESC', timeout = 60\npoll_interval = 2\n\n    def wait_for_database_deletion(self, db_transaction: pymysql.connections.Connection,\n                                   sql: str,\n                                   params: tuple = (),\n                                   time_field: Optional[str] = None,\n                                   time_range: int = 1,\n                                   order_by: str = \"create_time DESC\",\n                                   timeout: int = 60,\n                                   poll_interval: int = 2) -> None:\n        \"\"\"轮询等待数据库记录删除（增强日志）\"\"\"\n        import time\n        start_time = time.time()\n        logger.info(f\"[{DATETIME_NOW}] 开始等待数据库记录删除 | SQL: {sql[:200]} | 超时: {timeout}秒\")\n    \n        while time.time() - start_time < timeout:\n            try:\n                db_transaction.commit()  # 刷新事务\n    \n                if time_field:\n                    result = self.query_database_with_time(\n                        db_transaction=db_transaction,\n                        sql=sql,\n                        params=params,\n                        time_field=time_field,\n                        time_range_minutes=time_range,\n                        order_by=order_by\n                    )\n                else:\n                    result = self.query_database(\n                        db_transaction=db_transaction,\n                        sql=sql,\n                        params=params,\n                        order_by=order_by\n                    )\n    \n                if not result:\n                    logger.info(f\"[{DATETIME_NOW}] 删除成功（耗时{time.time() - start_time:.1f}秒）| SQL: {sql[:200]}\")\n                    return\n    \n                elapsed = time.time() - start_time\n                logger.info(\n                    f\"[{DATETIME_NOW}] 记录仍存在（已等待{elapsed:.1f}秒）| 剩余时间: {timeout - elapsed:.1f}秒 | 结果数: {len(result)}\")\n                time.sleep(poll_interval)\n    \n            except Exception as e:\n                logger.warning(f\"[{DATETIME_NOW}] 轮询查询异常: {str(e)} | 继续等待...\")\n                time.sleep(poll_interval)\n    \n        # 超时处理\n        db_transaction.commit()\n        final_result = self.query_database_with_time(\n            db_transaction=db_transaction,\n            sql=sql,\n            params=params,\n            time_field=time_field,\n            time_range_minutes=time_range,\n            order_by=order_by\n        ) if time_field else self.query_database(\n            db_transaction=db_transaction,\n            sql=sql,\n            params=params,\n            order_by=order_by\n        )\n    \n>       raise TimeoutError(\n            f\"等待超时（{timeout}秒），记录仍然存在。\\n\"\n            f\"SQL: {sql}\\n\"\n            f\"参数: {params}\\n\"\n            f\"最终结果数: {len(final_result)}\"\n        )\nE       TimeoutError: 等待超时（60秒），记录仍然存在。\nE       SQL: SELECT * FROM follow_trader WHERE account = %s\nE       参数: ('119999305',)\nE       最终结果数: 1\n\ncommons\\api_base.py:385: TimeoutError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <lingkuan_707.test_foundation.test_delete_scene.TestDeleteTrader object at 0x0000020619FE2D60>\nvar_manager = <lingkuan_707.commons.variable_manager.VariableManager object at 0x000002061AAC2970>\ndb_transaction = <pymysql.connections.Connection object at 0x0000020619FEC8B0>\n\n    @allure.title(\"数据库校验-VPS数据-删除策略账号\")\n    def test_dbdelete_vpstrader(self, var_manager, db_transaction):\n        with allure.step(\"1. 查询数据库验证是否删除成功\"):\n            db_trader_query = var_manager.get_variable(\"db_trader_query\")\n            logging.info(f\"查询条件: table={db_trader_query['table']}, account={db_trader_query['account']}\")\n    \n            sql = f\"SELECT * FROM {db_trader_query['table']} WHERE account = %s\"\n            params = (db_trader_query[\"account\"],)\n            try:\n                self.wait_for_database_deletion(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params,\n                    timeout=WAIT_TIMEOUT,  # 设置60秒超时时间\n                    poll_interval=POLL_INTERVAL  # 每2秒查询一次\n                )\n                allure.attach(f\"策略账号 {db_trader_query['account']} 已成功从数据库删除\", \"验证结果\")\n            except TimeoutError as e:\n                allure.attach(f\"删除超时: {str(e)}\", \"验证结果\")\n>               pytest.fail(f\"删除失败: {str(e)}\")\nE               Failed: 删除失败: 等待超时（60秒），记录仍然存在。\nE               SQL: SELECT * FROM follow_trader WHERE account = %s\nE               参数: ('119999305',)\nE               最终结果数: 1\n\ntest_foundation\\test_delete_scene.py:221: Failed",
    "steps" : [ {
      "name" : "1. 查询数据库验证是否删除成功",
      "time" : {
        "start" : 1751868702004,
        "stop" : 1751868763128,
        "duration" : 61124
      },
      "status" : "failed",
      "statusMessage" : "Failed: 删除失败: 等待超时（60秒），记录仍然存在。\nSQL: SELECT * FROM follow_trader WHERE account = %s\n参数: ('119999305',)\n最终结果数: 1\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\lingkuan_707\\test_foundation\\test_delete_scene.py\", line 221, in test_dbdelete_vpstrader\n    pytest.fail(f\"删除失败: {str(e)}\")\n  File \"D:\\python_tools\\python\\lib\\site-packages\\_pytest\\outcomes.py\", line 198, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "e052241f4f8804f3",
        "name" : "验证结果",
        "source" : "e052241f4f8804f3.attach",
        "type" : "text/plain",
        "size" : 155
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : true
    } ],
    "attachments" : [ {
      "uid" : "74d5316b1e4db8ae",
      "name" : "log",
      "source" : "74d5316b1e4db8ae.txt",
      "type" : "text/plain",
      "size" : 42289
    } ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "hasContent" : true,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "var_manager::0",
    "time" : {
      "start" : 1751868871916,
      "stop" : 1751868871917,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "db::0",
    "time" : {
      "start" : 1751868871914,
      "stop" : 1751868871914,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "db_transaction::0",
    "time" : {
      "start" : 1751868763150,
      "stop" : 1751868763199,
      "duration" : 49
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "删除跟单账号和策略账号"
  }, {
    "name" : "parentSuite",
    "value" : "test_foundation"
  }, {
    "name" : "suite",
    "value" : "test_delete_scene"
  }, {
    "name" : "subSuite",
    "value" : "TestDeleteTrader"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "5236-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_foundation.test_delete_scene"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "161e4febc22b87e3.json",
  "parameterValues" : [ ]
}