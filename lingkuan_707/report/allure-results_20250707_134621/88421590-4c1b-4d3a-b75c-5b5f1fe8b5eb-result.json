{"name": "数据库校验-账号列表-删除账号", "status": "failed", "statusDetails": {"message": "Failed: 删除失败: 等待超时（60秒），记录仍然存在。\nSQL: SELECT * FROM FOLLOW_TRADER_USER WHERE account = %s\n参数: ('119999305',)\n最终结果数: 1", "trace": "self = <lingkuan_707.test_foundation.test_delete_scene.TestDeleteTrader object at 0x0000020619FEC520>\nvar_manager = <lingkuan_707.commons.variable_manager.VariableManager object at 0x000002061AAC2970>\ndb_transaction = <pymysql.connections.Connection object at 0x0000020619FEC8B0>\n\n    @allure.title(\"数据库校验-账号列表-删除账号\")\n    def test_dbdelete_user(self, var_manager, db_transaction):\n        with allure.step(\"1. 查询数据库验证是否删除成功\"):\n            db_query = var_manager.get_variable(\"db_query\")\n            logging.info(f\"查询条件: table={db_query['table']}, name={db_query['account']}\")\n    \n            # 定义数据库查询\n            sql = f\"SELECT * FROM {db_query['table']} WHERE account = %s\"\n            params = (db_query[\"account\"],)\n            try:\n>               self.wait_for_database_deletion(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params,\n                    timeout=WAIT_TIMEOUT,  # 设置60秒超时时间\n                    poll_interval=POLL_INTERVAL  # 每2秒查询一次\n                )\n\ntest_foundation\\test_delete_scene.py:322: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_707.test_foundation.test_delete_scene.TestDeleteTrader object at 0x0000020619FEC520>\ndb_transaction = <pymysql.connections.Connection object at 0x0000020619FEC8B0>\nsql = 'SELECT * FROM FOLLOW_TRADER_USER WHERE account = %s'\nparams = ('119999305',), time_field = None, time_range = 1\norder_by = 'create_time DESC', timeout = 60, poll_interval = 2\n\n    def wait_for_database_deletion(self, db_transaction: pymysql.connections.Connection,\n                                   sql: str,\n                                   params: tuple = (),\n                                   time_field: Optional[str] = None,\n                                   time_range: int = 1,\n                                   order_by: str = \"create_time DESC\",\n                                   timeout: int = 60,\n                                   poll_interval: int = 2) -> None:\n        \"\"\"轮询等待数据库记录删除（增强日志）\"\"\"\n        import time\n        start_time = time.time()\n        logger.info(f\"[{DATETIME_NOW}] 开始等待数据库记录删除 | SQL: {sql[:200]} | 超时: {timeout}秒\")\n    \n        while time.time() - start_time < timeout:\n            try:\n                db_transaction.commit()  # 刷新事务\n    \n                if time_field:\n                    result = self.query_database_with_time(\n                        db_transaction=db_transaction,\n                        sql=sql,\n                        params=params,\n                        time_field=time_field,\n                        time_range_minutes=time_range,\n                        order_by=order_by\n                    )\n                else:\n                    result = self.query_database(\n                        db_transaction=db_transaction,\n                        sql=sql,\n                        params=params,\n                        order_by=order_by\n                    )\n    \n                if not result:\n                    logger.info(f\"[{DATETIME_NOW}] 删除成功（耗时{time.time() - start_time:.1f}秒）| SQL: {sql[:200]}\")\n                    return\n    \n                elapsed = time.time() - start_time\n                logger.info(\n                    f\"[{DATETIME_NOW}] 记录仍存在（已等待{elapsed:.1f}秒）| 剩余时间: {timeout - elapsed:.1f}秒 | 结果数: {len(result)}\")\n                time.sleep(poll_interval)\n    \n            except Exception as e:\n                logger.warning(f\"[{DATETIME_NOW}] 轮询查询异常: {str(e)} | 继续等待...\")\n                time.sleep(poll_interval)\n    \n        # 超时处理\n        db_transaction.commit()\n        final_result = self.query_database_with_time(\n            db_transaction=db_transaction,\n            sql=sql,\n            params=params,\n            time_field=time_field,\n            time_range_minutes=time_range,\n            order_by=order_by\n        ) if time_field else self.query_database(\n            db_transaction=db_transaction,\n            sql=sql,\n            params=params,\n            order_by=order_by\n        )\n    \n>       raise TimeoutError(\n            f\"等待超时（{timeout}秒），记录仍然存在。\\n\"\n            f\"SQL: {sql}\\n\"\n            f\"参数: {params}\\n\"\n            f\"最终结果数: {len(final_result)}\"\n        )\nE       TimeoutError: 等待超时（60秒），记录仍然存在。\nE       SQL: SELECT * FROM FOLLOW_TRADER_USER WHERE account = %s\nE       参数: ('119999305',)\nE       最终结果数: 1\n\ncommons\\api_base.py:385: TimeoutError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <lingkuan_707.test_foundation.test_delete_scene.TestDeleteTrader object at 0x0000020619FEC520>\nvar_manager = <lingkuan_707.commons.variable_manager.VariableManager object at 0x000002061AAC2970>\ndb_transaction = <pymysql.connections.Connection object at 0x0000020619FEC8B0>\n\n    @allure.title(\"数据库校验-账号列表-删除账号\")\n    def test_dbdelete_user(self, var_manager, db_transaction):\n        with allure.step(\"1. 查询数据库验证是否删除成功\"):\n            db_query = var_manager.get_variable(\"db_query\")\n            logging.info(f\"查询条件: table={db_query['table']}, name={db_query['account']}\")\n    \n            # 定义数据库查询\n            sql = f\"SELECT * FROM {db_query['table']} WHERE account = %s\"\n            params = (db_query[\"account\"],)\n            try:\n                self.wait_for_database_deletion(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params,\n                    timeout=WAIT_TIMEOUT,  # 设置60秒超时时间\n                    poll_interval=POLL_INTERVAL  # 每2秒查询一次\n                )\n                allure.attach(f\"账号 {db_query['account']} 已成功从数据库删除\", \"验证结果\")\n            except TimeoutError as e:\n                allure.attach(f\"删除超时: {str(e)}\", \"验证结果\")\n>               pytest.fail(f\"删除失败: {str(e)}\")\nE               Failed: 删除失败: 等待超时（60秒），记录仍然存在。\nE               SQL: SELECT * FROM FOLLOW_TRADER_USER WHERE account = %s\nE               参数: ('119999305',)\nE               最终结果数: 1\n\ntest_foundation\\test_delete_scene.py:332: Failed"}, "steps": [{"name": "1. 查询数据库验证是否删除成功", "status": "failed", "statusDetails": {"message": "Failed: 删除失败: 等待超时（60秒），记录仍然存在。\nSQL: SELECT * FROM FOLLOW_TRADER_USER WHERE account = %s\n参数: ('119999305',)\n最终结果数: 1\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_707\\test_foundation\\test_delete_scene.py\", line 332, in test_dbdelete_user\n    pytest.fail(f\"删除失败: {str(e)}\")\n  File \"D:\\python_tools\\python\\lib\\site-packages\\_pytest\\outcomes.py\", line 198, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "attachments": [{"name": "验证结果", "source": "21450873-8d8f-4534-8ae6-61727ce37c1c-attachment.attach"}], "start": 1751868774134, "stop": 1751868835273}], "attachments": [{"name": "log", "source": "f1aadc0c-e846-497b-801e-bf50c35d264f-attachment.txt", "type": "text/plain"}], "start": 1751868774134, "stop": 1751868835274, "uuid": "55366478-e1e9-4bd9-a860-cc23f2b02e91", "historyId": "7c4a4329f07feea6257e9f2922ea1e7d", "testCaseId": "7c4a4329f07feea6257e9f2922ea1e7d", "fullName": "test_foundation.test_delete_scene.TestDeleteTrader#test_dbdelete_user", "labels": [{"name": "feature", "value": "删除跟单账号和策略账号"}, {"name": "parentSuite", "value": "test_foundation"}, {"name": "suite", "value": "test_delete_scene"}, {"name": "subSuite", "value": "TestDeleteTrader"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "5236-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_foundation.test_delete_scene"}]}