{
  "uid" : "e7ba68c0c7e9c6a8",
  "name" : "数据库校验-VPS数据-验证账号是否下架成功（后9个账号）",
  "fullName" : "test_cloudTrader.test_delete.TestDelete_cloudTrader#test_dbdelete_belowVps",
  "historyId" : "ec8a5572e8eb986949bd183cf7a5f323",
  "time" : {
    "start" : 1756361327980,
    "stop" : 1756361334395,
    "duration" : 6415
  },
  "status" : "failed",
  "statusMessage" : "Failed: 下架失败: Failed: 等待记录删除超时（5秒）",
  "statusTrace" : "self = <lingkuan_827.test_cloudTrader.test_delete.TestDelete_cloudTrader object at 0x0000023721FB5FD0>\nvar_manager = <lingkuan_827.commons.variable_manager.VariableManager object at 0x0000023721FC47C0>\ndb_transaction = <pymysql.connections.Connection object at 0x00000237220D26A0>\n\n    @allure.title(\"数据库校验-VPS数据-验证账号是否下架成功（后9个账号）\")\n    def test_dbdelete_belowVps(self, var_manager, db_transaction):\n        # 1. 获取账号总数和所有账号信息\n        cloudTrader_user_count = var_manager.get_variable(\"cloudTrader_user_count\", 0)\n        if cloudTrader_user_count < 10:  # 修改条件为至少10个账号\n            pytest.fail(f\"用户总数需至少为10，当前为{cloudTrader_user_count}，无法提取后9个数据进行校验\")\n    \n        # 2. 循环验证后9个账号的下架状态\n        for i in range(2, cloudTrader_user_count + 1):  # 循环索引2-10（共9次）\n            with allure.step(f\"验证第{i}个账号是否下架成功\"):\n                # 获取单个账号（与下架的ID对应）\n                account = var_manager.get_variable(f\"cloudTrader_user_accounts_{i}\")\n                if not account:\n                    pytest.fail(f\"未找到需要验证的账号：cloudTrader_user_accounts_{i}\")\n    \n                # 查询数据库（检查删除标记或记录是否存在）\n                sql = f\"SELECT * FROM follow_trader WHERE account = %s\"\n    \n                # 调用轮询等待方法，验证记录是否被删除\n                try:\n>                   self.wait_for_database_deletion(\n                        db_transaction=db_transaction,\n                        sql=sql,\n                        params=(account,)\n                    )\n\ntest_cloudTrader\\test_delete.py:348: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_827.test_cloudTrader.test_delete.TestDelete_cloudTrader object at 0x0000023721FB5FD0>\ndb_transaction = <pymysql.connections.Connection object at 0x00000237220D26A0>\nsql = 'SELECT * FROM follow_trader WHERE account = %s', params = ('300160',)\ntime_field = None, time_range = 1, order_by = 'create_time DESC', timeout = 5\npoll_interval = 2\n\n    def wait_for_database_deletion(self, db_transaction: pymysql.connections.Connection,\n                                   sql: str,\n                                   params: tuple = (),\n                                   time_field: Optional[str] = None,\n                                   time_range: int = MYSQL_TIME,\n                                   order_by: str = \"create_time DESC\",\n                                   timeout: int = DELETE_WAIT_TIMEOUT,\n                                   poll_interval: int = POLL_INTERVAL) -> None:\n        \"\"\"轮询等待数据库记录删除（带Allure分层提示）\"\"\"\n        start_time = time.time()\n        logger.info(f\"[{self._get_current_time()}] 开始等待数据库记录删除 | SQL: {sql[:200]} | 超时: {timeout}秒\")\n    \n        with allure.step(f\"等待数据库记录删除（超时: {timeout}秒）\"):\n            allure.attach(sql, \"执行SQL\", allure.attachment_type.TEXT)\n            allure.attach(str(params), \"SQL参数\", allure.attachment_type.TEXT)\n    \n            while time.time() - start_time < timeout:\n                try:\n                    db_transaction.commit()\n    \n                    if time_field:\n                        result = self.query_database_with_time(\n                            db_transaction=db_transaction,\n                            sql=sql,\n                            params=params,\n                            time_field=time_field,\n                            time_range=time_range,\n                            order_by=order_by,\n                            timeout=1,  # 单次查询不超时\n                            attach_to_allure=False\n                        )\n                    else:\n                        result = self.query_database(\n                            db_transaction=db_transaction,\n                            sql=sql,\n                            params=params,\n                            order_by=order_by,\n                            attach_to_allure=False\n                        )\n    \n                    elapsed = time.time() - start_time\n                    with allure.step(f\"等待中（已等待{elapsed:.1f}秒）\"):\n                        allure.attach(f\"剩余记录数: {len(result)}\", \"当前状态\", allure.attachment_type.TEXT)\n                        allure.attach(f\"剩余时间: {timeout - elapsed:.1f}秒\", \"超时倒计时\", allure.attachment_type.TEXT)\n    \n                    if not result:\n                        logger.info(\n                            f\"[{self._get_current_time()}] 删除成功（耗时{time.time() - start_time:.1f}秒）| SQL: {sql[:200]}\")\n                        with allure.step(\"删除验证成功\"):\n                            allure.attach(f\"耗时{time.time() - start_time:.1f}秒，记录已删除\", \"结果说明\",\n                                          allure.attachment_type.TEXT)\n                        return\n    \n                    logger.info(\n                        f\"[{self._get_current_time()}] 记录仍存在（已等待{elapsed:.1f}秒）| 剩余时间: {timeout - elapsed:.1f}秒 | 结果数: {len(result)}\")\n                    time.sleep(poll_interval)\n    \n                except Exception as e:\n                    with allure.step(\"删除等待异常\"):\n                        allure.attach(sql, \"执行SQL\", allure.attachment_type.TEXT)\n                        allure.attach(str(params), \"SQL参数\", allure.attachment_type.TEXT)\n                        allure.attach(str(e), \"错误详情\", allure.attachment_type.TEXT)\n                    logger.warning(f\"[{self._get_current_time()}] 轮询查询异常: {str(e)} | 继续等待...\")\n                    time.sleep(poll_interval)\n    \n            # 超时处理\n            db_transaction.commit()\n            if time_field:\n                final_result = self.query_database_with_time(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params,\n                    time_field=time_field,\n                    time_range=time_range,\n                    order_by=order_by,\n                    timeout=1,\n                    attach_to_allure=True\n                )\n            else:\n                final_result = self.query_database(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params,\n                    order_by=order_by,\n                    attach_to_allure=True\n                )\n    \n            display_count = min(len(final_result), 50)\n            with allure.step(\"等待删除超时\"):\n                allure.attach(f\"超过{timeout}秒仍有{len(final_result)}条记录未删除\", \"超时说明\",\n                              allure.attachment_type.TEXT)\n                allure.attach(\n                    self.serialize_data(final_result[:display_count]),\n                    f\"剩余记录（共{len(final_result)}条）\",\n                    allure.attachment_type.JSON\n                )\n    \n>           raise TimeoutError(f\"Failed: 等待记录删除超时（{timeout}秒）\")\nE           TimeoutError: Failed: 等待记录删除超时（5秒）\n\ncommons\\api_base.py:827: TimeoutError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <lingkuan_827.test_cloudTrader.test_delete.TestDelete_cloudTrader object at 0x0000023721FB5FD0>\nvar_manager = <lingkuan_827.commons.variable_manager.VariableManager object at 0x0000023721FC47C0>\ndb_transaction = <pymysql.connections.Connection object at 0x00000237220D26A0>\n\n    @allure.title(\"数据库校验-VPS数据-验证账号是否下架成功（后9个账号）\")\n    def test_dbdelete_belowVps(self, var_manager, db_transaction):\n        # 1. 获取账号总数和所有账号信息\n        cloudTrader_user_count = var_manager.get_variable(\"cloudTrader_user_count\", 0)\n        if cloudTrader_user_count < 10:  # 修改条件为至少10个账号\n            pytest.fail(f\"用户总数需至少为10，当前为{cloudTrader_user_count}，无法提取后9个数据进行校验\")\n    \n        # 2. 循环验证后9个账号的下架状态\n        for i in range(2, cloudTrader_user_count + 1):  # 循环索引2-10（共9次）\n            with allure.step(f\"验证第{i}个账号是否下架成功\"):\n                # 获取单个账号（与下架的ID对应）\n                account = var_manager.get_variable(f\"cloudTrader_user_accounts_{i}\")\n                if not account:\n                    pytest.fail(f\"未找到需要验证的账号：cloudTrader_user_accounts_{i}\")\n    \n                # 查询数据库（检查删除标记或记录是否存在）\n                sql = f\"SELECT * FROM follow_trader WHERE account = %s\"\n    \n                # 调用轮询等待方法，验证记录是否被删除\n                try:\n                    self.wait_for_database_deletion(\n                        db_transaction=db_transaction,\n                        sql=sql,\n                        params=(account,)\n                    )\n                    allure.attach(f\"账号 {account} 已成功下架vps\", \"验证结果\")\n                    print(f\"账号 {account} 已成功下架vps\")\n                except TimeoutError as e:\n                    allure.attach(f\"下架超时: {str(e)}\", \"验证结果\")\n>                   pytest.fail(f\"下架失败: {str(e)}\")\nE                   Failed: 下架失败: Failed: 等待记录删除超时（5秒）\n\ntest_cloudTrader\\test_delete.py:357: Failed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "var_manager",
    "time" : {
      "start" : 1756361309282,
      "stop" : 1756361309283,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "test_group",
    "time" : {
      "start" : 1756361309282,
      "stop" : 1756361309282,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "db_config",
    "time" : {
      "start" : 1756361312351,
      "stop" : 1756361312351,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "environment",
    "time" : {
      "start" : 1756361309282,
      "stop" : 1756361309282,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "db_transaction",
    "time" : {
      "start" : 1756361327980,
      "stop" : 1756361327980,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "db",
    "time" : {
      "start" : 1756361327514,
      "stop" : 1756361327980,
      "duration" : 466
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "Failed: 下架失败: Failed: 等待记录删除超时（5秒）",
    "statusTrace" : "self = <lingkuan_827.test_cloudTrader.test_delete.TestDelete_cloudTrader object at 0x0000023721FB5FD0>\nvar_manager = <lingkuan_827.commons.variable_manager.VariableManager object at 0x0000023721FC47C0>\ndb_transaction = <pymysql.connections.Connection object at 0x00000237220D26A0>\n\n    @allure.title(\"数据库校验-VPS数据-验证账号是否下架成功（后9个账号）\")\n    def test_dbdelete_belowVps(self, var_manager, db_transaction):\n        # 1. 获取账号总数和所有账号信息\n        cloudTrader_user_count = var_manager.get_variable(\"cloudTrader_user_count\", 0)\n        if cloudTrader_user_count < 10:  # 修改条件为至少10个账号\n            pytest.fail(f\"用户总数需至少为10，当前为{cloudTrader_user_count}，无法提取后9个数据进行校验\")\n    \n        # 2. 循环验证后9个账号的下架状态\n        for i in range(2, cloudTrader_user_count + 1):  # 循环索引2-10（共9次）\n            with allure.step(f\"验证第{i}个账号是否下架成功\"):\n                # 获取单个账号（与下架的ID对应）\n                account = var_manager.get_variable(f\"cloudTrader_user_accounts_{i}\")\n                if not account:\n                    pytest.fail(f\"未找到需要验证的账号：cloudTrader_user_accounts_{i}\")\n    \n                # 查询数据库（检查删除标记或记录是否存在）\n                sql = f\"SELECT * FROM follow_trader WHERE account = %s\"\n    \n                # 调用轮询等待方法，验证记录是否被删除\n                try:\n>                   self.wait_for_database_deletion(\n                        db_transaction=db_transaction,\n                        sql=sql,\n                        params=(account,)\n                    )\n\ntest_cloudTrader\\test_delete.py:348: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_827.test_cloudTrader.test_delete.TestDelete_cloudTrader object at 0x0000023721FB5FD0>\ndb_transaction = <pymysql.connections.Connection object at 0x00000237220D26A0>\nsql = 'SELECT * FROM follow_trader WHERE account = %s', params = ('300160',)\ntime_field = None, time_range = 1, order_by = 'create_time DESC', timeout = 5\npoll_interval = 2\n\n    def wait_for_database_deletion(self, db_transaction: pymysql.connections.Connection,\n                                   sql: str,\n                                   params: tuple = (),\n                                   time_field: Optional[str] = None,\n                                   time_range: int = MYSQL_TIME,\n                                   order_by: str = \"create_time DESC\",\n                                   timeout: int = DELETE_WAIT_TIMEOUT,\n                                   poll_interval: int = POLL_INTERVAL) -> None:\n        \"\"\"轮询等待数据库记录删除（带Allure分层提示）\"\"\"\n        start_time = time.time()\n        logger.info(f\"[{self._get_current_time()}] 开始等待数据库记录删除 | SQL: {sql[:200]} | 超时: {timeout}秒\")\n    \n        with allure.step(f\"等待数据库记录删除（超时: {timeout}秒）\"):\n            allure.attach(sql, \"执行SQL\", allure.attachment_type.TEXT)\n            allure.attach(str(params), \"SQL参数\", allure.attachment_type.TEXT)\n    \n            while time.time() - start_time < timeout:\n                try:\n                    db_transaction.commit()\n    \n                    if time_field:\n                        result = self.query_database_with_time(\n                            db_transaction=db_transaction,\n                            sql=sql,\n                            params=params,\n                            time_field=time_field,\n                            time_range=time_range,\n                            order_by=order_by,\n                            timeout=1,  # 单次查询不超时\n                            attach_to_allure=False\n                        )\n                    else:\n                        result = self.query_database(\n                            db_transaction=db_transaction,\n                            sql=sql,\n                            params=params,\n                            order_by=order_by,\n                            attach_to_allure=False\n                        )\n    \n                    elapsed = time.time() - start_time\n                    with allure.step(f\"等待中（已等待{elapsed:.1f}秒）\"):\n                        allure.attach(f\"剩余记录数: {len(result)}\", \"当前状态\", allure.attachment_type.TEXT)\n                        allure.attach(f\"剩余时间: {timeout - elapsed:.1f}秒\", \"超时倒计时\", allure.attachment_type.TEXT)\n    \n                    if not result:\n                        logger.info(\n                            f\"[{self._get_current_time()}] 删除成功（耗时{time.time() - start_time:.1f}秒）| SQL: {sql[:200]}\")\n                        with allure.step(\"删除验证成功\"):\n                            allure.attach(f\"耗时{time.time() - start_time:.1f}秒，记录已删除\", \"结果说明\",\n                                          allure.attachment_type.TEXT)\n                        return\n    \n                    logger.info(\n                        f\"[{self._get_current_time()}] 记录仍存在（已等待{elapsed:.1f}秒）| 剩余时间: {timeout - elapsed:.1f}秒 | 结果数: {len(result)}\")\n                    time.sleep(poll_interval)\n    \n                except Exception as e:\n                    with allure.step(\"删除等待异常\"):\n                        allure.attach(sql, \"执行SQL\", allure.attachment_type.TEXT)\n                        allure.attach(str(params), \"SQL参数\", allure.attachment_type.TEXT)\n                        allure.attach(str(e), \"错误详情\", allure.attachment_type.TEXT)\n                    logger.warning(f\"[{self._get_current_time()}] 轮询查询异常: {str(e)} | 继续等待...\")\n                    time.sleep(poll_interval)\n    \n            # 超时处理\n            db_transaction.commit()\n            if time_field:\n                final_result = self.query_database_with_time(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params,\n                    time_field=time_field,\n                    time_range=time_range,\n                    order_by=order_by,\n                    timeout=1,\n                    attach_to_allure=True\n                )\n            else:\n                final_result = self.query_database(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params,\n                    order_by=order_by,\n                    attach_to_allure=True\n                )\n    \n            display_count = min(len(final_result), 50)\n            with allure.step(\"等待删除超时\"):\n                allure.attach(f\"超过{timeout}秒仍有{len(final_result)}条记录未删除\", \"超时说明\",\n                              allure.attachment_type.TEXT)\n                allure.attach(\n                    self.serialize_data(final_result[:display_count]),\n                    f\"剩余记录（共{len(final_result)}条）\",\n                    allure.attachment_type.JSON\n                )\n    \n>           raise TimeoutError(f\"Failed: 等待记录删除超时（{timeout}秒）\")\nE           TimeoutError: Failed: 等待记录删除超时（5秒）\n\ncommons\\api_base.py:827: TimeoutError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <lingkuan_827.test_cloudTrader.test_delete.TestDelete_cloudTrader object at 0x0000023721FB5FD0>\nvar_manager = <lingkuan_827.commons.variable_manager.VariableManager object at 0x0000023721FC47C0>\ndb_transaction = <pymysql.connections.Connection object at 0x00000237220D26A0>\n\n    @allure.title(\"数据库校验-VPS数据-验证账号是否下架成功（后9个账号）\")\n    def test_dbdelete_belowVps(self, var_manager, db_transaction):\n        # 1. 获取账号总数和所有账号信息\n        cloudTrader_user_count = var_manager.get_variable(\"cloudTrader_user_count\", 0)\n        if cloudTrader_user_count < 10:  # 修改条件为至少10个账号\n            pytest.fail(f\"用户总数需至少为10，当前为{cloudTrader_user_count}，无法提取后9个数据进行校验\")\n    \n        # 2. 循环验证后9个账号的下架状态\n        for i in range(2, cloudTrader_user_count + 1):  # 循环索引2-10（共9次）\n            with allure.step(f\"验证第{i}个账号是否下架成功\"):\n                # 获取单个账号（与下架的ID对应）\n                account = var_manager.get_variable(f\"cloudTrader_user_accounts_{i}\")\n                if not account:\n                    pytest.fail(f\"未找到需要验证的账号：cloudTrader_user_accounts_{i}\")\n    \n                # 查询数据库（检查删除标记或记录是否存在）\n                sql = f\"SELECT * FROM follow_trader WHERE account = %s\"\n    \n                # 调用轮询等待方法，验证记录是否被删除\n                try:\n                    self.wait_for_database_deletion(\n                        db_transaction=db_transaction,\n                        sql=sql,\n                        params=(account,)\n                    )\n                    allure.attach(f\"账号 {account} 已成功下架vps\", \"验证结果\")\n                    print(f\"账号 {account} 已成功下架vps\")\n                except TimeoutError as e:\n                    allure.attach(f\"下架超时: {str(e)}\", \"验证结果\")\n>                   pytest.fail(f\"下架失败: {str(e)}\")\nE                   Failed: 下架失败: Failed: 等待记录删除超时（5秒）\n\ntest_cloudTrader\\test_delete.py:357: Failed",
    "steps" : [ {
      "name" : "验证第2个账号是否下架成功",
      "time" : {
        "start" : 1756361327980,
        "stop" : 1756361334392,
        "duration" : 6412
      },
      "status" : "failed",
      "statusMessage" : "Failed: 下架失败: Failed: 等待记录删除超时（5秒）\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\lingkuan_827\\test_cloudTrader\\test_delete.py\", line 357, in test_dbdelete_belowVps\n    pytest.fail(f\"下架失败: {str(e)}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n",
      "steps" : [ {
        "name" : "等待数据库记录删除（超时: 5秒）",
        "time" : {
          "start" : 1756361327980,
          "stop" : 1756361334392,
          "duration" : 6412
        },
        "status" : "broken",
        "statusMessage" : "TimeoutError: Failed: 等待记录删除超时（5秒）\n",
        "statusTrace" : "  File \"D:\\pycharm_test\\lingkuan_827\\commons\\api_base.py\", line 827, in wait_for_database_deletion\n    raise TimeoutError(f\"Failed: 等待记录删除超时（{timeout}秒）\")\n",
        "steps" : [ {
          "name" : "执行数据库查询",
          "time" : {
            "start" : 1756361328026,
            "stop" : 1756361328089,
            "duration" : 63
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "6ca8752583abde7a",
            "name" : "执行SQL",
            "source" : "6ca8752583abde7a.txt",
            "type" : "text/plain",
            "size" : 72
          }, {
            "uid" : "eaf9b78a3aa67bd0",
            "name" : "SQL参数",
            "source" : "eaf9b78a3aa67bd0.txt",
            "type" : "text/plain",
            "size" : 11
          } ],
          "parameters" : [ ],
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 2,
          "stepsCount" : 0,
          "hasContent" : true
        }, {
          "name" : "等待中（已等待0.1秒）",
          "time" : {
            "start" : 1756361328089,
            "stop" : 1756361328090,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "f52784f12bc82ebe",
            "name" : "当前状态",
            "source" : "f52784f12bc82ebe.txt",
            "type" : "text/plain",
            "size" : 18
          }, {
            "uid" : "6ee1bbf0b5d0268f",
            "name" : "超时倒计时",
            "source" : "6ee1bbf0b5d0268f.txt",
            "type" : "text/plain",
            "size" : 20
          } ],
          "parameters" : [ ],
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 2,
          "stepsCount" : 0,
          "hasContent" : true
        }, {
          "name" : "执行数据库查询",
          "time" : {
            "start" : 1756361330137,
            "stop" : 1756361330196,
            "duration" : 59
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "b4743ddab7ebe3e",
            "name" : "执行SQL",
            "source" : "b4743ddab7ebe3e.txt",
            "type" : "text/plain",
            "size" : 72
          }, {
            "uid" : "2aca87c75b0db1e0",
            "name" : "SQL参数",
            "source" : "2aca87c75b0db1e0.txt",
            "type" : "text/plain",
            "size" : 11
          } ],
          "parameters" : [ ],
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 2,
          "stepsCount" : 0,
          "hasContent" : true
        }, {
          "name" : "等待中（已等待2.2秒）",
          "time" : {
            "start" : 1756361330196,
            "stop" : 1756361330197,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "5fb19e3337fee700",
            "name" : "当前状态",
            "source" : "5fb19e3337fee700.txt",
            "type" : "text/plain",
            "size" : 18
          }, {
            "uid" : "adca3a64f821271d",
            "name" : "超时倒计时",
            "source" : "adca3a64f821271d.txt",
            "type" : "text/plain",
            "size" : 20
          } ],
          "parameters" : [ ],
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 2,
          "stepsCount" : 0,
          "hasContent" : true
        }, {
          "name" : "执行数据库查询",
          "time" : {
            "start" : 1756361332249,
            "stop" : 1756361332297,
            "duration" : 48
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "e9195973e0306843",
            "name" : "执行SQL",
            "source" : "e9195973e0306843.txt",
            "type" : "text/plain",
            "size" : 72
          }, {
            "uid" : "d55dc98ffd7e6c5a",
            "name" : "SQL参数",
            "source" : "d55dc98ffd7e6c5a.txt",
            "type" : "text/plain",
            "size" : 11
          } ],
          "parameters" : [ ],
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 2,
          "stepsCount" : 0,
          "hasContent" : true
        }, {
          "name" : "等待中（已等待4.3秒）",
          "time" : {
            "start" : 1756361332297,
            "stop" : 1756361332297,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "2c76d062f519faaf",
            "name" : "当前状态",
            "source" : "2c76d062f519faaf.txt",
            "type" : "text/plain",
            "size" : 18
          }, {
            "uid" : "edd8f9117cdd34b7",
            "name" : "超时倒计时",
            "source" : "edd8f9117cdd34b7.txt",
            "type" : "text/plain",
            "size" : 20
          } ],
          "parameters" : [ ],
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 2,
          "stepsCount" : 0,
          "hasContent" : true
        }, {
          "name" : "执行数据库查询",
          "time" : {
            "start" : 1756361334344,
            "stop" : 1756361334391,
            "duration" : 47
          },
          "status" : "passed",
          "steps" : [ {
            "name" : "数据库查询结果",
            "time" : {
              "start" : 1756361334391,
              "stop" : 1756361334391,
              "duration" : 0
            },
            "status" : "passed",
            "steps" : [ ],
            "attachments" : [ {
              "uid" : "36026322c3f4d4e3",
              "name" : "查询结果（共1条，显示前50条）",
              "source" : "36026322c3f4d4e3.json",
              "type" : "application/json",
              "size" : 1074
            } ],
            "parameters" : [ ],
            "shouldDisplayMessage" : false,
            "attachmentsCount" : 1,
            "stepsCount" : 0,
            "hasContent" : true
          } ],
          "attachments" : [ {
            "uid" : "d3c7e32d5deab8b6",
            "name" : "执行SQL",
            "source" : "d3c7e32d5deab8b6.txt",
            "type" : "text/plain",
            "size" : 72
          }, {
            "uid" : "d284b07ef02baa5f",
            "name" : "SQL参数",
            "source" : "d284b07ef02baa5f.txt",
            "type" : "text/plain",
            "size" : 11
          } ],
          "parameters" : [ ],
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 3,
          "stepsCount" : 1,
          "hasContent" : true
        }, {
          "name" : "等待删除超时",
          "time" : {
            "start" : 1756361334391,
            "stop" : 1756361334392,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "f72ab47afe8b8033",
            "name" : "超时说明",
            "source" : "f72ab47afe8b8033.txt",
            "type" : "text/plain",
            "size" : 35
          }, {
            "uid" : "d1d74d6c4fff10f4",
            "name" : "剩余记录（共1条）",
            "source" : "d1d74d6c4fff10f4.json",
            "type" : "application/json",
            "size" : 1074
          } ],
          "parameters" : [ ],
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 2,
          "stepsCount" : 0,
          "hasContent" : true
        } ],
        "attachments" : [ {
          "uid" : "f3694dc93d401a13",
          "name" : "执行SQL",
          "source" : "f3694dc93d401a13.txt",
          "type" : "text/plain",
          "size" : 46
        }, {
          "uid" : "e47b918d418ec41d",
          "name" : "SQL参数",
          "source" : "e47b918d418ec41d.txt",
          "type" : "text/plain",
          "size" : 11
        } ],
        "parameters" : [ ],
        "shouldDisplayMessage" : true,
        "attachmentsCount" : 19,
        "stepsCount" : 9,
        "hasContent" : true
      } ],
      "attachments" : [ {
        "uid" : "f7860f03f8da1220",
        "name" : "验证结果",
        "source" : "f7860f03f8da1220.attach",
        "type" : "text/plain",
        "size" : 56
      } ],
      "parameters" : [ ],
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 20,
      "stepsCount" : 10,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "9f2720116a53784e",
      "name" : "log",
      "source" : "9f2720116a53784e.txt",
      "type" : "text/plain",
      "size" : 5784
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 21,
    "stepsCount" : 11,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "var_manager::0",
    "time" : {
      "start" : 1756361383260,
      "stop" : 1756361383262,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "db_transaction::0",
    "time" : {
      "start" : 1756361334515,
      "stop" : 1756361334515,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "db::0",
    "time" : {
      "start" : 1756361334516,
      "stop" : 1756361334516,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "数据管理-删除云策略测试数据"
  }, {
    "name" : "parentSuite",
    "value" : "test_cloudTrader"
  }, {
    "name" : "suite",
    "value" : "test_delete"
  }, {
    "name" : "subSuite",
    "value" : "TestDelete_cloudTrader"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "31156-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_cloudTrader.test_delete"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "e7ba68c0c7e9c6a8.json",
  "parameterValues" : [ ]
}