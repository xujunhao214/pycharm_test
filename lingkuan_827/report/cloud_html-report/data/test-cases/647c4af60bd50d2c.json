{
  "uid" : "647c4af60bd50d2c",
  "name" : "数据库校验-VPS数据-删除策略账号",
  "fullName" : "test_cloudTrader.test_delete.TestDelete_cloudTrader#test_dbdelete_vpstrader",
  "historyId" : "38c8754418b3fa75eb0d6618323c75b2",
  "time" : {
    "start" : 1756361338473,
    "stop" : 1756361344877,
    "duration" : 6404
  },
  "status" : "failed",
  "statusMessage" : "Failed: 删除失败: Failed: 等待记录删除超时（5秒）",
  "statusTrace" : "self = <lingkuan_827.test_cloudTrader.test_delete.TestDelete_cloudTrader object at 0x0000023721FBC490>\nvar_manager = <lingkuan_827.commons.variable_manager.VariableManager object at 0x0000023721FC47C0>\ndb_transaction = <pymysql.connections.Connection object at 0x000002372209D7F0>\n\n    @allure.title(\"数据库校验-VPS数据-删除策略账号\")\n    def test_dbdelete_vpstrader(self, var_manager, db_transaction):\n        with allure.step(\"1. 查询数据库验证是否删除成功\"):\n            cloudTrader_user_accounts_1 = var_manager.get_variable(\"cloudTrader_user_accounts_1\")\n            logging.info(f\"查询条件: table=follow_trader, account={cloudTrader_user_accounts_1}\")\n    \n            sql = f\"SELECT * FROM follow_trader WHERE account = %s\"\n            params = (cloudTrader_user_accounts_1,)\n            try:\n>               self.wait_for_database_deletion(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params\n                )\n\ntest_cloudTrader\\test_delete.py:404: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_827.test_cloudTrader.test_delete.TestDelete_cloudTrader object at 0x0000023721FBC490>\ndb_transaction = <pymysql.connections.Connection object at 0x000002372209D7F0>\nsql = 'SELECT * FROM follow_trader WHERE account = %s', params = ('300159',)\ntime_field = None, time_range = 1, order_by = 'create_time DESC', timeout = 5\npoll_interval = 2\n\n    def wait_for_database_deletion(self, db_transaction: pymysql.connections.Connection,\n                                   sql: str,\n                                   params: tuple = (),\n                                   time_field: Optional[str] = None,\n                                   time_range: int = MYSQL_TIME,\n                                   order_by: str = \"create_time DESC\",\n                                   timeout: int = DELETE_WAIT_TIMEOUT,\n                                   poll_interval: int = POLL_INTERVAL) -> None:\n        \"\"\"轮询等待数据库记录删除（带Allure分层提示）\"\"\"\n        start_time = time.time()\n        logger.info(f\"[{self._get_current_time()}] 开始等待数据库记录删除 | SQL: {sql[:200]} | 超时: {timeout}秒\")\n    \n        with allure.step(f\"等待数据库记录删除（超时: {timeout}秒）\"):\n            allure.attach(sql, \"执行SQL\", allure.attachment_type.TEXT)\n            allure.attach(str(params), \"SQL参数\", allure.attachment_type.TEXT)\n    \n            while time.time() - start_time < timeout:\n                try:\n                    db_transaction.commit()\n    \n                    if time_field:\n                        result = self.query_database_with_time(\n                            db_transaction=db_transaction,\n                            sql=sql,\n                            params=params,\n                            time_field=time_field,\n                            time_range=time_range,\n                            order_by=order_by,\n                            timeout=1,  # 单次查询不超时\n                            attach_to_allure=False\n                        )\n                    else:\n                        result = self.query_database(\n                            db_transaction=db_transaction,\n                            sql=sql,\n                            params=params,\n                            order_by=order_by,\n                            attach_to_allure=False\n                        )\n    \n                    elapsed = time.time() - start_time\n                    with allure.step(f\"等待中（已等待{elapsed:.1f}秒）\"):\n                        allure.attach(f\"剩余记录数: {len(result)}\", \"当前状态\", allure.attachment_type.TEXT)\n                        allure.attach(f\"剩余时间: {timeout - elapsed:.1f}秒\", \"超时倒计时\", allure.attachment_type.TEXT)\n    \n                    if not result:\n                        logger.info(\n                            f\"[{self._get_current_time()}] 删除成功（耗时{time.time() - start_time:.1f}秒）| SQL: {sql[:200]}\")\n                        with allure.step(\"删除验证成功\"):\n                            allure.attach(f\"耗时{time.time() - start_time:.1f}秒，记录已删除\", \"结果说明\",\n                                          allure.attachment_type.TEXT)\n                        return\n    \n                    logger.info(\n                        f\"[{self._get_current_time()}] 记录仍存在（已等待{elapsed:.1f}秒）| 剩余时间: {timeout - elapsed:.1f}秒 | 结果数: {len(result)}\")\n                    time.sleep(poll_interval)\n    \n                except Exception as e:\n                    with allure.step(\"删除等待异常\"):\n                        allure.attach(sql, \"执行SQL\", allure.attachment_type.TEXT)\n                        allure.attach(str(params), \"SQL参数\", allure.attachment_type.TEXT)\n                        allure.attach(str(e), \"错误详情\", allure.attachment_type.TEXT)\n                    logger.warning(f\"[{self._get_current_time()}] 轮询查询异常: {str(e)} | 继续等待...\")\n                    time.sleep(poll_interval)\n    \n            # 超时处理\n            db_transaction.commit()\n            if time_field:\n                final_result = self.query_database_with_time(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params,\n                    time_field=time_field,\n                    time_range=time_range,\n                    order_by=order_by,\n                    timeout=1,\n                    attach_to_allure=True\n                )\n            else:\n                final_result = self.query_database(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params,\n                    order_by=order_by,\n                    attach_to_allure=True\n                )\n    \n            display_count = min(len(final_result), 50)\n            with allure.step(\"等待删除超时\"):\n                allure.attach(f\"超过{timeout}秒仍有{len(final_result)}条记录未删除\", \"超时说明\",\n                              allure.attachment_type.TEXT)\n                allure.attach(\n                    self.serialize_data(final_result[:display_count]),\n                    f\"剩余记录（共{len(final_result)}条）\",\n                    allure.attachment_type.JSON\n                )\n    \n>           raise TimeoutError(f\"Failed: 等待记录删除超时（{timeout}秒）\")\nE           TimeoutError: Failed: 等待记录删除超时（5秒）\n\ncommons\\api_base.py:827: TimeoutError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <lingkuan_827.test_cloudTrader.test_delete.TestDelete_cloudTrader object at 0x0000023721FBC490>\nvar_manager = <lingkuan_827.commons.variable_manager.VariableManager object at 0x0000023721FC47C0>\ndb_transaction = <pymysql.connections.Connection object at 0x000002372209D7F0>\n\n    @allure.title(\"数据库校验-VPS数据-删除策略账号\")\n    def test_dbdelete_vpstrader(self, var_manager, db_transaction):\n        with allure.step(\"1. 查询数据库验证是否删除成功\"):\n            cloudTrader_user_accounts_1 = var_manager.get_variable(\"cloudTrader_user_accounts_1\")\n            logging.info(f\"查询条件: table=follow_trader, account={cloudTrader_user_accounts_1}\")\n    \n            sql = f\"SELECT * FROM follow_trader WHERE account = %s\"\n            params = (cloudTrader_user_accounts_1,)\n            try:\n                self.wait_for_database_deletion(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params\n                )\n                allure.attach(f\"策略账号 {cloudTrader_user_accounts_1} 已成功从数据库删除\", \"验证结果\")\n            except TimeoutError as e:\n                allure.attach(f\"删除超时: {str(e)}\", \"验证结果\")\n>               pytest.fail(f\"删除失败: {str(e)}\")\nE               Failed: 删除失败: Failed: 等待记录删除超时（5秒）\n\ntest_cloudTrader\\test_delete.py:412: Failed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "var_manager",
    "time" : {
      "start" : 1756361309282,
      "stop" : 1756361309283,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "test_group",
    "time" : {
      "start" : 1756361309282,
      "stop" : 1756361309282,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "db_transaction",
    "time" : {
      "start" : 1756361338473,
      "stop" : 1756361338473,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "db",
    "time" : {
      "start" : 1756361338026,
      "stop" : 1756361338473,
      "duration" : 447
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "db_config",
    "time" : {
      "start" : 1756361312351,
      "stop" : 1756361312351,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "environment",
    "time" : {
      "start" : 1756361309282,
      "stop" : 1756361309282,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "Failed: 删除失败: Failed: 等待记录删除超时（5秒）",
    "statusTrace" : "self = <lingkuan_827.test_cloudTrader.test_delete.TestDelete_cloudTrader object at 0x0000023721FBC490>\nvar_manager = <lingkuan_827.commons.variable_manager.VariableManager object at 0x0000023721FC47C0>\ndb_transaction = <pymysql.connections.Connection object at 0x000002372209D7F0>\n\n    @allure.title(\"数据库校验-VPS数据-删除策略账号\")\n    def test_dbdelete_vpstrader(self, var_manager, db_transaction):\n        with allure.step(\"1. 查询数据库验证是否删除成功\"):\n            cloudTrader_user_accounts_1 = var_manager.get_variable(\"cloudTrader_user_accounts_1\")\n            logging.info(f\"查询条件: table=follow_trader, account={cloudTrader_user_accounts_1}\")\n    \n            sql = f\"SELECT * FROM follow_trader WHERE account = %s\"\n            params = (cloudTrader_user_accounts_1,)\n            try:\n>               self.wait_for_database_deletion(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params\n                )\n\ntest_cloudTrader\\test_delete.py:404: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_827.test_cloudTrader.test_delete.TestDelete_cloudTrader object at 0x0000023721FBC490>\ndb_transaction = <pymysql.connections.Connection object at 0x000002372209D7F0>\nsql = 'SELECT * FROM follow_trader WHERE account = %s', params = ('300159',)\ntime_field = None, time_range = 1, order_by = 'create_time DESC', timeout = 5\npoll_interval = 2\n\n    def wait_for_database_deletion(self, db_transaction: pymysql.connections.Connection,\n                                   sql: str,\n                                   params: tuple = (),\n                                   time_field: Optional[str] = None,\n                                   time_range: int = MYSQL_TIME,\n                                   order_by: str = \"create_time DESC\",\n                                   timeout: int = DELETE_WAIT_TIMEOUT,\n                                   poll_interval: int = POLL_INTERVAL) -> None:\n        \"\"\"轮询等待数据库记录删除（带Allure分层提示）\"\"\"\n        start_time = time.time()\n        logger.info(f\"[{self._get_current_time()}] 开始等待数据库记录删除 | SQL: {sql[:200]} | 超时: {timeout}秒\")\n    \n        with allure.step(f\"等待数据库记录删除（超时: {timeout}秒）\"):\n            allure.attach(sql, \"执行SQL\", allure.attachment_type.TEXT)\n            allure.attach(str(params), \"SQL参数\", allure.attachment_type.TEXT)\n    \n            while time.time() - start_time < timeout:\n                try:\n                    db_transaction.commit()\n    \n                    if time_field:\n                        result = self.query_database_with_time(\n                            db_transaction=db_transaction,\n                            sql=sql,\n                            params=params,\n                            time_field=time_field,\n                            time_range=time_range,\n                            order_by=order_by,\n                            timeout=1,  # 单次查询不超时\n                            attach_to_allure=False\n                        )\n                    else:\n                        result = self.query_database(\n                            db_transaction=db_transaction,\n                            sql=sql,\n                            params=params,\n                            order_by=order_by,\n                            attach_to_allure=False\n                        )\n    \n                    elapsed = time.time() - start_time\n                    with allure.step(f\"等待中（已等待{elapsed:.1f}秒）\"):\n                        allure.attach(f\"剩余记录数: {len(result)}\", \"当前状态\", allure.attachment_type.TEXT)\n                        allure.attach(f\"剩余时间: {timeout - elapsed:.1f}秒\", \"超时倒计时\", allure.attachment_type.TEXT)\n    \n                    if not result:\n                        logger.info(\n                            f\"[{self._get_current_time()}] 删除成功（耗时{time.time() - start_time:.1f}秒）| SQL: {sql[:200]}\")\n                        with allure.step(\"删除验证成功\"):\n                            allure.attach(f\"耗时{time.time() - start_time:.1f}秒，记录已删除\", \"结果说明\",\n                                          allure.attachment_type.TEXT)\n                        return\n    \n                    logger.info(\n                        f\"[{self._get_current_time()}] 记录仍存在（已等待{elapsed:.1f}秒）| 剩余时间: {timeout - elapsed:.1f}秒 | 结果数: {len(result)}\")\n                    time.sleep(poll_interval)\n    \n                except Exception as e:\n                    with allure.step(\"删除等待异常\"):\n                        allure.attach(sql, \"执行SQL\", allure.attachment_type.TEXT)\n                        allure.attach(str(params), \"SQL参数\", allure.attachment_type.TEXT)\n                        allure.attach(str(e), \"错误详情\", allure.attachment_type.TEXT)\n                    logger.warning(f\"[{self._get_current_time()}] 轮询查询异常: {str(e)} | 继续等待...\")\n                    time.sleep(poll_interval)\n    \n            # 超时处理\n            db_transaction.commit()\n            if time_field:\n                final_result = self.query_database_with_time(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params,\n                    time_field=time_field,\n                    time_range=time_range,\n                    order_by=order_by,\n                    timeout=1,\n                    attach_to_allure=True\n                )\n            else:\n                final_result = self.query_database(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params,\n                    order_by=order_by,\n                    attach_to_allure=True\n                )\n    \n            display_count = min(len(final_result), 50)\n            with allure.step(\"等待删除超时\"):\n                allure.attach(f\"超过{timeout}秒仍有{len(final_result)}条记录未删除\", \"超时说明\",\n                              allure.attachment_type.TEXT)\n                allure.attach(\n                    self.serialize_data(final_result[:display_count]),\n                    f\"剩余记录（共{len(final_result)}条）\",\n                    allure.attachment_type.JSON\n                )\n    \n>           raise TimeoutError(f\"Failed: 等待记录删除超时（{timeout}秒）\")\nE           TimeoutError: Failed: 等待记录删除超时（5秒）\n\ncommons\\api_base.py:827: TimeoutError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <lingkuan_827.test_cloudTrader.test_delete.TestDelete_cloudTrader object at 0x0000023721FBC490>\nvar_manager = <lingkuan_827.commons.variable_manager.VariableManager object at 0x0000023721FC47C0>\ndb_transaction = <pymysql.connections.Connection object at 0x000002372209D7F0>\n\n    @allure.title(\"数据库校验-VPS数据-删除策略账号\")\n    def test_dbdelete_vpstrader(self, var_manager, db_transaction):\n        with allure.step(\"1. 查询数据库验证是否删除成功\"):\n            cloudTrader_user_accounts_1 = var_manager.get_variable(\"cloudTrader_user_accounts_1\")\n            logging.info(f\"查询条件: table=follow_trader, account={cloudTrader_user_accounts_1}\")\n    \n            sql = f\"SELECT * FROM follow_trader WHERE account = %s\"\n            params = (cloudTrader_user_accounts_1,)\n            try:\n                self.wait_for_database_deletion(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params\n                )\n                allure.attach(f\"策略账号 {cloudTrader_user_accounts_1} 已成功从数据库删除\", \"验证结果\")\n            except TimeoutError as e:\n                allure.attach(f\"删除超时: {str(e)}\", \"验证结果\")\n>               pytest.fail(f\"删除失败: {str(e)}\")\nE               Failed: 删除失败: Failed: 等待记录删除超时（5秒）\n\ntest_cloudTrader\\test_delete.py:412: Failed",
    "steps" : [ {
      "name" : "1. 查询数据库验证是否删除成功",
      "time" : {
        "start" : 1756361338473,
        "stop" : 1756361344877,
        "duration" : 6404
      },
      "status" : "failed",
      "statusMessage" : "Failed: 删除失败: Failed: 等待记录删除超时（5秒）\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\lingkuan_827\\test_cloudTrader\\test_delete.py\", line 412, in test_dbdelete_vpstrader\n    pytest.fail(f\"删除失败: {str(e)}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n",
      "steps" : [ {
        "name" : "等待数据库记录删除（超时: 5秒）",
        "time" : {
          "start" : 1756361338473,
          "stop" : 1756361344876,
          "duration" : 6403
        },
        "status" : "broken",
        "statusMessage" : "TimeoutError: Failed: 等待记录删除超时（5秒）\n",
        "statusTrace" : "  File \"D:\\pycharm_test\\lingkuan_827\\commons\\api_base.py\", line 827, in wait_for_database_deletion\n    raise TimeoutError(f\"Failed: 等待记录删除超时（{timeout}秒）\")\n",
        "steps" : [ {
          "name" : "执行数据库查询",
          "time" : {
            "start" : 1756361338521,
            "stop" : 1756361338575,
            "duration" : 54
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "fbbb6f1bab99b49",
            "name" : "执行SQL",
            "source" : "fbbb6f1bab99b49.txt",
            "type" : "text/plain",
            "size" : 72
          }, {
            "uid" : "d43de8d12db306bf",
            "name" : "SQL参数",
            "source" : "d43de8d12db306bf.txt",
            "type" : "text/plain",
            "size" : 11
          } ],
          "parameters" : [ ],
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 2,
          "stepsCount" : 0,
          "hasContent" : true
        }, {
          "name" : "等待中（已等待0.1秒）",
          "time" : {
            "start" : 1756361338575,
            "stop" : 1756361338575,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "c965d0503e7d39b6",
            "name" : "当前状态",
            "source" : "c965d0503e7d39b6.txt",
            "type" : "text/plain",
            "size" : 18
          }, {
            "uid" : "4c11185700ca490e",
            "name" : "超时倒计时",
            "source" : "4c11185700ca490e.txt",
            "type" : "text/plain",
            "size" : 20
          } ],
          "parameters" : [ ],
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 2,
          "stepsCount" : 0,
          "hasContent" : true
        }, {
          "name" : "执行数据库查询",
          "time" : {
            "start" : 1756361340622,
            "stop" : 1756361340669,
            "duration" : 47
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "73f3f8c733f3d091",
            "name" : "执行SQL",
            "source" : "73f3f8c733f3d091.txt",
            "type" : "text/plain",
            "size" : 72
          }, {
            "uid" : "7caf65ab65a6d50e",
            "name" : "SQL参数",
            "source" : "7caf65ab65a6d50e.txt",
            "type" : "text/plain",
            "size" : 11
          } ],
          "parameters" : [ ],
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 2,
          "stepsCount" : 0,
          "hasContent" : true
        }, {
          "name" : "等待中（已等待2.2秒）",
          "time" : {
            "start" : 1756361340669,
            "stop" : 1756361340670,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "84d8e6a6b5409755",
            "name" : "当前状态",
            "source" : "84d8e6a6b5409755.txt",
            "type" : "text/plain",
            "size" : 18
          }, {
            "uid" : "88ab23c63edc7315",
            "name" : "超时倒计时",
            "source" : "88ab23c63edc7315.txt",
            "type" : "text/plain",
            "size" : 20
          } ],
          "parameters" : [ ],
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 2,
          "stepsCount" : 0,
          "hasContent" : true
        }, {
          "name" : "执行数据库查询",
          "time" : {
            "start" : 1756361342729,
            "stop" : 1756361342780,
            "duration" : 51
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "7a5ebb0e5ef50045",
            "name" : "执行SQL",
            "source" : "7a5ebb0e5ef50045.txt",
            "type" : "text/plain",
            "size" : 72
          }, {
            "uid" : "f9349781ed24c897",
            "name" : "SQL参数",
            "source" : "f9349781ed24c897.txt",
            "type" : "text/plain",
            "size" : 11
          } ],
          "parameters" : [ ],
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 2,
          "stepsCount" : 0,
          "hasContent" : true
        }, {
          "name" : "等待中（已等待4.3秒）",
          "time" : {
            "start" : 1756361342780,
            "stop" : 1756361342780,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "1fb88ef04c88fe32",
            "name" : "当前状态",
            "source" : "1fb88ef04c88fe32.txt",
            "type" : "text/plain",
            "size" : 18
          }, {
            "uid" : "3e411baf57a27c28",
            "name" : "超时倒计时",
            "source" : "3e411baf57a27c28.txt",
            "type" : "text/plain",
            "size" : 20
          } ],
          "parameters" : [ ],
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 2,
          "stepsCount" : 0,
          "hasContent" : true
        }, {
          "name" : "执行数据库查询",
          "time" : {
            "start" : 1756361344828,
            "stop" : 1756361344876,
            "duration" : 48
          },
          "status" : "passed",
          "steps" : [ {
            "name" : "数据库查询结果",
            "time" : {
              "start" : 1756361344875,
              "stop" : 1756361344876,
              "duration" : 1
            },
            "status" : "passed",
            "steps" : [ ],
            "attachments" : [ {
              "uid" : "51406f514230797",
              "name" : "查询结果（共1条，显示前50条）",
              "source" : "51406f514230797.json",
              "type" : "application/json",
              "size" : 1086
            } ],
            "parameters" : [ ],
            "shouldDisplayMessage" : false,
            "attachmentsCount" : 1,
            "stepsCount" : 0,
            "hasContent" : true
          } ],
          "attachments" : [ {
            "uid" : "d7885d31df81e2e7",
            "name" : "执行SQL",
            "source" : "d7885d31df81e2e7.txt",
            "type" : "text/plain",
            "size" : 72
          }, {
            "uid" : "8eb0be2ce23e7bef",
            "name" : "SQL参数",
            "source" : "8eb0be2ce23e7bef.txt",
            "type" : "text/plain",
            "size" : 11
          } ],
          "parameters" : [ ],
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 3,
          "stepsCount" : 1,
          "hasContent" : true
        }, {
          "name" : "等待删除超时",
          "time" : {
            "start" : 1756361344876,
            "stop" : 1756361344876,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "d3b212ba4877a7ad",
            "name" : "超时说明",
            "source" : "d3b212ba4877a7ad.txt",
            "type" : "text/plain",
            "size" : 35
          }, {
            "uid" : "e6a9746b3b9924b2",
            "name" : "剩余记录（共1条）",
            "source" : "e6a9746b3b9924b2.json",
            "type" : "application/json",
            "size" : 1086
          } ],
          "parameters" : [ ],
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 2,
          "stepsCount" : 0,
          "hasContent" : true
        } ],
        "attachments" : [ {
          "uid" : "c8a031db551aeed5",
          "name" : "执行SQL",
          "source" : "c8a031db551aeed5.txt",
          "type" : "text/plain",
          "size" : 46
        }, {
          "uid" : "7fe18b2c7cbda4ff",
          "name" : "SQL参数",
          "source" : "7fe18b2c7cbda4ff.txt",
          "type" : "text/plain",
          "size" : 11
        } ],
        "parameters" : [ ],
        "shouldDisplayMessage" : true,
        "attachmentsCount" : 19,
        "stepsCount" : 9,
        "hasContent" : true
      } ],
      "attachments" : [ {
        "uid" : "e4f08284f1ce770e",
        "name" : "验证结果",
        "source" : "e4f08284f1ce770e.attach",
        "type" : "text/plain",
        "size" : 56
      } ],
      "parameters" : [ ],
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 20,
      "stepsCount" : 10,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "bbd272bf6cf4c4e9",
      "name" : "log",
      "source" : "bbd272bf6cf4c4e9.txt",
      "type" : "text/plain",
      "size" : 5915
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 21,
    "stepsCount" : 11,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "var_manager::0",
    "time" : {
      "start" : 1756361383260,
      "stop" : 1756361383262,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "db_transaction::0",
    "time" : {
      "start" : 1756361344896,
      "stop" : 1756361344896,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "db::0",
    "time" : {
      "start" : 1756361344896,
      "stop" : 1756361344897,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "数据管理-删除云策略测试数据"
  }, {
    "name" : "parentSuite",
    "value" : "test_cloudTrader"
  }, {
    "name" : "suite",
    "value" : "test_delete"
  }, {
    "name" : "subSuite",
    "value" : "TestDelete_cloudTrader"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "31156-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_cloudTrader.test_delete"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "647c4af60bd50d2c.json",
  "parameterValues" : [ ]
}