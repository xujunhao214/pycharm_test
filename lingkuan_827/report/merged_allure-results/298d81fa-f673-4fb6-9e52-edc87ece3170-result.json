{"name": "出现漏平-redis数据和数据库的数据做比对", "status": "broken", "statusDetails": {"message": "TimeoutError: 等待超时（30秒），未查询到任何数据。\nSQL: \n                       SELECT * \n                       FROM follow_order_detail \n                       WHERE symbol LIKE %s \n                         AND source_user = %s\n                         AND account = %s\n                       \n参数: ('%XAUUSD%', '300151', '300151')", "trace": "self = <lingkuan_827.test_vps.test_vps_Leakage_level.TestLeakagelevel object at 0x000001DFD47EFDC0>\nvar_manager = <lingkuan_827.commons.variable_manager.VariableManager object at 0x000001DFD4923FD0>\ndb_transaction = <pymysql.connections.Connection object at 0x000001DFD4712040>\nredis_order_data_close = [{'lots': 0.64, 'magic': 11782, 'openPrice': 3349.28, 'symbol': 'XAUUSD', ...}, {'lots': 0.36, 'magic': 57257, 'openPrice': 3349.3, 'symbol': 'XAUUSD', ...}]\n\n    @allure.title(\"出现漏平-redis数据和数据库的数据做比对\")\n    def test_dbquery_redis(self, var_manager, db_transaction, redis_order_data_close):\n        with allure.step(\"1. 获取订单详情界面跟单账号数据\"):\n            trader_ordersend = var_manager.get_variable(\"trader_ordersend\")\n            new_user = var_manager.get_variable(\"new_user\")\n            symbol = trader_ordersend[\"symbol\"]\n    \n            sql = f\"\"\"\n                       SELECT *\n                       FROM follow_order_detail\n                       WHERE symbol LIKE %s\n                         AND source_user = %s\n                         AND account = %s\n                       \"\"\"\n            params = (\n                f\"%{symbol}%\",\n                new_user[\"account\"],\n                new_user[\"account\"],\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n>           db_data = self.query_database_with_time(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"create_time\"\n            )\n\ntest_vps\\test_vps_Leakage_level.py:432: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_827.test_vps.test_vps_Leakage_level.TestLeakagelevel object at 0x000001DFD47EFDC0>\ndb_transaction = <pymysql.connections.Connection object at 0x000001DFD4712040>\nsql = '\\n                       SELECT * \\n                       FROM follow_order_detail \\n                       WHERE sy...%s \\n                         AND source_user = %s\\n                         AND account = %s\\n                       '\nparams = ('%XAUUSD%', '300151', '300151'), time_field = 'create_time'\ntime_range = 1, order_by = 'create_time DESC', timeout = 30, poll_interval = 2\nstable_period = 3\n\n    def query_database_with_time(\n            self,\n            db_transaction: pymysql.connections.Connection,\n            sql: str,\n            params: tuple = (),\n            time_field: Optional[str] = None,\n            time_range: int = MYSQL_TIME,\n            order_by: str = \"create_time DESC\",\n            timeout: int = WAIT_TIMEOUT,\n            poll_interval: int = POLL_INTERVAL,\n            stable_period: int = STBLE_PERIOD\n    ) -> List[Dict[str, Any]]:\n        \"\"\"轮询等待数据库记录出现（等待数据稳定）\"\"\"\n        import time\n        start_time = time.time()\n        last_result = None\n        stable_start_time = None\n        has_data = False  # 标记是否查询到过数据\n        final_result = None  # 存储最终稳定结果\n    \n        logger.info(\n            f\"[{self._get_current_time()}] 开始等待数据库记录稳定 | \"\n            f\"SQL: {sql[:200]} | \"\n            f\"超时: {timeout}秒 | \"\n            f\"稳定期: {stable_period}秒\"\n        )\n        with allure.step(f\"等待数据库记录稳定（超时: {timeout}秒，稳定期: {stable_period}秒）\"):\n            pass  # 保持空块，仅用于显示步骤\n    \n        while time.time() - start_time < timeout:\n            try:\n                db_transaction.commit()  # 刷新事务\n                # 轮询过程中不附加到报告\n                result = self._execute_query(\n                    db_transaction, sql, params, time_field, order_by, time_range,\n                    attach_to_allure=False\n                )\n    \n                # 检查是否有数据\n                if len(result) > 0:\n                    has_data = True\n                    # 判断结果是否稳定（数量和内容都不变）\n                    if self._is_result_stable(result, last_result):\n                        if stable_start_time is None:\n                            stable_start_time = time.time()\n                            logger.debug(f\"[{self._get_current_time()}] 数据首次稳定，开始计时\")\n                        elif time.time() - stable_start_time >= stable_period:\n                            final_result = result  # 记录最终稳定结果\n                            logger.info(\n                                f\"[{self._get_current_time()}] 数据已稳定{stable_period}秒（耗时{time.time() - start_time:.1f}秒）| \"\n                                f\"结果数: {len(result)}\"\n                            )\n                            allure.attach(\n                                f\"数据已稳定{stable_period}秒（总耗时{time.time() - start_time:.1f}秒）\",\n                                \"等待结果\",\n                                allure.attachment_type.TEXT\n                            )\n                            break  # 数据稳定，跳出轮询\n                    else:\n                        stable_start_time = None  # 结果变化，重置稳定计时器\n                        logger.debug(f\"[{self._get_current_time()}] 数据仍在变化，重置稳定计时器\")\n                else:\n                    # 结果为空，重置稳定计时器\n                    stable_start_time = None\n                    has_data = False\n                    logger.debug(f\"[{self._get_current_time()}] 查询结果为空，继续等待\")\n    \n                last_result = result\n                elapsed = time.time() - start_time\n                logger.debug(\n                    f\"[{self._get_current_time()}] 等待数据稳定（已等待{elapsed:.1f}秒）| \"\n                    f\"当前结果数: {len(result)} | \"\n                    f\"稳定时间: {time.time() - stable_start_time if stable_start_time else 0:.1f}/{stable_period}秒\"\n                )\n                time.sleep(poll_interval)\n    \n            except Exception as e:\n                logger.warning(f\"[{self._get_current_time()}] 轮询查询异常: {str(e)} | 继续等待...\")\n                time.sleep(poll_interval)\n    \n        # 超时处理\n        if final_result is None:\n            # 最后一次查询附加到报告\n            final_result = self._execute_query(\n                db_transaction, sql, params, time_field, order_by, time_range\n            )\n    \n        # 轮询结束后附加最终结果到报告\n        display_count = min(len(final_result), 50)\n        with allure.step(\"数据库查询结果（最终稳定结果）\"):\n            allure.attach(sql, \"执行SQL\", allure.attachment_type.TEXT)\n            allure.attach(str(params), \"SQL参数\", allure.attachment_type.TEXT)\n            allure.attach(\n                self.serialize_data(final_result[:display_count]),\n                f\"查询结果（共{len(final_result)}条，显示前{display_count}条）\",\n                allure.attachment_type.JSON\n            )\n    \n        # 判断是否超时\n        if len(final_result) == 0:\n            error_msg = (\n                f\"等待超时（{timeout}秒），未查询到任何数据。\\n\"\n                f\"SQL: {sql}\\n\"\n                f\"参数: {params}\"\n            )\n>           raise TimeoutError(error_msg)\nE           TimeoutError: 等待超时（30秒），未查询到任何数据。\nE           SQL: \nE                                  SELECT * \nE                                  FROM follow_order_detail \nE                                  WHERE symbol LIKE %s \nE                                    AND source_user = %s\nE                                    AND account = %s\nE                                  \nE           参数: ('%XAUUSD%', '300151', '300151')\n\ncommons\\api_base.py:684: TimeoutError"}, "description": "\n### 用例说明\n- 前置条件：有vps策略和vps跟单\n- 操作步骤：\n  1. 修改vps跟单账号开仓-关闭\n  2. 进行开仓\n  3. 跟单账号开仓失败，有漏单数据，把redis数据和MySQL数据进行校验\n  4. 修改vps跟单账号开仓-开启\n  5. 进行补单操作，然后平仓\n- 预期结果：vps跟单账号开仓-关闭，有漏单数据\n", "steps": [{"name": "1. 获取订单详情界面跟单账号数据", "status": "broken", "statusDetails": {"message": "TimeoutError: 等待超时（30秒），未查询到任何数据。\nSQL: \n                       SELECT * \n                       FROM follow_order_detail \n                       WHERE symbol LIKE %s \n                         AND source_user = %s\n                         AND account = %s\n                       \n参数: ('%XAUUSD%', '300151', '300151')\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_827\\test_vps\\test_vps_Leakage_level.py\", line 432, in test_dbquery_redis\n    db_data = self.query_database_with_time(\n  File \"D:\\pycharm_test\\lingkuan_827\\commons\\api_base.py\", line 684, in query_database_with_time\n    raise TimeoutError(error_msg)\n"}, "steps": [{"name": "等待数据库记录稳定（超时: 30秒，稳定期: 3秒）", "status": "passed", "start": 1755512598057, "stop": 1755512598057}, {"name": "数据库查询结果", "status": "passed", "attachments": [{"name": "执行SQL", "source": "9d7ebd5f-5f15-415e-aaf7-3ba125a3aef8-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "ae217419-1870-49fa-bda9-b8c9a1a25efe-attachment.txt", "type": "text/plain"}, {"name": "查询结果（共0条，显示前0条）", "source": "d39ed2d6-1c42-4872-bf62-8c0fc482ce82-attachment.json", "type": "application/json"}], "start": 1755512632714, "stop": 1755512632715}, {"name": "数据库查询结果（最终稳定结果）", "status": "passed", "attachments": [{"name": "执行SQL", "source": "fdeac0ea-7b65-4a32-be48-dfdf02db6bf8-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "ec7a1b73-00e5-41c4-969d-582ccb48c892-attachment.txt", "type": "text/plain"}, {"name": "查询结果（共0条，显示前0条）", "source": "08c00b62-ab89-4b49-9ab5-7cd3b38d11ae-attachment.json", "type": "application/json"}], "start": 1755512632715, "stop": 1755512632716}], "start": 1755512598057, "stop": 1755512632716}], "attachments": [{"name": "log", "source": "a349cb68-5cb1-4d26-8c27-d8dded3684df-attachment.txt", "type": "text/plain"}], "start": 1755512598057, "stop": 1755512632716, "uuid": "d9f5d784-0d4a-4a9c-be03-66415c1a1e56", "historyId": "ea05b79ef1a74118d69895575bdaaca0", "testCaseId": "ea05b79ef1a74118d69895575bdaaca0", "fullName": "test_vps.test_vps_Leakage_level.TestLeakagelevel#test_dbquery_redis", "labels": [{"name": "feature", "value": "VPS策略下单-漏平"}, {"name": "parentSuite", "value": "test_vps"}, {"name": "suite", "value": "test_vps_Leakage_level"}, {"name": "subSuite", "value": "TestLeakagelevel"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "6824-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_vps.test_vps_Leakage_level"}]}