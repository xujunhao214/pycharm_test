{"name": "数据库校验-账号列表-批量删除账号", "status": "failed", "statusDetails": {"message": "Failed: 删除失败: Failed: 等待记录删除超时（5秒）", "trace": "self = <lingkuan_827.test_cloudTrader.test_delete.TestDelete_cloudTrader object at 0x0000023721FBC910>\nvar_manager = <lingkuan_827.commons.variable_manager.VariableManager object at 0x0000023721FC47C0>\ndb_transaction = <pymysql.connections.Connection object at 0x000002372222C7C0>\n\n    @allure.title(\"数据库校验-账号列表-批量删除账号\")\n    def test_dbdelete_userlist(self, var_manager, db_transaction):\n        \"\"\"数据库校验批量删除结果\"\"\"\n        # 1. 获取账号总数和数据库查询配置\n        cloudTrader_user_count = var_manager.get_variable(\"cloudTrader_user_count\", 0)\n        if cloudTrader_user_count <= 0:\n            pytest.fail(\"未找到需要验证的账号总数，请检查前置步骤\")\n    \n        # 2. 循环验证每个账号的删除状态\n        for i in range(1, cloudTrader_user_count + 1):\n            with allure.step(f\"验证第{i}个账号的删除状态\"):\n                # 获取当前账号的ID和账号名（用于数据库查询）\n                account = var_manager.get_variable(f\"cloudTrader_user_accounts_{i}\")\n                if not account:\n                    pytest.fail(f\"未找到第{i}个账号的账号名（变量名：cloudTrader_user_accounts_{i}）\")\n    \n                # 3. 执行数据库查询（按账号名查询，更直观）\n                sql = f\"SELECT * FROM follow_trader_user WHERE account = %s\"\n                params = (account,)\n    \n                try:\n>                   self.wait_for_database_deletion(\n                        db_transaction=db_transaction,\n                        sql=sql,\n                        params=params\n                    )\n\ntest_cloudTrader\\test_delete.py:478: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_827.test_cloudTrader.test_delete.TestDelete_cloudTrader object at 0x0000023721FBC910>\ndb_transaction = <pymysql.connections.Connection object at 0x000002372222C7C0>\nsql = 'SELECT * FROM follow_trader_user WHERE account = %s'\nparams = ('300159',), time_field = None, time_range = 1\norder_by = 'create_time DESC', timeout = 5, poll_interval = 2\n\n    def wait_for_database_deletion(self, db_transaction: pymysql.connections.Connection,\n                                   sql: str,\n                                   params: tuple = (),\n                                   time_field: Optional[str] = None,\n                                   time_range: int = MYSQL_TIME,\n                                   order_by: str = \"create_time DESC\",\n                                   timeout: int = DELETE_WAIT_TIMEOUT,\n                                   poll_interval: int = POLL_INTERVAL) -> None:\n        \"\"\"轮询等待数据库记录删除（带Allure分层提示）\"\"\"\n        start_time = time.time()\n        logger.info(f\"[{self._get_current_time()}] 开始等待数据库记录删除 | SQL: {sql[:200]} | 超时: {timeout}秒\")\n    \n        with allure.step(f\"等待数据库记录删除（超时: {timeout}秒）\"):\n            allure.attach(sql, \"执行SQL\", allure.attachment_type.TEXT)\n            allure.attach(str(params), \"SQL参数\", allure.attachment_type.TEXT)\n    \n            while time.time() - start_time < timeout:\n                try:\n                    db_transaction.commit()\n    \n                    if time_field:\n                        result = self.query_database_with_time(\n                            db_transaction=db_transaction,\n                            sql=sql,\n                            params=params,\n                            time_field=time_field,\n                            time_range=time_range,\n                            order_by=order_by,\n                            timeout=1,  # 单次查询不超时\n                            attach_to_allure=False\n                        )\n                    else:\n                        result = self.query_database(\n                            db_transaction=db_transaction,\n                            sql=sql,\n                            params=params,\n                            order_by=order_by,\n                            attach_to_allure=False\n                        )\n    \n                    elapsed = time.time() - start_time\n                    with allure.step(f\"等待中（已等待{elapsed:.1f}秒）\"):\n                        allure.attach(f\"剩余记录数: {len(result)}\", \"当前状态\", allure.attachment_type.TEXT)\n                        allure.attach(f\"剩余时间: {timeout - elapsed:.1f}秒\", \"超时倒计时\", allure.attachment_type.TEXT)\n    \n                    if not result:\n                        logger.info(\n                            f\"[{self._get_current_time()}] 删除成功（耗时{time.time() - start_time:.1f}秒）| SQL: {sql[:200]}\")\n                        with allure.step(\"删除验证成功\"):\n                            allure.attach(f\"耗时{time.time() - start_time:.1f}秒，记录已删除\", \"结果说明\",\n                                          allure.attachment_type.TEXT)\n                        return\n    \n                    logger.info(\n                        f\"[{self._get_current_time()}] 记录仍存在（已等待{elapsed:.1f}秒）| 剩余时间: {timeout - elapsed:.1f}秒 | 结果数: {len(result)}\")\n                    time.sleep(poll_interval)\n    \n                except Exception as e:\n                    with allure.step(\"删除等待异常\"):\n                        allure.attach(sql, \"执行SQL\", allure.attachment_type.TEXT)\n                        allure.attach(str(params), \"SQL参数\", allure.attachment_type.TEXT)\n                        allure.attach(str(e), \"错误详情\", allure.attachment_type.TEXT)\n                    logger.warning(f\"[{self._get_current_time()}] 轮询查询异常: {str(e)} | 继续等待...\")\n                    time.sleep(poll_interval)\n    \n            # 超时处理\n            db_transaction.commit()\n            if time_field:\n                final_result = self.query_database_with_time(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params,\n                    time_field=time_field,\n                    time_range=time_range,\n                    order_by=order_by,\n                    timeout=1,\n                    attach_to_allure=True\n                )\n            else:\n                final_result = self.query_database(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params,\n                    order_by=order_by,\n                    attach_to_allure=True\n                )\n    \n            display_count = min(len(final_result), 50)\n            with allure.step(\"等待删除超时\"):\n                allure.attach(f\"超过{timeout}秒仍有{len(final_result)}条记录未删除\", \"超时说明\",\n                              allure.attachment_type.TEXT)\n                allure.attach(\n                    self.serialize_data(final_result[:display_count]),\n                    f\"剩余记录（共{len(final_result)}条）\",\n                    allure.attachment_type.JSON\n                )\n    \n>           raise TimeoutError(f\"Failed: 等待记录删除超时（{timeout}秒）\")\nE           TimeoutError: Failed: 等待记录删除超时（5秒）\n\ncommons\\api_base.py:827: TimeoutError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <lingkuan_827.test_cloudTrader.test_delete.TestDelete_cloudTrader object at 0x0000023721FBC910>\nvar_manager = <lingkuan_827.commons.variable_manager.VariableManager object at 0x0000023721FC47C0>\ndb_transaction = <pymysql.connections.Connection object at 0x000002372222C7C0>\n\n    @allure.title(\"数据库校验-账号列表-批量删除账号\")\n    def test_dbdelete_userlist(self, var_manager, db_transaction):\n        \"\"\"数据库校验批量删除结果\"\"\"\n        # 1. 获取账号总数和数据库查询配置\n        cloudTrader_user_count = var_manager.get_variable(\"cloudTrader_user_count\", 0)\n        if cloudTrader_user_count <= 0:\n            pytest.fail(\"未找到需要验证的账号总数，请检查前置步骤\")\n    \n        # 2. 循环验证每个账号的删除状态\n        for i in range(1, cloudTrader_user_count + 1):\n            with allure.step(f\"验证第{i}个账号的删除状态\"):\n                # 获取当前账号的ID和账号名（用于数据库查询）\n                account = var_manager.get_variable(f\"cloudTrader_user_accounts_{i}\")\n                if not account:\n                    pytest.fail(f\"未找到第{i}个账号的账号名（变量名：cloudTrader_user_accounts_{i}）\")\n    \n                # 3. 执行数据库查询（按账号名查询，更直观）\n                sql = f\"SELECT * FROM follow_trader_user WHERE account = %s\"\n                params = (account,)\n    \n                try:\n                    self.wait_for_database_deletion(\n                        db_transaction=db_transaction,\n                        sql=sql,\n                        params=params\n                    )\n                    allure.attach(f\"账号 {account} 已成功从数据库删除\", \"验证结果\")\n                except TimeoutError as e:\n                    allure.attach(f\"删除超时: {str(e)}\", \"验证结果\")\n>                   pytest.fail(f\"删除失败: {str(e)}\")\nE                   Failed: 删除失败: Failed: 等待记录删除超时（5秒）\n\ntest_cloudTrader\\test_delete.py:486: Failed"}, "description": "数据库校验批量删除结果", "steps": [{"name": "验证第1个账号的删除状态", "status": "failed", "statusDetails": {"message": "Failed: 删除失败: Failed: 等待记录删除超时（5秒）\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_827\\test_cloudTrader\\test_delete.py\", line 486, in test_dbdelete_userlist\n    pytest.fail(f\"删除失败: {str(e)}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "等待数据库记录删除（超时: 5秒）", "status": "broken", "statusDetails": {"message": "TimeoutError: Failed: 等待记录删除超时（5秒）\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_827\\commons\\api_base.py\", line 827, in wait_for_database_deletion\n    raise TimeoutError(f\"Failed: 等待记录删除超时（{timeout}秒）\")\n"}, "steps": [{"name": "执行数据库查询", "status": "passed", "attachments": [{"name": "执行SQL", "source": "b87157e7-46aa-4854-9da5-cfa749212ab0-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "27c4a940-09a0-4b5c-8c93-8b27b7f06910-attachment.txt", "type": "text/plain"}], "start": 1756361363528, "stop": 1756361363579}, {"name": "等待中（已等待0.1秒）", "status": "passed", "attachments": [{"name": "当前状态", "source": "632ee807-de0a-4017-b624-130f94360676-attachment.txt", "type": "text/plain"}, {"name": "超时倒计时", "source": "3e69b524-0ee9-4bb9-9809-f89495e66272-attachment.txt", "type": "text/plain"}], "start": 1756361363579, "stop": 1756361363579}, {"name": "执行数据库查询", "status": "passed", "attachments": [{"name": "执行SQL", "source": "60b22603-6770-4874-893e-1a18e43c5838-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "f7c22056-e780-4664-b788-fa09686396f4-attachment.txt", "type": "text/plain"}], "start": 1756361365630, "stop": 1756361365678}, {"name": "等待中（已等待2.2秒）", "status": "passed", "attachments": [{"name": "当前状态", "source": "568fedab-2957-4d66-80a1-b73146617409-attachment.txt", "type": "text/plain"}, {"name": "超时倒计时", "source": "37f9ad4e-33bd-4ecd-9fb7-005b5571b04d-attachment.txt", "type": "text/plain"}], "start": 1756361365678, "stop": 1756361365679}, {"name": "执行数据库查询", "status": "passed", "attachments": [{"name": "执行SQL", "source": "eb0e3bab-d00f-41ce-bdbb-7201cd6858ce-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "eb42cf90-fc31-4ca1-a494-ece50e0ee4ac-attachment.txt", "type": "text/plain"}], "start": 1756361367730, "stop": 1756361367782}, {"name": "等待中（已等待4.3秒）", "status": "passed", "attachments": [{"name": "当前状态", "source": "5db16491-e8e8-4284-ad1b-0c2bdf6d8c49-attachment.txt", "type": "text/plain"}, {"name": "超时倒计时", "source": "14b52b29-0c4c-483f-8824-a5a7d109c5d7-attachment.txt", "type": "text/plain"}], "start": 1756361367782, "stop": 1756361367783}, {"name": "执行数据库查询", "status": "passed", "steps": [{"name": "数据库查询结果", "status": "passed", "attachments": [{"name": "查询结果（共1条，显示前50条）", "source": "3819551d-e77f-4833-b354-6b206131e1f4-attachment.json", "type": "application/json"}], "start": 1756361369888, "stop": 1756361369889}], "attachments": [{"name": "执行SQL", "source": "a012f31e-5484-40eb-97f9-70b5f17b8a93-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "a6d16efe-351c-4433-a62c-663379e2cb4c-attachment.txt", "type": "text/plain"}], "start": 1756361369837, "stop": 1756361369889}, {"name": "等待删除超时", "status": "passed", "attachments": [{"name": "超时说明", "source": "f4793d35-3798-4f0f-b825-39505efbbeb4-attachment.txt", "type": "text/plain"}, {"name": "剩余记录（共1条）", "source": "7c726c85-9bb7-4687-8008-b728944872b0-attachment.json", "type": "application/json"}], "start": 1756361369889, "stop": 1756361369890}], "attachments": [{"name": "执行SQL", "source": "568117bd-5c49-4415-ae6b-08280d61a6b6-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "ca3e35a1-ee14-4bb5-82fa-ef574c7efdd5-attachment.txt", "type": "text/plain"}], "start": 1756361363480, "stop": 1756361369890}], "attachments": [{"name": "验证结果", "source": "17e964c7-d9fe-4ee2-99e8-1424c5aba026-attachment.attach"}], "start": 1756361363480, "stop": 1756361369890}], "attachments": [{"name": "log", "source": "0131d6bf-6af9-444d-a232-22df3e3a30c7-attachment.txt", "type": "text/plain"}], "start": 1756361363480, "stop": 1756361369891, "uuid": "b31b9a70-5094-46a0-a9ab-5598319894e3", "historyId": "fcf84e56826b2a65418def55caec879c", "testCaseId": "fcf84e56826b2a65418def55caec879c", "fullName": "test_cloudTrader.test_delete.TestDelete_cloudTrader#test_dbdelete_userlist", "labels": [{"name": "feature", "value": "数据管理-删除云策略测试数据"}, {"name": "parentSuite", "value": "test_cloudTrader"}, {"name": "suite", "value": "test_delete"}, {"name": "subSuite", "value": "TestDelete_cloudTrader"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "31156-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cloudTrader.test_delete"}]}