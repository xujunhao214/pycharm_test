{"name": "数据库校验-VPS数据-删除策略账号", "status": "failed", "statusDetails": {"message": "Failed: 删除失败: Failed: 等待记录删除超时（5秒）", "trace": "self = <lingkuan_827.test_cloudTrader.test_delete.TestDelete_cloudTrader object at 0x0000023721FBC490>\nvar_manager = <lingkuan_827.commons.variable_manager.VariableManager object at 0x0000023721FC47C0>\ndb_transaction = <pymysql.connections.Connection object at 0x000002372209D7F0>\n\n    @allure.title(\"数据库校验-VPS数据-删除策略账号\")\n    def test_dbdelete_vpstrader(self, var_manager, db_transaction):\n        with allure.step(\"1. 查询数据库验证是否删除成功\"):\n            cloudTrader_user_accounts_1 = var_manager.get_variable(\"cloudTrader_user_accounts_1\")\n            logging.info(f\"查询条件: table=follow_trader, account={cloudTrader_user_accounts_1}\")\n    \n            sql = f\"SELECT * FROM follow_trader WHERE account = %s\"\n            params = (cloudTrader_user_accounts_1,)\n            try:\n>               self.wait_for_database_deletion(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params\n                )\n\ntest_cloudTrader\\test_delete.py:404: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_827.test_cloudTrader.test_delete.TestDelete_cloudTrader object at 0x0000023721FBC490>\ndb_transaction = <pymysql.connections.Connection object at 0x000002372209D7F0>\nsql = 'SELECT * FROM follow_trader WHERE account = %s', params = ('300159',)\ntime_field = None, time_range = 1, order_by = 'create_time DESC', timeout = 5\npoll_interval = 2\n\n    def wait_for_database_deletion(self, db_transaction: pymysql.connections.Connection,\n                                   sql: str,\n                                   params: tuple = (),\n                                   time_field: Optional[str] = None,\n                                   time_range: int = MYSQL_TIME,\n                                   order_by: str = \"create_time DESC\",\n                                   timeout: int = DELETE_WAIT_TIMEOUT,\n                                   poll_interval: int = POLL_INTERVAL) -> None:\n        \"\"\"轮询等待数据库记录删除（带Allure分层提示）\"\"\"\n        start_time = time.time()\n        logger.info(f\"[{self._get_current_time()}] 开始等待数据库记录删除 | SQL: {sql[:200]} | 超时: {timeout}秒\")\n    \n        with allure.step(f\"等待数据库记录删除（超时: {timeout}秒）\"):\n            allure.attach(sql, \"执行SQL\", allure.attachment_type.TEXT)\n            allure.attach(str(params), \"SQL参数\", allure.attachment_type.TEXT)\n    \n            while time.time() - start_time < timeout:\n                try:\n                    db_transaction.commit()\n    \n                    if time_field:\n                        result = self.query_database_with_time(\n                            db_transaction=db_transaction,\n                            sql=sql,\n                            params=params,\n                            time_field=time_field,\n                            time_range=time_range,\n                            order_by=order_by,\n                            timeout=1,  # 单次查询不超时\n                            attach_to_allure=False\n                        )\n                    else:\n                        result = self.query_database(\n                            db_transaction=db_transaction,\n                            sql=sql,\n                            params=params,\n                            order_by=order_by,\n                            attach_to_allure=False\n                        )\n    \n                    elapsed = time.time() - start_time\n                    with allure.step(f\"等待中（已等待{elapsed:.1f}秒）\"):\n                        allure.attach(f\"剩余记录数: {len(result)}\", \"当前状态\", allure.attachment_type.TEXT)\n                        allure.attach(f\"剩余时间: {timeout - elapsed:.1f}秒\", \"超时倒计时\", allure.attachment_type.TEXT)\n    \n                    if not result:\n                        logger.info(\n                            f\"[{self._get_current_time()}] 删除成功（耗时{time.time() - start_time:.1f}秒）| SQL: {sql[:200]}\")\n                        with allure.step(\"删除验证成功\"):\n                            allure.attach(f\"耗时{time.time() - start_time:.1f}秒，记录已删除\", \"结果说明\",\n                                          allure.attachment_type.TEXT)\n                        return\n    \n                    logger.info(\n                        f\"[{self._get_current_time()}] 记录仍存在（已等待{elapsed:.1f}秒）| 剩余时间: {timeout - elapsed:.1f}秒 | 结果数: {len(result)}\")\n                    time.sleep(poll_interval)\n    \n                except Exception as e:\n                    with allure.step(\"删除等待异常\"):\n                        allure.attach(sql, \"执行SQL\", allure.attachment_type.TEXT)\n                        allure.attach(str(params), \"SQL参数\", allure.attachment_type.TEXT)\n                        allure.attach(str(e), \"错误详情\", allure.attachment_type.TEXT)\n                    logger.warning(f\"[{self._get_current_time()}] 轮询查询异常: {str(e)} | 继续等待...\")\n                    time.sleep(poll_interval)\n    \n            # 超时处理\n            db_transaction.commit()\n            if time_field:\n                final_result = self.query_database_with_time(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params,\n                    time_field=time_field,\n                    time_range=time_range,\n                    order_by=order_by,\n                    timeout=1,\n                    attach_to_allure=True\n                )\n            else:\n                final_result = self.query_database(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params,\n                    order_by=order_by,\n                    attach_to_allure=True\n                )\n    \n            display_count = min(len(final_result), 50)\n            with allure.step(\"等待删除超时\"):\n                allure.attach(f\"超过{timeout}秒仍有{len(final_result)}条记录未删除\", \"超时说明\",\n                              allure.attachment_type.TEXT)\n                allure.attach(\n                    self.serialize_data(final_result[:display_count]),\n                    f\"剩余记录（共{len(final_result)}条）\",\n                    allure.attachment_type.JSON\n                )\n    \n>           raise TimeoutError(f\"Failed: 等待记录删除超时（{timeout}秒）\")\nE           TimeoutError: Failed: 等待记录删除超时（5秒）\n\ncommons\\api_base.py:827: TimeoutError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <lingkuan_827.test_cloudTrader.test_delete.TestDelete_cloudTrader object at 0x0000023721FBC490>\nvar_manager = <lingkuan_827.commons.variable_manager.VariableManager object at 0x0000023721FC47C0>\ndb_transaction = <pymysql.connections.Connection object at 0x000002372209D7F0>\n\n    @allure.title(\"数据库校验-VPS数据-删除策略账号\")\n    def test_dbdelete_vpstrader(self, var_manager, db_transaction):\n        with allure.step(\"1. 查询数据库验证是否删除成功\"):\n            cloudTrader_user_accounts_1 = var_manager.get_variable(\"cloudTrader_user_accounts_1\")\n            logging.info(f\"查询条件: table=follow_trader, account={cloudTrader_user_accounts_1}\")\n    \n            sql = f\"SELECT * FROM follow_trader WHERE account = %s\"\n            params = (cloudTrader_user_accounts_1,)\n            try:\n                self.wait_for_database_deletion(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params\n                )\n                allure.attach(f\"策略账号 {cloudTrader_user_accounts_1} 已成功从数据库删除\", \"验证结果\")\n            except TimeoutError as e:\n                allure.attach(f\"删除超时: {str(e)}\", \"验证结果\")\n>               pytest.fail(f\"删除失败: {str(e)}\")\nE               Failed: 删除失败: Failed: 等待记录删除超时（5秒）\n\ntest_cloudTrader\\test_delete.py:412: Failed"}, "steps": [{"name": "1. 查询数据库验证是否删除成功", "status": "failed", "statusDetails": {"message": "Failed: 删除失败: Failed: 等待记录删除超时（5秒）\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_827\\test_cloudTrader\\test_delete.py\", line 412, in test_dbdelete_vpstrader\n    pytest.fail(f\"删除失败: {str(e)}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "等待数据库记录删除（超时: 5秒）", "status": "broken", "statusDetails": {"message": "TimeoutError: Failed: 等待记录删除超时（5秒）\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_827\\commons\\api_base.py\", line 827, in wait_for_database_deletion\n    raise TimeoutError(f\"Failed: 等待记录删除超时（{timeout}秒）\")\n"}, "steps": [{"name": "执行数据库查询", "status": "passed", "attachments": [{"name": "执行SQL", "source": "b0fcf19f-61ab-4a42-a969-fa650ff82207-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "a05947f6-8ac8-47e9-86c2-f50c1fc0b5f4-attachment.txt", "type": "text/plain"}], "start": 1756361338521, "stop": 1756361338575}, {"name": "等待中（已等待0.1秒）", "status": "passed", "attachments": [{"name": "当前状态", "source": "6e478009-f751-4132-9518-13597efcba65-attachment.txt", "type": "text/plain"}, {"name": "超时倒计时", "source": "5334b0a5-698f-4e18-9fd7-e5fe90778f4f-attachment.txt", "type": "text/plain"}], "start": 1756361338575, "stop": 1756361338575}, {"name": "执行数据库查询", "status": "passed", "attachments": [{"name": "执行SQL", "source": "bb96e6a2-a8c3-45a9-b8ab-d566e2a27ee7-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "f2d4b50d-7062-4bc5-b3f7-cb82bb91f7e2-attachment.txt", "type": "text/plain"}], "start": 1756361340622, "stop": 1756361340669}, {"name": "等待中（已等待2.2秒）", "status": "passed", "attachments": [{"name": "当前状态", "source": "a378e27b-30d4-4894-a2f8-b82010b9031d-attachment.txt", "type": "text/plain"}, {"name": "超时倒计时", "source": "a3e1c7a8-cdc9-4a57-bf6f-ef88396db52f-attachment.txt", "type": "text/plain"}], "start": 1756361340669, "stop": 1756361340670}, {"name": "执行数据库查询", "status": "passed", "attachments": [{"name": "执行SQL", "source": "a85ac8ef-49bc-4284-8738-408b361f7b07-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "e68faaad-89e8-40fc-bc77-6bd5fd47e421-attachment.txt", "type": "text/plain"}], "start": 1756361342729, "stop": 1756361342780}, {"name": "等待中（已等待4.3秒）", "status": "passed", "attachments": [{"name": "当前状态", "source": "1c089b64-e891-4b2c-9037-64fe9e42937b-attachment.txt", "type": "text/plain"}, {"name": "超时倒计时", "source": "efd63050-29c4-49d4-a413-73d604ceedb7-attachment.txt", "type": "text/plain"}], "start": 1756361342780, "stop": 1756361342780}, {"name": "执行数据库查询", "status": "passed", "steps": [{"name": "数据库查询结果", "status": "passed", "attachments": [{"name": "查询结果（共1条，显示前50条）", "source": "17945359-b34e-42e0-9f58-a9c68f744521-attachment.json", "type": "application/json"}], "start": 1756361344875, "stop": 1756361344876}], "attachments": [{"name": "执行SQL", "source": "f2c8cfd3-517e-4fd2-b24a-c6bb6b27bdc5-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "681bc7cd-7695-4dfb-b086-ea0a5edd6700-attachment.txt", "type": "text/plain"}], "start": 1756361344828, "stop": 1756361344876}, {"name": "等待删除超时", "status": "passed", "attachments": [{"name": "超时说明", "source": "2771111e-c766-4f21-afd9-7395990b2be2-attachment.txt", "type": "text/plain"}, {"name": "剩余记录（共1条）", "source": "72032493-fc81-4f67-b150-61c0c18a7819-attachment.json", "type": "application/json"}], "start": 1756361344876, "stop": 1756361344876}], "attachments": [{"name": "执行SQL", "source": "6ad322c4-f03b-47b7-8f8f-9000d09ce4fe-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "e64934fb-1e5f-425a-85d7-0695bec8f014-attachment.txt", "type": "text/plain"}], "start": 1756361338473, "stop": 1756361344876}], "attachments": [{"name": "验证结果", "source": "86279ea4-be35-485d-95b5-25875986db04-attachment.attach"}], "start": 1756361338473, "stop": 1756361344877}], "attachments": [{"name": "log", "source": "8b999a13-8b7a-4301-842e-a83f9622945d-attachment.txt", "type": "text/plain"}], "start": 1756361338473, "stop": 1756361344877, "uuid": "565362e9-d944-4275-8758-4de0ad3882e4", "historyId": "38c8754418b3fa75eb0d6618323c75b2", "testCaseId": "38c8754418b3fa75eb0d6618323c75b2", "fullName": "test_cloudTrader.test_delete.TestDelete_cloudTrader#test_dbdelete_vpstrader", "labels": [{"name": "feature", "value": "数据管理-删除云策略测试数据"}, {"name": "parentSuite", "value": "test_cloudTrader"}, {"name": "suite", "value": "test_delete"}, {"name": "subSuite", "value": "TestDelete_cloudTrader"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "31156-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cloudTrader.test_delete"}]}