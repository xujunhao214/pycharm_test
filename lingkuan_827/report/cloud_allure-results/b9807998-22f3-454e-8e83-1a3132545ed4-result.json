{"name": "数据库校验-VPS数据-验证账号是否下架成功（后9个账号）", "status": "failed", "statusDetails": {"message": "Failed: 下架失败: Failed: 等待记录删除超时（5秒）", "trace": "self = <lingkuan_827.test_cloudTrader.test_delete.TestDelete_cloudTrader object at 0x0000023721FB5FD0>\nvar_manager = <lingkuan_827.commons.variable_manager.VariableManager object at 0x0000023721FC47C0>\ndb_transaction = <pymysql.connections.Connection object at 0x00000237220D26A0>\n\n    @allure.title(\"数据库校验-VPS数据-验证账号是否下架成功（后9个账号）\")\n    def test_dbdelete_belowVps(self, var_manager, db_transaction):\n        # 1. 获取账号总数和所有账号信息\n        cloudTrader_user_count = var_manager.get_variable(\"cloudTrader_user_count\", 0)\n        if cloudTrader_user_count < 10:  # 修改条件为至少10个账号\n            pytest.fail(f\"用户总数需至少为10，当前为{cloudTrader_user_count}，无法提取后9个数据进行校验\")\n    \n        # 2. 循环验证后9个账号的下架状态\n        for i in range(2, cloudTrader_user_count + 1):  # 循环索引2-10（共9次）\n            with allure.step(f\"验证第{i}个账号是否下架成功\"):\n                # 获取单个账号（与下架的ID对应）\n                account = var_manager.get_variable(f\"cloudTrader_user_accounts_{i}\")\n                if not account:\n                    pytest.fail(f\"未找到需要验证的账号：cloudTrader_user_accounts_{i}\")\n    \n                # 查询数据库（检查删除标记或记录是否存在）\n                sql = f\"SELECT * FROM follow_trader WHERE account = %s\"\n    \n                # 调用轮询等待方法，验证记录是否被删除\n                try:\n>                   self.wait_for_database_deletion(\n                        db_transaction=db_transaction,\n                        sql=sql,\n                        params=(account,)\n                    )\n\ntest_cloudTrader\\test_delete.py:348: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_827.test_cloudTrader.test_delete.TestDelete_cloudTrader object at 0x0000023721FB5FD0>\ndb_transaction = <pymysql.connections.Connection object at 0x00000237220D26A0>\nsql = 'SELECT * FROM follow_trader WHERE account = %s', params = ('300160',)\ntime_field = None, time_range = 1, order_by = 'create_time DESC', timeout = 5\npoll_interval = 2\n\n    def wait_for_database_deletion(self, db_transaction: pymysql.connections.Connection,\n                                   sql: str,\n                                   params: tuple = (),\n                                   time_field: Optional[str] = None,\n                                   time_range: int = MYSQL_TIME,\n                                   order_by: str = \"create_time DESC\",\n                                   timeout: int = DELETE_WAIT_TIMEOUT,\n                                   poll_interval: int = POLL_INTERVAL) -> None:\n        \"\"\"轮询等待数据库记录删除（带Allure分层提示）\"\"\"\n        start_time = time.time()\n        logger.info(f\"[{self._get_current_time()}] 开始等待数据库记录删除 | SQL: {sql[:200]} | 超时: {timeout}秒\")\n    \n        with allure.step(f\"等待数据库记录删除（超时: {timeout}秒）\"):\n            allure.attach(sql, \"执行SQL\", allure.attachment_type.TEXT)\n            allure.attach(str(params), \"SQL参数\", allure.attachment_type.TEXT)\n    \n            while time.time() - start_time < timeout:\n                try:\n                    db_transaction.commit()\n    \n                    if time_field:\n                        result = self.query_database_with_time(\n                            db_transaction=db_transaction,\n                            sql=sql,\n                            params=params,\n                            time_field=time_field,\n                            time_range=time_range,\n                            order_by=order_by,\n                            timeout=1,  # 单次查询不超时\n                            attach_to_allure=False\n                        )\n                    else:\n                        result = self.query_database(\n                            db_transaction=db_transaction,\n                            sql=sql,\n                            params=params,\n                            order_by=order_by,\n                            attach_to_allure=False\n                        )\n    \n                    elapsed = time.time() - start_time\n                    with allure.step(f\"等待中（已等待{elapsed:.1f}秒）\"):\n                        allure.attach(f\"剩余记录数: {len(result)}\", \"当前状态\", allure.attachment_type.TEXT)\n                        allure.attach(f\"剩余时间: {timeout - elapsed:.1f}秒\", \"超时倒计时\", allure.attachment_type.TEXT)\n    \n                    if not result:\n                        logger.info(\n                            f\"[{self._get_current_time()}] 删除成功（耗时{time.time() - start_time:.1f}秒）| SQL: {sql[:200]}\")\n                        with allure.step(\"删除验证成功\"):\n                            allure.attach(f\"耗时{time.time() - start_time:.1f}秒，记录已删除\", \"结果说明\",\n                                          allure.attachment_type.TEXT)\n                        return\n    \n                    logger.info(\n                        f\"[{self._get_current_time()}] 记录仍存在（已等待{elapsed:.1f}秒）| 剩余时间: {timeout - elapsed:.1f}秒 | 结果数: {len(result)}\")\n                    time.sleep(poll_interval)\n    \n                except Exception as e:\n                    with allure.step(\"删除等待异常\"):\n                        allure.attach(sql, \"执行SQL\", allure.attachment_type.TEXT)\n                        allure.attach(str(params), \"SQL参数\", allure.attachment_type.TEXT)\n                        allure.attach(str(e), \"错误详情\", allure.attachment_type.TEXT)\n                    logger.warning(f\"[{self._get_current_time()}] 轮询查询异常: {str(e)} | 继续等待...\")\n                    time.sleep(poll_interval)\n    \n            # 超时处理\n            db_transaction.commit()\n            if time_field:\n                final_result = self.query_database_with_time(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params,\n                    time_field=time_field,\n                    time_range=time_range,\n                    order_by=order_by,\n                    timeout=1,\n                    attach_to_allure=True\n                )\n            else:\n                final_result = self.query_database(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params,\n                    order_by=order_by,\n                    attach_to_allure=True\n                )\n    \n            display_count = min(len(final_result), 50)\n            with allure.step(\"等待删除超时\"):\n                allure.attach(f\"超过{timeout}秒仍有{len(final_result)}条记录未删除\", \"超时说明\",\n                              allure.attachment_type.TEXT)\n                allure.attach(\n                    self.serialize_data(final_result[:display_count]),\n                    f\"剩余记录（共{len(final_result)}条）\",\n                    allure.attachment_type.JSON\n                )\n    \n>           raise TimeoutError(f\"Failed: 等待记录删除超时（{timeout}秒）\")\nE           TimeoutError: Failed: 等待记录删除超时（5秒）\n\ncommons\\api_base.py:827: TimeoutError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <lingkuan_827.test_cloudTrader.test_delete.TestDelete_cloudTrader object at 0x0000023721FB5FD0>\nvar_manager = <lingkuan_827.commons.variable_manager.VariableManager object at 0x0000023721FC47C0>\ndb_transaction = <pymysql.connections.Connection object at 0x00000237220D26A0>\n\n    @allure.title(\"数据库校验-VPS数据-验证账号是否下架成功（后9个账号）\")\n    def test_dbdelete_belowVps(self, var_manager, db_transaction):\n        # 1. 获取账号总数和所有账号信息\n        cloudTrader_user_count = var_manager.get_variable(\"cloudTrader_user_count\", 0)\n        if cloudTrader_user_count < 10:  # 修改条件为至少10个账号\n            pytest.fail(f\"用户总数需至少为10，当前为{cloudTrader_user_count}，无法提取后9个数据进行校验\")\n    \n        # 2. 循环验证后9个账号的下架状态\n        for i in range(2, cloudTrader_user_count + 1):  # 循环索引2-10（共9次）\n            with allure.step(f\"验证第{i}个账号是否下架成功\"):\n                # 获取单个账号（与下架的ID对应）\n                account = var_manager.get_variable(f\"cloudTrader_user_accounts_{i}\")\n                if not account:\n                    pytest.fail(f\"未找到需要验证的账号：cloudTrader_user_accounts_{i}\")\n    \n                # 查询数据库（检查删除标记或记录是否存在）\n                sql = f\"SELECT * FROM follow_trader WHERE account = %s\"\n    \n                # 调用轮询等待方法，验证记录是否被删除\n                try:\n                    self.wait_for_database_deletion(\n                        db_transaction=db_transaction,\n                        sql=sql,\n                        params=(account,)\n                    )\n                    allure.attach(f\"账号 {account} 已成功下架vps\", \"验证结果\")\n                    print(f\"账号 {account} 已成功下架vps\")\n                except TimeoutError as e:\n                    allure.attach(f\"下架超时: {str(e)}\", \"验证结果\")\n>                   pytest.fail(f\"下架失败: {str(e)}\")\nE                   Failed: 下架失败: Failed: 等待记录删除超时（5秒）\n\ntest_cloudTrader\\test_delete.py:357: Failed"}, "steps": [{"name": "验证第2个账号是否下架成功", "status": "failed", "statusDetails": {"message": "Failed: 下架失败: Failed: 等待记录删除超时（5秒）\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_827\\test_cloudTrader\\test_delete.py\", line 357, in test_dbdelete_belowVps\n    pytest.fail(f\"下架失败: {str(e)}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "等待数据库记录删除（超时: 5秒）", "status": "broken", "statusDetails": {"message": "TimeoutError: Failed: 等待记录删除超时（5秒）\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_827\\commons\\api_base.py\", line 827, in wait_for_database_deletion\n    raise TimeoutError(f\"Failed: 等待记录删除超时（{timeout}秒）\")\n"}, "steps": [{"name": "执行数据库查询", "status": "passed", "attachments": [{"name": "执行SQL", "source": "ae21b8cc-fb52-415d-afe1-e7512252904a-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "c4c31f71-ec2f-437b-8566-8d49f770e827-attachment.txt", "type": "text/plain"}], "start": 1756361328026, "stop": 1756361328089}, {"name": "等待中（已等待0.1秒）", "status": "passed", "attachments": [{"name": "当前状态", "source": "4491f658-4a2d-40e7-a0e9-53331ed8cbf9-attachment.txt", "type": "text/plain"}, {"name": "超时倒计时", "source": "4506ae8a-7417-4f57-975d-da45f9e702f6-attachment.txt", "type": "text/plain"}], "start": 1756361328089, "stop": 1756361328090}, {"name": "执行数据库查询", "status": "passed", "attachments": [{"name": "执行SQL", "source": "08fc303b-6d08-46d9-849d-aa7fca84fab6-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "ecb9b704-1f39-414f-94a6-9f63639e6f39-attachment.txt", "type": "text/plain"}], "start": 1756361330137, "stop": 1756361330196}, {"name": "等待中（已等待2.2秒）", "status": "passed", "attachments": [{"name": "当前状态", "source": "8fed816a-8e86-4cf8-a2d2-29fd639e4c96-attachment.txt", "type": "text/plain"}, {"name": "超时倒计时", "source": "23f00026-55d1-4cd2-afc1-9746143b2557-attachment.txt", "type": "text/plain"}], "start": 1756361330196, "stop": 1756361330197}, {"name": "执行数据库查询", "status": "passed", "attachments": [{"name": "执行SQL", "source": "0f740c56-642c-4bbc-94e0-ca129f32b6eb-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "31f32018-df98-4cf2-9952-1831be595ac3-attachment.txt", "type": "text/plain"}], "start": 1756361332249, "stop": 1756361332297}, {"name": "等待中（已等待4.3秒）", "status": "passed", "attachments": [{"name": "当前状态", "source": "c8becb1e-f1e0-4a09-b26d-fb82eaa96111-attachment.txt", "type": "text/plain"}, {"name": "超时倒计时", "source": "22cffc22-070a-438e-ae8c-4a331371df05-attachment.txt", "type": "text/plain"}], "start": 1756361332297, "stop": 1756361332297}, {"name": "执行数据库查询", "status": "passed", "steps": [{"name": "数据库查询结果", "status": "passed", "attachments": [{"name": "查询结果（共1条，显示前50条）", "source": "80a8e7e4-e123-4402-8090-c18490a6fb68-attachment.json", "type": "application/json"}], "start": 1756361334391, "stop": 1756361334391}], "attachments": [{"name": "执行SQL", "source": "5044c65f-17fd-41a1-b1c1-9f9de625120d-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "a7d4629e-1623-49ae-b8ea-761213db6829-attachment.txt", "type": "text/plain"}], "start": 1756361334344, "stop": 1756361334391}, {"name": "等待删除超时", "status": "passed", "attachments": [{"name": "超时说明", "source": "72c50235-ca42-40fa-ba72-9ca5a5773f1a-attachment.txt", "type": "text/plain"}, {"name": "剩余记录（共1条）", "source": "d2077b8a-41c8-4400-9323-634eb3b1113d-attachment.json", "type": "application/json"}], "start": 1756361334391, "stop": 1756361334392}], "attachments": [{"name": "执行SQL", "source": "51b9f171-643f-4fed-ba0a-82ba9344d460-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "ab2b3bc6-da4f-40d6-ad0a-05ccf2147bb9-attachment.txt", "type": "text/plain"}], "start": 1756361327980, "stop": 1756361334392}], "attachments": [{"name": "验证结果", "source": "36a9b678-3a94-47b3-acd5-a3750f5bb84a-attachment.attach"}], "start": 1756361327980, "stop": 1756361334392}], "attachments": [{"name": "log", "source": "3ba54862-0924-45d0-84f4-a4bafb737dc9-attachment.txt", "type": "text/plain"}], "start": 1756361327980, "stop": 1756361334395, "uuid": "4b29f28a-202e-4ba5-bec6-2418f1b03446", "historyId": "ec8a5572e8eb986949bd183cf7a5f323", "testCaseId": "ec8a5572e8eb986949bd183cf7a5f323", "fullName": "test_cloudTrader.test_delete.TestDelete_cloudTrader#test_dbdelete_belowVps", "labels": [{"name": "feature", "value": "数据管理-删除云策略测试数据"}, {"name": "parentSuite", "value": "test_cloudTrader"}, {"name": "suite", "value": "test_delete"}, {"name": "subSuite", "value": "TestDelete_cloudTrader"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "31156-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cloudTrader.test_delete"}]}