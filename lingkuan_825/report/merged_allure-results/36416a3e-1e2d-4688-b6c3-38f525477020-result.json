{"name": "数据库校验-交易平仓-主指令及订单详情数据检查", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 详情总手数符合预期\n\n实际: 1.0\n操作: ==\n预期: 5", "trace": "self = <lingkuan_825.test_cloudTrader.test_cloud_masOrderSend.TestCloudMasOrdersend.TestCloudtradingOrders1 object at 0x0000012EF628C340>\nvar_manager = <lingkuan_825.commons.variable_manager.VariableManager object at 0x0000012EF755F730>\ndb_transaction = <pymysql.connections.Connection object at 0x0000012EF64B27F0>\n\n    @allure.title(\"数据库校验-交易平仓-主指令及订单详情数据检查\")\n    def test_dbquery_orderSendclose(self, var_manager, db_transaction):\n        with allure.step(\"1. 获取订单详情表账号数据\"):\n            cloudTrader_user_accounts_2 = var_manager.get_variable(\"cloudTrader_user_accounts_2\")\n            sql = f\"\"\"\n                    SELECT\n                        fod.size,\n                        fod.close_no,\n                        fod.magical,\n                        fod.open_price,\n                        fod.symbol,\n                        fod.order_no,\n                        foi.true_total_lots,\n                        foi.order_no,\n                        foi.operation_type,\n                        foi.create_time,\n                        foi.status\n                    FROM\n                        follow_order_detail fod\n                    INNER JOIN\n                        follow_order_instruct foi\n                    ON\n                        foi.order_no = fod.close_no COLLATE utf8mb4_0900_ai_ci\n                    WHERE foi.operation_type = %s\n                        AND fod.account = %s\n                        \"\"\"\n            params = (\n                '1',\n                cloudTrader_user_accounts_2,\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n            db_data = self.query_database_with_time_with_timezone(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"fod.close_time\"\n            )\n        with allure.step(\"2. 数据校验\"):\n            if not db_data:\n                pytest.fail(\"数据库查询结果为空，无法提取数据\")\n    \n            with allure.step(\"验证订单状态\"):\n                status = db_data[0][\"status\"]\n                self.verify_data(\n                    actual_value=status,\n                    expected_value=(0, 1),\n                    op=CompareOp.IN,\n                    message=\"订单状态应为0或1\",\n                    attachment_name=\"订单状态详情\"\n                )\n                logging.info(f\"订单状态验证通过: {status}\")\n    \n            with allure.step(\"验证详情总手数\"):\n                size = [record[\"size\"] for record in db_data]\n                total = sum(size)\n>               self.verify_data(\n                    actual_value=float(total),\n                    expected_value=5,\n                    op=CompareOp.EQ,\n                    message=\"详情总手数符合预期\",\n                    attachment_name=\"详情总手数\"\n                )\n\ntest_cloudTrader\\test_cloud_masOrderSend.py:319: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_825.test_cloudTrader.test_cloud_masOrderSend.TestCloudMasOrdersend.TestCloudtradingOrders1 object at 0x0000012EF628C340>\nactual_value = 1.0, expected_value = 5, op = <CompareOp.EQ: '=='>\nmessage = '详情总手数符合预期', attachment_name = '详情总手数', attachment_type = 'text/plain'\nuse_isclose = True, rel_tol = 1e-09, abs_tol = 0.0\n\n    def verify_data(\n            self,\n            actual_value,\n            expected_value,\n            op: CompareOp,\n            message: str,\n            attachment_name: str,\n            attachment_type=\"text/plain\",\n            use_isclose=True,  # 新增参数：是否启用math.isclose容错（默认启用）\n            rel_tol=1e-9,  # 相对容差（仅当use_isclose=True时生效）\n            abs_tol=0.0  # 绝对容差（仅当use_isclose=True时生效）\n    ):\n        \"\"\"\n        通用数据校验函数，支持浮点容错比较\n        :param actual_value: 实际值\n        :param expected_value: 预期值\n        :param op: 比较操作，CompareOp 枚举\n        :param message: 校验失败时的提示信息\n        :param attachment_name: Allure 附件名称\n        :param attachment_type: Allure 附件类型，默认文本\n        :param use_isclose: 是否使用math.isclose进行浮点容错比较\n        :param rel_tol: 相对容差（默认1e-9）\n        :param abs_tol: 绝对容差（默认0.0）\n        其他参数同前\n        \"\"\"\n        with allure.step(f\"校验: {message}\"):\n            result = False\n            try:\n                # 处理浮点容错比较（仅对EQ/NE操作生效）\n                if use_isclose and op in (CompareOp.EQ, CompareOp.NE):\n                    if not (isinstance(actual_value, (int, float)) and\n                            isinstance(expected_value, (int, float))):\n                        # 非数字类型自动禁用isclose，避免报错\n                        use_isclose = False\n                        logging.warning(f\"自动禁用isclose：非数字类型比较（实际值类型：{type(actual_value)}）\")\n    \n                    # 计算isclose结果\n                    is_close = math.isclose(\n                        actual_value,\n                        expected_value,\n                        rel_tol=rel_tol,\n                        abs_tol=abs_tol\n                    )\n                    # 根据操作类型取反\n                    result = is_close if op == CompareOp.EQ else not is_close\n    \n                # 普通比较逻辑\n                else:\n                    if op == CompareOp.EQ:\n                        result = actual_value == expected_value\n                    elif op == CompareOp.NE:\n                        result = actual_value != expected_value\n                    elif op == CompareOp.GT:\n                        result = actual_value > expected_value\n                    elif op == CompareOp.LT:\n                        result = actual_value < expected_value\n                    elif op == CompareOp.GE:\n                        result = actual_value >= expected_value\n                    elif op == CompareOp.LE:\n                        result = actual_value <= expected_value\n                    elif op == CompareOp.IN:\n                        result = actual_value in expected_value\n                    elif op == CompareOp.NOT_IN:\n                        result = actual_value not in expected_value\n    \n            except TypeError as e:\n                pytest.fail(\n                    f\"校验类型错误: {str(e)}\\n实际值类型: {type(actual_value)}, 预期值类型: {type(expected_value)}\")\n    \n            # 生成详细提示信息（包含容差参数）\n            detail_msg = (\n                f\"\\n实际: {actual_value}\\n\"\n                f\"操作: {op.value}\\n\"\n                f\"预期: {expected_value}\\n\"\n            )\n    \n            # 添加allure.attach，将信息写入报告\n            allure.attach(\n                detail_msg,  # 附件内容\n                name=attachment_name,  # 附件名称（来自参数）\n                attachment_type=attachment_type  # 附件类型\n            )\n    \n            if not result:\n>               pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\nE               Failed: 校验失败: 详情总手数符合预期\nE               \nE               实际: 1.0\nE               操作: ==\nE               预期: 5\n\ncommons\\api_base.py:1305: Failed"}, "description": "\n    ### 测试说明\n    - 前置条件：有云策略和云跟单\n      1. 进行开仓，手数范围0.1-1，总手数1\n      2. 校验账号的数据是否正确\n      3. 进行平仓\n      4. 校验账号的数据是否正确\n    - 预期结果：账号的数据正确\n    ", "steps": [{"name": "1. 获取订单详情表账号数据", "status": "passed", "steps": [{"name": "轮询等待数据稳定（时区+05:00，超时30秒）", "status": "passed", "steps": [{"name": "带时区转换查询（目标时区: +05:00）", "status": "passed", "steps": [{"name": "执行数据库查询", "status": "passed", "attachments": [{"name": "执行SQL", "source": "bab25ec7-89c3-4bad-b785-42b6b9a283fc-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "e4dfbf37-282e-45ed-9a8a-86ebe93ba30e-attachment.txt", "type": "text/plain"}], "start": 1756431585803, "stop": 1756431586887}], "attachments": [{"name": "时区处理", "source": "9c6464de-3e31-4e6b-a681-0cc0a2bd3949-attachment.txt", "type": "text/plain"}], "start": 1756431585802, "stop": 1756431586887}, {"name": "轮询中（已等待1.1秒）", "status": "passed", "attachments": [{"name": "当前状态", "source": "b3e4b649-5da3-437f-844a-8d859560772d-attachment.txt", "type": "text/plain"}, {"name": "超时倒计时", "source": "e9be4a82-4756-42e8-9438-fa7deb95fe86-attachment.txt", "type": "text/plain"}], "start": 1756431586887, "stop": 1756431586888}, {"name": "判断结果稳定性", "status": "passed", "attachments": [{"name": "判断结果", "source": "9fd66c2c-276a-4669-a582-47f30df8bffa-attachment.txt", "type": "text/plain"}], "start": 1756431586888, "stop": 1756431586889}, {"name": "数据发生变化", "status": "passed", "attachments": [{"name": "状态说明", "source": "10c85119-9952-4eb1-bfef-4b4b5a0c7457-attachment.txt", "type": "text/plain"}], "start": 1756431586889, "stop": 1756431586889}, {"name": "带时区转换查询（目标时区: +05:00）", "status": "passed", "steps": [{"name": "执行数据库查询", "status": "passed", "attachments": [{"name": "执行SQL", "source": "2ac5133b-8d47-43c1-bb4d-08f3f1ce8d86-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "27648295-5933-4418-938b-2634adaf3c1a-attachment.txt", "type": "text/plain"}], "start": 1756431588951, "stop": 1756431590041}], "attachments": [{"name": "时区处理", "source": "91a2cb30-c9e2-4f1c-a1ff-29051640921a-attachment.txt", "type": "text/plain"}], "start": 1756431588951, "stop": 1756431590041}, {"name": "轮询中（已等待4.3秒）", "status": "passed", "attachments": [{"name": "当前状态", "source": "aeb635a4-43e6-4ad9-b364-365101a2974b-attachment.txt", "type": "text/plain"}, {"name": "超时倒计时", "source": "9776de46-de2e-418a-85d1-73e33f95398c-attachment.txt", "type": "text/plain"}], "start": 1756431590041, "stop": 1756431590043}, {"name": "判断结果稳定性", "status": "passed", "attachments": [{"name": "判断结果", "source": "4a37511c-508c-46c8-a2b3-ed1df26f35f4-attachment.txt", "type": "text/plain"}], "start": 1756431590043, "stop": 1756431590043}, {"name": "数据首次稳定", "status": "passed", "attachments": [{"name": "状态说明", "source": "9ba53383-bb35-4fe1-ba9b-dbd8fba1e829-attachment.txt", "type": "text/plain"}], "start": 1756431590043, "stop": 1756431590043}, {"name": "带时区转换查询（目标时区: +05:00）", "status": "passed", "steps": [{"name": "执行数据库查询", "status": "passed", "attachments": [{"name": "执行SQL", "source": "281ce66e-cec5-4443-aeca-f45c51df7451-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "a9184f2f-16c4-4599-80e8-387bc335ec83-attachment.txt", "type": "text/plain"}], "start": 1756431592098, "stop": 1756431593143}], "attachments": [{"name": "时区处理", "source": "28cf70e5-ab86-4eb4-bde5-c55a0189124d-attachment.txt", "type": "text/plain"}], "start": 1756431592098, "stop": 1756431593143}, {"name": "轮询中（已等待7.4秒）", "status": "passed", "attachments": [{"name": "当前状态", "source": "51542a89-994a-4d09-9e95-017812de0466-attachment.txt", "type": "text/plain"}, {"name": "超时倒计时", "source": "b0623750-5c03-4a8b-8705-1a8f89664dc9-attachment.txt", "type": "text/plain"}], "start": 1756431593143, "stop": 1756431593144}, {"name": "判断结果稳定性", "status": "passed", "attachments": [{"name": "判断结果", "source": "59da313e-f743-4e53-8faf-1a96e24b6c99-attachment.txt", "type": "text/plain"}], "start": 1756431593144, "stop": 1756431593145}, {"name": "数据稳定达标", "status": "passed", "attachments": [{"name": "结果说明", "source": "862c7c3a-e703-48a2-8b2b-75605655f355-attachment.txt", "type": "text/plain"}], "start": 1756431593145, "stop": 1756431593146}, {"name": "带时区查询最终结果", "status": "passed", "attachments": [{"name": "结果预览", "source": "40c16baa-973d-4367-8c8e-573983d96f42-attachment.json", "type": "application/json"}], "start": 1756431593147, "stop": 1756431593148}], "attachments": [{"name": "执行SQL", "source": "aceb34f7-14b7-4a26-b9a3-6b4dcc7187af-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "5fc2036f-7df8-41dd-944f-808d377cc6f3-attachment.txt", "type": "text/plain"}, {"name": "时区偏移量（小时）", "source": "dec37da1-fcb5-4693-ac47-a20b561e48ca-attachment.txt", "type": "text/plain"}], "start": 1756431585752, "stop": 1756431593148}], "start": 1756431585752, "stop": 1756431593148}, {"name": "2. 数据校验", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 详情总手数符合预期\n\n实际: 1.0\n操作: ==\n预期: 5\n\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_825\\test_cloudTrader\\test_cloud_masOrderSend.py\", line 319, in test_dbquery_orderSendclose\n    self.verify_data(\n  File \"D:\\pycharm_test\\lingkuan_825\\commons\\api_base.py\", line 1305, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "验证订单状态", "status": "passed", "steps": [{"name": "校验: 订单状态应为0或1", "status": "passed", "attachments": [{"name": "订单状态详情", "source": "e8a6528f-4c55-480d-b8c1-efa0c703cc9a-attachment.attach", "type": "text/plain"}], "start": 1756431593148, "stop": 1756431593149}], "start": 1756431593148, "stop": 1756431593149}, {"name": "验证详情总手数", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 详情总手数符合预期\n\n实际: 1.0\n操作: ==\n预期: 5\n\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_825\\test_cloudTrader\\test_cloud_masOrderSend.py\", line 319, in test_dbquery_orderSendclose\n    self.verify_data(\n  File \"D:\\pycharm_test\\lingkuan_825\\commons\\api_base.py\", line 1305, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "校验: 详情总手数符合预期", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 详情总手数符合预期\n\n实际: 1.0\n操作: ==\n预期: 5\n\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_825\\commons\\api_base.py\", line 1305, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "attachments": [{"name": "详情总手数", "source": "55fd2cef-6bff-4418-b794-91a4d4fa7b06-attachment.attach", "type": "text/plain"}], "start": 1756431593149, "stop": 1756431593151}], "start": 1756431593149, "stop": 1756431593151}], "start": 1756431593148, "stop": 1756431593151}], "attachments": [{"name": "log", "source": "8126f24f-5c09-44e1-ab86-70608de33b8b-attachment.txt", "type": "text/plain"}], "start": 1756431585752, "stop": 1756431593152, "uuid": "6c5151aa-67d9-49a6-8614-5e750438c2b6", "historyId": "1d9f7edc84c34c666dcbcee6d871243a", "testCaseId": "1d9f7edc84c34c666dcbcee6d871243a", "fullName": "test_cloudTrader.test_cloud_masOrderSend.TestCloudtradingOrders1#test_dbquery_orderSendclose", "labels": [{"name": "feature", "value": "云策略-策略账号交易下单-开仓的场景校验"}, {"name": "story", "value": "场景1：分配下单-手数0.1-1，总手数1"}, {"name": "parentSuite", "value": "test_cloudTrader"}, {"name": "suite", "value": "test_cloud_masOrderSend"}, {"name": "subSuite", "value": "TestCloudMasOrdersend"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "21760-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cloudTrader.test_cloud_masOrderSend"}]}