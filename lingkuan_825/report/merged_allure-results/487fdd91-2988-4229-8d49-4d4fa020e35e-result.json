{"name": "数据库校验-交易平仓-主指令及订单详情数据检查", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 详情总手数符合预期\n\n实际: 1.0\n操作: ==\n预期: 5", "trace": "self = <lingkuan_825.test_cloudTrader.test_cloud_masOrderSend.TestCloudMasOrdersend.TestCloudtradingOrders1 object at 0x0000012EF628C340>\nvar_manager = <lingkuan_825.commons.variable_manager.VariableManager object at 0x0000012EF755F730>\ndb_transaction = <pymysql.connections.Connection object at 0x0000012EF7747E20>\n\n    @allure.title(\"数据库校验-交易平仓-主指令及订单详情数据检查\")\n    def test_dbquery_orderSendclose(self, var_manager, db_transaction):\n        with allure.step(\"1. 获取订单详情表账号数据\"):\n            cloudTrader_user_accounts_2 = var_manager.get_variable(\"cloudTrader_user_accounts_2\")\n            sql = f\"\"\"\n                    SELECT\n                        fod.size,\n                        fod.close_no,\n                        fod.magical,\n                        fod.open_price,\n                        fod.symbol,\n                        fod.order_no,\n                        foi.true_total_lots,\n                        foi.order_no,\n                        foi.operation_type,\n                        foi.create_time,\n                        foi.status\n                    FROM\n                        follow_order_detail fod\n                    INNER JOIN\n                        follow_order_instruct foi\n                    ON\n                        foi.order_no = fod.close_no COLLATE utf8mb4_0900_ai_ci\n                    WHERE foi.operation_type = %s\n                        AND fod.account = %s\n                        \"\"\"\n            params = (\n                '1',\n                cloudTrader_user_accounts_2,\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n            db_data = self.query_database_with_time_with_timezone(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"fod.close_time\"\n            )\n        with allure.step(\"2. 数据校验\"):\n            if not db_data:\n                pytest.fail(\"数据库查询结果为空，无法提取数据\")\n    \n            with allure.step(\"验证订单状态\"):\n                status = db_data[0][\"status\"]\n                self.verify_data(\n                    actual_value=status,\n                    expected_value=(0, 1),\n                    op=CompareOp.IN,\n                    message=\"订单状态应为0或1\",\n                    attachment_name=\"订单状态详情\"\n                )\n                logging.info(f\"订单状态验证通过: {status}\")\n    \n            with allure.step(\"验证详情总手数\"):\n                size = [record[\"size\"] for record in db_data]\n                total = sum(size)\n>               self.verify_data(\n                    actual_value=float(total),\n                    expected_value=5,\n                    op=CompareOp.EQ,\n                    message=\"详情总手数符合预期\",\n                    attachment_name=\"详情总手数\"\n                )\n\ntest_cloudTrader\\test_cloud_masOrderSend.py:319: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_825.test_cloudTrader.test_cloud_masOrderSend.TestCloudMasOrdersend.TestCloudtradingOrders1 object at 0x0000012EF628C340>\nactual_value = 1.0, expected_value = 5, op = <CompareOp.EQ: '=='>\nmessage = '详情总手数符合预期', attachment_name = '详情总手数', attachment_type = 'text/plain'\nuse_isclose = True, rel_tol = 1e-09, abs_tol = 0.0\n\n    def verify_data(\n            self,\n            actual_value,\n            expected_value,\n            op: CompareOp,\n            message: str,\n            attachment_name: str,\n            attachment_type=\"text/plain\",\n            use_isclose=True,  # 新增参数：是否启用math.isclose容错（默认启用）\n            rel_tol=1e-9,  # 相对容差（仅当use_isclose=True时生效）\n            abs_tol=0.0  # 绝对容差（仅当use_isclose=True时生效）\n    ):\n        \"\"\"\n        通用数据校验函数，支持浮点容错比较\n        :param actual_value: 实际值\n        :param expected_value: 预期值\n        :param op: 比较操作，CompareOp 枚举\n        :param message: 校验失败时的提示信息\n        :param attachment_name: Allure 附件名称\n        :param attachment_type: Allure 附件类型，默认文本\n        :param use_isclose: 是否使用math.isclose进行浮点容错比较\n        :param rel_tol: 相对容差（默认1e-9）\n        :param abs_tol: 绝对容差（默认0.0）\n        其他参数同前\n        \"\"\"\n        with allure.step(f\"校验: {message}\"):\n            result = False\n            try:\n                # 处理浮点容错比较（仅对EQ/NE操作生效）\n                if use_isclose and op in (CompareOp.EQ, CompareOp.NE):\n                    if not (isinstance(actual_value, (int, float)) and\n                            isinstance(expected_value, (int, float))):\n                        # 非数字类型自动禁用isclose，避免报错\n                        use_isclose = False\n                        logging.warning(f\"自动禁用isclose：非数字类型比较（实际值类型：{type(actual_value)}）\")\n    \n                    # 计算isclose结果\n                    is_close = math.isclose(\n                        actual_value,\n                        expected_value,\n                        rel_tol=rel_tol,\n                        abs_tol=abs_tol\n                    )\n                    # 根据操作类型取反\n                    result = is_close if op == CompareOp.EQ else not is_close\n    \n                # 普通比较逻辑\n                else:\n                    if op == CompareOp.EQ:\n                        result = actual_value == expected_value\n                    elif op == CompareOp.NE:\n                        result = actual_value != expected_value\n                    elif op == CompareOp.GT:\n                        result = actual_value > expected_value\n                    elif op == CompareOp.LT:\n                        result = actual_value < expected_value\n                    elif op == CompareOp.GE:\n                        result = actual_value >= expected_value\n                    elif op == CompareOp.LE:\n                        result = actual_value <= expected_value\n                    elif op == CompareOp.IN:\n                        result = actual_value in expected_value\n                    elif op == CompareOp.NOT_IN:\n                        result = actual_value not in expected_value\n    \n            except TypeError as e:\n                pytest.fail(\n                    f\"校验类型错误: {str(e)}\\n实际值类型: {type(actual_value)}, 预期值类型: {type(expected_value)}\")\n    \n            # 生成详细提示信息（包含容差参数）\n            detail_msg = (\n                f\"\\n实际: {actual_value}\\n\"\n                f\"操作: {op.value}\\n\"\n                f\"预期: {expected_value}\\n\"\n            )\n    \n            # 添加allure.attach，将信息写入报告\n            allure.attach(\n                detail_msg,  # 附件内容\n                name=attachment_name,  # 附件名称（来自参数）\n                attachment_type=attachment_type  # 附件类型\n            )\n    \n            if not result:\n>               pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\nE               Failed: 校验失败: 详情总手数符合预期\nE               \nE               实际: 1.0\nE               操作: ==\nE               预期: 5\n\ncommons\\api_base.py:1305: Failed"}, "description": "\n    ### 测试说明\n    - 前置条件：有云策略和云跟单\n      1. 进行开仓，手数范围0.1-1，总手数1\n      2. 校验账号的数据是否正确\n      3. 进行平仓\n      4. 校验账号的数据是否正确\n    - 预期结果：账号的数据正确\n    ", "steps": [{"name": "1. 获取订单详情表账号数据", "status": "passed", "steps": [{"name": "轮询等待数据稳定（时区+05:00，超时30秒）", "status": "passed", "steps": [{"name": "带时区转换查询（目标时区: +05:00）", "status": "passed", "steps": [{"name": "执行数据库查询", "status": "passed", "attachments": [{"name": "执行SQL", "source": "c4435c1b-36ec-4c28-af5b-0737684c1704-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "9a930def-8744-4d63-b590-e4430efe65d6-attachment.txt", "type": "text/plain"}], "start": 1756431598698, "stop": 1756431599760}], "attachments": [{"name": "时区处理", "source": "41a0c56f-b936-4369-b3ce-1b3301278a9f-attachment.txt", "type": "text/plain"}], "start": 1756431598697, "stop": 1756431599760}, {"name": "轮询中（已等待1.1秒）", "status": "passed", "attachments": [{"name": "当前状态", "source": "553df9d5-fbae-478a-9db6-6b6c468c7462-attachment.txt", "type": "text/plain"}, {"name": "超时倒计时", "source": "7b005544-3800-4f13-8715-2f006414a130-attachment.txt", "type": "text/plain"}], "start": 1756431599760, "stop": 1756431599761}, {"name": "判断结果稳定性", "status": "passed", "attachments": [{"name": "判断结果", "source": "7f506634-5641-4fc6-bf5e-4becdeba9bbb-attachment.txt", "type": "text/plain"}], "start": 1756431599761, "stop": 1756431599761}, {"name": "数据发生变化", "status": "passed", "attachments": [{"name": "状态说明", "source": "c368957e-89d7-4da9-aa04-58447104c179-attachment.txt", "type": "text/plain"}], "start": 1756431599761, "stop": 1756431599761}, {"name": "带时区转换查询（目标时区: +05:00）", "status": "passed", "steps": [{"name": "执行数据库查询", "status": "passed", "attachments": [{"name": "执行SQL", "source": "6790be1a-1b2a-49df-b2ca-084b8a513210-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "2190c216-fe38-4638-b9c1-8575fa6f4648-attachment.txt", "type": "text/plain"}], "start": 1756431601816, "stop": 1756431602883}], "attachments": [{"name": "时区处理", "source": "dd8e0fd5-ac21-4484-8629-7d82b23cc8d8-attachment.txt", "type": "text/plain"}], "start": 1756431601816, "stop": 1756431602883}, {"name": "轮询中（已等待4.2秒）", "status": "passed", "attachments": [{"name": "当前状态", "source": "7d3e458f-c5dc-44f7-b4fc-834877a72f9c-attachment.txt", "type": "text/plain"}, {"name": "超时倒计时", "source": "3057f037-6173-4b64-aeef-0e79ce161e6b-attachment.txt", "type": "text/plain"}], "start": 1756431602883, "stop": 1756431602884}, {"name": "判断结果稳定性", "status": "passed", "attachments": [{"name": "判断结果", "source": "971d9d7c-9f1e-44e2-8fdc-a74e7c422c10-attachment.txt", "type": "text/plain"}], "start": 1756431602884, "stop": 1756431602884}, {"name": "数据首次稳定", "status": "passed", "attachments": [{"name": "状态说明", "source": "7f4bcc89-ace2-475a-83be-2b6fe81c07a0-attachment.txt", "type": "text/plain"}], "start": 1756431602884, "stop": 1756431602885}, {"name": "带时区转换查询（目标时区: +05:00）", "status": "passed", "steps": [{"name": "执行数据库查询", "status": "passed", "attachments": [{"name": "执行SQL", "source": "dbbae034-e418-4935-bff7-76e4feb81f93-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "52759fb8-8e1f-463a-b3c2-f8c43a1aa424-attachment.txt", "type": "text/plain"}], "start": 1756431604941, "stop": 1756431606000}], "attachments": [{"name": "时区处理", "source": "0aa41624-dc99-46b0-9a3c-bb706a296b3c-attachment.txt", "type": "text/plain"}], "start": 1756431604941, "stop": 1756431606000}, {"name": "轮询中（已等待7.4秒）", "status": "passed", "attachments": [{"name": "当前状态", "source": "ff3d2b67-10db-426e-9dda-d5a23c31fe33-attachment.txt", "type": "text/plain"}, {"name": "超时倒计时", "source": "f510f8ff-89b6-44dc-bee2-40ae5b9dae30-attachment.txt", "type": "text/plain"}], "start": 1756431606000, "stop": 1756431606001}, {"name": "判断结果稳定性", "status": "passed", "attachments": [{"name": "判断结果", "source": "bc2e298b-6178-4c6c-8dc7-e0b74248f9b0-attachment.txt", "type": "text/plain"}], "start": 1756431606001, "stop": 1756431606001}, {"name": "数据稳定达标", "status": "passed", "attachments": [{"name": "结果说明", "source": "aaa23188-ed30-4765-8dfb-3196db881d90-attachment.txt", "type": "text/plain"}], "start": 1756431606001, "stop": 1756431606002}, {"name": "带时区查询最终结果", "status": "passed", "attachments": [{"name": "结果预览", "source": "9d9358c5-0acc-43bd-af76-8b6a59d0275c-attachment.json", "type": "application/json"}], "start": 1756431606002, "stop": 1756431606002}], "attachments": [{"name": "执行SQL", "source": "81af469d-d504-4d04-a13c-682c0aac330e-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "6cecfb64-9987-4afa-933e-17d02af988d3-attachment.txt", "type": "text/plain"}, {"name": "时区偏移量（小时）", "source": "bcdd07f4-24ce-4013-a9d1-215bf9b0b735-attachment.txt", "type": "text/plain"}], "start": 1756431598649, "stop": 1756431606002}], "start": 1756431598649, "stop": 1756431606002}, {"name": "2. 数据校验", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 详情总手数符合预期\n\n实际: 1.0\n操作: ==\n预期: 5\n\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_825\\test_cloudTrader\\test_cloud_masOrderSend.py\", line 319, in test_dbquery_orderSendclose\n    self.verify_data(\n  File \"D:\\pycharm_test\\lingkuan_825\\commons\\api_base.py\", line 1305, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "验证订单状态", "status": "passed", "steps": [{"name": "校验: 订单状态应为0或1", "status": "passed", "attachments": [{"name": "订单状态详情", "source": "bc7856fa-fd10-4288-aae7-0d57b2241c71-attachment.attach", "type": "text/plain"}], "start": 1756431606002, "stop": 1756431606002}], "start": 1756431606002, "stop": 1756431606003}, {"name": "验证详情总手数", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 详情总手数符合预期\n\n实际: 1.0\n操作: ==\n预期: 5\n\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_825\\test_cloudTrader\\test_cloud_masOrderSend.py\", line 319, in test_dbquery_orderSendclose\n    self.verify_data(\n  File \"D:\\pycharm_test\\lingkuan_825\\commons\\api_base.py\", line 1305, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "校验: 详情总手数符合预期", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 详情总手数符合预期\n\n实际: 1.0\n操作: ==\n预期: 5\n\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_825\\commons\\api_base.py\", line 1305, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "attachments": [{"name": "详情总手数", "source": "d6a906d8-8cea-4191-b7b6-72188ff4dda8-attachment.attach", "type": "text/plain"}], "start": 1756431606003, "stop": 1756431606003}], "start": 1756431606003, "stop": 1756431606003}], "start": 1756431606002, "stop": 1756431606003}], "attachments": [{"name": "log", "source": "35623279-9600-4cb5-9994-9e794013e61d-attachment.txt", "type": "text/plain"}], "start": 1756431598649, "stop": 1756431606003, "uuid": "e384169b-abed-45d9-bc1d-c8a350d1a8ee", "historyId": "1d9f7edc84c34c666dcbcee6d871243a", "testCaseId": "1d9f7edc84c34c666dcbcee6d871243a", "fullName": "test_cloudTrader.test_cloud_masOrderSend.TestCloudtradingOrders1#test_dbquery_orderSendclose", "labels": [{"name": "feature", "value": "云策略-策略账号交易下单-开仓的场景校验"}, {"name": "story", "value": "场景1：分配下单-手数0.1-1，总手数1"}, {"name": "parentSuite", "value": "test_cloudTrader"}, {"name": "suite", "value": "test_cloud_masOrderSend"}, {"name": "subSuite", "value": "TestCloudMasOrdersend"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "21760-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cloudTrader.test_cloud_masOrderSend"}]}