{"name": "数据库校验-交易平仓-主指令及订单详情数据检查", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 详情总手数符合预期\n\n实际: 1.0\n操作: ==\n预期: 5", "trace": "self = <lingkuan_825.test_cloudTrader.test_cloud_masOrderSend.TestCloudMasOrdersend.TestCloudtradingOrders2 object at 0x0000012EF626B5E0>\nvar_manager = <lingkuan_825.commons.variable_manager.VariableManager object at 0x0000012EF755F730>\ndb_transaction = <pymysql.connections.Connection object at 0x0000012EF74BFBE0>\n\n    @allure.title(\"数据库校验-交易平仓-主指令及订单详情数据检查\")\n    def test_dbquery_orderSendclose(self, var_manager, db_transaction):\n        with allure.step(\"1. 获取订单详情表账号数据\"):\n            cloudTrader_user_accounts_2 = var_manager.get_variable(\"cloudTrader_user_accounts_2\")\n            sql = f\"\"\"\n                    SELECT\n                        fod.size,\n                        fod.close_no,\n                        fod.magical,\n                        fod.open_price,\n                        fod.symbol,\n                        fod.order_no,\n                        foi.true_total_lots,\n                        foi.order_no,\n                        foi.operation_type,\n                        foi.create_time,\n                        foi.status\n                    FROM\n                        follow_order_detail fod\n                    INNER JOIN\n                        follow_order_instruct foi\n                    ON\n                        foi.order_no = fod.close_no COLLATE utf8mb4_0900_ai_ci\n                    WHERE foi.operation_type = %s\n                        AND fod.account = %s\n                        \"\"\"\n            params = (\n                '1',\n                cloudTrader_user_accounts_2,\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n            db_data = self.query_database_with_time_with_timezone(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"fod.close_time\"\n            )\n        with allure.step(\"2. 数据校验\"):\n            if not db_data:\n                pytest.fail(\"数据库查询结果为空，无法提取数据\")\n    \n            with allure.step(\"验证订单状态\"):\n                status = db_data[0][\"status\"]\n                self.verify_data(\n                    actual_value=status,\n                    expected_value=(0, 1),\n                    op=CompareOp.IN,\n                    message=\"订单状态应为0或1\",\n                    attachment_name=\"订单状态详情\"\n                )\n                logging.info(f\"订单状态验证通过: {status}\")\n    \n            with allure.step(\"验证详情总手数\"):\n                size = [record[\"size\"] for record in db_data]\n                total = sum(size)\n>               self.verify_data(\n                    actual_value=float(total),\n                    expected_value=5,\n                    op=CompareOp.EQ,\n                    message=\"详情总手数符合预期\",\n                    attachment_name=\"详情总手数\"\n                )\n\ntest_cloudTrader\\test_cloud_masOrderSend.py:730: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_825.test_cloudTrader.test_cloud_masOrderSend.TestCloudMasOrdersend.TestCloudtradingOrders2 object at 0x0000012EF626B5E0>\nactual_value = 1.0, expected_value = 5, op = <CompareOp.EQ: '=='>\nmessage = '详情总手数符合预期', attachment_name = '详情总手数', attachment_type = 'text/plain'\nuse_isclose = True, rel_tol = 1e-09, abs_tol = 0.0\n\n    def verify_data(\n            self,\n            actual_value,\n            expected_value,\n            op: CompareOp,\n            message: str,\n            attachment_name: str,\n            attachment_type=\"text/plain\",\n            use_isclose=True,  # 新增参数：是否启用math.isclose容错（默认启用）\n            rel_tol=1e-9,  # 相对容差（仅当use_isclose=True时生效）\n            abs_tol=0.0  # 绝对容差（仅当use_isclose=True时生效）\n    ):\n        \"\"\"\n        通用数据校验函数，支持浮点容错比较\n        :param actual_value: 实际值\n        :param expected_value: 预期值\n        :param op: 比较操作，CompareOp 枚举\n        :param message: 校验失败时的提示信息\n        :param attachment_name: Allure 附件名称\n        :param attachment_type: Allure 附件类型，默认文本\n        :param use_isclose: 是否使用math.isclose进行浮点容错比较\n        :param rel_tol: 相对容差（默认1e-9）\n        :param abs_tol: 绝对容差（默认0.0）\n        其他参数同前\n        \"\"\"\n        with allure.step(f\"校验: {message}\"):\n            result = False\n            try:\n                # 处理浮点容错比较（仅对EQ/NE操作生效）\n                if use_isclose and op in (CompareOp.EQ, CompareOp.NE):\n                    if not (isinstance(actual_value, (int, float)) and\n                            isinstance(expected_value, (int, float))):\n                        # 非数字类型自动禁用isclose，避免报错\n                        use_isclose = False\n                        logging.warning(f\"自动禁用isclose：非数字类型比较（实际值类型：{type(actual_value)}）\")\n    \n                    # 计算isclose结果\n                    is_close = math.isclose(\n                        actual_value,\n                        expected_value,\n                        rel_tol=rel_tol,\n                        abs_tol=abs_tol\n                    )\n                    # 根据操作类型取反\n                    result = is_close if op == CompareOp.EQ else not is_close\n    \n                # 普通比较逻辑\n                else:\n                    if op == CompareOp.EQ:\n                        result = actual_value == expected_value\n                    elif op == CompareOp.NE:\n                        result = actual_value != expected_value\n                    elif op == CompareOp.GT:\n                        result = actual_value > expected_value\n                    elif op == CompareOp.LT:\n                        result = actual_value < expected_value\n                    elif op == CompareOp.GE:\n                        result = actual_value >= expected_value\n                    elif op == CompareOp.LE:\n                        result = actual_value <= expected_value\n                    elif op == CompareOp.IN:\n                        result = actual_value in expected_value\n                    elif op == CompareOp.NOT_IN:\n                        result = actual_value not in expected_value\n    \n            except TypeError as e:\n                pytest.fail(\n                    f\"校验类型错误: {str(e)}\\n实际值类型: {type(actual_value)}, 预期值类型: {type(expected_value)}\")\n    \n            # 生成详细提示信息（包含容差参数）\n            detail_msg = (\n                f\"\\n实际: {actual_value}\\n\"\n                f\"操作: {op.value}\\n\"\n                f\"预期: {expected_value}\\n\"\n            )\n    \n            # 添加allure.attach，将信息写入报告\n            allure.attach(\n                detail_msg,  # 附件内容\n                name=attachment_name,  # 附件名称（来自参数）\n                attachment_type=attachment_type  # 附件类型\n            )\n    \n            if not result:\n>               pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\nE               Failed: 校验失败: 详情总手数符合预期\nE               \nE               实际: 1.0\nE               操作: ==\nE               预期: 5\n\ncommons\\api_base.py:1305: Failed"}, "description": "\n    ### 测试说明\n    - 前置条件：有云策略和云跟单\n      1. 进行开仓，手数范围0.1-1，总订单3，总手数1\n      2. 校验账号的数据是否正确\n      3. 进行平仓\n      4. 校验账号的数据是否正确\n    - 预期结果：账号的数据正确\n    ", "steps": [{"name": "1. 获取订单详情表账号数据", "status": "passed", "steps": [{"name": "轮询等待数据稳定（时区+05:00，超时30秒）", "status": "passed", "steps": [{"name": "带时区转换查询（目标时区: +05:00）", "status": "passed", "steps": [{"name": "执行数据库查询", "status": "passed", "attachments": [{"name": "执行SQL", "source": "c73d9d46-fc1d-4bf6-b21e-27be15d28dcc-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "83b7cab1-39df-4d06-864c-b9d4a940195b-attachment.txt", "type": "text/plain"}], "start": 1756431757536, "stop": 1756431758592}], "attachments": [{"name": "时区处理", "source": "c2d324b2-02a6-438f-8d46-f54d70f501d7-attachment.txt", "type": "text/plain"}], "start": 1756431757534, "stop": 1756431758592}, {"name": "轮询中（已等待1.1秒）", "status": "passed", "attachments": [{"name": "当前状态", "source": "f727777b-68b2-4d3d-a417-2f4a30fde125-attachment.txt", "type": "text/plain"}, {"name": "超时倒计时", "source": "7649ab06-a848-4952-b42e-fd2675b2a8aa-attachment.txt", "type": "text/plain"}], "start": 1756431758592, "stop": 1756431758593}, {"name": "判断结果稳定性", "status": "passed", "attachments": [{"name": "判断结果", "source": "36dafa0c-1ef9-4e82-ba8f-5145b918d130-attachment.txt", "type": "text/plain"}], "start": 1756431758593, "stop": 1756431758593}, {"name": "数据发生变化", "status": "passed", "attachments": [{"name": "状态说明", "source": "e6f9bba9-9c13-4613-bf66-33793d08a4ab-attachment.txt", "type": "text/plain"}], "start": 1756431758593, "stop": 1756431758594}, {"name": "带时区转换查询（目标时区: +05:00）", "status": "passed", "steps": [{"name": "执行数据库查询", "status": "passed", "attachments": [{"name": "执行SQL", "source": "9401f33b-14ef-46a1-83e5-8f70e2b279c6-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "04f01939-12e4-4c4e-8dc8-6ff219cd5a6c-attachment.txt", "type": "text/plain"}], "start": 1756431760644, "stop": 1756431761703}], "attachments": [{"name": "时区处理", "source": "4c5d5b41-2bf7-429f-b361-9d4a653c8352-attachment.txt", "type": "text/plain"}], "start": 1756431760643, "stop": 1756431761703}, {"name": "轮询中（已等待4.2秒）", "status": "passed", "attachments": [{"name": "当前状态", "source": "96fd1cf1-e7f1-465d-a4c7-85816be3d56d-attachment.txt", "type": "text/plain"}, {"name": "超时倒计时", "source": "5fa8156b-2a8b-4fee-b5f3-207fe2f58491-attachment.txt", "type": "text/plain"}], "start": 1756431761703, "stop": 1756431761704}, {"name": "判断结果稳定性", "status": "passed", "attachments": [{"name": "判断结果", "source": "0038f4fc-6707-4e58-b797-77e3085acf5f-attachment.txt", "type": "text/plain"}], "start": 1756431761704, "stop": 1756431761704}, {"name": "数据首次稳定", "status": "passed", "attachments": [{"name": "状态说明", "source": "3ce877ba-2470-48d4-8950-1733efcc9af8-attachment.txt", "type": "text/plain"}], "start": 1756431761704, "stop": 1756431761705}, {"name": "带时区转换查询（目标时区: +05:00）", "status": "passed", "steps": [{"name": "执行数据库查询", "status": "passed", "attachments": [{"name": "执行SQL", "source": "84000c1b-b456-48de-87c9-da120f836dac-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "699570cb-22e3-48fe-8724-e8db7b90fd2e-attachment.txt", "type": "text/plain"}], "start": 1756431763763, "stop": 1756431764816}], "attachments": [{"name": "时区处理", "source": "bddfc177-d32c-4b1f-b323-18200bb3723b-attachment.txt", "type": "text/plain"}], "start": 1756431763763, "stop": 1756431764816}, {"name": "轮询中（已等待7.3秒）", "status": "passed", "attachments": [{"name": "当前状态", "source": "43c93171-7f08-4da7-824f-8ea56d594ce9-attachment.txt", "type": "text/plain"}, {"name": "超时倒计时", "source": "f1dfd38f-70f0-4f74-a351-69e4ca5344bf-attachment.txt", "type": "text/plain"}], "start": 1756431764816, "stop": 1756431764817}, {"name": "判断结果稳定性", "status": "passed", "attachments": [{"name": "判断结果", "source": "2ef37c58-3148-41a1-a1e3-af423096da0f-attachment.txt", "type": "text/plain"}], "start": 1756431764817, "stop": 1756431764818}, {"name": "数据稳定达标", "status": "passed", "attachments": [{"name": "结果说明", "source": "0ee33211-8dc2-41ee-91d2-f29c0c7e70db-attachment.txt", "type": "text/plain"}], "start": 1756431764818, "stop": 1756431764818}, {"name": "带时区查询最终结果", "status": "passed", "attachments": [{"name": "结果预览", "source": "a1f74d01-9900-4695-acbc-99686b88a9cc-attachment.json", "type": "application/json"}], "start": 1756431764818, "stop": 1756431764818}], "attachments": [{"name": "执行SQL", "source": "32cfe84b-39ea-4cef-9c46-b057a8442e33-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "eb4a2f67-9ff2-4d46-b983-9d0d16730cb4-attachment.txt", "type": "text/plain"}, {"name": "时区偏移量（小时）", "source": "d05fd587-03e7-42ee-9b64-9022bfbec2ba-attachment.txt", "type": "text/plain"}], "start": 1756431757484, "stop": 1756431764818}], "start": 1756431757484, "stop": 1756431764818}, {"name": "2. 数据校验", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 详情总手数符合预期\n\n实际: 1.0\n操作: ==\n预期: 5\n\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_825\\test_cloudTrader\\test_cloud_masOrderSend.py\", line 730, in test_dbquery_orderSendclose\n    self.verify_data(\n  File \"D:\\pycharm_test\\lingkuan_825\\commons\\api_base.py\", line 1305, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "验证订单状态", "status": "passed", "steps": [{"name": "校验: 订单状态应为0或1", "status": "passed", "attachments": [{"name": "订单状态详情", "source": "afc9e1f5-e555-4fa2-90dc-d77f82515eae-attachment.attach", "type": "text/plain"}], "start": 1756431764818, "stop": 1756431764819}], "start": 1756431764818, "stop": 1756431764819}, {"name": "验证详情总手数", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 详情总手数符合预期\n\n实际: 1.0\n操作: ==\n预期: 5\n\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_825\\test_cloudTrader\\test_cloud_masOrderSend.py\", line 730, in test_dbquery_orderSendclose\n    self.verify_data(\n  File \"D:\\pycharm_test\\lingkuan_825\\commons\\api_base.py\", line 1305, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "校验: 详情总手数符合预期", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 详情总手数符合预期\n\n实际: 1.0\n操作: ==\n预期: 5\n\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_825\\commons\\api_base.py\", line 1305, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "attachments": [{"name": "详情总手数", "source": "34c87325-ae48-4526-ac02-cc37b27eebaa-attachment.attach", "type": "text/plain"}], "start": 1756431764819, "stop": 1756431764820}], "start": 1756431764819, "stop": 1756431764820}], "start": 1756431764818, "stop": 1756431764820}], "attachments": [{"name": "log", "source": "4485dc28-e429-4831-b05a-a9552fd861bd-attachment.txt", "type": "text/plain"}], "start": 1756431757484, "stop": 1756431764820, "uuid": "12734b29-1fa1-4585-ab29-cfe4daca3132", "historyId": "8eea7d7fca63e1f305620488b55260fb", "testCaseId": "8eea7d7fca63e1f305620488b55260fb", "fullName": "test_cloudTrader.test_cloud_masOrderSend.TestCloudtradingOrders2#test_dbquery_orderSendclose", "labels": [{"name": "feature", "value": "云策略-策略账号交易下单-开仓的场景校验"}, {"name": "story", "value": "场景2：复制下单-手数0.1-1，总订单3，总手数1"}, {"name": "parentSuite", "value": "test_cloudTrader"}, {"name": "suite", "value": "test_cloud_masOrderSend"}, {"name": "subSuite", "value": "TestCloudMasOrdersend"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "21760-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cloudTrader.test_cloud_masOrderSend"}]}