{"name": "数据库校验-交易开仓-指令及订单详情数据检查", "status": "failed", "statusDetails": {"message": "AssertionError: 下单总手数是：1.00,订单详情总手数是：2.0\nassert False\n +  where False = <built-in function isclose>(1.0, 2.0, rel_tol=1e-09, abs_tol=1e-09)\n +    where <built-in function isclose> = math.isclose\n +    and   1.0 = float('1.00')\n +    and   2.0 = float(2.0)", "trace": "self = <lingkuan_817.test_vps.test_masOrderSend.TestMasordersend_copy object at 0x00000228F0B974F0>\nvar_manager = <lingkuan_817.commons.variable_manager.VariableManager object at 0x00000228F0EAED00>\ndb_transaction = <pymysql.connections.Connection object at 0x00000228F0C547F0>\n\n    @allure.title(\"数据库校验-交易开仓-指令及订单详情数据检查\")\n    def test_dbquery_orderSend(self, var_manager, db_transaction):\n        with allure.step(\"1. 获取订单详情界面跟单账号数据\"):\n            vps_user_accounts_1 = var_manager.get_variable(\"vps_user_accounts_1\")\n            sql = f\"\"\"\n                SELECT\n                    fod.size,\n                    fod.send_no,\n                    fod.magical,\n                    fod.open_price,\n                    fod.symbol,\n                    fod.order_no,\n                    foi.true_total_lots,\n                    foi.order_no,\n                    foi.operation_type,\n                    foi.create_time,\n                    foi.status,\n                    foi.min_lot_size,\n                    foi.max_lot_size,\n                    foi.total_lots,\n                    foi.total_orders\n                FROM\n                    follow_order_detail fod\n                INNER JOIN\n                    follow_order_instruct foi\n                ON\n                    foi.order_no = fod.send_no COLLATE utf8mb4_0900_ai_ci\n                WHERE foi.operation_type = %s\n                    AND fod.account = %s\n                    \"\"\"\n            params = (\n                '0',\n                vps_user_accounts_1,\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n            db_data = self.wait_for_database_record_with_timezone(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"fod.open_time\"\n            )\n    \n        with allure.step(\"2. 数据校验\"):\n            trader_ordersend = var_manager.get_variable(\"trader_ordersend\")\n            if not db_data:\n                pytest.fail(\"数据库查询结果为空，无法提取数据\")\n    \n            status = db_data[0][\"status\"]\n            assert status in (0, 1), f\"订单状态status应为0(处理中)或1(全部成功)，实际状态为: {status}\"\n            logging.info(f\"订单状态status应为0(处理中)或1(全部成功)，实际状态为: {status}\")\n    \n            # 手数范围：结束手数校验\n            min_lot_size = db_data[0][\"min_lot_size\"]\n            endsize = trader_ordersend[\"endSize\"]\n            assert math.isclose(float(endsize), float(min_lot_size), rel_tol=1e-9, abs_tol=1e-9), \\\n                f'手数范围：结束手数是：{endsize}，实际是：{min_lot_size}'\n            logging.info(f'手数范围：结束手数是：{endsize}，实际是：{min_lot_size}')\n    \n            # 手数范围：开始手数校验\n            max_lot_size = db_data[0][\"max_lot_size\"]\n            startSize = trader_ordersend[\"startSize\"]\n            assert math.isclose(float(startSize), float(max_lot_size), rel_tol=1e-9, abs_tol=1e-9), \\\n                f'手数范围：开始手数是：{startSize}，实际是：{max_lot_size}'\n            logging.info(f'手数范围：开始手数是：{startSize}，实际是：{max_lot_size}')\n    \n            # 下单总手数与指令表总手数校验\n            total_lots = db_data[0][\"total_lots\"]\n            totalSzie = trader_ordersend[\"totalSzie\"]\n            assert math.isclose(float(totalSzie), float(total_lots), rel_tol=1e-9, abs_tol=1e-9), \\\n                f'下单总手数是：{totalSzie}，实际是：{total_lots}'\n            logging.info(f'下单总手数是：{totalSzie}，实际是：{total_lots}')\n    \n            # 下单总手数与订单详情总手数校验\n            totalSzie = trader_ordersend[\"totalSzie\"]\n            size = [record[\"size\"] for record in db_data]\n            total = sum(size)\n>           assert math.isclose(float(totalSzie), float(total), rel_tol=1e-9, abs_tol=1e-9), \\\n                f'下单总手数是：{totalSzie},订单详情总手数是：{total}'\nE           AssertionError: 下单总手数是：1.00,订单详情总手数是：2.0\nE           assert False\nE            +  where False = <built-in function isclose>(1.0, 2.0, rel_tol=1e-09, abs_tol=1e-09)\nE            +    where <built-in function isclose> = math.isclose\nE            +    and   1.0 = float('1.00')\nE            +    and   2.0 = float(2.0)\n\ntest_vps\\test_masOrderSend.py:328: AssertionError"}, "steps": [{"name": "1. 获取订单详情界面跟单账号数据", "status": "passed", "start": 1755246965332, "stop": 1755246977180}, {"name": "2. 数据校验", "status": "failed", "statusDetails": {"message": "AssertionError: 下单总手数是：1.00,订单详情总手数是：2.0\nassert False\n +  where False = <built-in function isclose>(1.0, 2.0, rel_tol=1e-09, abs_tol=1e-09)\n +    where <built-in function isclose> = math.isclose\n +    and   1.0 = float('1.00')\n +    and   2.0 = float(2.0)\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_817\\test_vps\\test_masOrderSend.py\", line 328, in test_dbquery_orderSend\n    assert math.isclose(float(totalSzie), float(total), rel_tol=1e-9, abs_tol=1e-9), \\\n"}, "start": 1755246977180, "stop": 1755246977180}], "attachments": [{"name": "log", "source": "401d8694-53f2-4d38-ad2a-1a06b1207f2d-attachment.txt", "type": "text/plain"}], "start": 1755246965332, "stop": 1755246977181, "uuid": "5432ee7a-7598-4d59-8462-f11fcf01c32d", "historyId": "be0452b69a9291a87f63091111268c5f", "testCaseId": "be0452b69a9291a87f63091111268c5f", "fullName": "test_vps.test_masOrderSend.TestMasordersend_copy#test_dbquery_orderSend", "labels": [{"name": "feature", "value": "VPS交易下单-复制下单"}, {"name": "parentSuite", "value": "test_vps"}, {"name": "suite", "value": "test_masOrderSend"}, {"name": "subSuite", "value": "TestMasordersend_copy"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "21672-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_vps.test_masOrderSend"}]}