{
  "uid" : "a07cde75839b9dd7",
  "name" : "数据库校验-策略开仓-跟单开仓指令",
  "fullName" : "test_youhua.test_lianxi.TestLianxi#test_dbquery_orderSend_addsalve",
  "historyId" : "4cb725d26e906037a80b425277470c98",
  "time" : {
    "start" : 1751021537622,
    "stop" : 1751021537686,
    "duration" : 64
  },
  "status" : "broken",
  "statusMessage" : "TypeError: 'NoneType' object is not subscriptable",
  "statusTrace" : "self = <lingkuan_youhua9.test_youhua.test_lianxi.TestLianxi object at 0x000002544011E880>\nvar_manager = <lingkuan_youhua9.commons.variable_manager.VariableManager object at 0x000002544011EC40>\ndb_transaction = <pymysql.connections.Connection object at 0x000002544013B040>\n\n    @allure.title(\"数据库校验-策略开仓-跟单开仓指令\")\n    def test_dbquery_orderSend_addsalve(self, var_manager, db_transaction):\n        with allure.step(\"1. 查询数据库验证是否有跟单开仓指令\"):\n            vps_trader_id = var_manager.get_variable(\"vps_trader_id\")\n            trader_ordersend = var_manager.get_variable(\"trader_ordersend\")\n            addSlave = var_manager.get_variable(\"addslave\")\n    \n            table_name = trader_ordersend[\"table\"]\n            symbol = trader_ordersend[\"symbol\"]\n    \n            sql = f\"\"\"\n            SELECT *\n            FROM {table_name}\n            WHERE symbol LIKE %s\n              AND status = %s\n              AND if_follow = %s\n              AND master_order_status = %s\n              AND type = %s\n              AND trader_id = %s\n            \"\"\"\n            params = (\n                f\"%{symbol}%\",\n                \"1\",\n                \"1\",\n                \"0\",\n                trader_ordersend[\"type\"],\n                vps_trader_id\n            )\n    \n            # 使用智能等待查询\n            db_data = self.wait_for_database_record(\n                db_transaction,\n                sql,\n                params,\n                time_field=\"create_time\",\n                time_range=MYSQL_TIME,\n                timeout=WAIT_TIMEOUT,\n                poll_interval=POLL_INTERVAL\n            )\n    \n        with allure.step(\"2. 验证订单状态\"):\n            # 定义验证函数\n            def verify_close_status():\n                if not db_data:\n                    pytest.fail(\"数据库查询结果为空，无法提取数据\")\n    \n                total_lots = list(map(lambda x: x[\"total_lots\"], db_data))\n                logging.info(f\"总手数: {total_lots}\")\n                true_total_lots = list(map(lambda x: x[\"true_total_lots\"], db_data))\n                logging.info(f\"实际总手数: {true_total_lots}\")\n    \n                if total_lots != true_total_lots:\n                    pytest.fail(f\"总手数：{total_lots}  ！= 实际总手数：{true_total_lots}\")\n    \n                traded_lots = list(map(lambda x: x[\"traded_lots\"], db_data))\n                traded_lots_sum = sum(traded_lots)\n                print(traded_lots)\n                followParam = addSlave[\"followParam\"]\n                print(f\"followParam的值：{followParam}\")\n                if float(traded_lots_sum) != float(followParam):\n                    pytest.fail(f\"手数的数据有问题，实际下单手数：{traded_lots} 下单手数：{followParam}\")\n    \n            # 执行验证\n            try:\n>               verify_close_status()\n\ntest_youhua\\test_lianxi.py:81: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def verify_close_status():\n        if not db_data:\n            pytest.fail(\"数据库查询结果为空，无法提取数据\")\n    \n        total_lots = list(map(lambda x: x[\"total_lots\"], db_data))\n        logging.info(f\"总手数: {total_lots}\")\n        true_total_lots = list(map(lambda x: x[\"true_total_lots\"], db_data))\n        logging.info(f\"实际总手数: {true_total_lots}\")\n    \n        if total_lots != true_total_lots:\n            pytest.fail(f\"总手数：{total_lots}  ！= 实际总手数：{true_total_lots}\")\n    \n        traded_lots = list(map(lambda x: x[\"traded_lots\"], db_data))\n        traded_lots_sum = sum(traded_lots)\n        print(traded_lots)\n>       followParam = addSlave[\"followParam\"]\nE       TypeError: 'NoneType' object is not subscriptable\n\ntest_youhua\\test_lianxi.py:74: TypeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "db_transaction",
    "time" : {
      "start" : 1751021537574,
      "stop" : 1751021537621,
      "duration" : 47
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "db_config",
    "time" : {
      "start" : 1751021537339,
      "stop" : 1751021537339,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "environment",
    "time" : {
      "start" : 1751021537338,
      "stop" : 1751021537338,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "db",
    "time" : {
      "start" : 1751021537339,
      "stop" : 1751021537574,
      "duration" : 235
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "var_manager",
    "time" : {
      "start" : 1751021537338,
      "stop" : 1751021537338,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "TypeError: 'NoneType' object is not subscriptable",
    "statusTrace" : "self = <lingkuan_youhua9.test_youhua.test_lianxi.TestLianxi object at 0x000002544011E880>\nvar_manager = <lingkuan_youhua9.commons.variable_manager.VariableManager object at 0x000002544011EC40>\ndb_transaction = <pymysql.connections.Connection object at 0x000002544013B040>\n\n    @allure.title(\"数据库校验-策略开仓-跟单开仓指令\")\n    def test_dbquery_orderSend_addsalve(self, var_manager, db_transaction):\n        with allure.step(\"1. 查询数据库验证是否有跟单开仓指令\"):\n            vps_trader_id = var_manager.get_variable(\"vps_trader_id\")\n            trader_ordersend = var_manager.get_variable(\"trader_ordersend\")\n            addSlave = var_manager.get_variable(\"addslave\")\n    \n            table_name = trader_ordersend[\"table\"]\n            symbol = trader_ordersend[\"symbol\"]\n    \n            sql = f\"\"\"\n            SELECT *\n            FROM {table_name}\n            WHERE symbol LIKE %s\n              AND status = %s\n              AND if_follow = %s\n              AND master_order_status = %s\n              AND type = %s\n              AND trader_id = %s\n            \"\"\"\n            params = (\n                f\"%{symbol}%\",\n                \"1\",\n                \"1\",\n                \"0\",\n                trader_ordersend[\"type\"],\n                vps_trader_id\n            )\n    \n            # 使用智能等待查询\n            db_data = self.wait_for_database_record(\n                db_transaction,\n                sql,\n                params,\n                time_field=\"create_time\",\n                time_range=MYSQL_TIME,\n                timeout=WAIT_TIMEOUT,\n                poll_interval=POLL_INTERVAL\n            )\n    \n        with allure.step(\"2. 验证订单状态\"):\n            # 定义验证函数\n            def verify_close_status():\n                if not db_data:\n                    pytest.fail(\"数据库查询结果为空，无法提取数据\")\n    \n                total_lots = list(map(lambda x: x[\"total_lots\"], db_data))\n                logging.info(f\"总手数: {total_lots}\")\n                true_total_lots = list(map(lambda x: x[\"true_total_lots\"], db_data))\n                logging.info(f\"实际总手数: {true_total_lots}\")\n    \n                if total_lots != true_total_lots:\n                    pytest.fail(f\"总手数：{total_lots}  ！= 实际总手数：{true_total_lots}\")\n    \n                traded_lots = list(map(lambda x: x[\"traded_lots\"], db_data))\n                traded_lots_sum = sum(traded_lots)\n                print(traded_lots)\n                followParam = addSlave[\"followParam\"]\n                print(f\"followParam的值：{followParam}\")\n                if float(traded_lots_sum) != float(followParam):\n                    pytest.fail(f\"手数的数据有问题，实际下单手数：{traded_lots} 下单手数：{followParam}\")\n    \n            # 执行验证\n            try:\n>               verify_close_status()\n\ntest_youhua\\test_lianxi.py:81: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def verify_close_status():\n        if not db_data:\n            pytest.fail(\"数据库查询结果为空，无法提取数据\")\n    \n        total_lots = list(map(lambda x: x[\"total_lots\"], db_data))\n        logging.info(f\"总手数: {total_lots}\")\n        true_total_lots = list(map(lambda x: x[\"true_total_lots\"], db_data))\n        logging.info(f\"实际总手数: {true_total_lots}\")\n    \n        if total_lots != true_total_lots:\n            pytest.fail(f\"总手数：{total_lots}  ！= 实际总手数：{true_total_lots}\")\n    \n        traded_lots = list(map(lambda x: x[\"traded_lots\"], db_data))\n        traded_lots_sum = sum(traded_lots)\n        print(traded_lots)\n>       followParam = addSlave[\"followParam\"]\nE       TypeError: 'NoneType' object is not subscriptable\n\ntest_youhua\\test_lianxi.py:74: TypeError",
    "steps" : [ {
      "name" : "1. 查询数据库验证是否有跟单开仓指令",
      "time" : {
        "start" : 1751021537622,
        "stop" : 1751021537685,
        "duration" : 63
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "等待数据库记录出现",
        "time" : {
          "start" : 1751021537622,
          "stop" : 1751021537685,
          "duration" : 63
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "8fec27607304a6b5",
          "name" : "条件检查日志",
          "source" : "8fec27607304a6b5.txt",
          "type" : "text/plain",
          "size" : 2586
        }, {
          "uid" : "dd1ce357bb7433a2",
          "name" : "最终结果",
          "source" : "dd1ce357bb7433a2.txt",
          "type" : "text/plain",
          "size" : 29
        } ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "hasContent" : true,
        "attachmentsCount" : 2,
        "shouldDisplayMessage" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 1,
      "hasContent" : true,
      "attachmentsCount" : 2,
      "shouldDisplayMessage" : false
    }, {
      "name" : "2. 验证订单状态",
      "time" : {
        "start" : 1751021537685,
        "stop" : 1751021537685,
        "duration" : 0
      },
      "status" : "broken",
      "statusMessage" : "TypeError: 'NoneType' object is not subscriptable\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\lingkuan_youhua9\\test_youhua\\test_lianxi.py\", line 81, in test_dbquery_orderSend_addsalve\n    verify_close_status()\n  File \"D:\\pycharm_test\\lingkuan_youhua9\\test_youhua\\test_lianxi.py\", line 74, in verify_close_status\n    followParam = addSlave[\"followParam\"]\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true
    } ],
    "attachments" : [ {
      "uid" : "19c754a0d604f6a3",
      "name" : "log",
      "source" : "19c754a0d604f6a3.txt",
      "type" : "text/plain",
      "size" : 3169
    } ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "hasContent" : true,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "db_transaction::0",
    "time" : {
      "start" : 1751021537782,
      "stop" : 1751021537828,
      "duration" : 46
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "db::0",
    "time" : {
      "start" : 1751021537829,
      "stop" : 1751021537829,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "var_manager::0",
    "time" : {
      "start" : 1751021537830,
      "stop" : 1751021537831,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "test_youhua"
  }, {
    "name" : "suite",
    "value" : "test_lianxi"
  }, {
    "name" : "subSuite",
    "value" : "TestLianxi"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "29276-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_youhua.test_lianxi"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "a07cde75839b9dd7.json",
  "parameterValues" : [ ]
}