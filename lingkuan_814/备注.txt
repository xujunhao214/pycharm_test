7061这个版本优化异常处理：
HTTP 请求：在发送 HTTP 请求时，虽然记录了响应状态码等信息，但对于一些网络异常（如连接超时、DNS 解析失败等）的处理不够完善，可以增加相应的异常捕获和处理，给出更友好的错误提示。
数据库操作：数据库操作部分同样可以增强异常处理，例如捕获数据库连接失败、SQL 语法错误等异常，并给出详细的错误信息，方便排查问题。

所有的日志加上时间：
logger.info
logger.warning
logger.error
error_msg

707这个版本优化：
数据库轮询等待存在问题，如果有3个结果，但是查询了两条记录就轮询结束，增加了一个字段：
stable_period=STBLE_PERIOD,  # 新增：数据连续3秒不变则认为加载完成

709这个版本优化：
1.轮询等待先是看30秒内是否有数据，有数据再看等待期，没有数据就不用等待期
2.新增allure报告环境数据展示


710这个版本优化：这个是一个正常的版本
之前vps的代码结构进行优化:主要是移除数据库查询，表名字段从json文件中获取

711这个版本优化：
password使用的是加解密形式

718这个版本：
是一个完善可以运行的版本


721这个版本：
新增redis数据校验
新增config.py redis_utils.py文件，修改conftest.py文件
commons/enums.py  →  定义Environment枚举
       ↑
config.py        →  导入Environment，定义ENV_CONFIG
       ↑
conftest.py      →  导入Environment和ENV_CONFIG，导入redis_utils
       ↑
redis_utils.py   →  导入Environment和ENV_CONFIG（不导入conftest）


723这个版本：
将指令表和订单详情表的校验合并，减少步骤，节省运行时间（目前运行还不顺畅）

725这个版本：
将指令表和订单详情表的校验合并，减少步骤，节省运行时间（VPS的正常运行）


728这个版本使用math.isclose比较float类型数据是否相等，不然有的数据转换为float类型会是0.10999，结果不相等：
math.isclose(a, b, *, rel_tol=1e-09, abs_tol=0.0)
a, b：需要比较的两个浮点数。
rel_tol：相对容差，表示允许的最大相对差异（默认 1e-9，即 10^-9）。
abs_tol：绝对容差，表示当 a 或 b 接近零时的最小绝对差异（默认 0.0）。

729这个版本，修改新增VPS的参数字段，自研跟单V1.4.2接口字段有变化

730这个版本：
1.新增等待的函数（为开仓时间 平仓时间准备，有时区差距）
2.修改基类里面的时间，从固定的改为变量
3.修改执行用例里面的轮询等待，都使用默认数据，需要修改的再单独配置
4.修改云策略的接口和优化执行用例的轮询等待

812版本：
1.重命名变量，vps的前缀是vps_，云策略的前缀是cloudTrader_
2.修改云策略的漏单、修改币种、修改模式的代码
这个版本是一个都可以运行的稳定版本

813版本：
1.这个版本将测试环境和UAT的环境综合，变量配置信息在json文件里面配置,登录的时候需要切换logged_session
这个版本是一个都可以运行的稳定版本

814版本：
1.将原来的main.py一个执行文件拆分为两个run_cloud_tests.py、run_vps_tests.py，然后再使用一个执行文件并行执行run_parallel.py/run_parallel_console.py
run_cloud_tests.py、run_vps_tests.py这两个执行文件可以单独的执行
run_parallel.py/run_parallel_console.py两个并行执行文件的区别：
run_parallel.py 没有控制台输出，捕获输出到缓冲区（执行完成后打印）
run_parallel_console.py 有控制台输出，实时重定向输出流（实时打印输出）
一、实时重定向输出流（实时打印输出）
核心优势：
实时监控进度
子进程的每一行输出会立即显示在控制台，能实时看到脚本的执行状态（例如 “测试用例执行到第 5 步”“正在删除账号”），便于及时发现卡顿、卡死或异常（如无限循环、超时未响应），尤其适合调试阶段。
问题定位及时
若脚本执行失败（如报错 “数据库连接超时”），错误信息会实时输出，无需等待整个脚本执行完成，可快速中断并排查问题，减少无效等待时间。
用户体验更直观
符合人工操作的习惯（类似直接在终端运行脚本），输出内容按执行顺序实时展示，通过前缀（如[VPS]/[Cloud]）可清晰区分多个并行任务的日志，避免混淆。
适合长时间运行的任务
对于执行时间较长的测试（如批量创建账号、压力测试），实时输出能让用户确认 “脚本仍在运行”，避免因长时间无输出而误以为程序崩溃。
二、捕获输出到缓冲区（执行完成后打印）
核心优势：
资源占用更低
不实时处理输出，而是将所有内容暂存到内存缓冲区，减少了频繁 IO 操作（控制台打印属于 IO 操作），在高并发场景（如同时运行 10 + 脚本）中，能减少系统资源消耗，提升执行效率。
输出内容更完整
避免多个并行任务的输出 “交叉混乱”（例如 A 脚本的一行日志被 B 脚本的日志截断），尤其当两个脚本同时输出大量内容时，缓冲区捕获能保证每个脚本的日志完整连续，便于后续分析（如保存到文件）。
便于日志二次处理
所有输出会被统一存储为字符串，可在脚本执行完成后进行过滤、搜索、格式化（如提取错误信息、统计关键字出现次数），或批量写入日志文件（如按脚本名称分别保存），适合自动化日志分析场景。
减少终端阻塞
在某些终端（如 Windows CMD）中，频繁打印大量内容可能导致终端卡顿，缓冲区捕获可避免此问题，尤其当测试脚本输出日志量极大时（如每秒数百行），能提升整体执行流畅度。