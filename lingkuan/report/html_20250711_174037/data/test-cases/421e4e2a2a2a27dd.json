{
  "uid" : "421e4e2a2a2a27dd",
  "name" : "数据库校验-云策略平仓-云策略跟单账号数据校验",
  "fullName" : "test_cloudTrader.test_cloudOrderSend_managerlevel.TestcloudTrader_managerlevel#test_dbbargain_masOrderSend4",
  "historyId" : "efb47ade91166e7cf6e660bf624e5a8b",
  "time" : {
    "start" : 1752227490005,
    "stop" : 1752227499192,
    "duration" : 9187
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: 跟单总手数和下单的手数不相等 (实际: 2.0, 预期: 1.00)\nassert False\n +  where False = <built-in function isclose>(2.0, 1.0, rel_tol=1e-09, abs_tol=1e-09)\n +    where <built-in function isclose> = math.isclose\n +    and   2.0 = float(2.0)\n +    and   1.0 = float('1.00')",
  "statusTrace" : "self = <lingkuan.test_cloudTrader.test_cloudOrderSend_managerlevel.TestcloudTrader_managerlevel object at 0x000001B86163FBB0>\nvar_manager = <lingkuan.commons.variable_manager.VariableManager object at 0x000001B861C26D00>\ndb_transaction = <pymysql.connections.Connection object at 0x000001B8615C4A30>\n\n    @allure.title(\"数据库校验-云策略平仓-云策略跟单账号数据校验\")\n    def test_dbbargain_masOrderSend4(self, var_manager, db_transaction):\n        with allure.step(\"1. 查询数据库验证是否有下单\"):\n            user_accounts_cloudTrader_4 = var_manager.get_variable(\"user_accounts_cloudTrader_4\")\n    \n            sql = f\"\"\"\n                   SELECT\n                        fod.size,\n                        fod.close_no,\n                        foi.true_total_lots,\n                        foi.order_no,\n                        foi.operation_type,\n                        foi.create_time,\n                        foi.status\n                    FROM\n                        follow_order_detail fod\n                    INNER JOIN\n                        follow_order_instruct foi\n                    ON\n                        foi.order_no = fod.close_no COLLATE utf8mb4_0900_ai_ci\n                    WHERE foi.operation_type = %s\n                        AND fod.account = %s\n                   \"\"\"\n            params = (\n                \"1\",\n                user_accounts_cloudTrader_4\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n            db_data = self.wait_for_database_record(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"foi.create_time\",  # 按创建时间过滤\n                time_range=MYSQL_TIME,  # 只查前后2分钟的数据\n                timeout=WAIT_TIMEOUT,  # 最多等30秒\n                poll_interval=POLL_INTERVAL,  # 每2秒查一次\n                stable_period=STBLE_PERIOD,  # 新增：数据连续3秒不变则认为加载完成\n                order_by=\"foi.create_time DESC\"  # 按创建时间倒序\n            )\n        with allure.step(\"2. 对数据进行校验\"):\n            if not db_data:\n                pytest.fail(\"数据库查询结果为空，无法提取数据\")\n    \n            size = [record[\"size\"] for record in db_data]\n            cloudOrderSend = var_manager.get_variable(\"cloudOrderSend\")\n            total = sum(size)\n            totalSzie = cloudOrderSend[\"totalSzie\"]\n>           assert math.isclose(float(total), float(totalSzie), rel_tol=1e-9,\n                                abs_tol=1e-9), f\"跟单总手数和下单的手数不相等 (实际: {total}, 预期: {totalSzie})\"\nE           AssertionError: 跟单总手数和下单的手数不相等 (实际: 2.0, 预期: 1.00)\nE           assert False\nE            +  where False = <built-in function isclose>(2.0, 1.0, rel_tol=1e-09, abs_tol=1e-09)\nE            +    where <built-in function isclose> = math.isclose\nE            +    and   2.0 = float(2.0)\nE            +    and   1.0 = float('1.00')\n\ntest_cloudTrader\\test_cloudOrderSend_managerlevel.py:641: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "environment",
    "time" : {
      "start" : 1752226837891,
      "stop" : 1752226837891,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "var_manager",
    "time" : {
      "start" : 1752227400819,
      "stop" : 1752227400820,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "db",
    "time" : {
      "start" : 1752226837891,
      "stop" : 1752226838137,
      "duration" : 246
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "db_transaction",
    "time" : {
      "start" : 1752227489958,
      "stop" : 1752227490004,
      "duration" : 46
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "db_config",
    "time" : {
      "start" : 1752226837891,
      "stop" : 1752226837891,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: 跟单总手数和下单的手数不相等 (实际: 2.0, 预期: 1.00)\nassert False\n +  where False = <built-in function isclose>(2.0, 1.0, rel_tol=1e-09, abs_tol=1e-09)\n +    where <built-in function isclose> = math.isclose\n +    and   2.0 = float(2.0)\n +    and   1.0 = float('1.00')",
    "statusTrace" : "self = <lingkuan.test_cloudTrader.test_cloudOrderSend_managerlevel.TestcloudTrader_managerlevel object at 0x000001B86163FBB0>\nvar_manager = <lingkuan.commons.variable_manager.VariableManager object at 0x000001B861C26D00>\ndb_transaction = <pymysql.connections.Connection object at 0x000001B8615C4A30>\n\n    @allure.title(\"数据库校验-云策略平仓-云策略跟单账号数据校验\")\n    def test_dbbargain_masOrderSend4(self, var_manager, db_transaction):\n        with allure.step(\"1. 查询数据库验证是否有下单\"):\n            user_accounts_cloudTrader_4 = var_manager.get_variable(\"user_accounts_cloudTrader_4\")\n    \n            sql = f\"\"\"\n                   SELECT\n                        fod.size,\n                        fod.close_no,\n                        foi.true_total_lots,\n                        foi.order_no,\n                        foi.operation_type,\n                        foi.create_time,\n                        foi.status\n                    FROM\n                        follow_order_detail fod\n                    INNER JOIN\n                        follow_order_instruct foi\n                    ON\n                        foi.order_no = fod.close_no COLLATE utf8mb4_0900_ai_ci\n                    WHERE foi.operation_type = %s\n                        AND fod.account = %s\n                   \"\"\"\n            params = (\n                \"1\",\n                user_accounts_cloudTrader_4\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n            db_data = self.wait_for_database_record(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"foi.create_time\",  # 按创建时间过滤\n                time_range=MYSQL_TIME,  # 只查前后2分钟的数据\n                timeout=WAIT_TIMEOUT,  # 最多等30秒\n                poll_interval=POLL_INTERVAL,  # 每2秒查一次\n                stable_period=STBLE_PERIOD,  # 新增：数据连续3秒不变则认为加载完成\n                order_by=\"foi.create_time DESC\"  # 按创建时间倒序\n            )\n        with allure.step(\"2. 对数据进行校验\"):\n            if not db_data:\n                pytest.fail(\"数据库查询结果为空，无法提取数据\")\n    \n            size = [record[\"size\"] for record in db_data]\n            cloudOrderSend = var_manager.get_variable(\"cloudOrderSend\")\n            total = sum(size)\n            totalSzie = cloudOrderSend[\"totalSzie\"]\n>           assert math.isclose(float(total), float(totalSzie), rel_tol=1e-9,\n                                abs_tol=1e-9), f\"跟单总手数和下单的手数不相等 (实际: {total}, 预期: {totalSzie})\"\nE           AssertionError: 跟单总手数和下单的手数不相等 (实际: 2.0, 预期: 1.00)\nE           assert False\nE            +  where False = <built-in function isclose>(2.0, 1.0, rel_tol=1e-09, abs_tol=1e-09)\nE            +    where <built-in function isclose> = math.isclose\nE            +    and   2.0 = float(2.0)\nE            +    and   1.0 = float('1.00')\n\ntest_cloudTrader\\test_cloudOrderSend_managerlevel.py:641: AssertionError",
    "steps" : [ {
      "name" : "1. 查询数据库验证是否有下单",
      "time" : {
        "start" : 1752227490005,
        "stop" : 1752227499191,
        "duration" : 9186
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "2. 对数据进行校验",
      "time" : {
        "start" : 1752227499191,
        "stop" : 1752227499191,
        "duration" : 0
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: 跟单总手数和下单的手数不相等 (实际: 2.0, 预期: 1.00)\nassert False\n +  where False = <built-in function isclose>(2.0, 1.0, rel_tol=1e-09, abs_tol=1e-09)\n +    where <built-in function isclose> = math.isclose\n +    and   2.0 = float(2.0)\n +    and   1.0 = float('1.00')\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\lingkuan\\test_cloudTrader\\test_cloudOrderSend_managerlevel.py\", line 641, in test_dbbargain_masOrderSend4\n    assert math.isclose(float(total), float(totalSzie), rel_tol=1e-9,\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "b4751e0b32c8d36",
      "name" : "log",
      "source" : "b4751e0b32c8d36.txt",
      "type" : "text/plain",
      "size" : 9175
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "stepsCount" : 2,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "var_manager::0",
    "time" : {
      "start" : 1752228321672,
      "stop" : 1752228321672,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "db::0",
    "time" : {
      "start" : 1752228321677,
      "stop" : 1752228321677,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "db_transaction::0",
    "time" : {
      "start" : 1752227499199,
      "stop" : 1752227499244,
      "duration" : 45
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "交易下单-manager账号云策略复制下单-漏平"
  }, {
    "name" : "parentSuite",
    "value" : "test_cloudTrader"
  }, {
    "name" : "suite",
    "value" : "test_cloudOrderSend_managerlevel"
  }, {
    "name" : "subSuite",
    "value" : "TestcloudTrader_managerlevel"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "43456-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_cloudTrader.test_cloudOrderSend_managerlevel"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "421e4e2a2a2a27dd.json",
  "parameterValues" : [ ]
}