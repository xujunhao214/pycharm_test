{
  "uid" : "58fcb4075252e2f",
  "name" : "VPS管理-VPS列表-获取可见用户信息",
  "fullName" : "test_vps.test_lianxi.TestVPSOrderSend_Scence#test_get_user",
  "historyId" : "7eb80d0de95a077a4ea789f0ff561944",
  "time" : {
    "start" : 1755078025573,
    "stop" : 1755078025573,
    "duration" : 0
  },
  "status" : "failed",
  "statusMessage" : "Failed: 不支持的环境: Environment.UAT",
  "statusTrace" : "api_session = <lingkuan_813.commons.session.EnvironmentSession object at 0x0000022ABE955520>\nvar_manager = <lingkuan_813.commons.variable_manager.VariableManager object at 0x0000022ABE91BA00>\nrequest = <SubRequest 'logged_session' for <Function test_get_user>>\nenvironment = <Environment.UAT: 'uat'>\n\n    @pytest.fixture(scope=\"function\")\n    def logged_session(api_session, var_manager, request, environment):  # 新增environment参数\n        \"\"\"根据环境自动切换登录逻辑（test无需验证码，uat需要MFA验证码）\"\"\"\n        # 1. 始终使用base_url进行登录\n        api_session.use_base_url()\n        logger.info(f\"[{DATETIME_NOW}] 用例 {request.node.nodeid} 使用默认URL登录: {api_session.base_url}\")\n    \n        # 2. 获取登录基础数据\n        login_data = var_manager.get_variable(\"login\")\n        access_token = None\n    \n        # 3. 根据环境执行不同登录逻辑\n        if environment == \"test\":\n            # 测试环境：无需验证码\n            response = api_session.post(\"/sys/auth/login\", json=login_data)\n            assert response.status_code == 200, f\"测试环境登录失败: {response.text}\"\n            response_json = response.json()\n            access_token = response_json[\"data\"][\"access_token\"]\n            logger.info(\"测试环境登录成功（无需验证码）\")\n    \n        elif environment == \"uat\":\n            # UAT环境：需要MFA验证码+重试机制\n            max_retries = 5\n            retry_interval = 15\n            for attempt in range(max_retries):\n                try:\n                    mfa_code = generate_code(MFA_SECRET_KEY)\n                    logger.info(f\"UAT登录尝试 {attempt + 1}/{max_retries}，MFA验证码: {mfa_code}\")\n    \n                    # 构建带验证码的登录数据\n                    json_data = {\n                        \"username\": login_data[\"username\"],\n                        \"password\": login_data[\"password\"],\n                        \"captcha\": \"\",\n                        \"key\": \"\",\n                        \"secretKey\": \"\",\n                        \"code\": mfa_code,\n                        \"isMfaVerified\": 1,\n                        \"isStartMfaVerify\": 1\n                    }\n    \n                    response = api_session.post(\"/sys/auth/login\", json=json_data)\n                    response.raise_for_status()\n                    response_json = response.json()\n    \n                    if response_json.get(\"code\") != 0:\n                        raise ValueError(f\"登录失败: {response_json.get('msg')}\")\n    \n                    access_token = response_json[\"data\"][\"access_token\"]\n                    if not access_token:\n                        raise ValueError(\"未返回access_token\")\n    \n                    logger.info(f\"UAT登录成功（第{attempt + 1}次尝试）\")\n                    break\n    \n                except Exception as e:\n                    logger.warning(f\"第{attempt + 1}次登录失败: {str(e)}\")\n                    if attempt < max_retries - 1:\n                        time.sleep(retry_interval)\n    \n            if not access_token:\n                pytest.fail(f\"UAT经过{max_retries}次重试仍登录失败\")\n    \n        else:\n>           pytest.fail(f\"不支持的环境: {environment}\")\nE           Failed: 不支持的环境: Environment.UAT\n\nconftest.py:119: Failed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "api_session",
    "time" : {
      "start" : 1755078025573,
      "stop" : 1755078025574,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "environment",
    "time" : {
      "start" : 1755078024977,
      "stop" : 1755078024977,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "var_manager",
    "time" : {
      "start" : 1755078024977,
      "stop" : 1755078024978,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "logged_session",
    "time" : {
      "start" : 1755078025574,
      "stop" : 1755078025574,
      "duration" : 0
    },
    "status" : "failed",
    "statusMessage" : "Failed: 不支持的环境: Environment.UAT\n",
    "statusTrace" : "  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\pluggy\\_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\pluggy\\_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n  File \"D:\\pycharm_test\\lingkuan_813\\conftest.py\", line 119, in logged_session\n    pytest.fail(f\"不支持的环境: {environment}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "Failed: 不支持的环境: Environment.UAT",
    "statusTrace" : "api_session = <lingkuan_813.commons.session.EnvironmentSession object at 0x0000022ABE955520>\nvar_manager = <lingkuan_813.commons.variable_manager.VariableManager object at 0x0000022ABE91BA00>\nrequest = <SubRequest 'logged_session' for <Function test_get_user>>\nenvironment = <Environment.UAT: 'uat'>\n\n    @pytest.fixture(scope=\"function\")\n    def logged_session(api_session, var_manager, request, environment):  # 新增environment参数\n        \"\"\"根据环境自动切换登录逻辑（test无需验证码，uat需要MFA验证码）\"\"\"\n        # 1. 始终使用base_url进行登录\n        api_session.use_base_url()\n        logger.info(f\"[{DATETIME_NOW}] 用例 {request.node.nodeid} 使用默认URL登录: {api_session.base_url}\")\n    \n        # 2. 获取登录基础数据\n        login_data = var_manager.get_variable(\"login\")\n        access_token = None\n    \n        # 3. 根据环境执行不同登录逻辑\n        if environment == \"test\":\n            # 测试环境：无需验证码\n            response = api_session.post(\"/sys/auth/login\", json=login_data)\n            assert response.status_code == 200, f\"测试环境登录失败: {response.text}\"\n            response_json = response.json()\n            access_token = response_json[\"data\"][\"access_token\"]\n            logger.info(\"测试环境登录成功（无需验证码）\")\n    \n        elif environment == \"uat\":\n            # UAT环境：需要MFA验证码+重试机制\n            max_retries = 5\n            retry_interval = 15\n            for attempt in range(max_retries):\n                try:\n                    mfa_code = generate_code(MFA_SECRET_KEY)\n                    logger.info(f\"UAT登录尝试 {attempt + 1}/{max_retries}，MFA验证码: {mfa_code}\")\n    \n                    # 构建带验证码的登录数据\n                    json_data = {\n                        \"username\": login_data[\"username\"],\n                        \"password\": login_data[\"password\"],\n                        \"captcha\": \"\",\n                        \"key\": \"\",\n                        \"secretKey\": \"\",\n                        \"code\": mfa_code,\n                        \"isMfaVerified\": 1,\n                        \"isStartMfaVerify\": 1\n                    }\n    \n                    response = api_session.post(\"/sys/auth/login\", json=json_data)\n                    response.raise_for_status()\n                    response_json = response.json()\n    \n                    if response_json.get(\"code\") != 0:\n                        raise ValueError(f\"登录失败: {response_json.get('msg')}\")\n    \n                    access_token = response_json[\"data\"][\"access_token\"]\n                    if not access_token:\n                        raise ValueError(\"未返回access_token\")\n    \n                    logger.info(f\"UAT登录成功（第{attempt + 1}次尝试）\")\n                    break\n    \n                except Exception as e:\n                    logger.warning(f\"第{attempt + 1}次登录失败: {str(e)}\")\n                    if attempt < max_retries - 1:\n                        time.sleep(retry_interval)\n    \n            if not access_token:\n                pytest.fail(f\"UAT经过{max_retries}次重试仍登录失败\")\n    \n        else:\n>           pytest.fail(f\"不支持的环境: {environment}\")\nE           Failed: 不支持的环境: Environment.UAT\n\nconftest.py:119: Failed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "52eb91958926f4f",
      "name" : "log",
      "source" : "52eb91958926f4f.txt",
      "type" : "text/plain",
      "size" : 298
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1
  },
  "afterStages" : [ {
    "name" : "api_session::0",
    "time" : {
      "start" : 1755078025703,
      "stop" : 1755078025703,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "var_manager::0",
    "time" : {
      "start" : 1755078025705,
      "stop" : 1755078025705,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "云策略策略下单-跟单修改模式、品种"
  }, {
    "name" : "parentSuite",
    "value" : "test_vps"
  }, {
    "name" : "suite",
    "value" : "test_lianxi"
  }, {
    "name" : "subSuite",
    "value" : "TestVPSOrderSend_Scence"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "23172-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_vps.test_lianxi"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "58fcb4075252e2f.json",
  "parameterValues" : [ ]
}