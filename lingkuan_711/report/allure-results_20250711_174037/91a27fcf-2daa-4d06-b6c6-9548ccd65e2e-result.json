{"name": "数据库校验-云策略开仓-云策略跟单账号数据校验", "status": "failed", "statusDetails": {"message": "AssertionError: 跟单总手数和下单的手数不相等 (实际: 2.0, 预期: 1.00)\nassert False\n +  where False = <built-in function isclose>(2.0, 1.0, rel_tol=1e-09, abs_tol=1e-09)\n +    where <built-in function isclose> = math.isclose\n +    and   2.0 = float(2.0)\n +    and   1.0 = float('1.00')", "trace": "self = <lingkuan_711.test_cloudTrader.test_cloudOrderSend_managerlevel.TestcloudTrader_managerlevel object at 0x000001B861654E50>\nvar_manager = <lingkuan_711.commons.variable_manager.VariableManager object at 0x000001B861C26D00>\ndb_transaction = <pymysql.connections.Connection object at 0x000001B8615C4A30>\n\n    @allure.title(\"数据库校验-云策略开仓-云策略跟单账号数据校验\")\n    def test_dbbargain_masOrderSend3(self, var_manager, db_transaction):\n        with allure.step(\"1. 查询数据库验证是否有下单\"):\n            cloudMaster_id = var_manager.get_variable(\"cloudMaster_id\")\n            user_accounts_cloudTrader_4 = var_manager.get_variable(\"user_accounts_cloudTrader_4\")\n    \n            sql = f\"\"\"\n                   SELECT\n                        fod.size,\n                        fod.send_no,\n                        foi.true_total_lots,\n                        foi.order_no,\n                        foi.operation_type,\n                        foi.create_time,\n                        foi.status\n                    FROM\n                        follow_order_detail fod\n                    INNER JOIN\n                        follow_order_instruct foi\n                    ON\n                        foi.order_no = fod.send_no COLLATE utf8mb4_0900_ai_ci\n                    WHERE foi.cloud_id = %s\n                        AND foi.operation_type = %s\n                        AND fod.account = %s\n                   \"\"\"\n            params = (\n                cloudMaster_id,\n                \"0\",\n                user_accounts_cloudTrader_4\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n            db_data = self.wait_for_database_record(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"foi.create_time\",  # 按创建时间过滤\n                time_range=MYSQL_TIME,  # 只查前后2分钟的数据\n                timeout=WAIT_TIMEOUT,  # 最多等30秒\n                poll_interval=POLL_INTERVAL,  # 每2秒查一次\n                stable_period=STBLE_PERIOD,  # 新增：数据连续3秒不变则认为加载完成\n                order_by=\"foi.create_time DESC\"  # 按创建时间倒序\n            )\n        with allure.step(\"2. 对数据进行校验\"):\n            if not db_data:\n                pytest.fail(\"数据库查询结果为空，无法提取数据\")\n    \n            size = [record[\"size\"] for record in db_data]\n            cloudOrderSend = var_manager.get_variable(\"cloudOrderSend\")\n            total = sum(size)\n            totalSzie = cloudOrderSend[\"totalSzie\"]\n>           assert math.isclose(float(total), float(totalSzie), rel_tol=1e-9,\n                                abs_tol=1e-9), f\"跟单总手数和下单的手数不相等 (实际: {total}, 预期: {totalSzie})\"\nE           AssertionError: 跟单总手数和下单的手数不相等 (实际: 2.0, 预期: 1.00)\nE           assert False\nE            +  where False = <built-in function isclose>(2.0, 1.0, rel_tol=1e-09, abs_tol=1e-09)\nE            +    where <built-in function isclose> = math.isclose\nE            +    and   2.0 = float(2.0)\nE            +    and   1.0 = float('1.00')\n\ntest_cloudTrader\\test_cloudOrderSend_managerlevel.py:285: AssertionError"}, "steps": [{"name": "1. 查询数据库验证是否有下单", "status": "passed", "start": 1752227428371, "stop": 1752227436754}, {"name": "2. 对数据进行校验", "status": "failed", "statusDetails": {"message": "AssertionError: 跟单总手数和下单的手数不相等 (实际: 2.0, 预期: 1.00)\nassert False\n +  where False = <built-in function isclose>(2.0, 1.0, rel_tol=1e-09, abs_tol=1e-09)\n +    where <built-in function isclose> = math.isclose\n +    and   2.0 = float(2.0)\n +    and   1.0 = float('1.00')\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_711\\test_cloudTrader\\test_cloudOrderSend_managerlevel.py\", line 285, in test_dbbargain_masOrderSend3\n    assert math.isclose(float(total), float(totalSzie), rel_tol=1e-9,\n"}, "start": 1752227436754, "stop": 1752227436754}], "attachments": [{"name": "log", "source": "3eab321b-755b-436d-b94c-6ea7bfbe1963-attachment.txt", "type": "text/plain"}], "start": 1752227428371, "stop": 1752227436755, "uuid": "8f8a5a01-4641-4658-885e-e5409281c000", "historyId": "37045b4f3a787587124b98a65beb39cb", "testCaseId": "37045b4f3a787587124b98a65beb39cb", "fullName": "test_cloudTrader.test_cloudOrderSend_managerlevel.TestcloudTrader_managerlevel#test_dbbargain_masOrderSend3", "labels": [{"name": "feature", "value": "交易下单-manager账号云策略复制下单-漏平"}, {"name": "parentSuite", "value": "test_cloudTrader"}, {"name": "suite", "value": "test_cloudOrderSend_managerlevel"}, {"name": "subSuite", "value": "TestcloudTrader_managerlevel"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "43456-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cloudTrader.test_cloudOrderSend_managerlevel"}]}