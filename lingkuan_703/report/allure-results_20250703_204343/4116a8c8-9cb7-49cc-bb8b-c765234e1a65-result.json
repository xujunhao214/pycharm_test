{"name": "数据库校验-策略开仓-修改净值", "status": "broken", "statusDetails": {"message": "TimeoutError: 数据库查询超时，未找到记录 (SQL: \n                    SELECT * \n                    FROM follow_order_detail \n                    WHERE symbol LIKE %s \n                      AND source_user = %s\n                      AND account = %s\n                    , PARAMS: ('%XAUUSD%', '119999305', '119999357'))", "trace": "self = <lingkuan_703.test_foundation.test_vps_ordersend_scene.TestVPSOrderSend_Scence object at 0x0000025E9C599310>\nvar_manager = <lingkuan_703.commons.variable_manager.VariableManager object at 0x0000025E9C599BE0>\ndb_transaction = <pymysql.connections.Connection object at 0x0000025E9C602EE0>\n\n    @allure.title(\"数据库校验-策略开仓-修改净值\")\n    def test_dbtrader_upeuqit(self, var_manager, db_transaction):\n        with allure.step(\"1. 获取订单详情界面跟单账号数据\"):\n            trader_ordersend = var_manager.get_variable(\"trader_ordersend\")\n            vps_trader = var_manager.get_variable(\"vps_trader\")\n            table_name = trader_ordersend[\"table_detail\"]\n            user_accounts_4 = var_manager.get_variable(\"user_accounts_4\")\n            symbol = trader_ordersend[\"symbol\"]\n    \n            sql = f\"\"\"\n                    SELECT *\n                    FROM {table_name}\n                    WHERE symbol LIKE %s\n                      AND source_user = %s\n                      AND account = %s\n                    \"\"\"\n            params = (\n                f\"%{symbol}%\",\n                vps_trader[\"account\"],\n                user_accounts_4,\n            )\n    \n            # 使用智能等待查询\n>           db_data = self.wait_for_database_record(\n                db_transaction,\n                sql,\n                params,\n                time_field=\"create_time\",\n                time_range=MYSQL_TIME,\n                timeout=WAIT_TIMEOUT,\n                poll_interval=POLL_INTERVAL,\n                order_by=\"create_time DESC\"\n            )\n\ntest_foundation\\test_vps_ordersend_scene.py:249: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommons\\api_base.py:242: in wait_for_database_record\n    return wait_for_condition(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncondition = <function APITestBase.wait_for_database_record.<locals>.check_db at 0x0000025E9C69DF70>\ntimeout = 3, poll_interval = 2\nerror_message = \"数据库查询超时，未找到记录 (SQL: \\n                    SELECT * \\n                    FROM follow_order_detail \\n                 ...er = %s\\n                      AND account = %s\\n                    , PARAMS: ('%XAUUSD%', '119999305', '119999357'))\"\nstep_title = '等待数据库记录出现'\n\n    def wait_for_condition(\n            condition: Callable[[], Any],\n            timeout: int = 30,\n            poll_interval: float = 1.0,\n            error_message: str = \"等待条件超时未满足\",\n            step_title: Optional[str] = None\n    ) -> Any:\n        \"\"\"\n        智能等待条件满足，同时记录Allure步骤\n    \n        Args:\n            condition: 检查条件的函数，返回结果表示条件是否满足\n            timeout: 最长等待时间（秒）\n            poll_interval: 轮询间隔（秒）\n            error_message: 超时错误信息\n            step_title: Allure步骤标题，默认为\"等待条件满足\"\n    \n        Returns:\n            条件函数的返回值\n        \"\"\"\n        step_title = step_title or f\"等待条件满足 (超时: {timeout}秒)\"\n    \n        with allure.step(step_title):\n            start_time = time.time()\n            elapsed_time = 0\n            last_result = None\n    \n            while elapsed_time < timeout:\n                try:\n                    last_result = condition()\n                    allure.attach(\n                        f\"轮询检查结果 (已等待 {elapsed_time:.1f}秒): {last_result}\",\n                        name=\"条件检查日志\",\n                        attachment_type=allure.attachment_type.TEXT\n                    )\n    \n                    if last_result:\n                        allure.attach(\n                            f\"条件满足，耗时: {elapsed_time:.1f}秒\",\n                            name=\"最终结果\",\n                            attachment_type=allure.attachment_type.TEXT\n                        )\n                        return last_result\n                except Exception as e:\n                    allure.attach(\n                        f\"轮询异常 (已等待 {elapsed_time:.1f}秒): {str(e)}\",\n                        name=\"异常信息\",\n                        attachment_type=allure.attachment_type.TEXT\n                    )\n                    raise\n    \n                time.sleep(poll_interval)\n                elapsed_time = time.time() - start_time\n    \n            # 超时处理\n            allure.attach(\n                f\"等待超时 ({timeout}秒)，最终检查结果: {last_result}\",\n                name=\"超时信息\",\n                attachment_type=allure.attachment_type.TEXT\n            )\n>           raise TimeoutError(error_message)\nE           TimeoutError: 数据库查询超时，未找到记录 (SQL: \nE                               SELECT * \nE                               FROM follow_order_detail \nE                               WHERE symbol LIKE %s \nE                                 AND source_user = %s\nE                                 AND account = %s\nE                               , PARAMS: ('%XAUUSD%', '119999305', '119999357'))\n\ncommons\\wait_utils.py:70: TimeoutError"}, "steps": [{"name": "1. 获取订单详情界面跟单账号数据", "status": "broken", "statusDetails": {"message": "TimeoutError: 数据库查询超时，未找到记录 (SQL: \n                    SELECT * \n                    FROM follow_order_detail \n                    WHERE symbol LIKE %s \n                      AND source_user = %s\n                      AND account = %s\n                    , PARAMS: ('%XAUUSD%', '119999305', '119999357'))\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_703\\test_foundation\\test_vps_ordersend_scene.py\", line 249, in test_dbtrader_upeuqit\n    db_data = self.wait_for_database_record(\n  File \"D:\\pycharm_test\\lingkuan_703\\commons\\api_base.py\", line 242, in wait_for_database_record\n    return wait_for_condition(\n  File \"D:\\pycharm_test\\lingkuan_703\\commons\\wait_utils.py\", line 70, in wait_for_condition\n    raise TimeoutError(error_message)\n"}, "steps": [{"name": "等待数据库记录出现", "status": "broken", "statusDetails": {"message": "TimeoutError: 数据库查询超时，未找到记录 (SQL: \n                    SELECT * \n                    FROM follow_order_detail \n                    WHERE symbol LIKE %s \n                      AND source_user = %s\n                      AND account = %s\n                    , PARAMS: ('%XAUUSD%', '119999305', '119999357'))\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_703\\commons\\wait_utils.py\", line 70, in wait_for_condition\n    raise TimeoutError(error_message)\n"}, "attachments": [{"name": "条件检查日志", "source": "e6c3874b-cfb6-4692-a56e-8c41780da1b3-attachment.txt", "type": "text/plain"}, {"name": "超时信息", "source": "92c8fc9d-2408-452a-a87f-5105c419ed6f-attachment.txt", "type": "text/plain"}], "start": 1751546631713, "stop": 1751546634994}], "start": 1751546631713, "stop": 1751546634994}], "attachments": [{"name": "log", "source": "ae2a506f-e0c2-40d5-b6fc-a49da9a166d0-attachment.txt", "type": "text/plain"}], "start": 1751546631713, "stop": 1751546634994, "uuid": "7d21608f-f9e4-468b-bbe3-117bedec5d8f", "historyId": "a28a303db403caf0d052e942f81ef899", "testCaseId": "a28a303db403caf0d052e942f81ef899", "fullName": "test_foundation.test_vps_ordersend_scene.TestVPSOrderSend_Scence#test_dbtrader_upeuqit", "labels": [{"name": "feature", "value": "VPS策略下单-正常开仓平仓"}, {"name": "parentSuite", "value": "test_foundation"}, {"name": "suite", "value": "test_vps_ordersend_scene"}, {"name": "subSuite", "value": "TestVPSOrderSend_Scence"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "36544-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_foundation.test_vps_ordersend_scene"}]}