{
  "uid" : "5b22ea804f4453ff",
  "name" : "跟单软件看板-VPS数据-新增策略账号",
  "fullName" : "test_cloudTrader.test_create.TestCreate_cloudTrader#test_add_trader",
  "historyId" : "72c3d2f4afaf165cca763cfee5479b38",
  "time" : {
    "start" : 1756200428942,
    "stop" : 1756200430242,
    "duration" : 1300
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Failed: 响应msg字段应为success（JSON断言失败）",
  "statusTrace" : "self = <lingkuan_821.test_cloudTrader.test_create.TestCreate_cloudTrader object at 0x000001B5E40EF160>\nresponse = <Response [200]>, json_path = '$.msg', expected_value = 'success'\nerror_msg_prefix = '响应msg字段应为success'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n    \n>           assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\nE               AssertionError: Failed: 响应msg字段应为success（JSON路径值不匹配）\n\ncommons\\api_base.py:401: AssertionError\n\nThe above exception was the direct cause of the following exception:\n\nself = <lingkuan_821.test_cloudTrader.test_create.TestCreate_cloudTrader object at 0x000001B5E40EF160>\nvar_manager = <lingkuan_821.commons.variable_manager.VariableManager object at 0x000001B5E4101970>\nlogged_session = <lingkuan_821.commons.session.EnvironmentSession object at 0x000001B5E41D5790>\nencrypted_password = 'fa1af751c83d311f091c9393a364068c'\n\n    @pytest.mark.url(\"vps\")\n    @allure.title(\"跟单软件看板-VPS数据-新增策略账号\")\n    def test_add_trader(self, var_manager, logged_session, encrypted_password):\n        # 1. 发送新增策略账号请求\n        new_user = var_manager.get_variable(\"new_user\")\n        cloudTrader_user_accounts_1 = var_manager.get_variable(\"cloudTrader_user_accounts_1\")\n        data = {\n            \"account\": cloudTrader_user_accounts_1,\n            \"password\": encrypted_password,\n            \"remark\": new_user[\"remark\"],\n            \"followStatus\": 1,\n            \"templateId\": 1,\n            \"type\": 0,\n            \"cfd\": \"\",\n            \"forex\": \"\",\n            \"followOrderRemark\": 1,\n            \"fixedComment\": new_user[\"fixedComment\"],\n            \"commentType\": new_user[\"commentType\"],\n            \"digits\": new_user[\"digits\"],\n            \"platformId\": new_user[\"platformId\"],\n            \"platform\": new_user[\"platform\"]\n        }\n        response = self.send_post_request(\n            logged_session,\n            '/subcontrol/trader',\n            json_data=data\n        )\n    \n        # 2. 验证响应状态码\n        self.assert_response_status(\n            response,\n            200,\n            \"新增策略账号失败\"\n        )\n    \n        # 3. 验证JSON返回内容\n>       self.assert_json_value(\n            response,\n            \"$.msg\",\n            \"success\",\n            \"响应msg字段应为success\"\n        )\n\ntest_cloudTrader\\test_create.py:149: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_821.test_cloudTrader.test_create.TestCreate_cloudTrader object at 0x000001B5E40EF160>\nresponse = <Response [200]>, json_path = '$.msg', expected_value = 'success'\nerror_msg_prefix = '响应msg字段应为success'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n    \n            assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\n        except Exception as e:\n            with allure.step(f\"JSON断言失败: {json_path}\"):\n                allure.attach(json_path, \"JSON路径\", allure.attachment_type.TEXT)\n                allure.attach(str(expected_value), \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(response.text[:500], \"响应内容\", allure.attachment_type.TEXT)\n            logger.error(\n                f\"[{self._get_current_time()}] JSON断言失败: {str(e)} | 路径: {json_path} | 响应: {response.text[:500]}\")\n>           raise AssertionError(f\"Failed: {error_msg_prefix}（JSON断言失败）\") from e\nE           AssertionError: Failed: 响应msg字段应为success（JSON断言失败）\n\ncommons\\api_base.py:410: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "api_session",
    "time" : {
      "start" : 1756200428805,
      "stop" : 1756200428805,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "encrypted_password",
    "time" : {
      "start" : 1756200428942,
      "stop" : 1756200428942,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "logged_session",
    "time" : {
      "start" : 1756200428805,
      "stop" : 1756200428942,
      "duration" : 137
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Failed: 响应msg字段应为success（JSON断言失败）",
    "statusTrace" : "self = <lingkuan_821.test_cloudTrader.test_create.TestCreate_cloudTrader object at 0x000001B5E40EF160>\nresponse = <Response [200]>, json_path = '$.msg', expected_value = 'success'\nerror_msg_prefix = '响应msg字段应为success'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n    \n>           assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\nE               AssertionError: Failed: 响应msg字段应为success（JSON路径值不匹配）\n\ncommons\\api_base.py:401: AssertionError\n\nThe above exception was the direct cause of the following exception:\n\nself = <lingkuan_821.test_cloudTrader.test_create.TestCreate_cloudTrader object at 0x000001B5E40EF160>\nvar_manager = <lingkuan_821.commons.variable_manager.VariableManager object at 0x000001B5E4101970>\nlogged_session = <lingkuan_821.commons.session.EnvironmentSession object at 0x000001B5E41D5790>\nencrypted_password = 'fa1af751c83d311f091c9393a364068c'\n\n    @pytest.mark.url(\"vps\")\n    @allure.title(\"跟单软件看板-VPS数据-新增策略账号\")\n    def test_add_trader(self, var_manager, logged_session, encrypted_password):\n        # 1. 发送新增策略账号请求\n        new_user = var_manager.get_variable(\"new_user\")\n        cloudTrader_user_accounts_1 = var_manager.get_variable(\"cloudTrader_user_accounts_1\")\n        data = {\n            \"account\": cloudTrader_user_accounts_1,\n            \"password\": encrypted_password,\n            \"remark\": new_user[\"remark\"],\n            \"followStatus\": 1,\n            \"templateId\": 1,\n            \"type\": 0,\n            \"cfd\": \"\",\n            \"forex\": \"\",\n            \"followOrderRemark\": 1,\n            \"fixedComment\": new_user[\"fixedComment\"],\n            \"commentType\": new_user[\"commentType\"],\n            \"digits\": new_user[\"digits\"],\n            \"platformId\": new_user[\"platformId\"],\n            \"platform\": new_user[\"platform\"]\n        }\n        response = self.send_post_request(\n            logged_session,\n            '/subcontrol/trader',\n            json_data=data\n        )\n    \n        # 2. 验证响应状态码\n        self.assert_response_status(\n            response,\n            200,\n            \"新增策略账号失败\"\n        )\n    \n        # 3. 验证JSON返回内容\n>       self.assert_json_value(\n            response,\n            \"$.msg\",\n            \"success\",\n            \"响应msg字段应为success\"\n        )\n\ntest_cloudTrader\\test_create.py:149: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_821.test_cloudTrader.test_create.TestCreate_cloudTrader object at 0x000001B5E40EF160>\nresponse = <Response [200]>, json_path = '$.msg', expected_value = 'success'\nerror_msg_prefix = '响应msg字段应为success'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n    \n            assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\n        except Exception as e:\n            with allure.step(f\"JSON断言失败: {json_path}\"):\n                allure.attach(json_path, \"JSON路径\", allure.attachment_type.TEXT)\n                allure.attach(str(expected_value), \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(response.text[:500], \"响应内容\", allure.attachment_type.TEXT)\n            logger.error(\n                f\"[{self._get_current_time()}] JSON断言失败: {str(e)} | 路径: {json_path} | 响应: {response.text[:500]}\")\n>           raise AssertionError(f\"Failed: {error_msg_prefix}（JSON断言失败）\") from e\nE           AssertionError: Failed: 响应msg字段应为success（JSON断言失败）\n\ncommons\\api_base.py:410: AssertionError",
    "steps" : [ {
      "name" : "执行 POST 请求",
      "time" : {
        "start" : 1756200428942,
        "stop" : 1756200430235,
        "duration" : 1293
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "请求详情",
        "time" : {
          "start" : 1756200428942,
          "stop" : 1756200428943,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "acbdc924d190f173",
          "name" : "请求URL",
          "source" : "acbdc924d190f173.txt",
          "type" : "text/plain",
          "size" : 18
        }, {
          "uid" : "e86b8658853f5ac2",
          "name" : "请求头",
          "source" : "e86b8658853f5ac2.json",
          "type" : "application/json",
          "size" : 234
        }, {
          "uid" : "76fca6cf0d52ac15",
          "name" : "请求体（JSON）",
          "source" : "76fca6cf0d52ac15.json",
          "type" : "application/json",
          "size" : 331
        } ],
        "parameters" : [ ],
        "hasContent" : true,
        "stepsCount" : 0,
        "attachmentsCount" : 3,
        "shouldDisplayMessage" : false
      }, {
        "name" : "响应详情",
        "time" : {
          "start" : 1756200429225,
          "stop" : 1756200429227,
          "duration" : 2
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "f71a682809191b83",
          "name" : "响应状态码",
          "source" : "f71a682809191b83.txt",
          "type" : "text/plain",
          "size" : 3
        }, {
          "uid" : "bde807fd54e981f6",
          "name" : "响应头",
          "source" : "bde807fd54e981f6.json",
          "type" : "application/json",
          "size" : 526
        }, {
          "uid" : "4e6ff8d8af467af0",
          "name" : "响应体（JSON）",
          "source" : "4e6ff8d8af467af0.json",
          "type" : "application/json",
          "size" : 61
        } ],
        "parameters" : [ ],
        "hasContent" : true,
        "stepsCount" : 0,
        "attachmentsCount" : 3,
        "shouldDisplayMessage" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 2,
      "attachmentsCount" : 6,
      "shouldDisplayMessage" : false
    }, {
      "name" : "断言响应状态码",
      "time" : {
        "start" : 1756200430235,
        "stop" : 1756200430236,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "7fae6526ddfc1cdb",
        "name" : "请求URL",
        "source" : "7fae6526ddfc1cdb.txt",
        "type" : "text/plain",
        "size" : 41
      }, {
        "uid" : "998341a58a543436",
        "name" : "预期状态码",
        "source" : "998341a58a543436.txt",
        "type" : "text/plain",
        "size" : 14
      }, {
        "uid" : "43432c599765d6ab",
        "name" : "实际状态码",
        "source" : "43432c599765d6ab.txt",
        "type" : "text/plain",
        "size" : 14
      }, {
        "uid" : "d6fb0391865cb70",
        "name" : "响应内容",
        "source" : "d6fb0391865cb70.txt",
        "type" : "text/plain",
        "size" : 48
      } ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "attachmentsCount" : 4,
      "shouldDisplayMessage" : false
    }, {
      "name" : "断言JSON路径: $.msg",
      "time" : {
        "start" : 1756200430240,
        "stop" : 1756200430241,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "4e9e88c2a04e8d6",
        "name" : "请求URL",
        "source" : "4e9e88c2a04e8d6.txt",
        "type" : "text/plain",
        "size" : 41
      }, {
        "uid" : "9af2ae70b61a1287",
        "name" : "预期值",
        "source" : "9af2ae70b61a1287.txt",
        "type" : "text/plain",
        "size" : 20
      }, {
        "uid" : "95827b1defd38e39",
        "name" : "实际值",
        "source" : "95827b1defd38e39.txt",
        "type" : "text/plain",
        "size" : 28
      } ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "attachmentsCount" : 3,
      "shouldDisplayMessage" : false
    }, {
      "name" : "JSON断言失败: $.msg",
      "time" : {
        "start" : 1756200430241,
        "stop" : 1756200430242,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "96b2e63311b6bb03",
        "name" : "JSON路径",
        "source" : "96b2e63311b6bb03.txt",
        "type" : "text/plain",
        "size" : 5
      }, {
        "uid" : "c05239a9e06d762b",
        "name" : "预期值",
        "source" : "c05239a9e06d762b.txt",
        "type" : "text/plain",
        "size" : 7
      }, {
        "uid" : "6351d4462ea5e88e",
        "name" : "响应内容",
        "source" : "6351d4462ea5e88e.txt",
        "type" : "text/plain",
        "size" : 48
      } ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "attachmentsCount" : 3,
      "shouldDisplayMessage" : false
    } ],
    "attachments" : [ {
      "uid" : "4c67718794b0819b",
      "name" : "log",
      "source" : "4c67718794b0819b.txt",
      "type" : "text/plain",
      "size" : 7644
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 6,
    "attachmentsCount" : 17,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "api_session::0",
    "time" : {
      "start" : 1756200430264,
      "stop" : 1756200430264,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "logged_session::0",
    "time" : {
      "start" : 1756200430263,
      "stop" : 1756200430263,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "数据管理-创建数据-为云策略准备"
  }, {
    "name" : "tag",
    "value" : "url('vps')"
  }, {
    "name" : "parentSuite",
    "value" : "test_cloudTrader"
  }, {
    "name" : "suite",
    "value" : "test_create"
  }, {
    "name" : "subSuite",
    "value" : "TestCreate_cloudTrader"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "26964-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_cloudTrader.test_create"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "14db452da02be390",
      "status" : "failed",
      "statusDetails" : "AssertionError: Failed: 响应msg字段应为success（JSON断言失败）",
      "time" : {
        "start" : 1756200422692,
        "stop" : 1756200423770,
        "duration" : 1078
      }
    }, {
      "uid" : "9283abe46d56e27e",
      "status" : "failed",
      "statusDetails" : "AssertionError: Failed: 响应msg字段应为success（JSON断言失败）",
      "time" : {
        "start" : 1756200416207,
        "stop" : 1756200417287,
        "duration" : 1080
      }
    }, {
      "uid" : "1490ca1c2558572a",
      "status" : "broken",
      "statusDetails" : "requests.exceptions.ConnectionError: Failed: POST 请求异常（HTTPConnectionPool(host='127.0.0.1', port=10809): Max retries exceeded with url: http://39.99.136.49/vps/subcontrol/trader (Caused by ProxyError('Unable to connect to proxy', ConnectionResetError(10054, '远程主机强迫关闭了一个现有的连接。', None, 10054, None)))）",
      "time" : {
        "start" : 1756200405902,
        "stop" : 1756200410848,
        "duration" : 4946
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "url('vps')" ]
  },
  "source" : "5b22ea804f4453ff.json",
  "parameterValues" : [ ]
}