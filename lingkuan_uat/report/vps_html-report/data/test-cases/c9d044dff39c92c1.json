{
  "uid" : "c9d044dff39c92c1",
  "name" : "数据库校验-交易平仓-主指令及订单详情数据检查-有订单",
  "fullName" : "test_vps.test_vps_masOrderClose.TestVPStradingOrders5#test_dbquery_orderSendclose",
  "historyId" : "4f97a33c7b865ce7fa98b1fb898598b2",
  "time" : {
    "start" : 1755853955058,
    "stop" : 1755853955984,
    "duration" : 926
  },
  "description" : "\n    ### 测试说明\n    - 前置条件：有vps策略和vps跟单\n      1. 修改跟单账号，跟单方向-正向\n      2. 进行开仓\n      3. 交易下单-跟单账号自己平仓-sell\n      4. 校验平仓的订单数，应该不等于4\n      5. 交易下单-跟单账号自己平仓-buy\n      6. 校验平仓的订单数,等于4\n    - 预期结果：平仓的订单方向功能正确\n    ",
  "descriptionHtml" : "<pre><code>### 测试说明\n- 前置条件：有vps策略和vps跟单\n  1. 修改跟单账号，跟单方向-正向\n  2. 进行开仓\n  3. 交易下单-跟单账号自己平仓-sell\n  4. 校验平仓的订单数，应该不等于4\n  5. 交易下单-跟单账号自己平仓-buy\n  6. 校验平仓的订单数,等于4\n- 预期结果：平仓的订单方向功能正确\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: 正常平仓，应该有4个平仓订单，结果有8个订单\nassert 8 == 4\n +  where 8 = len([{'close_no': '0470645409987', 'create_time': '2025-08-22 17:12:17', 'foi.order_no': '0470645409987', 'magical': 26509, ...}, {'close_no': '0470645409987', 'create_time': '2025-08-22 17:12:17', 'foi.order_no': '0470645409987', 'magical': 38179, ...}, {'close_no': '0470645409987', 'create_time': '2025-08-22 17:12:17', 'foi.order_no': '0470645409987', 'magical': 29985, ...}, {'close_no': '0470645409987', 'create_time': '2025-08-22 17:12:17', 'foi.order_no': '0470645409987', 'magical': 54215, ...}, {'close_no': '6332873538833', 'create_time': '2025-08-22 17:11:42', 'foi.order_no': '6332873538833', 'magical': 45123, ...}, {'close_no': '6332873538833', 'create_time': '2025-08-22 17:11:42', 'foi.order_no': '6332873538833', 'magical': 60790, ...}, ...])",
  "statusTrace" : "self = <lingkuan_uat.test_vps.test_vps_masOrderClose.TestVPSMasOrderclose.TestVPStradingOrders5 object at 0x000001A7B6FA34F0>\nvar_manager = <lingkuan_uat.commons.variable_manager.VariableManager object at 0x000001A7B6FBDE50>\ndb_transaction = <pymysql.connections.Connection object at 0x000001A7B7142FA0>\n\n    @allure.title(\"数据库校验-交易平仓-主指令及订单详情数据检查-有订单\")\n    def test_dbquery_orderSendclose(self, var_manager, db_transaction):\n        with allure.step(\"1. 获取订单详情界面跟单账号数据\"):\n            new_user = var_manager.get_variable(\"new_user\")\n            sql = f\"\"\"\n                    SELECT\n                        fod.size,\n                        fod.close_no,\n                        fod.magical,\n                        fod.open_price,\n                        fod.symbol,\n                        fod.order_no,\n                        foi.true_total_lots,\n                        foi.order_no,\n                        foi.operation_type,\n                        foi.create_time,\n                        foi.status,\n                        foi.total_orders\n                    FROM\n                        follow_order_detail fod\n                    INNER JOIN\n                        follow_order_instruct foi\n                    ON\n                        foi.order_no = fod.close_no COLLATE utf8mb4_0900_ai_ci\n                    WHERE foi.operation_type = %s\n                        AND fod.account = %s\n                        \"\"\"\n            params = (\n                '1',\n                new_user[\"account\"],\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n            db_data = self.query_database_with_time(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"foi.create_time\"\n            )\n        with allure.step(\"2. 数据校验\"):\n            if not db_data:\n                pytest.fail(\"数据库查询结果为空，无法提取数据\")\n    \n>           assert len(db_data) == 4, f\"正常平仓，应该有4个平仓订单，结果有{len(db_data)}个订单\"\nE           AssertionError: 正常平仓，应该有4个平仓订单，结果有8个订单\nE           assert 8 == 4\nE            +  where 8 = len([{'close_no': '0470645409987', 'create_time': '2025-08-22 17:12:17', 'foi.order_no': '0470645409987', 'magical': 26509, ...}, {'close_no': '0470645409987', 'create_time': '2025-08-22 17:12:17', 'foi.order_no': '0470645409987', 'magical': 38179, ...}, {'close_no': '0470645409987', 'create_time': '2025-08-22 17:12:17', 'foi.order_no': '0470645409987', 'magical': 29985, ...}, {'close_no': '0470645409987', 'create_time': '2025-08-22 17:12:17', 'foi.order_no': '0470645409987', 'magical': 54215, ...}, {'close_no': '6332873538833', 'create_time': '2025-08-22 17:11:42', 'foi.order_no': '6332873538833', 'magical': 45123, ...}, {'close_no': '6332873538833', 'create_time': '2025-08-22 17:11:42', 'foi.order_no': '6332873538833', 'magical': 60790, ...}, ...])\n\ntest_vps\\test_vps_masOrderClose.py:1616: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "db_transaction",
    "time" : {
      "start" : 1755853955058,
      "stop" : 1755853955058,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db",
    "time" : {
      "start" : 1755853954649,
      "stop" : 1755853955058,
      "duration" : 409
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "description" : "\n    ### 测试说明\n    - 前置条件：有vps策略和vps跟单\n      1. 修改跟单账号，跟单方向-正向\n      2. 进行开仓\n      3. 交易下单-跟单账号自己平仓-sell\n      4. 校验平仓的订单数，应该不等于4\n      5. 交易下单-跟单账号自己平仓-buy\n      6. 校验平仓的订单数,等于4\n    - 预期结果：平仓的订单方向功能正确\n    ",
    "status" : "failed",
    "statusMessage" : "AssertionError: 正常平仓，应该有4个平仓订单，结果有8个订单\nassert 8 == 4\n +  where 8 = len([{'close_no': '0470645409987', 'create_time': '2025-08-22 17:12:17', 'foi.order_no': '0470645409987', 'magical': 26509, ...}, {'close_no': '0470645409987', 'create_time': '2025-08-22 17:12:17', 'foi.order_no': '0470645409987', 'magical': 38179, ...}, {'close_no': '0470645409987', 'create_time': '2025-08-22 17:12:17', 'foi.order_no': '0470645409987', 'magical': 29985, ...}, {'close_no': '0470645409987', 'create_time': '2025-08-22 17:12:17', 'foi.order_no': '0470645409987', 'magical': 54215, ...}, {'close_no': '6332873538833', 'create_time': '2025-08-22 17:11:42', 'foi.order_no': '6332873538833', 'magical': 45123, ...}, {'close_no': '6332873538833', 'create_time': '2025-08-22 17:11:42', 'foi.order_no': '6332873538833', 'magical': 60790, ...}, ...])",
    "statusTrace" : "self = <lingkuan_uat.test_vps.test_vps_masOrderClose.TestVPSMasOrderclose.TestVPStradingOrders5 object at 0x000001A7B6FA34F0>\nvar_manager = <lingkuan_uat.commons.variable_manager.VariableManager object at 0x000001A7B6FBDE50>\ndb_transaction = <pymysql.connections.Connection object at 0x000001A7B7142FA0>\n\n    @allure.title(\"数据库校验-交易平仓-主指令及订单详情数据检查-有订单\")\n    def test_dbquery_orderSendclose(self, var_manager, db_transaction):\n        with allure.step(\"1. 获取订单详情界面跟单账号数据\"):\n            new_user = var_manager.get_variable(\"new_user\")\n            sql = f\"\"\"\n                    SELECT\n                        fod.size,\n                        fod.close_no,\n                        fod.magical,\n                        fod.open_price,\n                        fod.symbol,\n                        fod.order_no,\n                        foi.true_total_lots,\n                        foi.order_no,\n                        foi.operation_type,\n                        foi.create_time,\n                        foi.status,\n                        foi.total_orders\n                    FROM\n                        follow_order_detail fod\n                    INNER JOIN\n                        follow_order_instruct foi\n                    ON\n                        foi.order_no = fod.close_no COLLATE utf8mb4_0900_ai_ci\n                    WHERE foi.operation_type = %s\n                        AND fod.account = %s\n                        \"\"\"\n            params = (\n                '1',\n                new_user[\"account\"],\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n            db_data = self.query_database_with_time(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"foi.create_time\"\n            )\n        with allure.step(\"2. 数据校验\"):\n            if not db_data:\n                pytest.fail(\"数据库查询结果为空，无法提取数据\")\n    \n>           assert len(db_data) == 4, f\"正常平仓，应该有4个平仓订单，结果有{len(db_data)}个订单\"\nE           AssertionError: 正常平仓，应该有4个平仓订单，结果有8个订单\nE           assert 8 == 4\nE            +  where 8 = len([{'close_no': '0470645409987', 'create_time': '2025-08-22 17:12:17', 'foi.order_no': '0470645409987', 'magical': 26509, ...}, {'close_no': '0470645409987', 'create_time': '2025-08-22 17:12:17', 'foi.order_no': '0470645409987', 'magical': 38179, ...}, {'close_no': '0470645409987', 'create_time': '2025-08-22 17:12:17', 'foi.order_no': '0470645409987', 'magical': 29985, ...}, {'close_no': '0470645409987', 'create_time': '2025-08-22 17:12:17', 'foi.order_no': '0470645409987', 'magical': 54215, ...}, {'close_no': '6332873538833', 'create_time': '2025-08-22 17:11:42', 'foi.order_no': '6332873538833', 'magical': 45123, ...}, {'close_no': '6332873538833', 'create_time': '2025-08-22 17:11:42', 'foi.order_no': '6332873538833', 'magical': 60790, ...}, ...])\n\ntest_vps\\test_vps_masOrderClose.py:1616: AssertionError",
    "steps" : [ {
      "name" : "1. 获取订单详情界面跟单账号数据",
      "time" : {
        "start" : 1755853955058,
        "stop" : 1755853955983,
        "duration" : 925
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "数据库查询结果",
        "time" : {
          "start" : 1755853955982,
          "stop" : 1755853955983,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "6501fc5227c79858",
          "name" : "执行SQL",
          "source" : "6501fc5227c79858.txt",
          "type" : "text/plain",
          "size" : 1078
        }, {
          "uid" : "2b86f302eea4c125",
          "name" : "SQL参数",
          "source" : "2b86f302eea4c125.txt",
          "type" : "text/plain",
          "size" : 21
        }, {
          "uid" : "7626a8aaa52f21a0",
          "name" : "查询结果（共8条，显示前50条）",
          "source" : "7626a8aaa52f21a0.json",
          "type" : "application/json",
          "size" : 2627
        } ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "hasContent" : true,
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 3
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 1,
      "hasContent" : true,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 3
    }, {
      "name" : "2. 数据校验",
      "time" : {
        "start" : 1755853955983,
        "stop" : 1755853955984,
        "duration" : 1
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: 正常平仓，应该有4个平仓订单，结果有8个订单\nassert 8 == 4\n +  where 8 = len([{'close_no': '0470645409987', 'create_time': '2025-08-22 17:12:17', 'foi.order_no': '0470645409987', 'magical': 26509, ...}, {'close_no': '0470645409987', 'create_time': '2025-08-22 17:12:17', 'foi.order_no': '0470645409987', 'magical': 38179, ...}, {'close_no': '0470645409987', 'create_time': '2025-08-22 17:12:17', 'foi.order_no': '0470645409987', 'magical': 29985, ...}, {'close_no': '0470645409987', 'create_time': '2025-08-22 17:12:17', 'foi.order_no': '0470645409987', 'magical': 54215, ...}, {'close_no': '6332873538833', 'create_time': '2025-08-22 17:11:42', 'foi.order_no': '6332873538833', 'magical': 45123, ...}, {'close_no': '6332873538833', 'create_time': '2025-08-22 17:11:42', 'foi.order_no': '6332873538833', 'magical': 60790, ...}, ...])\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\lingkuan_uat\\test_vps\\test_vps_masOrderClose.py\", line 1616, in test_dbquery_orderSendclose\n    assert len(db_data) == 4, f\"正常平仓，应该有4个平仓订单，结果有{len(db_data)}个订单\"\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 0
    } ],
    "attachments" : [ {
      "uid" : "a8f616f83e6c529a",
      "name" : "log",
      "source" : "a8f616f83e6c529a.txt",
      "type" : "text/plain",
      "size" : 5213
    } ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 4
  },
  "afterStages" : [ {
    "name" : "db_transaction::0",
    "time" : {
      "start" : 1755853955995,
      "stop" : 1755853955995,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db::0",
    "time" : {
      "start" : 1755853955995,
      "stop" : 1755853955996,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "VPS策略账号交易下单-平仓的功能校验"
  }, {
    "name" : "story",
    "value" : "场景5：平仓的订单方向功能校验-buy"
  }, {
    "name" : "parentSuite",
    "value" : "test_vps"
  }, {
    "name" : "suite",
    "value" : "test_vps_masOrderClose"
  }, {
    "name" : "subSuite",
    "value" : "TestVPSMasOrderclose"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "32068-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_vps.test_vps_masOrderClose"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "c9d044dff39c92c1.json",
  "parameterValues" : [ ]
}