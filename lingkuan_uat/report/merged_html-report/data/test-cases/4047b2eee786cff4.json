{
  "uid" : "4047b2eee786cff4",
  "name" : "数据库校验-策略开仓-主指令及订单详情数据检查",
  "fullName" : "test_vps.test_vps_Leakage_level.TestLeakagelevel#test_dbquery_orderSend",
  "historyId" : "71b10313aadf98a9cd8339733ccec4b6",
  "time" : {
    "start" : 1755512543866,
    "stop" : 1755512553098,
    "duration" : 9232
  },
  "description" : "\n### 用例说明\n- 前置条件：有vps策略和vps跟单\n- 操作步骤：\n  1. 修改vps跟单账号开仓-关闭\n  2. 进行开仓\n  3. 跟单账号开仓失败，有漏单数据，把redis数据和MySQL数据进行校验\n  4. 修改vps跟单账号开仓-开启\n  5. 进行补单操作，然后平仓\n- 预期结果：vps跟单账号开仓-关闭，有漏单数据\n",
  "descriptionHtml" : "<h3>用例说明</h3>\n<ul>\n<li>前置条件：有vps策略和vps跟单</li>\n<li>操作步骤：\n<ol>\n<li>修改vps跟单账号开仓-关闭</li>\n<li>进行开仓</li>\n<li>跟单账号开仓失败，有漏单数据，把redis数据和MySQL数据进行校验</li>\n<li>修改vps跟单账号开仓-开启</li>\n<li>进行补单操作，然后平仓</li>\n</ol>\n</li>\n<li>预期结果：vps跟单账号开仓-关闭，有漏单数据</li>\n</ul>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: 下单总手数是：1.00,订单详情总手数是：2.0\nassert False\n +  where False = <built-in function isclose>(1.0, 2.0, rel_tol=1e-09)\n +    where <built-in function isclose> = math.isclose\n +    and   1.0 = float('1.00')\n +    and   2.0 = float(2.0)",
  "statusTrace" : "self = <lingkuan_uat.test_vps.test_vps_Leakage_level.TestLeakagelevel object at 0x000001DFD46BACD0>\nvar_manager = <lingkuan_uat.commons.variable_manager.VariableManager object at 0x000001DFD4923FD0>\ndb_transaction = <pymysql.connections.Connection object at 0x000001DFD4712040>\n\n    @allure.title(\"数据库校验-策略开仓-主指令及订单详情数据检查\")\n    def test_dbquery_orderSend(self, var_manager, db_transaction):\n        with allure.step(\"1. 获取订单详情界面跟单账号数据\"):\n            new_user = var_manager.get_variable(\"new_user\")\n            sql = f\"\"\"\n                SELECT\n                    fod.size,\n                    fod.send_no,\n                    fod.magical,\n                    fod.open_price,\n                    fod.open_time,\n                    fod.symbol,\n                    fod.order_no,\n                    foi.true_total_lots,\n                    foi.order_no,\n                    foi.operation_type,\n                    foi.create_time,\n                    foi.status,\n                    foi.min_lot_size,\n                    foi.max_lot_size,\n                    foi.total_lots,\n                    foi.total_orders\n                FROM\n                    follow_order_detail fod\n                INNER JOIN\n                    follow_order_instruct foi\n                ON\n                    foi.order_no = fod.send_no COLLATE utf8mb4_0900_ai_ci\n                WHERE foi.operation_type = %s\n                    AND fod.account = %s\n                    \"\"\"\n            params = (\n                '0',\n                new_user[\"account\"],\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n            db_data = self.wait_for_database_record_with_timezone(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"fod.open_time\"\n            )\n        with allure.step(\"2. 数据校验\"):\n            trader_ordersend = var_manager.get_variable(\"trader_ordersend\")\n            if not db_data:\n                pytest.fail(\"数据库查询结果为空，无法提取数据\")\n    \n            status = db_data[0][\"status\"]\n            assert status in (0, 1), f\"订单状态status应为0(处理中)或1(全部成功)，实际状态为: {status}\"\n            logging.info(f\"订单状态status应为0(处理中)或1(全部成功)，实际状态为: {status}\")\n    \n            min_lot_size = db_data[0][\"min_lot_size\"]\n            endsize = trader_ordersend[\"endSize\"]\n            assert math.isclose(float(endsize), float(min_lot_size), rel_tol=1e-9), \\\n                f'手数范围：结束手数是：{endsize}，实际是：{min_lot_size}'\n            logging.info(f'手数范围：结束手数是：{endsize}，实际是：{min_lot_size}')\n    \n            max_lot_size = db_data[0][\"max_lot_size\"]\n            startSize = trader_ordersend[\"startSize\"]\n            assert math.isclose(float(startSize), float(max_lot_size), rel_tol=1e-9), \\\n                f'手数范围：开始手数是：{startSize}，实际是：{max_lot_size}'\n            logging.info(f'手数范围：开始手数是：{startSize}，实际是：{max_lot_size}')\n    \n            total_orders = db_data[0][\"total_orders\"]\n            totalNum = trader_ordersend[\"totalNum\"]\n            assert math.isclose(float(totalNum), float(total_orders), rel_tol=1e-9), \\\n                f'总订单数量是：{totalNum}，实际是：{total_orders}'\n            logging.info(f'总订单数量是：{totalNum}，实际是：{total_orders}')\n    \n            total_lots = db_data[0][\"total_lots\"]\n            totalSzie = trader_ordersend[\"totalSzie\"]\n            assert math.isclose(float(totalSzie), float(total_lots), rel_tol=1e-9), \\\n                f'下单总手数是：{totalSzie}，实际是：{total_lots}'\n            logging.info(f'下单总手数是：{totalSzie}，实际是：{total_lots}')\n    \n            totalSzie = trader_ordersend[\"totalSzie\"]\n            size = [record[\"size\"] for record in db_data]\n            total = sum(size)\n>           assert math.isclose(float(totalSzie), float(total), rel_tol=1e-9), \\\n                f'下单总手数是：{totalSzie},订单详情总手数是：{total}'\nE           AssertionError: 下单总手数是：1.00,订单详情总手数是：2.0\nE           assert False\nE            +  where False = <built-in function isclose>(1.0, 2.0, rel_tol=1e-09)\nE            +    where <built-in function isclose> = math.isclose\nE            +    and   1.0 = float('1.00')\nE            +    and   2.0 = float(2.0)\n\ntest_vps\\test_vps_Leakage_level.py:218: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "db_config",
    "time" : {
      "start" : 1755512053135,
      "stop" : 1755512053135,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db_transaction",
    "time" : {
      "start" : 1755512543821,
      "stop" : 1755512543866,
      "duration" : 45
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "var_manager",
    "time" : {
      "start" : 1755512531970,
      "stop" : 1755512531970,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "test_group",
    "time" : {
      "start" : 1755512050142,
      "stop" : 1755512050142,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "environment",
    "time" : {
      "start" : 1755512050142,
      "stop" : 1755512050142,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db",
    "time" : {
      "start" : 1755512053135,
      "stop" : 1755512053546,
      "duration" : 411
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "description" : "\n### 用例说明\n- 前置条件：有vps策略和vps跟单\n- 操作步骤：\n  1. 修改vps跟单账号开仓-关闭\n  2. 进行开仓\n  3. 跟单账号开仓失败，有漏单数据，把redis数据和MySQL数据进行校验\n  4. 修改vps跟单账号开仓-开启\n  5. 进行补单操作，然后平仓\n- 预期结果：vps跟单账号开仓-关闭，有漏单数据\n",
    "status" : "failed",
    "statusMessage" : "AssertionError: 下单总手数是：1.00,订单详情总手数是：2.0\nassert False\n +  where False = <built-in function isclose>(1.0, 2.0, rel_tol=1e-09)\n +    where <built-in function isclose> = math.isclose\n +    and   1.0 = float('1.00')\n +    and   2.0 = float(2.0)",
    "statusTrace" : "self = <lingkuan_uat.test_vps.test_vps_Leakage_level.TestLeakagelevel object at 0x000001DFD46BACD0>\nvar_manager = <lingkuan_uat.commons.variable_manager.VariableManager object at 0x000001DFD4923FD0>\ndb_transaction = <pymysql.connections.Connection object at 0x000001DFD4712040>\n\n    @allure.title(\"数据库校验-策略开仓-主指令及订单详情数据检查\")\n    def test_dbquery_orderSend(self, var_manager, db_transaction):\n        with allure.step(\"1. 获取订单详情界面跟单账号数据\"):\n            new_user = var_manager.get_variable(\"new_user\")\n            sql = f\"\"\"\n                SELECT\n                    fod.size,\n                    fod.send_no,\n                    fod.magical,\n                    fod.open_price,\n                    fod.open_time,\n                    fod.symbol,\n                    fod.order_no,\n                    foi.true_total_lots,\n                    foi.order_no,\n                    foi.operation_type,\n                    foi.create_time,\n                    foi.status,\n                    foi.min_lot_size,\n                    foi.max_lot_size,\n                    foi.total_lots,\n                    foi.total_orders\n                FROM\n                    follow_order_detail fod\n                INNER JOIN\n                    follow_order_instruct foi\n                ON\n                    foi.order_no = fod.send_no COLLATE utf8mb4_0900_ai_ci\n                WHERE foi.operation_type = %s\n                    AND fod.account = %s\n                    \"\"\"\n            params = (\n                '0',\n                new_user[\"account\"],\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n            db_data = self.wait_for_database_record_with_timezone(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"fod.open_time\"\n            )\n        with allure.step(\"2. 数据校验\"):\n            trader_ordersend = var_manager.get_variable(\"trader_ordersend\")\n            if not db_data:\n                pytest.fail(\"数据库查询结果为空，无法提取数据\")\n    \n            status = db_data[0][\"status\"]\n            assert status in (0, 1), f\"订单状态status应为0(处理中)或1(全部成功)，实际状态为: {status}\"\n            logging.info(f\"订单状态status应为0(处理中)或1(全部成功)，实际状态为: {status}\")\n    \n            min_lot_size = db_data[0][\"min_lot_size\"]\n            endsize = trader_ordersend[\"endSize\"]\n            assert math.isclose(float(endsize), float(min_lot_size), rel_tol=1e-9), \\\n                f'手数范围：结束手数是：{endsize}，实际是：{min_lot_size}'\n            logging.info(f'手数范围：结束手数是：{endsize}，实际是：{min_lot_size}')\n    \n            max_lot_size = db_data[0][\"max_lot_size\"]\n            startSize = trader_ordersend[\"startSize\"]\n            assert math.isclose(float(startSize), float(max_lot_size), rel_tol=1e-9), \\\n                f'手数范围：开始手数是：{startSize}，实际是：{max_lot_size}'\n            logging.info(f'手数范围：开始手数是：{startSize}，实际是：{max_lot_size}')\n    \n            total_orders = db_data[0][\"total_orders\"]\n            totalNum = trader_ordersend[\"totalNum\"]\n            assert math.isclose(float(totalNum), float(total_orders), rel_tol=1e-9), \\\n                f'总订单数量是：{totalNum}，实际是：{total_orders}'\n            logging.info(f'总订单数量是：{totalNum}，实际是：{total_orders}')\n    \n            total_lots = db_data[0][\"total_lots\"]\n            totalSzie = trader_ordersend[\"totalSzie\"]\n            assert math.isclose(float(totalSzie), float(total_lots), rel_tol=1e-9), \\\n                f'下单总手数是：{totalSzie}，实际是：{total_lots}'\n            logging.info(f'下单总手数是：{totalSzie}，实际是：{total_lots}')\n    \n            totalSzie = trader_ordersend[\"totalSzie\"]\n            size = [record[\"size\"] for record in db_data]\n            total = sum(size)\n>           assert math.isclose(float(totalSzie), float(total), rel_tol=1e-9), \\\n                f'下单总手数是：{totalSzie},订单详情总手数是：{total}'\nE           AssertionError: 下单总手数是：1.00,订单详情总手数是：2.0\nE           assert False\nE            +  where False = <built-in function isclose>(1.0, 2.0, rel_tol=1e-09)\nE            +    where <built-in function isclose> = math.isclose\nE            +    and   1.0 = float('1.00')\nE            +    and   2.0 = float(2.0)\n\ntest_vps\\test_vps_Leakage_level.py:218: AssertionError",
    "steps" : [ {
      "name" : "1. 获取订单详情界面跟单账号数据",
      "time" : {
        "start" : 1755512543866,
        "stop" : 1755512553097,
        "duration" : 9231
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "等待数据库记录稳定（时区: +05:00，超时: 30秒）",
        "time" : {
          "start" : 1755512543866,
          "stop" : 1755512543866,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "hasContent" : false,
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 0
      }, {
        "name" : "数据库查询结果（最终稳定结果）",
        "time" : {
          "start" : 1755512553096,
          "stop" : 1755512553097,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "41448cf34eef7234",
          "name" : "执行SQL",
          "source" : "41448cf34eef7234.txt",
          "type" : "text/plain",
          "size" : 933
        }, {
          "uid" : "668eda1e1321025e",
          "name" : "SQL参数",
          "source" : "668eda1e1321025e.txt",
          "type" : "text/plain",
          "size" : 15
        }, {
          "uid" : "baf2f9c4b8bef886",
          "name" : "查询结果（共5条，显示前5条）",
          "source" : "baf2f9c4b8bef886.json",
          "type" : "application/json",
          "size" : 2200
        } ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "hasContent" : true,
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 3
      } ],
      "attachments" : [ {
        "uid" : "d83aed6e5ba7466f",
        "name" : "等待结果",
        "source" : "d83aed6e5ba7466f.txt",
        "type" : "text/plain",
        "size" : 40
      } ],
      "parameters" : [ ],
      "stepsCount" : 2,
      "hasContent" : true,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 4
    }, {
      "name" : "2. 数据校验",
      "time" : {
        "start" : 1755512553097,
        "stop" : 1755512553098,
        "duration" : 1
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: 下单总手数是：1.00,订单详情总手数是：2.0\nassert False\n +  where False = <built-in function isclose>(1.0, 2.0, rel_tol=1e-09)\n +    where <built-in function isclose> = math.isclose\n +    and   1.0 = float('1.00')\n +    and   2.0 = float(2.0)\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\lingkuan_uat\\test_vps\\test_vps_Leakage_level.py\", line 218, in test_dbquery_orderSend\n    assert math.isclose(float(totalSzie), float(total), rel_tol=1e-9), \\\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 0
    } ],
    "attachments" : [ {
      "uid" : "165d9dd62609c5cf",
      "name" : "log",
      "source" : "165d9dd62609c5cf.txt",
      "type" : "text/plain",
      "size" : 11421
    } ],
    "parameters" : [ ],
    "stepsCount" : 4,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 5
  },
  "afterStages" : [ {
    "name" : "db_transaction::0",
    "time" : {
      "start" : 1755512553105,
      "stop" : 1755512553153,
      "duration" : 48
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "var_manager::0",
    "time" : {
      "start" : 1755565029960,
      "stop" : 1755565029961,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db::0",
    "time" : {
      "start" : 1755565029966,
      "stop" : 1755565029966,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "VPS策略下单-漏平"
  }, {
    "name" : "parentSuite",
    "value" : "test_vps"
  }, {
    "name" : "suite",
    "value" : "test_vps_Leakage_level"
  }, {
    "name" : "subSuite",
    "value" : "TestLeakagelevel"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "6824-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_vps.test_vps_Leakage_level"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "4047b2eee786cff4.json",
  "parameterValues" : [ ]
}