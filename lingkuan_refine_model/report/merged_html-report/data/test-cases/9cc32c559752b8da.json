{
  "uid" : "9cc32c559752b8da",
  "name" : "数据库校验-账号管理-交易下单-指令及订单详情数据检查",
  "fullName" : "test_cloudTrader.test_cloudstartegy_addstatus.Testcloudstargy_addstatus#test_dbcloudTrader_cloudOrderSend",
  "historyId" : "c4d1a91e10e79ba13ca61eeaddfcd7d7",
  "time" : {
    "start" : 1755512749237,
    "stop" : 1755512780571,
    "duration" : 31334
  },
  "description" : "\n### 用例说明\n- 前置条件：有云策略和云跟单\n- 操作步骤：\n  1. 修改云策略账号 策略状态为关闭\n  2. 进行开仓\n  3. 跟单账号跟单失败，有漏单数据，把redis数据和MySQL数据进行校验\n  4. 修改云策略 策略状态为开启\n  5. 进行补单操作，然后平仓\n- 预期结果：云策略 策略状态为关闭，有漏单数据\n",
  "descriptionHtml" : "<h3>用例说明</h3>\n<ul>\n<li>前置条件：有云策略和云跟单</li>\n<li>操作步骤：\n<ol>\n<li>修改云策略账号 策略状态为关闭</li>\n<li>进行开仓</li>\n<li>跟单账号跟单失败，有漏单数据，把redis数据和MySQL数据进行校验</li>\n<li>修改云策略 策略状态为开启</li>\n<li>进行补单操作，然后平仓</li>\n</ol>\n</li>\n<li>预期结果：云策略 策略状态为关闭，有漏单数据</li>\n</ul>\n",
  "status" : "broken",
  "statusMessage" : "TimeoutError: 等待超时（30秒），未查询到任何数据。\nSQL: \n                    SELECT \n                        fod.size,\n                        fod.send_no,\n                        fod.magical,\n                        fod.open_price,\n                        fod.symbol,\n                        fod.order_no,\n                        foi.true_total_lots,\n                        foi.order_no,\n                        foi.operation_type,\n                        foi.create_time,\n                        foi.status,\n                        foi.min_lot_size,\n                        foi.max_lot_size,\n                        foi.total_lots,\n                        foi.total_orders\n                    FROM \n                        follow_order_detail fod\n                    INNER JOIN \n                        follow_order_instruct foi \n                    ON \n                        foi.order_no = fod.send_no COLLATE utf8mb4_0900_ai_ci\n                    WHERE foi.operation_type = %s\n                        AND fod.account = %s\n                        \n参数: ('0', '300162')",
  "statusTrace" : "self = <lingkuan_refine_model.test_cloudTrader.test_cloudstartegy_addstatus.Testcloudstargy_addstatus object at 0x000001FC6D350D00>\nvar_manager = <lingkuan_refine_model.commons.variable_manager.VariableManager object at 0x000001FC6D4C4AC0>\ndb_transaction = <pymysql.connections.Connection object at 0x000001FC6D364BB0>\n\n    @allure.title(\"数据库校验-账号管理-交易下单-指令及订单详情数据检查\")\n    def test_dbcloudTrader_cloudOrderSend(self, var_manager, db_transaction):\n        with allure.step(\"1. 获取订单详情界面账号数据\"):\n            cloudTrader_user_accounts_4 = var_manager.get_variable(\"cloudTrader_user_accounts_4\")\n            sql = f\"\"\"\n                    SELECT\n                        fod.size,\n                        fod.send_no,\n                        fod.magical,\n                        fod.open_price,\n                        fod.symbol,\n                        fod.order_no,\n                        foi.true_total_lots,\n                        foi.order_no,\n                        foi.operation_type,\n                        foi.create_time,\n                        foi.status,\n                        foi.min_lot_size,\n                        foi.max_lot_size,\n                        foi.total_lots,\n                        foi.total_orders\n                    FROM\n                        follow_order_detail fod\n                    INNER JOIN\n                        follow_order_instruct foi\n                    ON\n                        foi.order_no = fod.send_no COLLATE utf8mb4_0900_ai_ci\n                    WHERE foi.operation_type = %s\n                        AND fod.account = %s\n                        \"\"\"\n            params = (\n                '0',\n                cloudTrader_user_accounts_4,\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n>           db_data = self.wait_for_database_record(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"foi.create_time\",\n            )\n\ntest_cloudTrader\\test_cloudstartegy_addstatus.py:375: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_refine_model.test_cloudTrader.test_cloudstartegy_addstatus.Testcloudstargy_addstatus object at 0x000001FC6D350D00>\ndb_transaction = <pymysql.connections.Connection object at 0x000001FC6D364BB0>\nsql = '\\n                    SELECT \\n                        fod.size,\\n                        fod.send_no,\\n             ...                 WHERE foi.operation_type = %s\\n                        AND fod.account = %s\\n                        '\nparams = ('0', '300162'), time_field = 'foi.create_time', time_range = 1\norder_by = 'create_time DESC', timeout = 30, poll_interval = 2\nstable_period = 3\n\n    def wait_for_database_record(\n            self,\n            db_transaction: pymysql.connections.Connection,\n            sql: str,\n            params: tuple = (),\n            time_field: Optional[str] = None,\n            time_range: int = MYSQL_TIME,\n            order_by: str = \"create_time DESC\",\n            timeout: int = WAIT_TIMEOUT,\n            poll_interval: int = POLL_INTERVAL,\n            stable_period: int = STBLE_PERIOD\n    ) -> List[Dict[str, Any]]:\n        \"\"\"轮询等待数据库记录出现（等待数据稳定）\"\"\"\n        import time\n        start_time = time.time()\n        last_result = None\n        stable_start_time = None\n        has_data = False  # 标记是否查询到过数据\n        final_result = None  # 存储最终稳定结果\n    \n        logger.info(\n            f\"[{self._get_current_time()}] 开始等待数据库记录稳定 | \"\n            f\"SQL: {sql[:200]} | \"\n            f\"超时: {timeout}秒 | \"\n            f\"稳定期: {stable_period}秒\"\n        )\n        with allure.step(f\"等待数据库记录稳定（超时: {timeout}秒，稳定期: {stable_period}秒）\"):\n            pass  # 保持空块，仅用于显示步骤\n    \n        while time.time() - start_time < timeout:\n            try:\n                db_transaction.commit()  # 刷新事务\n                # 轮询过程中不附加到报告\n                result = self._execute_query(\n                    db_transaction, sql, params, time_field, order_by, time_range,\n                    attach_to_allure=False\n                )\n    \n                # 检查是否有数据\n                if len(result) > 0:\n                    has_data = True\n                    # 判断结果是否稳定（数量和内容都不变）\n                    if self._is_result_stable(result, last_result):\n                        if stable_start_time is None:\n                            stable_start_time = time.time()\n                            logger.debug(f\"[{self._get_current_time()}] 数据首次稳定，开始计时\")\n                        elif time.time() - stable_start_time >= stable_period:\n                            final_result = result  # 记录最终稳定结果\n                            logger.info(\n                                f\"[{self._get_current_time()}] 数据已稳定{stable_period}秒（耗时{time.time() - start_time:.1f}秒）| \"\n                                f\"结果数: {len(result)}\"\n                            )\n                            allure.attach(\n                                f\"数据已稳定{stable_period}秒（总耗时{time.time() - start_time:.1f}秒）\",\n                                \"等待结果\",\n                                allure.attachment_type.TEXT\n                            )\n                            break  # 数据稳定，跳出轮询\n                    else:\n                        stable_start_time = None  # 结果变化，重置稳定计时器\n                        logger.debug(f\"[{self._get_current_time()}] 数据仍在变化，重置稳定计时器\")\n                else:\n                    # 结果为空，重置稳定计时器\n                    stable_start_time = None\n                    has_data = False\n                    logger.debug(f\"[{self._get_current_time()}] 查询结果为空，继续等待\")\n    \n                last_result = result\n                elapsed = time.time() - start_time\n                logger.debug(\n                    f\"[{self._get_current_time()}] 等待数据稳定（已等待{elapsed:.1f}秒）| \"\n                    f\"当前结果数: {len(result)} | \"\n                    f\"稳定时间: {time.time() - stable_start_time if stable_start_time else 0:.1f}/{stable_period}秒\"\n                )\n                time.sleep(poll_interval)\n    \n            except Exception as e:\n                logger.warning(f\"[{self._get_current_time()}] 轮询查询异常: {str(e)} | 继续等待...\")\n                time.sleep(poll_interval)\n    \n        # 超时处理\n        if final_result is None:\n            # 最后一次查询附加到报告\n            final_result = self._execute_query(\n                db_transaction, sql, params, time_field, order_by, time_range\n            )\n    \n        # 轮询结束后附加最终结果到报告\n        display_count = min(len(final_result), 50)\n        with allure.step(\"数据库查询结果（最终稳定结果）\"):\n            allure.attach(sql, \"执行SQL\", allure.attachment_type.TEXT)\n            allure.attach(str(params), \"SQL参数\", allure.attachment_type.TEXT)\n            allure.attach(\n                self.serialize_data(final_result[:display_count]),\n                f\"查询结果（共{len(final_result)}条，显示前{display_count}条）\",\n                allure.attachment_type.JSON\n            )\n    \n        # 判断是否超时\n        if len(final_result) == 0:\n            error_msg = (\n                f\"等待超时（{timeout}秒），未查询到任何数据。\\n\"\n                f\"SQL: {sql}\\n\"\n                f\"参数: {params}\"\n            )\n>           raise TimeoutError(error_msg)\nE           TimeoutError: 等待超时（30秒），未查询到任何数据。\nE           SQL: \nE                               SELECT \nE                                   fod.size,\nE                                   fod.send_no,\nE                                   fod.magical,\nE                                   fod.open_price,\nE                                   fod.symbol,\nE                                   fod.order_no,\nE                                   foi.true_total_lots,\nE                                   foi.order_no,\nE                                   foi.operation_type,\nE                                   foi.create_time,\nE                                   foi.status,\nE                                   foi.min_lot_size,\nE                                   foi.max_lot_size,\nE                                   foi.total_lots,\nE                                   foi.total_orders\nE                               FROM \nE                                   follow_order_detail fod\nE                               INNER JOIN \nE                                   follow_order_instruct foi \nE                               ON \nE                                   foi.order_no = fod.send_no COLLATE utf8mb4_0900_ai_ci\nE                               WHERE foi.operation_type = %s\nE                                   AND fod.account = %s\nE                                   \nE           参数: ('0', '300162')\n\ncommons\\api_base.py:684: TimeoutError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "db_transaction",
    "time" : {
      "start" : 1755512749191,
      "stop" : 1755512749237,
      "duration" : 46
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "environment",
    "time" : {
      "start" : 1755512050295,
      "stop" : 1755512050295,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db_config",
    "time" : {
      "start" : 1755512053639,
      "stop" : 1755512053639,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db",
    "time" : {
      "start" : 1755512053639,
      "stop" : 1755512054053,
      "duration" : 414
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "var_manager",
    "time" : {
      "start" : 1755512680926,
      "stop" : 1755512680927,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "test_group",
    "time" : {
      "start" : 1755512050295,
      "stop" : 1755512050295,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "description" : "\n### 用例说明\n- 前置条件：有云策略和云跟单\n- 操作步骤：\n  1. 修改云策略账号 策略状态为关闭\n  2. 进行开仓\n  3. 跟单账号跟单失败，有漏单数据，把redis数据和MySQL数据进行校验\n  4. 修改云策略 策略状态为开启\n  5. 进行补单操作，然后平仓\n- 预期结果：云策略 策略状态为关闭，有漏单数据\n",
    "status" : "broken",
    "statusMessage" : "TimeoutError: 等待超时（30秒），未查询到任何数据。\nSQL: \n                    SELECT \n                        fod.size,\n                        fod.send_no,\n                        fod.magical,\n                        fod.open_price,\n                        fod.symbol,\n                        fod.order_no,\n                        foi.true_total_lots,\n                        foi.order_no,\n                        foi.operation_type,\n                        foi.create_time,\n                        foi.status,\n                        foi.min_lot_size,\n                        foi.max_lot_size,\n                        foi.total_lots,\n                        foi.total_orders\n                    FROM \n                        follow_order_detail fod\n                    INNER JOIN \n                        follow_order_instruct foi \n                    ON \n                        foi.order_no = fod.send_no COLLATE utf8mb4_0900_ai_ci\n                    WHERE foi.operation_type = %s\n                        AND fod.account = %s\n                        \n参数: ('0', '300162')",
    "statusTrace" : "self = <lingkuan_refine_model.test_cloudTrader.test_cloudstartegy_addstatus.Testcloudstargy_addstatus object at 0x000001FC6D350D00>\nvar_manager = <lingkuan_refine_model.commons.variable_manager.VariableManager object at 0x000001FC6D4C4AC0>\ndb_transaction = <pymysql.connections.Connection object at 0x000001FC6D364BB0>\n\n    @allure.title(\"数据库校验-账号管理-交易下单-指令及订单详情数据检查\")\n    def test_dbcloudTrader_cloudOrderSend(self, var_manager, db_transaction):\n        with allure.step(\"1. 获取订单详情界面账号数据\"):\n            cloudTrader_user_accounts_4 = var_manager.get_variable(\"cloudTrader_user_accounts_4\")\n            sql = f\"\"\"\n                    SELECT\n                        fod.size,\n                        fod.send_no,\n                        fod.magical,\n                        fod.open_price,\n                        fod.symbol,\n                        fod.order_no,\n                        foi.true_total_lots,\n                        foi.order_no,\n                        foi.operation_type,\n                        foi.create_time,\n                        foi.status,\n                        foi.min_lot_size,\n                        foi.max_lot_size,\n                        foi.total_lots,\n                        foi.total_orders\n                    FROM\n                        follow_order_detail fod\n                    INNER JOIN\n                        follow_order_instruct foi\n                    ON\n                        foi.order_no = fod.send_no COLLATE utf8mb4_0900_ai_ci\n                    WHERE foi.operation_type = %s\n                        AND fod.account = %s\n                        \"\"\"\n            params = (\n                '0',\n                cloudTrader_user_accounts_4,\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n>           db_data = self.wait_for_database_record(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"foi.create_time\",\n            )\n\ntest_cloudTrader\\test_cloudstartegy_addstatus.py:375: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_refine_model.test_cloudTrader.test_cloudstartegy_addstatus.Testcloudstargy_addstatus object at 0x000001FC6D350D00>\ndb_transaction = <pymysql.connections.Connection object at 0x000001FC6D364BB0>\nsql = '\\n                    SELECT \\n                        fod.size,\\n                        fod.send_no,\\n             ...                 WHERE foi.operation_type = %s\\n                        AND fod.account = %s\\n                        '\nparams = ('0', '300162'), time_field = 'foi.create_time', time_range = 1\norder_by = 'create_time DESC', timeout = 30, poll_interval = 2\nstable_period = 3\n\n    def wait_for_database_record(\n            self,\n            db_transaction: pymysql.connections.Connection,\n            sql: str,\n            params: tuple = (),\n            time_field: Optional[str] = None,\n            time_range: int = MYSQL_TIME,\n            order_by: str = \"create_time DESC\",\n            timeout: int = WAIT_TIMEOUT,\n            poll_interval: int = POLL_INTERVAL,\n            stable_period: int = STBLE_PERIOD\n    ) -> List[Dict[str, Any]]:\n        \"\"\"轮询等待数据库记录出现（等待数据稳定）\"\"\"\n        import time\n        start_time = time.time()\n        last_result = None\n        stable_start_time = None\n        has_data = False  # 标记是否查询到过数据\n        final_result = None  # 存储最终稳定结果\n    \n        logger.info(\n            f\"[{self._get_current_time()}] 开始等待数据库记录稳定 | \"\n            f\"SQL: {sql[:200]} | \"\n            f\"超时: {timeout}秒 | \"\n            f\"稳定期: {stable_period}秒\"\n        )\n        with allure.step(f\"等待数据库记录稳定（超时: {timeout}秒，稳定期: {stable_period}秒）\"):\n            pass  # 保持空块，仅用于显示步骤\n    \n        while time.time() - start_time < timeout:\n            try:\n                db_transaction.commit()  # 刷新事务\n                # 轮询过程中不附加到报告\n                result = self._execute_query(\n                    db_transaction, sql, params, time_field, order_by, time_range,\n                    attach_to_allure=False\n                )\n    \n                # 检查是否有数据\n                if len(result) > 0:\n                    has_data = True\n                    # 判断结果是否稳定（数量和内容都不变）\n                    if self._is_result_stable(result, last_result):\n                        if stable_start_time is None:\n                            stable_start_time = time.time()\n                            logger.debug(f\"[{self._get_current_time()}] 数据首次稳定，开始计时\")\n                        elif time.time() - stable_start_time >= stable_period:\n                            final_result = result  # 记录最终稳定结果\n                            logger.info(\n                                f\"[{self._get_current_time()}] 数据已稳定{stable_period}秒（耗时{time.time() - start_time:.1f}秒）| \"\n                                f\"结果数: {len(result)}\"\n                            )\n                            allure.attach(\n                                f\"数据已稳定{stable_period}秒（总耗时{time.time() - start_time:.1f}秒）\",\n                                \"等待结果\",\n                                allure.attachment_type.TEXT\n                            )\n                            break  # 数据稳定，跳出轮询\n                    else:\n                        stable_start_time = None  # 结果变化，重置稳定计时器\n                        logger.debug(f\"[{self._get_current_time()}] 数据仍在变化，重置稳定计时器\")\n                else:\n                    # 结果为空，重置稳定计时器\n                    stable_start_time = None\n                    has_data = False\n                    logger.debug(f\"[{self._get_current_time()}] 查询结果为空，继续等待\")\n    \n                last_result = result\n                elapsed = time.time() - start_time\n                logger.debug(\n                    f\"[{self._get_current_time()}] 等待数据稳定（已等待{elapsed:.1f}秒）| \"\n                    f\"当前结果数: {len(result)} | \"\n                    f\"稳定时间: {time.time() - stable_start_time if stable_start_time else 0:.1f}/{stable_period}秒\"\n                )\n                time.sleep(poll_interval)\n    \n            except Exception as e:\n                logger.warning(f\"[{self._get_current_time()}] 轮询查询异常: {str(e)} | 继续等待...\")\n                time.sleep(poll_interval)\n    \n        # 超时处理\n        if final_result is None:\n            # 最后一次查询附加到报告\n            final_result = self._execute_query(\n                db_transaction, sql, params, time_field, order_by, time_range\n            )\n    \n        # 轮询结束后附加最终结果到报告\n        display_count = min(len(final_result), 50)\n        with allure.step(\"数据库查询结果（最终稳定结果）\"):\n            allure.attach(sql, \"执行SQL\", allure.attachment_type.TEXT)\n            allure.attach(str(params), \"SQL参数\", allure.attachment_type.TEXT)\n            allure.attach(\n                self.serialize_data(final_result[:display_count]),\n                f\"查询结果（共{len(final_result)}条，显示前{display_count}条）\",\n                allure.attachment_type.JSON\n            )\n    \n        # 判断是否超时\n        if len(final_result) == 0:\n            error_msg = (\n                f\"等待超时（{timeout}秒），未查询到任何数据。\\n\"\n                f\"SQL: {sql}\\n\"\n                f\"参数: {params}\"\n            )\n>           raise TimeoutError(error_msg)\nE           TimeoutError: 等待超时（30秒），未查询到任何数据。\nE           SQL: \nE                               SELECT \nE                                   fod.size,\nE                                   fod.send_no,\nE                                   fod.magical,\nE                                   fod.open_price,\nE                                   fod.symbol,\nE                                   fod.order_no,\nE                                   foi.true_total_lots,\nE                                   foi.order_no,\nE                                   foi.operation_type,\nE                                   foi.create_time,\nE                                   foi.status,\nE                                   foi.min_lot_size,\nE                                   foi.max_lot_size,\nE                                   foi.total_lots,\nE                                   foi.total_orders\nE                               FROM \nE                                   follow_order_detail fod\nE                               INNER JOIN \nE                                   follow_order_instruct foi \nE                               ON \nE                                   foi.order_no = fod.send_no COLLATE utf8mb4_0900_ai_ci\nE                               WHERE foi.operation_type = %s\nE                                   AND fod.account = %s\nE                                   \nE           参数: ('0', '300162')\n\ncommons\\api_base.py:684: TimeoutError",
    "steps" : [ {
      "name" : "1. 获取订单详情界面账号数据",
      "time" : {
        "start" : 1755512749238,
        "stop" : 1755512780570,
        "duration" : 31332
      },
      "status" : "broken",
      "statusMessage" : "TimeoutError: 等待超时（30秒），未查询到任何数据。\nSQL: \n                    SELECT \n                        fod.size,\n                        fod.send_no,\n                        fod.magical,\n                        fod.open_price,\n                        fod.symbol,\n                        fod.order_no,\n                        foi.true_total_lots,\n                        foi.order_no,\n                        foi.operation_type,\n                        foi.create_time,\n                        foi.status,\n                        foi.min_lot_size,\n                        foi.max_lot_size,\n                        foi.total_lots,\n                        foi.total_orders\n                    FROM \n                        follow_order_detail fod\n                    INNER JOIN \n                        follow_order_instruct foi \n                    ON \n                        foi.order_no = fod.send_no COLLATE utf8mb4_0900_ai_ci\n                    WHERE foi.operation_type = %s\n                        AND fod.account = %s\n                        \n参数: ('0', '300162')\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\lingkuan_refine_model\\test_cloudTrader\\test_cloudstartegy_addstatus.py\", line 375, in test_dbcloudTrader_cloudOrderSend\n    db_data = self.wait_for_database_record(\n  File \"D:\\pycharm_test\\lingkuan_refine_model\\commons\\api_base.py\", line 684, in wait_for_database_record\n    raise TimeoutError(error_msg)\n",
      "steps" : [ {
        "name" : "等待数据库记录稳定（超时: 30秒，稳定期: 3秒）",
        "time" : {
          "start" : 1755512749238,
          "stop" : 1755512749238,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "hasContent" : false,
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 0
      }, {
        "name" : "数据库查询结果",
        "time" : {
          "start" : 1755512780568,
          "stop" : 1755512780569,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "bb7922e744f23a8b",
          "name" : "执行SQL",
          "source" : "bb7922e744f23a8b.txt",
          "type" : "text/plain",
          "size" : 1112
        }, {
          "uid" : "7df781215d8d783e",
          "name" : "SQL参数",
          "source" : "7df781215d8d783e.txt",
          "type" : "text/plain",
          "size" : 21
        }, {
          "uid" : "a6a6329948d9b2fb",
          "name" : "查询结果（共0条，显示前0条）",
          "source" : "a6a6329948d9b2fb.json",
          "type" : "application/json",
          "size" : 2
        } ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "hasContent" : true,
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 3
      }, {
        "name" : "数据库查询结果（最终稳定结果）",
        "time" : {
          "start" : 1755512780569,
          "stop" : 1755512780570,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "8f25fcd6cb6ded41",
          "name" : "执行SQL",
          "source" : "8f25fcd6cb6ded41.txt",
          "type" : "text/plain",
          "size" : 998
        }, {
          "uid" : "c1952841fe806f46",
          "name" : "SQL参数",
          "source" : "c1952841fe806f46.txt",
          "type" : "text/plain",
          "size" : 15
        }, {
          "uid" : "784fa6d4fc37850e",
          "name" : "查询结果（共0条，显示前0条）",
          "source" : "784fa6d4fc37850e.json",
          "type" : "application/json",
          "size" : 2
        } ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "hasContent" : true,
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 3
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 3,
      "hasContent" : true,
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 6
    } ],
    "attachments" : [ {
      "uid" : "9d8758013a167c6b",
      "name" : "log",
      "source" : "9d8758013a167c6b.txt",
      "type" : "text/plain",
      "size" : 21384
    } ],
    "parameters" : [ ],
    "stepsCount" : 4,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 7
  },
  "afterStages" : [ {
    "name" : "db_transaction::0",
    "time" : {
      "start" : 1755512780691,
      "stop" : 1755512780738,
      "duration" : 47
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db::0",
    "time" : {
      "start" : 1755565008475,
      "stop" : 1755565008475,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "var_manager::0",
    "time" : {
      "start" : 1755565008469,
      "stop" : 1755565008470,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "交易下单-云策略复制下单-策略账号-策略状态关闭"
  }, {
    "name" : "parentSuite",
    "value" : "test_cloudTrader"
  }, {
    "name" : "suite",
    "value" : "test_cloudstartegy_addstatus"
  }, {
    "name" : "subSuite",
    "value" : "Testcloudstargy_addstatus"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "20452-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_cloudTrader.test_cloudstartegy_addstatus"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "9cc32c559752b8da.json",
  "parameterValues" : [ ]
}