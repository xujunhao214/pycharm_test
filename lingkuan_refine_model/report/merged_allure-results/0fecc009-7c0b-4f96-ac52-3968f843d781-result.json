{"name": "数据库校验-策略备注生效", "status": "broken", "statusDetails": {"message": "pymysql.err.OperationalError: (1052, \"Column 'create_time' in order clause is ambiguous\")", "trace": "self = <lingkuan_refine_model.test_cloudTrader.test_cloudfixed_annotations.TestCloudStrategyOrderRemark object at 0x000001FC6D350970>\nvar_manager = <lingkuan_refine_model.commons.variable_manager.VariableManager object at 0x000001FC6D833280>\ndb_transaction = <pymysql.connections.Connection object at 0x000001FC6D364BB0>\n\n    @allure.story(\"场景一：策略有固定注释，跟单无固定注释\")\n    @allure.title(\"数据库校验-策略备注生效\")\n    def test_scenario1_verify_remark(self, var_manager, db_transaction):\n        with allure.step(\"查询订单备注信息\"):\n            cloudTrader_user_accounts_4 = var_manager.get_variable(\"cloudTrader_user_accounts_4\")\n            sql = \"\"\"\n                SELECT fod.comment\n                FROM follow_order_detail fod\n                INNER JOIN follow_order_instruct foi\n                    ON foi.order_no = fod.send_no COLLATE utf8mb4_0900_ai_ci\n                WHERE foi.operation_type = %s AND fod.account = %s\n            \"\"\"\n            params = ('0', cloudTrader_user_accounts_4)\n    \n>           db_data = self.wait_for_database_record(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"foi.create_time\"\n            )\n\ntest_cloudTrader\\test_cloudfixed_annotations.py:150: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommons\\api_base.py:662: in wait_for_database_record\n    final_result = self._execute_query(\ncommons\\api_base.py:708: in _execute_query\n    return self.query_database_with_time(\ncommons\\api_base.py:480: in query_database_with_time\n    return self.query_database(\ncommons\\api_base.py:398: in query_database\n    cursor.execute(final_sql, params)\n..\\venv\\lib\\site-packages\\pymysql\\cursors.py:153: in execute\n    result = self._query(query)\n..\\venv\\lib\\site-packages\\pymysql\\cursors.py:322: in _query\n    conn.query(q)\n..\\venv\\lib\\site-packages\\pymysql\\connections.py:563: in query\n    self._affected_rows = self._read_query_result(unbuffered=unbuffered)\n..\\venv\\lib\\site-packages\\pymysql\\connections.py:825: in _read_query_result\n    result.read()\n..\\venv\\lib\\site-packages\\pymysql\\connections.py:1199: in read\n    first_packet = self.connection._read_packet()\n..\\venv\\lib\\site-packages\\pymysql\\connections.py:775: in _read_packet\n    packet.raise_for_error()\n..\\venv\\lib\\site-packages\\pymysql\\protocol.py:219: in raise_for_error\n    err.raise_mysql_exception(self._data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = b\"\\xff\\x1c\\x04#23000Column 'create_time' in order clause is ambiguous\"\n\n    def raise_mysql_exception(data):\n        errno = struct.unpack(\"<h\", data[1:3])[0]\n        # https://dev.mysql.com/doc/dev/mysql-server/latest/page_protocol_basic_err_packet.html\n        # Error packet has optional sqlstate that is 5 bytes and starts with '#'.\n        if data[3] == 0x23:  # '#'\n            # sqlstate = data[4:9].decode()\n            # TODO: Append (sqlstate) in the error message. This will be come in next minor release.\n            errval = data[9:].decode(\"utf-8\", \"replace\")\n        else:\n            errval = data[3:].decode(\"utf-8\", \"replace\")\n        errorclass = error_map.get(errno)\n        if errorclass is None:\n            errorclass = InternalError if errno < 1000 else OperationalError\n>       raise errorclass(errno, errval)\nE       pymysql.err.OperationalError: (1052, \"Column 'create_time' in order clause is ambiguous\")\n\n..\\venv\\lib\\site-packages\\pymysql\\err.py:150: OperationalError"}, "description": "\n### 测试说明\n包含三种云策略订单备注场景的完整测试流程：\n1. 场景一：策略有固定注释，跟单无固定注释 → 预期取策略备注\n2. 场景二：策略有固定注释，跟单有固定注释 → 预期取跟单备注\n3. 场景三：策略开启订单备注，跟单无固定注释 → 预期取开仓备注\n", "steps": [{"name": "查询订单备注信息", "status": "broken", "statusDetails": {"message": "pymysql.err.OperationalError: (1052, \"Column 'create_time' in order clause is ambiguous\")\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_refine_model\\test_cloudTrader\\test_cloudfixed_annotations.py\", line 150, in test_scenario1_verify_remark\n    db_data = self.wait_for_database_record(\n  File \"D:\\pycharm_test\\lingkuan_refine_model\\commons\\api_base.py\", line 662, in wait_for_database_record\n    final_result = self._execute_query(\n  File \"D:\\pycharm_test\\lingkuan_refine_model\\commons\\api_base.py\", line 708, in _execute_query\n    return self.query_database_with_time(\n  File \"D:\\pycharm_test\\lingkuan_refine_model\\commons\\api_base.py\", line 480, in query_database_with_time\n    return self.query_database(\n  File \"D:\\pycharm_test\\lingkuan_refine_model\\commons\\api_base.py\", line 398, in query_database\n    cursor.execute(final_sql, params)\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\pymysql\\cursors.py\", line 153, in execute\n    result = self._query(query)\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\pymysql\\cursors.py\", line 322, in _query\n    conn.query(q)\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\pymysql\\connections.py\", line 563, in query\n    self._affected_rows = self._read_query_result(unbuffered=unbuffered)\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\pymysql\\connections.py\", line 825, in _read_query_result\n    result.read()\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\pymysql\\connections.py\", line 1199, in read\n    first_packet = self.connection._read_packet()\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\pymysql\\connections.py\", line 775, in _read_packet\n    packet.raise_for_error()\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\pymysql\\protocol.py\", line 219, in raise_for_error\n    err.raise_mysql_exception(self._data)\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\pymysql\\err.py\", line 150, in raise_mysql_exception\n    raise errorclass(errno, errval)\n"}, "steps": [{"name": "等待数据库记录稳定（超时: 30秒，稳定期: 3秒）", "status": "passed", "start": 1755512933297, "stop": 1755512933297}], "attachments": [{"name": "数据库异常", "source": "94c9b540-9094-4c8d-b449-34303cbd2850-attachment.txt", "type": "text/plain"}, {"name": "数据库异常", "source": "05d296b2-8baf-48c6-9c77-7422880e69a1-attachment.txt", "type": "text/plain"}, {"name": "数据库异常", "source": "aed66998-7951-45cf-b294-286a36b802ec-attachment.txt", "type": "text/plain"}, {"name": "数据库异常", "source": "4b378189-c0d2-42df-b02b-7b96c13db158-attachment.txt", "type": "text/plain"}, {"name": "数据库异常", "source": "05b50f6d-27f3-4908-9ac6-95c0ba689556-attachment.txt", "type": "text/plain"}, {"name": "数据库异常", "source": "2688d2d8-25c3-4fa8-8620-8594261b4525-attachment.txt", "type": "text/plain"}, {"name": "数据库异常", "source": "236b6ecc-fe0b-448e-b670-c91be06b2afc-attachment.txt", "type": "text/plain"}, {"name": "数据库异常", "source": "2e49ff6b-ccb1-472e-9429-6db94e9bd5f5-attachment.txt", "type": "text/plain"}, {"name": "数据库异常", "source": "5137fe3f-c260-41c8-8220-01a70cea11ed-attachment.txt", "type": "text/plain"}, {"name": "数据库异常", "source": "a575d50f-fde5-4e60-8d0d-1739d305d322-attachment.txt", "type": "text/plain"}, {"name": "数据库异常", "source": "ce4aa9a9-8be0-4624-8fab-516e139dab8d-attachment.txt", "type": "text/plain"}, {"name": "数据库异常", "source": "e3b84784-28ad-4965-a673-c0ff983005d6-attachment.txt", "type": "text/plain"}, {"name": "数据库异常", "source": "30121e39-1889-4298-bfde-5b1ecd5b403b-attachment.txt", "type": "text/plain"}, {"name": "数据库异常", "source": "a20bd02a-f7c7-4eba-85d7-da79baa79a67-attachment.txt", "type": "text/plain"}, {"name": "数据库异常", "source": "4844fff3-908d-4bff-a72e-33c699492429-attachment.txt", "type": "text/plain"}, {"name": "数据库异常", "source": "4482d0c0-1a71-45de-8427-702e30082d61-attachment.txt", "type": "text/plain"}], "start": 1755512933297, "stop": 1755512964912}], "attachments": [{"name": "log", "source": "21532307-d64d-4e07-8fe9-3311af87244c-attachment.txt", "type": "text/plain"}], "start": 1755512933297, "stop": 1755512964913, "uuid": "96c103a8-0a7c-4fec-a133-cd1917b9b2a8", "historyId": "815ed9c3163be55dd91c2b56bceafa23", "testCaseId": "815ed9c3163be55dd91c2b56bceafa23", "fullName": "test_cloudTrader.test_cloudfixed_annotations.TestCloudStrategyOrderRemark#test_scenario1_verify_remark", "labels": [{"name": "feature", "value": "云策略交易下单-跟随策略账号订单备注（三种情况汇总）"}, {"name": "story", "value": "场景一：策略有固定注释，跟单无固定注释"}, {"name": "parentSuite", "value": "test_cloudTrader"}, {"name": "suite", "value": "test_cloudfixed_annotations"}, {"name": "subSuite", "value": "TestCloudStrategyOrderRemark"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "20452-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cloudTrader.test_cloudfixed_annotations"}]}