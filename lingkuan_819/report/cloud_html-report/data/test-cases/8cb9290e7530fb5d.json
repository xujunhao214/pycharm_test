{
  "uid" : "8cb9290e7530fb5d",
  "name" : "数据库校验-复制下单平仓数据-数据校验",
  "fullName" : "test_cloudTrader.test_cloudOrderClose.TestMasOrderSend3#test_copy_verify_close_db2",
  "historyId" : "63ead32e25f6f37275c8189550ac3b61",
  "time" : {
    "start" : 1755744125669,
    "stop" : 1755744132101,
    "duration" : 6432
  },
  "description" : "\n    ### 测试说明\n    - 前置条件：有云策略和云跟单\n      1. 进行开仓，手数范围0.1-1，总订单3，总手数1\n      2. 平仓-订单方向-sell，平仓失败\n      3. 校验数据库是否有未平仓订单-应该没有\n      4. 平仓-订单方向-buy sell，平仓成功\n      5. 校验订单数据是否正确\n    - 预期结果：平仓的订单方向功能正确\n    ",
  "descriptionHtml" : "<pre><code>### 测试说明\n- 前置条件：有云策略和云跟单\n  1. 进行开仓，手数范围0.1-1，总订单3，总手数1\n  2. 平仓-订单方向-sell，平仓失败\n  3. 校验数据库是否有未平仓订单-应该没有\n  4. 平仓-订单方向-buy sell，平仓成功\n  5. 校验订单数据是否正确\n- 预期结果：平仓的订单方向功能正确\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: 复制平仓总手数不匹配，预期: 1.00, 实际: 2.0\nassert False\n +  where False = <built-in function isclose>(1.0, 2.0, rel_tol=1e-09, abs_tol=1e-09)\n +    where <built-in function isclose> = math.isclose\n +    and   1.0 = float('1.00')\n +    and   2.0 = float(2.0)",
  "statusTrace" : "self = <lingkuan_819.test_cloudTrader.test_cloudOrderClose.TestCloudFollowDirection.TestMasOrderSend3 object at 0x0000025603DCBC10>\nvar_manager = <lingkuan_819.commons.variable_manager.VariableManager object at 0x0000025603ECD3A0>\ndb_transaction = <pymysql.connections.Connection object at 0x0000025603EA2F70>\n\n    @allure.title(\"数据库校验-复制下单平仓数据-数据校验\")\n    def test_copy_verify_close_db2(self, var_manager, db_transaction):\n        \"\"\"验证复制下单平仓后数据库中的订单数据正确性\"\"\"\n        with allure.step(\"查询复制平仓订单数据\"):\n            cloudTrader_user_accounts_4 = var_manager.get_variable(\"cloudTrader_user_accounts_4\")\n            cloudTrader_vps_ids_3 = var_manager.get_variable(\"cloudTrader_vps_ids_3\")\n    \n            sql = \"\"\"\n                       SELECT\n                           fod.size,\n                           fod.close_no,\n                           fod.magical,\n                           fod.open_price,\n                           fod.symbol,\n                           fod.order_no,\n                           foi.true_total_lots,\n                           foi.order_no,\n                           foi.operation_type,\n                           foi.create_time,\n                           foi.status,\n                           foi.min_lot_size,\n                           foi.max_lot_size,\n                           foi.total_lots,\n                           foi.master_order,\n                           foi.total_orders\n                       FROM\n                           follow_order_detail fod\n                       INNER JOIN\n                           follow_order_instruct foi\n                       ON\n                           foi.order_no = fod.close_no COLLATE utf8mb4_0900_ai_ci\n                       WHERE foi.operation_type = %s\n                           AND fod.account = %s\n                           AND fod.trader_id = %s\n                   \"\"\"\n            params = ('1', cloudTrader_user_accounts_4, cloudTrader_vps_ids_3)\n    \n            # 轮询等待数据库记录\n            db_data = self.wait_for_database_record_with_timezone(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"fod.close_time\"\n            )\n    \n        with allure.step(\"执行复制平仓数据校验-有订单\"):\n            trader_ordersend = var_manager.get_variable(\"trader_ordersend\")\n            if not db_data:\n                pytest.fail(\"数据库查询结果为空，无法进行复制平仓校验\")\n    \n            # 平仓总手数校验\n            totalSzie = trader_ordersend[\"totalSzie\"]\n            size_sum = sum(record[\"size\"] for record in db_data)\n>           assert math.isclose(float(totalSzie), float(size_sum), rel_tol=1e-9, abs_tol=1e-9), \\\n                f'复制平仓总手数不匹配，预期: {totalSzie}, 实际: {size_sum}'\nE           AssertionError: 复制平仓总手数不匹配，预期: 1.00, 实际: 2.0\nE           assert False\nE            +  where False = <built-in function isclose>(1.0, 2.0, rel_tol=1e-09, abs_tol=1e-09)\nE            +    where <built-in function isclose> = math.isclose\nE            +    and   1.0 = float('1.00')\nE            +    and   2.0 = float(2.0)\n\ntest_cloudTrader\\test_cloudOrderClose.py:741: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "db",
    "time" : {
      "start" : 1755744125241,
      "stop" : 1755744125669,
      "duration" : 428
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "db_transaction",
    "time" : {
      "start" : 1755744125669,
      "stop" : 1755744125669,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "testStage" : {
    "description" : "\n    ### 测试说明\n    - 前置条件：有云策略和云跟单\n      1. 进行开仓，手数范围0.1-1，总订单3，总手数1\n      2. 平仓-订单方向-sell，平仓失败\n      3. 校验数据库是否有未平仓订单-应该没有\n      4. 平仓-订单方向-buy sell，平仓成功\n      5. 校验订单数据是否正确\n    - 预期结果：平仓的订单方向功能正确\n    ",
    "status" : "failed",
    "statusMessage" : "AssertionError: 复制平仓总手数不匹配，预期: 1.00, 实际: 2.0\nassert False\n +  where False = <built-in function isclose>(1.0, 2.0, rel_tol=1e-09, abs_tol=1e-09)\n +    where <built-in function isclose> = math.isclose\n +    and   1.0 = float('1.00')\n +    and   2.0 = float(2.0)",
    "statusTrace" : "self = <lingkuan_819.test_cloudTrader.test_cloudOrderClose.TestCloudFollowDirection.TestMasOrderSend3 object at 0x0000025603DCBC10>\nvar_manager = <lingkuan_819.commons.variable_manager.VariableManager object at 0x0000025603ECD3A0>\ndb_transaction = <pymysql.connections.Connection object at 0x0000025603EA2F70>\n\n    @allure.title(\"数据库校验-复制下单平仓数据-数据校验\")\n    def test_copy_verify_close_db2(self, var_manager, db_transaction):\n        \"\"\"验证复制下单平仓后数据库中的订单数据正确性\"\"\"\n        with allure.step(\"查询复制平仓订单数据\"):\n            cloudTrader_user_accounts_4 = var_manager.get_variable(\"cloudTrader_user_accounts_4\")\n            cloudTrader_vps_ids_3 = var_manager.get_variable(\"cloudTrader_vps_ids_3\")\n    \n            sql = \"\"\"\n                       SELECT\n                           fod.size,\n                           fod.close_no,\n                           fod.magical,\n                           fod.open_price,\n                           fod.symbol,\n                           fod.order_no,\n                           foi.true_total_lots,\n                           foi.order_no,\n                           foi.operation_type,\n                           foi.create_time,\n                           foi.status,\n                           foi.min_lot_size,\n                           foi.max_lot_size,\n                           foi.total_lots,\n                           foi.master_order,\n                           foi.total_orders\n                       FROM\n                           follow_order_detail fod\n                       INNER JOIN\n                           follow_order_instruct foi\n                       ON\n                           foi.order_no = fod.close_no COLLATE utf8mb4_0900_ai_ci\n                       WHERE foi.operation_type = %s\n                           AND fod.account = %s\n                           AND fod.trader_id = %s\n                   \"\"\"\n            params = ('1', cloudTrader_user_accounts_4, cloudTrader_vps_ids_3)\n    \n            # 轮询等待数据库记录\n            db_data = self.wait_for_database_record_with_timezone(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"fod.close_time\"\n            )\n    \n        with allure.step(\"执行复制平仓数据校验-有订单\"):\n            trader_ordersend = var_manager.get_variable(\"trader_ordersend\")\n            if not db_data:\n                pytest.fail(\"数据库查询结果为空，无法进行复制平仓校验\")\n    \n            # 平仓总手数校验\n            totalSzie = trader_ordersend[\"totalSzie\"]\n            size_sum = sum(record[\"size\"] for record in db_data)\n>           assert math.isclose(float(totalSzie), float(size_sum), rel_tol=1e-9, abs_tol=1e-9), \\\n                f'复制平仓总手数不匹配，预期: {totalSzie}, 实际: {size_sum}'\nE           AssertionError: 复制平仓总手数不匹配，预期: 1.00, 实际: 2.0\nE           assert False\nE            +  where False = <built-in function isclose>(1.0, 2.0, rel_tol=1e-09, abs_tol=1e-09)\nE            +    where <built-in function isclose> = math.isclose\nE            +    and   1.0 = float('1.00')\nE            +    and   2.0 = float(2.0)\n\ntest_cloudTrader\\test_cloudOrderClose.py:741: AssertionError",
    "steps" : [ {
      "name" : "查询复制平仓订单数据",
      "time" : {
        "start" : 1755744125669,
        "stop" : 1755744132100,
        "duration" : 6431
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "等待数据库记录稳定（时区: +05:00，超时: 30秒）",
        "time" : {
          "start" : 1755744125670,
          "stop" : 1755744125670,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false,
        "stepsCount" : 0
      }, {
        "name" : "数据库查询结果（最终稳定结果）",
        "time" : {
          "start" : 1755744132099,
          "stop" : 1755744132100,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "670e47e870cbf52d",
          "name" : "执行SQL",
          "source" : "670e47e870cbf52d.txt",
          "type" : "text/plain",
          "size" : 1270
        }, {
          "uid" : "1cd7319477177027",
          "name" : "SQL参数",
          "source" : "1cd7319477177027.txt",
          "type" : "text/plain",
          "size" : 21
        }, {
          "uid" : "638fb263232b2604",
          "name" : "查询结果（共4条，显示前50条）",
          "source" : "638fb263232b2604.json",
          "type" : "application/json",
          "size" : 1706
        } ],
        "parameters" : [ ],
        "attachmentsCount" : 3,
        "shouldDisplayMessage" : false,
        "hasContent" : true,
        "stepsCount" : 0
      } ],
      "attachments" : [ {
        "uid" : "dca2874af42af3ee",
        "name" : "等待结果",
        "source" : "dca2874af42af3ee.txt",
        "type" : "text/plain",
        "size" : 40
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 4,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 2
    }, {
      "name" : "执行复制平仓数据校验-有订单",
      "time" : {
        "start" : 1755744132100,
        "stop" : 1755744132100,
        "duration" : 0
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: 复制平仓总手数不匹配，预期: 1.00, 实际: 2.0\nassert False\n +  where False = <built-in function isclose>(1.0, 2.0, rel_tol=1e-09, abs_tol=1e-09)\n +    where <built-in function isclose> = math.isclose\n +    and   1.0 = float('1.00')\n +    and   2.0 = float(2.0)\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\lingkuan_819\\test_cloudTrader\\test_cloudOrderClose.py\", line 741, in test_copy_verify_close_db2\n    assert math.isclose(float(totalSzie), float(size_sum), rel_tol=1e-9, abs_tol=1e-9), \\\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true,
      "stepsCount" : 0
    } ],
    "attachments" : [ {
      "uid" : "95c29a48e3aa31dc",
      "name" : "log",
      "source" : "95c29a48e3aa31dc.txt",
      "type" : "text/plain",
      "size" : 49227
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 5,
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 4
  },
  "afterStages" : [ {
    "name" : "db::0",
    "time" : {
      "start" : 1755744132113,
      "stop" : 1755744132114,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "db_transaction::0",
    "time" : {
      "start" : 1755744132113,
      "stop" : 1755744132113,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "云策略复制下单-平仓的功能校验"
  }, {
    "name" : "story",
    "value" : "场景3：平仓的订单方向功能校验-buy sell"
  }, {
    "name" : "tag",
    "value" : "retry(n=3, delay=5)"
  }, {
    "name" : "parentSuite",
    "value" : "test_cloudTrader"
  }, {
    "name" : "suite",
    "value" : "test_cloudOrderClose"
  }, {
    "name" : "subSuite",
    "value" : "TestCloudFollowDirection"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "8916-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_cloudTrader.test_cloudOrderClose"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "f2715d9ecc388f71",
      "status" : "failed",
      "statusDetails" : "AssertionError: 复制平仓总手数不匹配，预期: 1.00, 实际: 2.0\nassert False\n +  where False = <built-in function isclose>(1.0, 2.0, rel_tol=1e-09, abs_tol=1e-09)\n +    where <built-in function isclose> = math.isclose\n +    and   1.0 = float('1.00')\n +    and   2.0 = float(2.0)",
      "time" : {
        "start" : 1755744113790,
        "stop" : 1755744120217,
        "duration" : 6427
      }
    }, {
      "uid" : "e7d5d994b8b2d651",
      "status" : "failed",
      "statusDetails" : "AssertionError: 复制平仓总手数不匹配，预期: 1.00, 实际: 2.0\nassert False\n +  where False = <built-in function isclose>(1.0, 2.0, rel_tol=1e-09, abs_tol=1e-09)\n +    where <built-in function isclose> = math.isclose\n +    and   1.0 = float('1.00')\n +    and   2.0 = float(2.0)",
      "time" : {
        "start" : 1755744101882,
        "stop" : 1755744108321,
        "duration" : 6439
      }
    }, {
      "uid" : "1a62d9b3d15179da",
      "status" : "failed",
      "statusDetails" : "AssertionError: 复制平仓总手数不匹配，预期: 1.00, 实际: 2.0\nassert False\n +  where False = <built-in function isclose>(1.0, 2.0, rel_tol=1e-09, abs_tol=1e-09)\n +    where <built-in function isclose> = math.isclose\n +    and   1.0 = float('1.00')\n +    and   2.0 = float(2.0)",
      "time" : {
        "start" : 1755744089975,
        "stop" : 1755744096422,
        "duration" : 6447
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "retry(n=3, delay=5)" ]
  },
  "source" : "8cb9290e7530fb5d.json",
  "parameterValues" : [ ]
}