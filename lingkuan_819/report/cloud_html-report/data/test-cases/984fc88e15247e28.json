{
  "uid" : "984fc88e15247e28",
  "name" : "数据库校验-复制下单数据",
  "fullName" : "test_cloudTrader.test_lianxi.TestMasOrderSend5#test_copy_verify_db",
  "historyId" : "5c8c7cae45216b7ec4fc6fde2c13a44c",
  "time" : {
    "start" : 1755590302473,
    "stop" : 1755590334385,
    "duration" : 31912
  },
  "description" : "\n### 测试说明\n- 前置条件：有云策略和云跟单\n  1. 进行开仓，手数范围0.1-1，总订单5（停止功能）\n  2. 点击停止\n  2. 校验账号的下单总手数和数据库的手数，应该不相等\n  3. 进行平仓\n  4. 校验账号的数据是否正确\n- 预期结果：云策略下单的停止功能正确\n",
  "descriptionHtml" : "<h3>测试说明</h3>\n<ul>\n<li>前置条件：有云策略和云跟单\n<ol>\n<li>进行开仓，手数范围0.1-1，总订单5（停止功能）</li>\n<li>点击停止</li>\n<li>校验账号的下单总手数和数据库的手数，应该不相等</li>\n<li>进行平仓</li>\n<li>校验账号的数据是否正确</li>\n</ol>\n</li>\n<li>预期结果：云策略下单的停止功能正确</li>\n</ul>\n",
  "status" : "broken",
  "statusMessage" : "TimeoutError: 等待超时（30秒），未查询到任何数据。\nSQL: \n                SELECT \n                    order_no\n                FROM \n                    follow_order_instruct\n                WHERE instruction_type = %s\n                    AND cloud_type = %s\n                    AND cloud_id = %s\n                    AND cloud_name = %s\n                    AND min_lot_size = %s\n                    AND max_lot_size = %s\n                    AND total_lots = %s\n            \n参数: ('1', '0', 63, '自动化测试', '1.00', '0.10', '1')",
  "statusTrace" : "self = <lingkuan_819.test_cloudTrader.test_lianxi.TestMasOrderSend5 object at 0x000001D1BE9806D0>\nvar_manager = <lingkuan_819.commons.variable_manager.VariableManager object at 0x000001D1BE95F100>\ndb_transaction = <pymysql.connections.Connection object at 0x000001D1BE98AE50>\n\n    @allure.title(\"数据库校验-复制下单数据\")\n    def test_copy_verify_db(self, var_manager, db_transaction):\n        \"\"\"验证复制下单后数据库中的订单数据正确性\"\"\"\n        with allure.step(\"查询复制订单详情数据\"):\n            global order_no\n            cloudMaster_id = var_manager.get_variable(\"cloudMaster_id\")\n            sql = \"\"\"\n                SELECT\n                    order_no\n                FROM\n                    follow_order_instruct\n                WHERE instruction_type = %s\n                    AND cloud_type = %s\n                    AND cloud_id = %s\n                    AND cloud_name = %s\n                    AND min_lot_size = %s\n                    AND max_lot_size = %s\n                    AND total_lots = %s\n            \"\"\"\n            params = (\"1\", \"0\", cloudMaster_id, \"自动化测试\", \"1.00\", \"0.10\", \"1\")\n    \n            # 轮询等待数据库记录\n>           db_data = self.wait_for_database_record(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"create_time\"\n            )\n\ntest_cloudTrader\\test_lianxi.py:85: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_819.test_cloudTrader.test_lianxi.TestMasOrderSend5 object at 0x000001D1BE9806D0>\ndb_transaction = <pymysql.connections.Connection object at 0x000001D1BE98AE50>\nsql = '\\n                SELECT \\n                    order_no\\n                FROM \\n                    follow_order_inst...ND min_lot_size = %s\\n                    AND max_lot_size = %s\\n                    AND total_lots = %s\\n            '\nparams = ('1', '0', 63, '自动化测试', '1.00', '0.10', ...)\ntime_field = 'create_time', time_range = 1, order_by = 'create_time DESC'\ntimeout = 30, poll_interval = 2, stable_period = 3\n\n    def wait_for_database_record(\n            self,\n            db_transaction: pymysql.connections.Connection,\n            sql: str,\n            params: tuple = (),\n            time_field: Optional[str] = None,\n            time_range: int = MYSQL_TIME,\n            order_by: str = \"create_time DESC\",\n            timeout: int = WAIT_TIMEOUT,\n            poll_interval: int = POLL_INTERVAL,\n            stable_period: int = STBLE_PERIOD\n    ) -> List[Dict[str, Any]]:\n        \"\"\"轮询等待数据库记录出现（等待数据稳定）\"\"\"\n        import time\n        start_time = time.time()\n        last_result = None\n        stable_start_time = None\n        has_data = False  # 标记是否查询到过数据\n        final_result = None  # 存储最终稳定结果\n    \n        logger.info(\n            f\"[{self._get_current_time()}] 开始等待数据库记录稳定 | \"\n            f\"SQL: {sql[:200]} | \"\n            f\"超时: {timeout}秒 | \"\n            f\"稳定期: {stable_period}秒\"\n        )\n        with allure.step(f\"等待数据库记录稳定（超时: {timeout}秒，稳定期: {stable_period}秒）\"):\n            pass  # 保持空块，仅用于显示步骤\n    \n        while time.time() - start_time < timeout:\n            try:\n                db_transaction.commit()  # 刷新事务\n                # 轮询过程中不附加到报告\n                result = self._execute_query(\n                    db_transaction, sql, params, time_field, order_by, time_range,\n                    attach_to_allure=False\n                )\n    \n                # 检查是否有数据\n                if len(result) > 0:\n                    has_data = True\n                    # 判断结果是否稳定（数量和内容都不变）\n                    if self._is_result_stable(result, last_result):\n                        if stable_start_time is None:\n                            stable_start_time = time.time()\n                            logger.debug(f\"[{self._get_current_time()}] 数据首次稳定，开始计时\")\n                        elif time.time() - stable_start_time >= stable_period:\n                            final_result = result  # 记录最终稳定结果\n                            logger.info(\n                                f\"[{self._get_current_time()}] 数据已稳定{stable_period}秒（耗时{time.time() - start_time:.1f}秒）| \"\n                                f\"结果数: {len(result)}\"\n                            )\n                            allure.attach(\n                                f\"数据已稳定{stable_period}秒（总耗时{time.time() - start_time:.1f}秒）\",\n                                \"等待结果\",\n                                allure.attachment_type.TEXT\n                            )\n                            break  # 数据稳定，跳出轮询\n                    else:\n                        stable_start_time = None  # 结果变化，重置稳定计时器\n                        logger.debug(f\"[{self._get_current_time()}] 数据仍在变化，重置稳定计时器\")\n                else:\n                    # 结果为空，重置稳定计时器\n                    stable_start_time = None\n                    has_data = False\n                    logger.debug(f\"[{self._get_current_time()}] 查询结果为空，继续等待\")\n    \n                last_result = result\n                elapsed = time.time() - start_time\n                logger.debug(\n                    f\"[{self._get_current_time()}] 等待数据稳定（已等待{elapsed:.1f}秒）| \"\n                    f\"当前结果数: {len(result)} | \"\n                    f\"稳定时间: {time.time() - stable_start_time if stable_start_time else 0:.1f}/{stable_period}秒\"\n                )\n                time.sleep(poll_interval)\n    \n            except Exception as e:\n                logger.warning(f\"[{self._get_current_time()}] 轮询查询异常: {str(e)} | 继续等待...\")\n                time.sleep(poll_interval)\n    \n        # 超时处理\n        if final_result is None:\n            # 最后一次查询附加到报告\n            final_result = self._execute_query(\n                db_transaction, sql, params, time_field, order_by, time_range\n            )\n    \n        # 轮询结束后附加最终结果到报告\n        display_count = min(len(final_result), 50)\n        with allure.step(\"数据库查询结果（最终稳定结果）\"):\n            allure.attach(sql, \"执行SQL\", allure.attachment_type.TEXT)\n            allure.attach(str(params), \"SQL参数\", allure.attachment_type.TEXT)\n            allure.attach(\n                self.serialize_data(final_result[:display_count]),\n                f\"查询结果（共{len(final_result)}条，显示前{display_count}条）\",\n                allure.attachment_type.JSON\n            )\n    \n        # 判断是否超时\n        if len(final_result) == 0:\n            error_msg = (\n                f\"等待超时（{timeout}秒），未查询到任何数据。\\n\"\n                f\"SQL: {sql}\\n\"\n                f\"参数: {params}\"\n            )\n>           raise TimeoutError(error_msg)\nE           TimeoutError: 等待超时（30秒），未查询到任何数据。\nE           SQL: \nE                           SELECT \nE                               order_no\nE                           FROM \nE                               follow_order_instruct\nE                           WHERE instruction_type = %s\nE                               AND cloud_type = %s\nE                               AND cloud_id = %s\nE                               AND cloud_name = %s\nE                               AND min_lot_size = %s\nE                               AND max_lot_size = %s\nE                               AND total_lots = %s\nE                       \nE           参数: ('1', '0', 63, '自动化测试', '1.00', '0.10', '1')\n\ncommons\\api_base.py:684: TimeoutError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "var_manager",
    "time" : {
      "start" : 1755590298894,
      "stop" : 1755590298894,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "test_group",
    "time" : {
      "start" : 1755590298894,
      "stop" : 1755590298894,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "environment",
    "time" : {
      "start" : 1755590298894,
      "stop" : 1755590298894,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "db",
    "time" : {
      "start" : 1755590302037,
      "stop" : 1755590302472,
      "duration" : 435
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "db_transaction",
    "time" : {
      "start" : 1755590302472,
      "stop" : 1755590302472,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "db_config",
    "time" : {
      "start" : 1755590302037,
      "stop" : 1755590302037,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "testStage" : {
    "description" : "\n### 测试说明\n- 前置条件：有云策略和云跟单\n  1. 进行开仓，手数范围0.1-1，总订单5（停止功能）\n  2. 点击停止\n  2. 校验账号的下单总手数和数据库的手数，应该不相等\n  3. 进行平仓\n  4. 校验账号的数据是否正确\n- 预期结果：云策略下单的停止功能正确\n",
    "status" : "broken",
    "statusMessage" : "TimeoutError: 等待超时（30秒），未查询到任何数据。\nSQL: \n                SELECT \n                    order_no\n                FROM \n                    follow_order_instruct\n                WHERE instruction_type = %s\n                    AND cloud_type = %s\n                    AND cloud_id = %s\n                    AND cloud_name = %s\n                    AND min_lot_size = %s\n                    AND max_lot_size = %s\n                    AND total_lots = %s\n            \n参数: ('1', '0', 63, '自动化测试', '1.00', '0.10', '1')",
    "statusTrace" : "self = <lingkuan_819.test_cloudTrader.test_lianxi.TestMasOrderSend5 object at 0x000001D1BE9806D0>\nvar_manager = <lingkuan_819.commons.variable_manager.VariableManager object at 0x000001D1BE95F100>\ndb_transaction = <pymysql.connections.Connection object at 0x000001D1BE98AE50>\n\n    @allure.title(\"数据库校验-复制下单数据\")\n    def test_copy_verify_db(self, var_manager, db_transaction):\n        \"\"\"验证复制下单后数据库中的订单数据正确性\"\"\"\n        with allure.step(\"查询复制订单详情数据\"):\n            global order_no\n            cloudMaster_id = var_manager.get_variable(\"cloudMaster_id\")\n            sql = \"\"\"\n                SELECT\n                    order_no\n                FROM\n                    follow_order_instruct\n                WHERE instruction_type = %s\n                    AND cloud_type = %s\n                    AND cloud_id = %s\n                    AND cloud_name = %s\n                    AND min_lot_size = %s\n                    AND max_lot_size = %s\n                    AND total_lots = %s\n            \"\"\"\n            params = (\"1\", \"0\", cloudMaster_id, \"自动化测试\", \"1.00\", \"0.10\", \"1\")\n    \n            # 轮询等待数据库记录\n>           db_data = self.wait_for_database_record(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"create_time\"\n            )\n\ntest_cloudTrader\\test_lianxi.py:85: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_819.test_cloudTrader.test_lianxi.TestMasOrderSend5 object at 0x000001D1BE9806D0>\ndb_transaction = <pymysql.connections.Connection object at 0x000001D1BE98AE50>\nsql = '\\n                SELECT \\n                    order_no\\n                FROM \\n                    follow_order_inst...ND min_lot_size = %s\\n                    AND max_lot_size = %s\\n                    AND total_lots = %s\\n            '\nparams = ('1', '0', 63, '自动化测试', '1.00', '0.10', ...)\ntime_field = 'create_time', time_range = 1, order_by = 'create_time DESC'\ntimeout = 30, poll_interval = 2, stable_period = 3\n\n    def wait_for_database_record(\n            self,\n            db_transaction: pymysql.connections.Connection,\n            sql: str,\n            params: tuple = (),\n            time_field: Optional[str] = None,\n            time_range: int = MYSQL_TIME,\n            order_by: str = \"create_time DESC\",\n            timeout: int = WAIT_TIMEOUT,\n            poll_interval: int = POLL_INTERVAL,\n            stable_period: int = STBLE_PERIOD\n    ) -> List[Dict[str, Any]]:\n        \"\"\"轮询等待数据库记录出现（等待数据稳定）\"\"\"\n        import time\n        start_time = time.time()\n        last_result = None\n        stable_start_time = None\n        has_data = False  # 标记是否查询到过数据\n        final_result = None  # 存储最终稳定结果\n    \n        logger.info(\n            f\"[{self._get_current_time()}] 开始等待数据库记录稳定 | \"\n            f\"SQL: {sql[:200]} | \"\n            f\"超时: {timeout}秒 | \"\n            f\"稳定期: {stable_period}秒\"\n        )\n        with allure.step(f\"等待数据库记录稳定（超时: {timeout}秒，稳定期: {stable_period}秒）\"):\n            pass  # 保持空块，仅用于显示步骤\n    \n        while time.time() - start_time < timeout:\n            try:\n                db_transaction.commit()  # 刷新事务\n                # 轮询过程中不附加到报告\n                result = self._execute_query(\n                    db_transaction, sql, params, time_field, order_by, time_range,\n                    attach_to_allure=False\n                )\n    \n                # 检查是否有数据\n                if len(result) > 0:\n                    has_data = True\n                    # 判断结果是否稳定（数量和内容都不变）\n                    if self._is_result_stable(result, last_result):\n                        if stable_start_time is None:\n                            stable_start_time = time.time()\n                            logger.debug(f\"[{self._get_current_time()}] 数据首次稳定，开始计时\")\n                        elif time.time() - stable_start_time >= stable_period:\n                            final_result = result  # 记录最终稳定结果\n                            logger.info(\n                                f\"[{self._get_current_time()}] 数据已稳定{stable_period}秒（耗时{time.time() - start_time:.1f}秒）| \"\n                                f\"结果数: {len(result)}\"\n                            )\n                            allure.attach(\n                                f\"数据已稳定{stable_period}秒（总耗时{time.time() - start_time:.1f}秒）\",\n                                \"等待结果\",\n                                allure.attachment_type.TEXT\n                            )\n                            break  # 数据稳定，跳出轮询\n                    else:\n                        stable_start_time = None  # 结果变化，重置稳定计时器\n                        logger.debug(f\"[{self._get_current_time()}] 数据仍在变化，重置稳定计时器\")\n                else:\n                    # 结果为空，重置稳定计时器\n                    stable_start_time = None\n                    has_data = False\n                    logger.debug(f\"[{self._get_current_time()}] 查询结果为空，继续等待\")\n    \n                last_result = result\n                elapsed = time.time() - start_time\n                logger.debug(\n                    f\"[{self._get_current_time()}] 等待数据稳定（已等待{elapsed:.1f}秒）| \"\n                    f\"当前结果数: {len(result)} | \"\n                    f\"稳定时间: {time.time() - stable_start_time if stable_start_time else 0:.1f}/{stable_period}秒\"\n                )\n                time.sleep(poll_interval)\n    \n            except Exception as e:\n                logger.warning(f\"[{self._get_current_time()}] 轮询查询异常: {str(e)} | 继续等待...\")\n                time.sleep(poll_interval)\n    \n        # 超时处理\n        if final_result is None:\n            # 最后一次查询附加到报告\n            final_result = self._execute_query(\n                db_transaction, sql, params, time_field, order_by, time_range\n            )\n    \n        # 轮询结束后附加最终结果到报告\n        display_count = min(len(final_result), 50)\n        with allure.step(\"数据库查询结果（最终稳定结果）\"):\n            allure.attach(sql, \"执行SQL\", allure.attachment_type.TEXT)\n            allure.attach(str(params), \"SQL参数\", allure.attachment_type.TEXT)\n            allure.attach(\n                self.serialize_data(final_result[:display_count]),\n                f\"查询结果（共{len(final_result)}条，显示前{display_count}条）\",\n                allure.attachment_type.JSON\n            )\n    \n        # 判断是否超时\n        if len(final_result) == 0:\n            error_msg = (\n                f\"等待超时（{timeout}秒），未查询到任何数据。\\n\"\n                f\"SQL: {sql}\\n\"\n                f\"参数: {params}\"\n            )\n>           raise TimeoutError(error_msg)\nE           TimeoutError: 等待超时（30秒），未查询到任何数据。\nE           SQL: \nE                           SELECT \nE                               order_no\nE                           FROM \nE                               follow_order_instruct\nE                           WHERE instruction_type = %s\nE                               AND cloud_type = %s\nE                               AND cloud_id = %s\nE                               AND cloud_name = %s\nE                               AND min_lot_size = %s\nE                               AND max_lot_size = %s\nE                               AND total_lots = %s\nE                       \nE           参数: ('1', '0', 63, '自动化测试', '1.00', '0.10', '1')\n\ncommons\\api_base.py:684: TimeoutError",
    "steps" : [ {
      "name" : "查询复制订单详情数据",
      "time" : {
        "start" : 1755590302473,
        "stop" : 1755590334385,
        "duration" : 31912
      },
      "status" : "broken",
      "statusMessage" : "TimeoutError: 等待超时（30秒），未查询到任何数据。\nSQL: \n                SELECT \n                    order_no\n                FROM \n                    follow_order_instruct\n                WHERE instruction_type = %s\n                    AND cloud_type = %s\n                    AND cloud_id = %s\n                    AND cloud_name = %s\n                    AND min_lot_size = %s\n                    AND max_lot_size = %s\n                    AND total_lots = %s\n            \n参数: ('1', '0', 63, '自动化测试', '1.00', '0.10', '1')\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\lingkuan_819\\test_cloudTrader\\test_lianxi.py\", line 85, in test_copy_verify_db\n    db_data = self.wait_for_database_record(\n  File \"D:\\pycharm_test\\lingkuan_819\\commons\\api_base.py\", line 684, in wait_for_database_record\n    raise TimeoutError(error_msg)\n",
      "steps" : [ {
        "name" : "等待数据库记录稳定（超时: 30秒，稳定期: 3秒）",
        "time" : {
          "start" : 1755590302473,
          "stop" : 1755590302473,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 0,
        "hasContent" : false,
        "stepsCount" : 0
      }, {
        "name" : "数据库查询结果",
        "time" : {
          "start" : 1755590334383,
          "stop" : 1755590334384,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "64a503d6212b3a6b",
          "name" : "执行SQL",
          "source" : "64a503d6212b3a6b.txt",
          "type" : "text/plain",
          "size" : 526
        }, {
          "uid" : "84a7fccb16a2e16c",
          "name" : "SQL参数",
          "source" : "84a7fccb16a2e16c.txt",
          "type" : "text/plain",
          "size" : 60
        }, {
          "uid" : "7e5bc633034ecc1a",
          "name" : "查询结果（共0条，显示前0条）",
          "source" : "7e5bc633034ecc1a.json",
          "type" : "application/json",
          "size" : 2
        } ],
        "parameters" : [ ],
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 3,
        "hasContent" : true,
        "stepsCount" : 0
      }, {
        "name" : "数据库查询结果（最终稳定结果）",
        "time" : {
          "start" : 1755590334384,
          "stop" : 1755590334385,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "a38618dadb19dc34",
          "name" : "执行SQL",
          "source" : "a38618dadb19dc34.txt",
          "type" : "text/plain",
          "size" : 416
        }, {
          "uid" : "1d3f21e18ddcddb4",
          "name" : "SQL参数",
          "source" : "1d3f21e18ddcddb4.txt",
          "type" : "text/plain",
          "size" : 54
        }, {
          "uid" : "27d1a05a4543ae3a",
          "name" : "查询结果（共0条，显示前0条）",
          "source" : "27d1a05a4543ae3a.json",
          "type" : "application/json",
          "size" : 2
        } ],
        "parameters" : [ ],
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 3,
        "hasContent" : true,
        "stepsCount" : 0
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 6,
      "hasContent" : true,
      "stepsCount" : 3
    } ],
    "attachments" : [ {
      "uid" : "f06b2aacf7027854",
      "name" : "log",
      "source" : "f06b2aacf7027854.txt",
      "type" : "text/plain",
      "size" : 17888
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 7,
    "hasContent" : true,
    "stepsCount" : 4
  },
  "afterStages" : [ {
    "name" : "var_manager::0",
    "time" : {
      "start" : 1755590348728,
      "stop" : 1755590348729,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "db::0",
    "time" : {
      "start" : 1755590334500,
      "stop" : 1755590334500,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "db_transaction::0",
    "time" : {
      "start" : 1755590334499,
      "stop" : 1755590334499,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "云策略下单功能测试"
  }, {
    "name" : "parentSuite",
    "value" : "test_cloudTrader"
  }, {
    "name" : "suite",
    "value" : "test_lianxi"
  }, {
    "name" : "subSuite",
    "value" : "TestMasOrderSend5"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "40872-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_cloudTrader.test_lianxi"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "984fc88e15247e28.json",
  "parameterValues" : [ ]
}