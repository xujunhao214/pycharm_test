{
  "uid" : "a6840b711d455e5f",
  "name" : "数据库校验-分配下单平仓数据",
  "fullName" : "test_vps.test_masOrderSend.TestVPStradingOrders#test_allocation_close_verify",
  "historyId" : "7f47afd50027dc9b162dbbc89e9feced",
  "time" : {
    "start" : 1755512108812,
    "stop" : 1755512140428,
    "duration" : 31616
  },
  "description" : "\n### 测试说明\n包含两种VPS交易下单模式的测试：\n1. 分配下单：按指定手数范围分配订单\n2. 复制下单：按复制模式生成订单\n每种模式均包含下单、数据校验和平仓流程\n",
  "descriptionHtml" : "<h3>测试说明</h3>\n<p>包含两种VPS交易下单模式的测试：</p>\n<ol>\n<li>分配下单：按指定手数范围分配订单</li>\n<li>复制下单：按复制模式生成订单\n每种模式均包含下单、数据校验和平仓流程</li>\n</ol>\n",
  "status" : "broken",
  "statusMessage" : "TimeoutError: 等待超时（30秒），未查询到任何数据。\nSQL: \n                SELECT \n                    fod.size, fod.close_no, fod.magical, fod.open_price,\n                    fod.symbol, fod.order_no, foi.true_total_lots, foi.order_no,\n                    foi.operation_type, foi.create_time, foi.status,\n                    foi.min_lot_size, foi.max_lot_size, foi.total_lots,\n                    foi.master_order, foi.total_orders\n                FROM \n                    follow_order_detail fod\n                INNER JOIN \n                    follow_order_instruct foi \n                ON \n                    foi.order_no = fod.close_no COLLATE utf8mb4_0900_ai_ci\n                WHERE foi.operation_type = %s\n                    AND fod.account = %s\n                    AND fod.trader_id = %s\n            \n参数: ('1', '300152', 6172)",
  "statusTrace" : "self = <lingkuan_819.test_vps.test_masOrderSend.TestVPStradingOrders object at 0x000001DFD4662F70>\nvar_manager = <lingkuan_819.commons.variable_manager.VariableManager object at 0x000001DFD46C6F10>\ndb_transaction = <pymysql.connections.Connection object at 0x000001DFD4712040>\n\n    @allure.story(\"模式一：分配下单\")\n    @allure.title(\"数据库校验-分配下单平仓数据\")\n    def test_allocation_close_verify(self, var_manager, db_transaction):\n        with allure.step(\"获取平仓订单数据\"):\n            vps_user_accounts_1 = var_manager.get_variable(\"vps_user_accounts_1\")\n            vps_addslave_id = var_manager.get_variable(\"vps_addslave_id\")\n            sql = \"\"\"\n                SELECT\n                    fod.size, fod.close_no, fod.magical, fod.open_price,\n                    fod.symbol, fod.order_no, foi.true_total_lots, foi.order_no,\n                    foi.operation_type, foi.create_time, foi.status,\n                    foi.min_lot_size, foi.max_lot_size, foi.total_lots,\n                    foi.master_order, foi.total_orders\n                FROM\n                    follow_order_detail fod\n                INNER JOIN\n                    follow_order_instruct foi\n                ON\n                    foi.order_no = fod.close_no COLLATE utf8mb4_0900_ai_ci\n                WHERE foi.operation_type = %s\n                    AND fod.account = %s\n                    AND fod.trader_id = %s\n            \"\"\"\n            params = ('1', vps_user_accounts_1, vps_addslave_id)\n    \n            # 轮询等待数据\n>           db_data = self.wait_for_database_record_with_timezone(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"fod.close_time\"\n            )\n\ntest_vps\\test_masOrderSend.py:175: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_819.test_vps.test_masOrderSend.TestVPStradingOrders object at 0x000001DFD4662F70>\ndb_transaction = <pymysql.connections.Connection object at 0x000001DFD4712040>\nsql = '\\n                SELECT \\n                    fod.size, fod.close_no, fod.magical, fod.open_price,\\n                ...peration_type = %s\\n                    AND fod.account = %s\\n                    AND fod.trader_id = %s\\n            '\nparams = ('1', '300152', 6172), time_field = 'fod.close_time', time_range = 1\norder_by = 'create_time DESC', timeout = 30, poll_interval = 2\nstable_period = 3, timezone_offset = 5\n\n    def wait_for_database_record_with_timezone(\n            self,\n            db_transaction: pymysql.connections.Connection,\n            sql: str,\n            params: tuple = (),\n            time_field: Optional[str] = None,\n            time_range: int = MYSQL_TIME,\n            order_by: str = \"create_time DESC\",\n            timeout: int = WAIT_TIMEOUT,\n            poll_interval: int = POLL_INTERVAL,\n            stable_period: int = STBLE_PERIOD,\n            timezone_offset: int = TIMEZONE_OFFSET\n    ) -> List[Dict[str, Any]]:\n        \"\"\"轮询等待数据库记录出现（等待数据稳定），支持时区转换\"\"\"\n        import time\n        start_time = time.time()\n        last_result = None\n        stable_start_time = None\n        has_data = False  # 标记是否查询到过数据\n        final_result = None  # 存储最终稳定结果\n    \n        # 生成时区偏移字符串（如 \"+08:00\"）\n        offset_str = f\"{timezone_offset:+03d}:00\"\n    \n        logger.info(\n            f\"[{self._get_current_time()}] 开始等待数据库记录稳定（时区偏移: {offset_str}）| \"\n            f\"SQL: {sql[:200]} | \"\n            f\"超时: {timeout}秒 | \"\n            f\"稳定期: {stable_period}秒\"\n        )\n        with allure.step(f\"等待数据库记录稳定（时区: {offset_str}，超时: {timeout}秒）\"):\n            pass\n    \n        while time.time() - start_time < timeout:\n            try:\n                db_transaction.commit()  # 刷新事务\n                # 轮询过程中不附加到报告\n                result = self._execute_query_with_timezone(\n                    db_transaction, sql, params, time_field, order_by, time_range, offset_str,\n                    attach_to_allure=False\n                )\n    \n                # 检查是否有数据\n                if len(result) > 0:\n                    has_data = True\n                    # 判断结果是否稳定（数量和内容都不变）\n                    if self._is_result_stable(result, last_result):\n                        if stable_start_time is None:\n                            stable_start_time = time.time()\n                            logger.debug(f\"[{self._get_current_time()}] 数据首次稳定，开始计时\")\n                        elif time.time() - stable_start_time >= stable_period:\n                            final_result = result  # 记录最终稳定结果\n                            logger.info(\n                                f\"[{self._get_current_time()}] 数据已稳定{stable_period}秒（耗时{time.time() - start_time:.1f}秒）| \"\n                                f\"结果数: {len(result)}\"\n                            )\n                            allure.attach(\n                                f\"数据已稳定{stable_period}秒（总耗时{time.time() - start_time:.1f}秒）\",\n                                \"等待结果\",\n                                allure.attachment_type.TEXT\n                            )\n                            break  # 数据稳定，跳出轮询\n                    else:\n                        stable_start_time = None  # 结果变化，重置稳定计时器\n                        logger.debug(f\"[{self._get_current_time()}] 数据仍在变化，重置稳定计时器\")\n                else:\n                    # 结果为空，重置稳定计时器\n                    stable_start_time = None\n                    has_data = False\n                    logger.debug(f\"[{self._get_current_time()}] 查询结果为空，继续等待\")\n    \n                last_result = result\n                elapsed = time.time() - start_time\n                logger.debug(\n                    f\"[{self._get_current_time()}] 等待数据稳定（已等待{elapsed:.1f}秒）| \"\n                    f\"当前结果数: {len(result)} | \"\n                    f\"稳定时间: {time.time() - stable_start_time if stable_start_time else 0:.1f}/{stable_period}秒\"\n                )\n                time.sleep(poll_interval)\n    \n            except Exception as e:\n                logger.warning(f\"[{self._get_current_time()}] 轮询查询异常: {str(e)} | 继续等待...\")\n                time.sleep(poll_interval)\n    \n        # 超时处理 - 获取最终结果\n        if final_result is None:\n            # 最后一次查询附加到报告\n            final_result = self._execute_query_with_timezone(\n                db_transaction, sql, params, time_field, order_by, time_range, offset_str\n            )\n    \n        # 轮询结束后附加最终结果到报告\n        display_count = min(len(final_result), 50)\n        with allure.step(\"数据库查询结果（最终稳定结果）\"):\n            allure.attach(sql, \"执行SQL\", allure.attachment_type.TEXT)\n            allure.attach(str(params), \"SQL参数\", allure.attachment_type.TEXT)\n            allure.attach(\n                self.serialize_data(final_result[:display_count]),\n                f\"查询结果（共{len(final_result)}条，显示前{display_count}条）\",\n                allure.attachment_type.JSON\n            )\n    \n        # 判断是否超时\n        if len(final_result) == 0:\n            error_msg = (\n                f\"等待超时（{timeout}秒），未查询到任何数据。\\n\"\n                f\"SQL: {sql}\\n\"\n                f\"参数: {params}\"\n            )\n>           raise TimeoutError(error_msg)\nE           TimeoutError: 等待超时（30秒），未查询到任何数据。\nE           SQL: \nE                           SELECT \nE                               fod.size, fod.close_no, fod.magical, fod.open_price,\nE                               fod.symbol, fod.order_no, foi.true_total_lots, foi.order_no,\nE                               foi.operation_type, foi.create_time, foi.status,\nE                               foi.min_lot_size, foi.max_lot_size, foi.total_lots,\nE                               foi.master_order, foi.total_orders\nE                           FROM \nE                               follow_order_detail fod\nE                           INNER JOIN \nE                               follow_order_instruct foi \nE                           ON \nE                               foi.order_no = fod.close_no COLLATE utf8mb4_0900_ai_ci\nE                           WHERE foi.operation_type = %s\nE                               AND fod.account = %s\nE                               AND fod.trader_id = %s\nE                       \nE           参数: ('1', '300152', 6172)\n\ncommons\\api_base.py:835: TimeoutError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "db_config",
    "time" : {
      "start" : 1755512053135,
      "stop" : 1755512053135,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "var_manager",
    "time" : {
      "start" : 1755512091531,
      "stop" : 1755512091533,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "test_group",
    "time" : {
      "start" : 1755512050142,
      "stop" : 1755512050142,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db_transaction",
    "time" : {
      "start" : 1755512108767,
      "stop" : 1755512108812,
      "duration" : 45
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "environment",
    "time" : {
      "start" : 1755512050142,
      "stop" : 1755512050142,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db",
    "time" : {
      "start" : 1755512053135,
      "stop" : 1755512053546,
      "duration" : 411
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "description" : "\n### 测试说明\n包含两种VPS交易下单模式的测试：\n1. 分配下单：按指定手数范围分配订单\n2. 复制下单：按复制模式生成订单\n每种模式均包含下单、数据校验和平仓流程\n",
    "status" : "broken",
    "statusMessage" : "TimeoutError: 等待超时（30秒），未查询到任何数据。\nSQL: \n                SELECT \n                    fod.size, fod.close_no, fod.magical, fod.open_price,\n                    fod.symbol, fod.order_no, foi.true_total_lots, foi.order_no,\n                    foi.operation_type, foi.create_time, foi.status,\n                    foi.min_lot_size, foi.max_lot_size, foi.total_lots,\n                    foi.master_order, foi.total_orders\n                FROM \n                    follow_order_detail fod\n                INNER JOIN \n                    follow_order_instruct foi \n                ON \n                    foi.order_no = fod.close_no COLLATE utf8mb4_0900_ai_ci\n                WHERE foi.operation_type = %s\n                    AND fod.account = %s\n                    AND fod.trader_id = %s\n            \n参数: ('1', '300152', 6172)",
    "statusTrace" : "self = <lingkuan_819.test_vps.test_masOrderSend.TestVPStradingOrders object at 0x000001DFD4662F70>\nvar_manager = <lingkuan_819.commons.variable_manager.VariableManager object at 0x000001DFD46C6F10>\ndb_transaction = <pymysql.connections.Connection object at 0x000001DFD4712040>\n\n    @allure.story(\"模式一：分配下单\")\n    @allure.title(\"数据库校验-分配下单平仓数据\")\n    def test_allocation_close_verify(self, var_manager, db_transaction):\n        with allure.step(\"获取平仓订单数据\"):\n            vps_user_accounts_1 = var_manager.get_variable(\"vps_user_accounts_1\")\n            vps_addslave_id = var_manager.get_variable(\"vps_addslave_id\")\n            sql = \"\"\"\n                SELECT\n                    fod.size, fod.close_no, fod.magical, fod.open_price,\n                    fod.symbol, fod.order_no, foi.true_total_lots, foi.order_no,\n                    foi.operation_type, foi.create_time, foi.status,\n                    foi.min_lot_size, foi.max_lot_size, foi.total_lots,\n                    foi.master_order, foi.total_orders\n                FROM\n                    follow_order_detail fod\n                INNER JOIN\n                    follow_order_instruct foi\n                ON\n                    foi.order_no = fod.close_no COLLATE utf8mb4_0900_ai_ci\n                WHERE foi.operation_type = %s\n                    AND fod.account = %s\n                    AND fod.trader_id = %s\n            \"\"\"\n            params = ('1', vps_user_accounts_1, vps_addslave_id)\n    \n            # 轮询等待数据\n>           db_data = self.wait_for_database_record_with_timezone(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"fod.close_time\"\n            )\n\ntest_vps\\test_masOrderSend.py:175: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_819.test_vps.test_masOrderSend.TestVPStradingOrders object at 0x000001DFD4662F70>\ndb_transaction = <pymysql.connections.Connection object at 0x000001DFD4712040>\nsql = '\\n                SELECT \\n                    fod.size, fod.close_no, fod.magical, fod.open_price,\\n                ...peration_type = %s\\n                    AND fod.account = %s\\n                    AND fod.trader_id = %s\\n            '\nparams = ('1', '300152', 6172), time_field = 'fod.close_time', time_range = 1\norder_by = 'create_time DESC', timeout = 30, poll_interval = 2\nstable_period = 3, timezone_offset = 5\n\n    def wait_for_database_record_with_timezone(\n            self,\n            db_transaction: pymysql.connections.Connection,\n            sql: str,\n            params: tuple = (),\n            time_field: Optional[str] = None,\n            time_range: int = MYSQL_TIME,\n            order_by: str = \"create_time DESC\",\n            timeout: int = WAIT_TIMEOUT,\n            poll_interval: int = POLL_INTERVAL,\n            stable_period: int = STBLE_PERIOD,\n            timezone_offset: int = TIMEZONE_OFFSET\n    ) -> List[Dict[str, Any]]:\n        \"\"\"轮询等待数据库记录出现（等待数据稳定），支持时区转换\"\"\"\n        import time\n        start_time = time.time()\n        last_result = None\n        stable_start_time = None\n        has_data = False  # 标记是否查询到过数据\n        final_result = None  # 存储最终稳定结果\n    \n        # 生成时区偏移字符串（如 \"+08:00\"）\n        offset_str = f\"{timezone_offset:+03d}:00\"\n    \n        logger.info(\n            f\"[{self._get_current_time()}] 开始等待数据库记录稳定（时区偏移: {offset_str}）| \"\n            f\"SQL: {sql[:200]} | \"\n            f\"超时: {timeout}秒 | \"\n            f\"稳定期: {stable_period}秒\"\n        )\n        with allure.step(f\"等待数据库记录稳定（时区: {offset_str}，超时: {timeout}秒）\"):\n            pass\n    \n        while time.time() - start_time < timeout:\n            try:\n                db_transaction.commit()  # 刷新事务\n                # 轮询过程中不附加到报告\n                result = self._execute_query_with_timezone(\n                    db_transaction, sql, params, time_field, order_by, time_range, offset_str,\n                    attach_to_allure=False\n                )\n    \n                # 检查是否有数据\n                if len(result) > 0:\n                    has_data = True\n                    # 判断结果是否稳定（数量和内容都不变）\n                    if self._is_result_stable(result, last_result):\n                        if stable_start_time is None:\n                            stable_start_time = time.time()\n                            logger.debug(f\"[{self._get_current_time()}] 数据首次稳定，开始计时\")\n                        elif time.time() - stable_start_time >= stable_period:\n                            final_result = result  # 记录最终稳定结果\n                            logger.info(\n                                f\"[{self._get_current_time()}] 数据已稳定{stable_period}秒（耗时{time.time() - start_time:.1f}秒）| \"\n                                f\"结果数: {len(result)}\"\n                            )\n                            allure.attach(\n                                f\"数据已稳定{stable_period}秒（总耗时{time.time() - start_time:.1f}秒）\",\n                                \"等待结果\",\n                                allure.attachment_type.TEXT\n                            )\n                            break  # 数据稳定，跳出轮询\n                    else:\n                        stable_start_time = None  # 结果变化，重置稳定计时器\n                        logger.debug(f\"[{self._get_current_time()}] 数据仍在变化，重置稳定计时器\")\n                else:\n                    # 结果为空，重置稳定计时器\n                    stable_start_time = None\n                    has_data = False\n                    logger.debug(f\"[{self._get_current_time()}] 查询结果为空，继续等待\")\n    \n                last_result = result\n                elapsed = time.time() - start_time\n                logger.debug(\n                    f\"[{self._get_current_time()}] 等待数据稳定（已等待{elapsed:.1f}秒）| \"\n                    f\"当前结果数: {len(result)} | \"\n                    f\"稳定时间: {time.time() - stable_start_time if stable_start_time else 0:.1f}/{stable_period}秒\"\n                )\n                time.sleep(poll_interval)\n    \n            except Exception as e:\n                logger.warning(f\"[{self._get_current_time()}] 轮询查询异常: {str(e)} | 继续等待...\")\n                time.sleep(poll_interval)\n    \n        # 超时处理 - 获取最终结果\n        if final_result is None:\n            # 最后一次查询附加到报告\n            final_result = self._execute_query_with_timezone(\n                db_transaction, sql, params, time_field, order_by, time_range, offset_str\n            )\n    \n        # 轮询结束后附加最终结果到报告\n        display_count = min(len(final_result), 50)\n        with allure.step(\"数据库查询结果（最终稳定结果）\"):\n            allure.attach(sql, \"执行SQL\", allure.attachment_type.TEXT)\n            allure.attach(str(params), \"SQL参数\", allure.attachment_type.TEXT)\n            allure.attach(\n                self.serialize_data(final_result[:display_count]),\n                f\"查询结果（共{len(final_result)}条，显示前{display_count}条）\",\n                allure.attachment_type.JSON\n            )\n    \n        # 判断是否超时\n        if len(final_result) == 0:\n            error_msg = (\n                f\"等待超时（{timeout}秒），未查询到任何数据。\\n\"\n                f\"SQL: {sql}\\n\"\n                f\"参数: {params}\"\n            )\n>           raise TimeoutError(error_msg)\nE           TimeoutError: 等待超时（30秒），未查询到任何数据。\nE           SQL: \nE                           SELECT \nE                               fod.size, fod.close_no, fod.magical, fod.open_price,\nE                               fod.symbol, fod.order_no, foi.true_total_lots, foi.order_no,\nE                               foi.operation_type, foi.create_time, foi.status,\nE                               foi.min_lot_size, foi.max_lot_size, foi.total_lots,\nE                               foi.master_order, foi.total_orders\nE                           FROM \nE                               follow_order_detail fod\nE                           INNER JOIN \nE                               follow_order_instruct foi \nE                           ON \nE                               foi.order_no = fod.close_no COLLATE utf8mb4_0900_ai_ci\nE                           WHERE foi.operation_type = %s\nE                               AND fod.account = %s\nE                               AND fod.trader_id = %s\nE                       \nE           参数: ('1', '300152', 6172)\n\ncommons\\api_base.py:835: TimeoutError",
    "steps" : [ {
      "name" : "获取平仓订单数据",
      "time" : {
        "start" : 1755512108812,
        "stop" : 1755512140427,
        "duration" : 31615
      },
      "status" : "broken",
      "statusMessage" : "TimeoutError: 等待超时（30秒），未查询到任何数据。\nSQL: \n                SELECT \n                    fod.size, fod.close_no, fod.magical, fod.open_price,\n                    fod.symbol, fod.order_no, foi.true_total_lots, foi.order_no,\n                    foi.operation_type, foi.create_time, foi.status,\n                    foi.min_lot_size, foi.max_lot_size, foi.total_lots,\n                    foi.master_order, foi.total_orders\n                FROM \n                    follow_order_detail fod\n                INNER JOIN \n                    follow_order_instruct foi \n                ON \n                    foi.order_no = fod.close_no COLLATE utf8mb4_0900_ai_ci\n                WHERE foi.operation_type = %s\n                    AND fod.account = %s\n                    AND fod.trader_id = %s\n            \n参数: ('1', '300152', 6172)\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\lingkuan_819\\test_vps\\test_masOrderSend.py\", line 175, in test_allocation_close_verify\n    db_data = self.wait_for_database_record_with_timezone(\n  File \"D:\\pycharm_test\\lingkuan_819\\commons\\api_base.py\", line 835, in wait_for_database_record_with_timezone\n    raise TimeoutError(error_msg)\n",
      "steps" : [ {
        "name" : "等待数据库记录稳定（时区: +05:00，超时: 30秒）",
        "time" : {
          "start" : 1755512108813,
          "stop" : 1755512108813,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "hasContent" : false,
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 0
      }, {
        "name" : "数据库查询结果",
        "time" : {
          "start" : 1755512140425,
          "stop" : 1755512140426,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "8552c7bd11867348",
          "name" : "执行SQL",
          "source" : "8552c7bd11867348.txt",
          "type" : "text/plain",
          "size" : 898
        }, {
          "uid" : "db0cb5e2cbc3a492",
          "name" : "SQL参数",
          "source" : "db0cb5e2cbc3a492.txt",
          "type" : "text/plain",
          "size" : 27
        }, {
          "uid" : "d371596afea161e6",
          "name" : "查询结果（共0条，显示前0条）",
          "source" : "d371596afea161e6.json",
          "type" : "application/json",
          "size" : 2
        } ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "hasContent" : true,
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 3
      }, {
        "name" : "数据库查询结果（最终稳定结果）",
        "time" : {
          "start" : 1755512140426,
          "stop" : 1755512140427,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "80a20570abb67518",
          "name" : "执行SQL",
          "source" : "80a20570abb67518.txt",
          "type" : "text/plain",
          "size" : 753
        }, {
          "uid" : "193f77872cd2f73e",
          "name" : "SQL参数",
          "source" : "193f77872cd2f73e.txt",
          "type" : "text/plain",
          "size" : 21
        }, {
          "uid" : "fe6924250bbfdd9f",
          "name" : "查询结果（共0条，显示前0条）",
          "source" : "fe6924250bbfdd9f.json",
          "type" : "application/json",
          "size" : 2
        } ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "hasContent" : true,
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 3
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 3,
      "hasContent" : true,
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 6
    } ],
    "attachments" : [ {
      "uid" : "6dd71a767af930c",
      "name" : "log",
      "source" : "6dd71a767af930c.txt",
      "type" : "text/plain",
      "size" : 23337
    } ],
    "parameters" : [ ],
    "stepsCount" : 4,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 7
  },
  "afterStages" : [ {
    "name" : "var_manager::0",
    "time" : {
      "start" : 1755565029964,
      "stop" : 1755565029965,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db_transaction::0",
    "time" : {
      "start" : 1755512140441,
      "stop" : 1755512140486,
      "duration" : 45
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db::0",
    "time" : {
      "start" : 1755565029966,
      "stop" : 1755565029966,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "VPS交易下单（分配与复制）"
  }, {
    "name" : "story",
    "value" : "模式一：分配下单"
  }, {
    "name" : "parentSuite",
    "value" : "test_vps"
  }, {
    "name" : "suite",
    "value" : "test_masOrderSend"
  }, {
    "name" : "subSuite",
    "value" : "TestVPStradingOrders"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "6824-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_vps.test_masOrderSend"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "a6840b711d455e5f.json",
  "parameterValues" : [ ]
}