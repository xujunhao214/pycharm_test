{
  "uid" : "8287342f4e38d1d0",
  "name" : "登录MT4账号获取token",
  "fullName" : "test_cloudTrader.test_time_difference.Test_create_order#test_mt4_login",
  "historyId" : "1721b8352a1030c1bb5151bdfac70bfd",
  "time" : {
    "start" : 1758769901466,
    "stop" : 1758769901466,
    "duration" : 0
  },
  "description" : "登录测试用例，确保初始Token有效",
  "descriptionHtml" : "<p>登录测试用例，确保初始Token有效</p>\n",
  "status" : "broken",
  "statusMessage" : "TypeError: __init__() takes from 1 to 2 positional arguments but 3 were given - maybe you meant pytest.mark.skipif?",
  "statusTrace" : "cls = <class '_pytest.runner.CallInfo'>\nfunc = <function call_and_report.<locals>.<lambda> at 0x00000160D203A160>\nwhen = 'setup'\nreraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)\n\n    @classmethod\n    def from_call(\n        cls,\n        func: Callable[[], TResult],\n        when: Literal[\"collect\", \"setup\", \"call\", \"teardown\"],\n        reraise: type[BaseException] | tuple[type[BaseException], ...] | None = None,\n    ) -> CallInfo[TResult]:\n        \"\"\"Call func, wrapping the result in a CallInfo.\n    \n        :param func:\n            The function to call. Called without arguments.\n        :type func: Callable[[], _pytest.runner.TResult]\n        :param when:\n            The phase in which the function is called.\n        :param reraise:\n            Exception or exceptions that shall propagate if raised by the\n            function, instead of being wrapped in the CallInfo.\n        \"\"\"\n        excinfo = None\n        start = timing.time()\n        precise_start = timing.perf_counter()\n        try:\n>           result: TResult | None = func()\n\n..\\venv\\lib\\site-packages\\_pytest\\runner.py:341: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\venv\\lib\\site-packages\\_pytest\\runner.py:242: in <lambda>\n    lambda: runtest_hook(item=item, **kwds), when=when, reraise=reraise\n..\\venv\\lib\\site-packages\\pluggy\\_hooks.py:513: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n..\\venv\\lib\\site-packages\\pluggy\\_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n..\\venv\\lib\\site-packages\\_pytest\\unraisableexception.py:90: in pytest_runtest_setup\n    yield from unraisable_exception_runtest_hook()\n..\\venv\\lib\\site-packages\\_pytest\\unraisableexception.py:70: in unraisable_exception_runtest_hook\n    yield\n..\\venv\\lib\\site-packages\\_pytest\\logging.py:840: in pytest_runtest_setup\n    yield from self._runtest_for(item, \"setup\")\n..\\venv\\lib\\site-packages\\_pytest\\logging.py:829: in _runtest_for\n    yield\n..\\venv\\lib\\site-packages\\_pytest\\capture.py:893: in pytest_runtest_setup\n    return (yield)\n..\\venv\\lib\\site-packages\\_pytest\\threadexception.py:87: in pytest_runtest_setup\n    yield from thread_exception_runtest_hook()\n..\\venv\\lib\\site-packages\\_pytest\\threadexception.py:68: in thread_exception_runtest_hook\n    yield\n..\\venv\\lib\\site-packages\\_pytest\\skipping.py:238: in pytest_runtest_setup\n    skipped = evaluate_skip_marks(item)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nitem = <Function test_mt4_login>\n\n    def evaluate_skip_marks(item: Item) -> Skip | None:\n        \"\"\"Evaluate skip and skipif marks on item, returning Skip if triggered.\"\"\"\n        for mark in item.iter_markers(name=\"skipif\"):\n            if \"condition\" not in mark.kwargs:\n                conditions = mark.args\n            else:\n                conditions = (mark.kwargs[\"condition\"],)\n    \n            # Unconditional.\n            if not conditions:\n                reason = mark.kwargs.get(\"reason\", \"\")\n                return Skip(reason)\n    \n            # If any of the conditions are true.\n            for condition in conditions:\n                result, reason = evaluate_condition(item, mark, condition)\n                if result:\n                    return Skip(reason)\n    \n        for mark in item.iter_markers(name=\"skip\"):\n            try:\n                return Skip(*mark.args, **mark.kwargs)\n            except TypeError as e:\n>               raise TypeError(str(e) + \" - maybe you meant pytest.mark.skipif?\") from None\nE               TypeError: __init__() takes from 1 to 2 positional arguments but 3 were given - maybe you meant pytest.mark.skipif?\n\n..\\venv\\lib\\site-packages\\_pytest\\skipping.py:190: TypeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "environment",
    "time" : {
      "start" : 1758769901513,
      "stop" : 1758769901513,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "var_manager",
    "time" : {
      "start" : 1758769901513,
      "stop" : 1758769901513,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "test_group",
    "time" : {
      "start" : 1758769901513,
      "stop" : 1758769901513,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "afterStages" : [ {
    "name" : "var_manager::0",
    "time" : {
      "start" : 1758769903565,
      "stop" : 1758769903566,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "创建开平仓订单"
  }, {
    "name" : "feature",
    "value" : "创建开平仓订单然后统计时间差"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.skip(True, '跳过此用例')"
  }, {
    "name" : "parentSuite",
    "value" : "test_cloudTrader"
  }, {
    "name" : "suite",
    "value" : "test_time_difference"
  }, {
    "name" : "subSuite",
    "value" : "Test_createTD"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "27820-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_cloudTrader.test_time_difference"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "@pytest.mark.skip(True, '跳过此用例')" ]
  },
  "source" : "8287342f4e38d1d0.json",
  "parameterValues" : [ ]
}