{
  "uid" : "e7bfccec875d1af5",
  "name" : "账号管理-交易员账号-绑定账户-已经绑定过",
  "fullName" : "test_cloudTrader.test_create.Test_trader#test_account_bind2",
  "historyId" : "5e9761927d5b4ebfcf03f3c69136c9f8",
  "time" : {
    "start" : 1757411269153,
    "stop" : 1757411272782,
    "duration" : 3629
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Failed: 响应message字段应为:该账号在系统中已经被绑定了（JSON断言失败）",
  "statusTrace" : "self = <template.test_cloudTrader.test_create.Test_create.Test_trader object at 0x000001D375C024C0>\nresponse = <Response [200]>, json_path = '$.message'\nexpected_value = '该账号在系统中已经被绑定了'\nerror_msg_prefix = '响应message字段应为:该账号在系统中已经被绑定了'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n    \n>           assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\nE               AssertionError: Failed: 响应message字段应为:该账号在系统中已经被绑定了（JSON路径值不匹配）\n\ncommons\\api_base.py:475: AssertionError\n\nThe above exception was the direct cause of the following exception:\n\nself = <template.test_cloudTrader.test_create.Test_create.Test_trader object at 0x000001D375C024C0>\nvar_manager = <template.commons.variable_manager.VariableManager object at 0x000001D375B1D970>\nlogged_session = <template.commons.session.EnvironmentSession object at 0x000001D375B1DC10>\n\n    @allure.title(\"账号管理-交易员账号-绑定账户-已经绑定过\")\n    def test_account_bind2(self, var_manager, logged_session):\n        trader_account = var_manager.get_variable(\"trader_account\")\n        trader_password = var_manager.get_variable(\"trader_password\")\n        trader_user_id = var_manager.get_variable(\"trader_user_id\")\n        trader_broker_id = var_manager.get_variable(\"trader_broker_id\")\n        trader_server_id = var_manager.get_variable(\"trader_server_id\")\n        with allure.step(\"1. 绑定账户\"):\n            data = {\n                \"userId\": trader_user_id,\n                \"brokerId\": trader_broker_id,\n                \"serverId\": trader_server_id,\n                \"account\": trader_account,\n                \"password\": trader_password,\n                \"display\": \"PUBLIC\",\n                \"passwordType\": \"0\",\n                \"subscribeFee\": \"0\",\n                \"type\": \"MASTER_REAL\",\n                \"strategy\": \"\",\n                \"platform\": \"4\"\n            }\n            response = self.send_post_request(\n                logged_session,\n                '/blockchain/account/bind',\n                json_data=data\n            )\n    \n            self.assert_json_value(\n                response,\n                \"$.success\",\n                False,\n                \"响应success字段应为false\"\n            )\n    \n>           self.assert_json_value(\n                response,\n                \"$.message\",\n                \"该账号在系统中已经被绑定了\",\n                \"响应message字段应为:该账号在系统中已经被绑定了\"\n            )\n\ntest_cloudTrader\\test_create.py:208: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template.test_cloudTrader.test_create.Test_create.Test_trader object at 0x000001D375C024C0>\nresponse = <Response [200]>, json_path = '$.message'\nexpected_value = '该账号在系统中已经被绑定了'\nerror_msg_prefix = '响应message字段应为:该账号在系统中已经被绑定了'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n    \n            assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\n        except Exception as e:\n            with allure.step(f\"JSON断言失败: {json_path}\"):\n                allure.attach(json_path, \"JSON路径\", allure.attachment_type.TEXT)\n                allure.attach(str(expected_value), \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(response.text[:500], \"响应内容\", allure.attachment_type.TEXT)\n            logger.error(\n                f\"[{self._get_current_time()}] JSON断言失败: {str(e)} | 路径: {json_path} | 响应: {response.text[:500]}\")\n>           raise AssertionError(f\"Failed: {error_msg_prefix}（JSON断言失败）\") from e\nE           AssertionError: Failed: 响应message字段应为:该账号在系统中已经被绑定了（JSON断言失败）\n\ncommons\\api_base.py:484: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "var_manager",
    "time" : {
      "start" : 1757411210739,
      "stop" : 1757411210740,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "environment",
    "time" : {
      "start" : 1757411210739,
      "stop" : 1757411210739,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "test_group",
    "time" : {
      "start" : 1757411210739,
      "stop" : 1757411210739,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "api_session",
    "time" : {
      "start" : 1757411211203,
      "stop" : 1757411211203,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "logged_session",
    "time" : {
      "start" : 1757411211203,
      "stop" : 1757411258155,
      "duration" : 46952
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Failed: 响应message字段应为:该账号在系统中已经被绑定了（JSON断言失败）",
    "statusTrace" : "self = <template.test_cloudTrader.test_create.Test_create.Test_trader object at 0x000001D375C024C0>\nresponse = <Response [200]>, json_path = '$.message'\nexpected_value = '该账号在系统中已经被绑定了'\nerror_msg_prefix = '响应message字段应为:该账号在系统中已经被绑定了'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n    \n>           assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\nE               AssertionError: Failed: 响应message字段应为:该账号在系统中已经被绑定了（JSON路径值不匹配）\n\ncommons\\api_base.py:475: AssertionError\n\nThe above exception was the direct cause of the following exception:\n\nself = <template.test_cloudTrader.test_create.Test_create.Test_trader object at 0x000001D375C024C0>\nvar_manager = <template.commons.variable_manager.VariableManager object at 0x000001D375B1D970>\nlogged_session = <template.commons.session.EnvironmentSession object at 0x000001D375B1DC10>\n\n    @allure.title(\"账号管理-交易员账号-绑定账户-已经绑定过\")\n    def test_account_bind2(self, var_manager, logged_session):\n        trader_account = var_manager.get_variable(\"trader_account\")\n        trader_password = var_manager.get_variable(\"trader_password\")\n        trader_user_id = var_manager.get_variable(\"trader_user_id\")\n        trader_broker_id = var_manager.get_variable(\"trader_broker_id\")\n        trader_server_id = var_manager.get_variable(\"trader_server_id\")\n        with allure.step(\"1. 绑定账户\"):\n            data = {\n                \"userId\": trader_user_id,\n                \"brokerId\": trader_broker_id,\n                \"serverId\": trader_server_id,\n                \"account\": trader_account,\n                \"password\": trader_password,\n                \"display\": \"PUBLIC\",\n                \"passwordType\": \"0\",\n                \"subscribeFee\": \"0\",\n                \"type\": \"MASTER_REAL\",\n                \"strategy\": \"\",\n                \"platform\": \"4\"\n            }\n            response = self.send_post_request(\n                logged_session,\n                '/blockchain/account/bind',\n                json_data=data\n            )\n    \n            self.assert_json_value(\n                response,\n                \"$.success\",\n                False,\n                \"响应success字段应为false\"\n            )\n    \n>           self.assert_json_value(\n                response,\n                \"$.message\",\n                \"该账号在系统中已经被绑定了\",\n                \"响应message字段应为:该账号在系统中已经被绑定了\"\n            )\n\ntest_cloudTrader\\test_create.py:208: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template.test_cloudTrader.test_create.Test_create.Test_trader object at 0x000001D375C024C0>\nresponse = <Response [200]>, json_path = '$.message'\nexpected_value = '该账号在系统中已经被绑定了'\nerror_msg_prefix = '响应message字段应为:该账号在系统中已经被绑定了'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n    \n            assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\n        except Exception as e:\n            with allure.step(f\"JSON断言失败: {json_path}\"):\n                allure.attach(json_path, \"JSON路径\", allure.attachment_type.TEXT)\n                allure.attach(str(expected_value), \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(response.text[:500], \"响应内容\", allure.attachment_type.TEXT)\n            logger.error(\n                f\"[{self._get_current_time()}] JSON断言失败: {str(e)} | 路径: {json_path} | 响应: {response.text[:500]}\")\n>           raise AssertionError(f\"Failed: {error_msg_prefix}（JSON断言失败）\") from e\nE           AssertionError: Failed: 响应message字段应为:该账号在系统中已经被绑定了（JSON断言失败）\n\ncommons\\api_base.py:484: AssertionError",
    "steps" : [ {
      "name" : "1. 绑定账户",
      "time" : {
        "start" : 1757411269153,
        "stop" : 1757411272781,
        "duration" : 3628
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Failed: 响应message字段应为:该账号在系统中已经被绑定了（JSON断言失败）\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\template\\test_cloudTrader\\test_create.py\", line 208, in test_account_bind2\n    self.assert_json_value(\n  File \"D:\\pycharm_test\\template\\commons\\api_base.py\", line 484, in assert_json_value\n    raise AssertionError(f\"Failed: {error_msg_prefix}（JSON断言失败）\") from e\n",
      "steps" : [ {
        "name" : "执行 POST 请求",
        "time" : {
          "start" : 1757411269153,
          "stop" : 1757411272762,
          "duration" : 3609
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "请求详情",
          "time" : {
            "start" : 1757411269153,
            "stop" : 1757411269154,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "5bd09e05eed5cdb4",
            "name" : "请求URL",
            "source" : "5bd09e05eed5cdb4.txt",
            "type" : "text/plain",
            "size" : 24
          }, {
            "uid" : "80493107061174a2",
            "name" : "请求头",
            "source" : "80493107061174a2.json",
            "type" : "application/json",
            "size" : 429
          }, {
            "uid" : "8cc386794d44427",
            "name" : "请求体（JSON）",
            "source" : "8cc386794d44427.json",
            "type" : "application/json",
            "size" : 293
          } ],
          "parameters" : [ ],
          "hasContent" : true,
          "stepsCount" : 0,
          "attachmentsCount" : 3,
          "shouldDisplayMessage" : false
        }, {
          "name" : "响应详情",
          "time" : {
            "start" : 1757411269754,
            "stop" : 1757411269756,
            "duration" : 2
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "481879608812c757",
            "name" : "响应状态码",
            "source" : "481879608812c757.txt",
            "type" : "text/plain",
            "size" : 3
          }, {
            "uid" : "29b0c4796f0949e8",
            "name" : "响应头",
            "source" : "29b0c4796f0949e8.json",
            "type" : "application/json",
            "size" : 460
          }, {
            "uid" : "bbf272bbdaf079ff",
            "name" : "响应体（JSON）",
            "source" : "bbf272bbdaf079ff.json",
            "type" : "application/json",
            "size" : 129
          } ],
          "parameters" : [ ],
          "hasContent" : true,
          "stepsCount" : 0,
          "attachmentsCount" : 3,
          "shouldDisplayMessage" : false
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "hasContent" : true,
        "stepsCount" : 2,
        "attachmentsCount" : 6,
        "shouldDisplayMessage" : false
      }, {
        "name" : "断言JSON路径: $.success",
        "time" : {
          "start" : 1757411272769,
          "stop" : 1757411272771,
          "duration" : 2
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "87797807bb306a54",
          "name" : "请求URL",
          "source" : "87797807bb306a54.txt",
          "type" : "text/plain",
          "size" : 55
        }, {
          "uid" : "e78de3742bf3130b",
          "name" : "预期值",
          "source" : "e78de3742bf3130b.txt",
          "type" : "text/plain",
          "size" : 16
        }, {
          "uid" : "28a77c2c8e8e33c4",
          "name" : "实际值",
          "source" : "28a77c2c8e8e33c4.txt",
          "type" : "text/plain",
          "size" : 16
        } ],
        "parameters" : [ ],
        "hasContent" : true,
        "stepsCount" : 0,
        "attachmentsCount" : 3,
        "shouldDisplayMessage" : false
      }, {
        "name" : "断言JSON路径: $.message",
        "time" : {
          "start" : 1757411272779,
          "stop" : 1757411272780,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "24d73ab6ca861a00",
          "name" : "请求URL",
          "source" : "24d73ab6ca861a00.txt",
          "type" : "text/plain",
          "size" : 55
        }, {
          "uid" : "3c3efb7a13a92040",
          "name" : "预期值",
          "source" : "3c3efb7a13a92040.txt",
          "type" : "text/plain",
          "size" : 52
        }, {
          "uid" : "62ab285543994786",
          "name" : "实际值",
          "source" : "62ab285543994786.txt",
          "type" : "text/plain",
          "size" : 40
        } ],
        "parameters" : [ ],
        "hasContent" : true,
        "stepsCount" : 0,
        "attachmentsCount" : 3,
        "shouldDisplayMessage" : false
      }, {
        "name" : "JSON断言失败: $.message",
        "time" : {
          "start" : 1757411272780,
          "stop" : 1757411272781,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "f6d530f41d398a65",
          "name" : "JSON路径",
          "source" : "f6d530f41d398a65.txt",
          "type" : "text/plain",
          "size" : 9
        }, {
          "uid" : "175f05520800bfff",
          "name" : "预期值",
          "source" : "175f05520800bfff.txt",
          "type" : "text/plain",
          "size" : 39
        }, {
          "uid" : "2e8f6e3e4efe976c",
          "name" : "响应内容",
          "source" : "2e8f6e3e4efe976c.txt",
          "type" : "text/plain",
          "size" : 108
        } ],
        "parameters" : [ ],
        "hasContent" : true,
        "stepsCount" : 0,
        "attachmentsCount" : 3,
        "shouldDisplayMessage" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 6,
      "attachmentsCount" : 15,
      "shouldDisplayMessage" : true
    } ],
    "attachments" : [ {
      "uid" : "417c8d66cb0be0be",
      "name" : "log",
      "source" : "417c8d66cb0be0be.txt",
      "type" : "text/plain",
      "size" : 858
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 7,
    "attachmentsCount" : 16,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "var_manager::0",
    "time" : {
      "start" : 1757411344401,
      "stop" : 1757411344402,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "api_session::0",
    "time" : {
      "start" : 1757411344400,
      "stop" : 1757411344400,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "logged_session::0",
    "time" : {
      "start" : 1757411344400,
      "stop" : 1757411344400,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "创建交易员账号"
  }, {
    "name" : "feature",
    "value" : "账号管理"
  }, {
    "name" : "parentSuite",
    "value" : "test_cloudTrader"
  }, {
    "name" : "suite",
    "value" : "test_create"
  }, {
    "name" : "subSuite",
    "value" : "Test_create"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "23392-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_cloudTrader.test_create"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "e7bfccec875d1af5.json",
  "parameterValues" : [ ]
}