{
  "uid" : "6e759927104e8acc",
  "name" : "任务中心-MT4绑定审核-通过",
  "fullName" : "test_cloudTrader.test_create.Test_trader#test_account_pass",
  "historyId" : "eedeea8d90538367d1fbcf318d491102",
  "time" : {
    "start" : 1757411280118,
    "stop" : 1757411283743,
    "duration" : 3625
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Failed: 响应success字段应为true（JSON断言失败）",
  "statusTrace" : "self = <template.test_cloudTrader.test_create.Test_create.Test_trader object at 0x000001D375C03610>\nresponse = <Response [200]>, json_path = '$.success', expected_value = True\nerror_msg_prefix = '响应success字段应为true'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n    \n>           assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\nE               AssertionError: Failed: 响应success字段应为true（JSON路径值不匹配）\n\ncommons\\api_base.py:475: AssertionError\n\nThe above exception was the direct cause of the following exception:\n\nself = <template.test_cloudTrader.test_create.Test_create.Test_trader object at 0x000001D375C03610>\nvar_manager = <template.commons.variable_manager.VariableManager object at 0x000001D375B1D970>\nlogged_session = <template.commons.session.EnvironmentSession object at 0x000001D375B1DC10>\n\n    @allure.title(\"任务中心-MT4绑定审核-通过\")\n    def test_account_pass(self, var_manager, logged_session):\n        with allure.step(\"1. 发送请求\"):\n            trader_pass_id = var_manager.get_variable(\"trader_pass_id\")\n            trader_jeecgrow_key = var_manager.get_variable(\"trader_jeecgrow_key\")\n            data = {\n                \"pass\": True,\n                \"commission\": False,\n                \"planId\": trader_jeecgrow_key,\n                \"toSynDate\": DATETIME_NOW,\n                \"bindIpAddr\": None\n            }\n            response = self.send_post_request(\n                logged_session,\n                f'/blockchain/account/pass/{trader_pass_id}',\n                json_data=data\n            )\n    \n        with allure.step(\"2. 返回校验\"):\n>           self.assert_json_value(\n                response,\n                \"$.success\",\n                True,\n                \"响应success字段应为true\"\n            )\n\ntest_cloudTrader\\test_create.py:353: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template.test_cloudTrader.test_create.Test_create.Test_trader object at 0x000001D375C03610>\nresponse = <Response [200]>, json_path = '$.success', expected_value = True\nerror_msg_prefix = '响应success字段应为true'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n    \n            assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\n        except Exception as e:\n            with allure.step(f\"JSON断言失败: {json_path}\"):\n                allure.attach(json_path, \"JSON路径\", allure.attachment_type.TEXT)\n                allure.attach(str(expected_value), \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(response.text[:500], \"响应内容\", allure.attachment_type.TEXT)\n            logger.error(\n                f\"[{self._get_current_time()}] JSON断言失败: {str(e)} | 路径: {json_path} | 响应: {response.text[:500]}\")\n>           raise AssertionError(f\"Failed: {error_msg_prefix}（JSON断言失败）\") from e\nE           AssertionError: Failed: 响应success字段应为true（JSON断言失败）\n\ncommons\\api_base.py:484: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "var_manager",
    "time" : {
      "start" : 1757411210739,
      "stop" : 1757411210740,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "environment",
    "time" : {
      "start" : 1757411210739,
      "stop" : 1757411210739,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "test_group",
    "time" : {
      "start" : 1757411210739,
      "stop" : 1757411210739,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "api_session",
    "time" : {
      "start" : 1757411211203,
      "stop" : 1757411211203,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "logged_session",
    "time" : {
      "start" : 1757411211203,
      "stop" : 1757411258155,
      "duration" : 46952
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Failed: 响应success字段应为true（JSON断言失败）",
    "statusTrace" : "self = <template.test_cloudTrader.test_create.Test_create.Test_trader object at 0x000001D375C03610>\nresponse = <Response [200]>, json_path = '$.success', expected_value = True\nerror_msg_prefix = '响应success字段应为true'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n    \n>           assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\nE               AssertionError: Failed: 响应success字段应为true（JSON路径值不匹配）\n\ncommons\\api_base.py:475: AssertionError\n\nThe above exception was the direct cause of the following exception:\n\nself = <template.test_cloudTrader.test_create.Test_create.Test_trader object at 0x000001D375C03610>\nvar_manager = <template.commons.variable_manager.VariableManager object at 0x000001D375B1D970>\nlogged_session = <template.commons.session.EnvironmentSession object at 0x000001D375B1DC10>\n\n    @allure.title(\"任务中心-MT4绑定审核-通过\")\n    def test_account_pass(self, var_manager, logged_session):\n        with allure.step(\"1. 发送请求\"):\n            trader_pass_id = var_manager.get_variable(\"trader_pass_id\")\n            trader_jeecgrow_key = var_manager.get_variable(\"trader_jeecgrow_key\")\n            data = {\n                \"pass\": True,\n                \"commission\": False,\n                \"planId\": trader_jeecgrow_key,\n                \"toSynDate\": DATETIME_NOW,\n                \"bindIpAddr\": None\n            }\n            response = self.send_post_request(\n                logged_session,\n                f'/blockchain/account/pass/{trader_pass_id}',\n                json_data=data\n            )\n    \n        with allure.step(\"2. 返回校验\"):\n>           self.assert_json_value(\n                response,\n                \"$.success\",\n                True,\n                \"响应success字段应为true\"\n            )\n\ntest_cloudTrader\\test_create.py:353: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template.test_cloudTrader.test_create.Test_create.Test_trader object at 0x000001D375C03610>\nresponse = <Response [200]>, json_path = '$.success', expected_value = True\nerror_msg_prefix = '响应success字段应为true'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n    \n            assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\n        except Exception as e:\n            with allure.step(f\"JSON断言失败: {json_path}\"):\n                allure.attach(json_path, \"JSON路径\", allure.attachment_type.TEXT)\n                allure.attach(str(expected_value), \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(response.text[:500], \"响应内容\", allure.attachment_type.TEXT)\n            logger.error(\n                f\"[{self._get_current_time()}] JSON断言失败: {str(e)} | 路径: {json_path} | 响应: {response.text[:500]}\")\n>           raise AssertionError(f\"Failed: {error_msg_prefix}（JSON断言失败）\") from e\nE           AssertionError: Failed: 响应success字段应为true（JSON断言失败）\n\ncommons\\api_base.py:484: AssertionError",
    "steps" : [ {
      "name" : "1. 发送请求",
      "time" : {
        "start" : 1757411280118,
        "stop" : 1757411283737,
        "duration" : 3619
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "执行 POST 请求",
        "time" : {
          "start" : 1757411280118,
          "stop" : 1757411283737,
          "duration" : 3619
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "请求详情",
          "time" : {
            "start" : 1757411280118,
            "stop" : 1757411280119,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "a12958d60ab1502d",
            "name" : "请求URL",
            "source" : "a12958d60ab1502d.txt",
            "type" : "text/plain",
            "size" : 44
          }, {
            "uid" : "a813440b4fa88e6a",
            "name" : "请求头",
            "source" : "a813440b4fa88e6a.json",
            "type" : "application/json",
            "size" : 429
          }, {
            "uid" : "379eae25ff887dd1",
            "name" : "请求体（JSON）",
            "source" : "379eae25ff887dd1.json",
            "type" : "application/json",
            "size" : 136
          } ],
          "parameters" : [ ],
          "hasContent" : true,
          "stepsCount" : 0,
          "attachmentsCount" : 3,
          "shouldDisplayMessage" : false
        }, {
          "name" : "响应详情",
          "time" : {
            "start" : 1757411280719,
            "stop" : 1757411280720,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "605efed2c486ee75",
            "name" : "响应状态码",
            "source" : "605efed2c486ee75.txt",
            "type" : "text/plain",
            "size" : 3
          }, {
            "uid" : "d43c9c1bfca4ec61",
            "name" : "响应头",
            "source" : "d43c9c1bfca4ec61.json",
            "type" : "application/json",
            "size" : 460
          }, {
            "uid" : "a85125d73cfed86e",
            "name" : "响应体（JSON）",
            "source" : "a85125d73cfed86e.json",
            "type" : "application/json",
            "size" : 132
          } ],
          "parameters" : [ ],
          "hasContent" : true,
          "stepsCount" : 0,
          "attachmentsCount" : 3,
          "shouldDisplayMessage" : false
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "hasContent" : true,
        "stepsCount" : 2,
        "attachmentsCount" : 6,
        "shouldDisplayMessage" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 3,
      "attachmentsCount" : 6,
      "shouldDisplayMessage" : false
    }, {
      "name" : "2. 返回校验",
      "time" : {
        "start" : 1757411283737,
        "stop" : 1757411283743,
        "duration" : 6
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Failed: 响应success字段应为true（JSON断言失败）\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\template\\test_cloudTrader\\test_create.py\", line 353, in test_account_pass\n    self.assert_json_value(\n  File \"D:\\pycharm_test\\template\\commons\\api_base.py\", line 484, in assert_json_value\n    raise AssertionError(f\"Failed: {error_msg_prefix}（JSON断言失败）\") from e\n",
      "steps" : [ {
        "name" : "断言JSON路径: $.success",
        "time" : {
          "start" : 1757411283741,
          "stop" : 1757411283741,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "5449d1b1cf423b55",
          "name" : "请求URL",
          "source" : "5449d1b1cf423b55.txt",
          "type" : "text/plain",
          "size" : 75
        }, {
          "uid" : "d9538247cceba1df",
          "name" : "预期值",
          "source" : "d9538247cceba1df.txt",
          "type" : "text/plain",
          "size" : 15
        }, {
          "uid" : "8ee8d22fc868a776",
          "name" : "实际值",
          "source" : "8ee8d22fc868a776.txt",
          "type" : "text/plain",
          "size" : 16
        } ],
        "parameters" : [ ],
        "hasContent" : true,
        "stepsCount" : 0,
        "attachmentsCount" : 3,
        "shouldDisplayMessage" : false
      }, {
        "name" : "JSON断言失败: $.success",
        "time" : {
          "start" : 1757411283741,
          "stop" : 1757411283742,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "322983b9f974ddbd",
          "name" : "JSON路径",
          "source" : "322983b9f974ddbd.txt",
          "type" : "text/plain",
          "size" : 9
        }, {
          "uid" : "5c2befdaebc91933",
          "name" : "预期值",
          "source" : "5c2befdaebc91933.txt",
          "type" : "text/plain",
          "size" : 4
        }, {
          "uid" : "4aeee2d3fd8a685",
          "name" : "响应内容",
          "source" : "4aeee2d3fd8a685.txt",
          "type" : "text/plain",
          "size" : 111
        } ],
        "parameters" : [ ],
        "hasContent" : true,
        "stepsCount" : 0,
        "attachmentsCount" : 3,
        "shouldDisplayMessage" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 2,
      "attachmentsCount" : 6,
      "shouldDisplayMessage" : true
    } ],
    "attachments" : [ {
      "uid" : "81a9f3350976be35",
      "name" : "log",
      "source" : "81a9f3350976be35.txt",
      "type" : "text/plain",
      "size" : 700
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 7,
    "attachmentsCount" : 13,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "var_manager::0",
    "time" : {
      "start" : 1757411344401,
      "stop" : 1757411344402,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "api_session::0",
    "time" : {
      "start" : 1757411344400,
      "stop" : 1757411344400,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "logged_session::0",
    "time" : {
      "start" : 1757411344400,
      "stop" : 1757411344400,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "创建交易员账号"
  }, {
    "name" : "feature",
    "value" : "账号管理"
  }, {
    "name" : "parentSuite",
    "value" : "test_cloudTrader"
  }, {
    "name" : "suite",
    "value" : "test_create"
  }, {
    "name" : "subSuite",
    "value" : "Test_create"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "23392-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_cloudTrader.test_create"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "6e759927104e8acc.json",
  "parameterValues" : [ ]
}