{
  "uid" : "1618b3f65d0762ba",
  "name" : "跟单管理-开仓日志-开平仓明细-开仓后",
  "fullName" : "test_cloudTrader.test_lianxi.Test_orderseng2#test_query_opentrader_detail",
  "historyId" : "7d22f80a1a64acd6866556cbad8b35de",
  "time" : {
    "start" : 1758183965057,
    "stop" : 1758183968667,
    "duration" : 3610
  },
  "description" : "\n    ### 测试说明\n    - 前置条件：有喊单账号、跟单账号，跟单已经和喊单有订阅关系\n      1. MT4进行登录，然后进行开仓，总手数0.01\n      2. 账号管理-持仓订单-喊单和跟单数据校验\n      3. 跟单管理-开仓日志-喊单和跟单数据校验\n      4. 跟单管理-VPS管理-喊单和跟单数据校验\n      5. MT4进行平仓\n      6.账号管理-持仓订单-喊单和跟单数据校验\n      7.跟单管理-开仓日志-喊单和跟单数据校验\n      8.跟单管理-VPS管理-喊单和跟单数据校验\n    - 预期结果：喊单和跟单数据校验正确\n    ",
  "descriptionHtml" : "<pre><code>### 测试说明\n- 前置条件：有喊单账号、跟单账号，跟单已经和喊单有订阅关系\n  1. MT4进行登录，然后进行开仓，总手数0.01\n  2. 账号管理-持仓订单-喊单和跟单数据校验\n  3. 跟单管理-开仓日志-喊单和跟单数据校验\n  4. 跟单管理-VPS管理-喊单和跟单数据校验\n  5. MT4进行平仓\n  6.账号管理-持仓订单-喊单和跟单数据校验\n  7.跟单管理-开仓日志-喊单和跟单数据校验\n  8.跟单管理-VPS管理-喊单和跟单数据校验\n- 预期结果：喊单和跟单数据校验正确\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "Failed: 校验失败: 跟单手数符合预期\n\n实际: 0.01\n操作: ==\n预期: 0.010898741854727577",
  "statusTrace" : "self = <template.test_cloudTrader.test_lianxi.Test_openandclouseall.Test_orderseng2 object at 0x000001E679AAE790>\nvar_manager = <template.commons.variable_manager.VariableManager object at 0x000001E679B0E9A0>\nlogged_session = <template.commons.session.EnvironmentSession object at 0x000001E679AAE7F0>\n\n    @allure.title(\"跟单管理-开仓日志-开平仓明细-开仓后\")\n    def test_query_opentrader_detail(self, var_manager, logged_session):\n        with allure.step(\"1. 发送请求\"):\n            ticket_open = var_manager.get_variable(\"ticket_open\")\n            params = {\n                \"_t\": current_timestamp_seconds,\n                \"pageNo\": 1,\n                \"pageSize\": 50,\n                \"self_master_ticket\": ticket_open\n            }\n            response = self.send_get_request(\n                logged_session,\n                '/online/cgreport/api/getColumnsAndData/1568899025974796289',\n                params=params\n            )\n    \n        with allure.step(\"2. 返回校验\"):\n            self.assert_json_value(\n                response,\n                \"$.success\",\n                True,\n                \"响应success字段应为true\"\n            )\n    \n        with allure.step(f\"3. 查询校验\"):\n            slave_ticket_list = self.json_utils.extract(\n                response.json(),\n                \"$.result.data.records[0].slave_ticket\",\n                default=[],\n                multi_match=True\n            )\n            follow_account = var_manager.get_variable(\"follow_account\")\n            if not slave_ticket_list:\n                attach_body = f\"跟单账号：{follow_account}，返回的slave_ticket列表为空（暂无数据）\"\n            else:\n                attach_body = f\"跟单账号：{follow_account}，返回 {len(slave_ticket_list)} 条记录，slave_ticket值如下：\\n\" + \\\n                              \"\\n\".join(\n                                  [f\"第 {idx + 1} 条：{s}\" for idx, s in enumerate(slave_ticket_list)])\n    \n            allure.attach(\n                body=attach_body,\n                name=f\"跟单账号：{follow_account}结果\",\n                attachment_type=\"text/plain\"\n            )\n    \n            for idx, slave_ticket in enumerate(slave_ticket_list):\n                order_no = var_manager.get_variable(\"order_no\")\n                self.verify_data(\n                    actual_value=slave_ticket,\n                    expected_value=order_no,\n                    op=CompareOp.EQ,\n                    use_isclose=False,\n                    message=f\"第 {idx + 1} 条记录的订单号应为{slave_ticket}\",\n                    attachment_name=f\"跟单账户:{follow_account}第 {idx + 1} 条记录校验\"\n                )\n    \n            with allure.step(\"喊单者订单号校验\"):\n                master_ticket = self.json_utils.extract(response.json(),\n                                                        \"$.result.data.records[0].master_ticket\")\n                ticket_open = var_manager.get_variable(\"ticket_open\")\n    \n                self.verify_data(\n                    actual_value=master_ticket,\n                    expected_value=ticket_open,\n                    op=CompareOp.EQ,\n                    use_isclose=False,\n                    message=f\"喊单者订单号符合预期\",\n                    attachment_name=\"喊单者订单号详情\"\n                )\n                logger.info(f\"喊单者订单号验证通过: {master_ticket}\")\n    \n            with allure.step(\"喊单者手数校验\"):\n                master_lots = self.json_utils.extract(response.json(),\n                                                      \"$.result.data.records[0].master_lots\")\n                lots_open = var_manager.get_variable(\"lots_open\")\n    \n                self.verify_data(\n                    actual_value=float(master_lots),\n                    expected_value=float(lots_open),\n                    op=CompareOp.EQ,\n                    message=f\"喊单者手数符合预期\",\n                    attachment_name=\"喊单者手数详情\"\n                )\n                logger.info(f\"喊单者手数验证通过: {master_lots}\")\n    \n            with allure.step(\"跟单手数校验\"):\n                slave_lots = self.json_utils.extract(response.json(),\n                                                     \"$.result.data.records[0].slave_lots\")\n                if not slave_lots:\n                    allure.attach(\"跟单手数返回为空\", \"跟单手数详情\", allure.attachment_type.TEXT)\n                else:\n                    lots_open = var_manager.get_variable(\"lots_open\")\n                    follow_periodP = var_manager.get_variable(\"follow_periodP\")\n                    trader_periodP = var_manager.get_variable(\"trader_periodP\")\n                    # 获取跟单净值比例\n                    fixed_proportion = var_manager.get_variable(\"fixed_proportion\")\n                    # 百分比数据转换\n                    follow_fixed_decimal = percentage_to_decimal(fixed_proportion)\n                    expected_lots_open = lots_open * (follow_periodP / trader_periodP) * follow_fixed_decimal\n    \n                    # 最小手数限制（0.01）\n                    min_order_size = 0.01\n                    if expected_lots_open < min_order_size:\n                        allure.attach(\n                            f\"计算预期手数{expected_lots_open} < 最小手数{min_order_size}，强制重置为{min_order_size}\",\n                            \"预期手数调整说明\", allure.attachment_type.TEXT)\n                        expected_lots_open = min_order_size\n    \n>                   self.verify_data(\n                        actual_value=float(slave_lots),\n                        expected_value=float(expected_lots_open),\n                        op=CompareOp.EQ,\n                        message=f\"跟单手数符合预期\",\n                        attachment_name=\"跟单手数详情\"\n                    )\n\ntest_cloudTrader\\test_lianxi.py:735: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template.test_cloudTrader.test_lianxi.Test_openandclouseall.Test_orderseng2 object at 0x000001E679AAE790>\nactual_value = 0.01, expected_value = 0.010898741854727577\nop = <CompareOp.EQ: '=='>, message = '跟单手数符合预期', attachment_name = '跟单手数详情'\nattachment_type = 'text/plain', use_isclose = True, rel_tol = 1e-09, abs_tol = 0\n\n    def verify_data(\n            self,\n            actual_value,\n            expected_value,\n            op: CompareOp,\n            message: str,\n            attachment_name: str,\n            attachment_type=\"text/plain\",\n            use_isclose=True,  # 新增参数：是否启用math.isclose容错（默认启用）\n            rel_tol=1e-9,  # 相对容差（仅当use_isclose=True时生效）\n            abs_tol=0  # 绝对容差（仅当use_isclose=True时生效）\n    ):\n        \"\"\"\n        通用数据校验函数，支持浮点容错比较\n        :param actual_value: 实际值\n        :param expected_value: 预期值\n        :param op: 比较操作，CompareOp 枚举\n        :param message: 校验失败时的提示信息\n        :param attachment_name: Allure 附件名称\n        :param attachment_type: Allure 附件类型，默认文本\n        :param use_isclose: 是否使用math.isclose进行浮点容错比较\n        :param rel_tol: 相对容差（默认1e-9）\n        :param abs_tol: 绝对容差（默认0.0）\n        其他参数同前\n        \"\"\"\n        with allure.step(f\"校验: {message}\"):\n            result = False\n            try:\n                # 处理浮点容错比较（仅对EQ/NE操作生效）\n                if use_isclose and op in (CompareOp.EQ, CompareOp.NE):\n                    if not (isinstance(actual_value, (int, float)) and\n                            isinstance(expected_value, (int, float))):\n                        # 非数字类型自动禁用isclose，避免报错\n                        use_isclose = False\n                        logging.warning(f\"自动禁用isclose：非数字类型比较（实际值类型：{type(actual_value)}）\")\n    \n                    # 计算isclose结果\n                    is_close = math.isclose(\n                        actual_value,\n                        expected_value,\n                        rel_tol=rel_tol,\n                        abs_tol=abs_tol\n                    )\n                    # 根据操作类型取反\n                    result = is_close if op == CompareOp.EQ else not is_close\n    \n                # 普通比较逻辑\n                else:\n                    if op == CompareOp.EQ:\n                        result = actual_value == expected_value\n                    elif op == CompareOp.NE:\n                        result = actual_value != expected_value\n                    elif op == CompareOp.GT:\n                        result = actual_value > expected_value\n                    elif op == CompareOp.LT:\n                        result = actual_value < expected_value\n                    elif op == CompareOp.GE:\n                        result = actual_value >= expected_value\n                    elif op == CompareOp.LE:\n                        result = actual_value <= expected_value\n                    elif op == CompareOp.IN:\n                        result = actual_value in expected_value\n                    elif op == CompareOp.NOT_IN:\n                        result = actual_value not in expected_value\n    \n            except TypeError as e:\n                pytest.fail(\n                    f\"校验类型错误: {str(e)}\\n实际值类型: {type(actual_value)}, 预期值类型: {type(expected_value)}\")\n    \n            # 生成详细提示信息（包含容差参数）\n            detail_msg = (\n                f\"\\n实际: {actual_value}\\n\"\n                f\"操作: {op.value}\\n\"\n                f\"预期: {expected_value}\\n\"\n            )\n    \n            # 添加allure.attach，将信息写入报告\n            allure.attach(\n                detail_msg,  # 附件内容\n                name=attachment_name,  # 附件名称（来自参数）\n                attachment_type=attachment_type  # 附件类型\n            )\n    \n            if not result:\n>               pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\nE               Failed: 校验失败: 跟单手数符合预期\nE               \nE               实际: 0.01\nE               操作: ==\nE               预期: 0.010898741854727577\n\ncommons\\api_base.py:1362: Failed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "\n    ### 测试说明\n    - 前置条件：有喊单账号、跟单账号，跟单已经和喊单有订阅关系\n      1. MT4进行登录，然后进行开仓，总手数0.01\n      2. 账号管理-持仓订单-喊单和跟单数据校验\n      3. 跟单管理-开仓日志-喊单和跟单数据校验\n      4. 跟单管理-VPS管理-喊单和跟单数据校验\n      5. MT4进行平仓\n      6.账号管理-持仓订单-喊单和跟单数据校验\n      7.跟单管理-开仓日志-喊单和跟单数据校验\n      8.跟单管理-VPS管理-喊单和跟单数据校验\n    - 预期结果：喊单和跟单数据校验正确\n    ",
    "status" : "failed",
    "statusMessage" : "Failed: 校验失败: 跟单手数符合预期\n\n实际: 0.01\n操作: ==\n预期: 0.010898741854727577",
    "statusTrace" : "self = <template.test_cloudTrader.test_lianxi.Test_openandclouseall.Test_orderseng2 object at 0x000001E679AAE790>\nvar_manager = <template.commons.variable_manager.VariableManager object at 0x000001E679B0E9A0>\nlogged_session = <template.commons.session.EnvironmentSession object at 0x000001E679AAE7F0>\n\n    @allure.title(\"跟单管理-开仓日志-开平仓明细-开仓后\")\n    def test_query_opentrader_detail(self, var_manager, logged_session):\n        with allure.step(\"1. 发送请求\"):\n            ticket_open = var_manager.get_variable(\"ticket_open\")\n            params = {\n                \"_t\": current_timestamp_seconds,\n                \"pageNo\": 1,\n                \"pageSize\": 50,\n                \"self_master_ticket\": ticket_open\n            }\n            response = self.send_get_request(\n                logged_session,\n                '/online/cgreport/api/getColumnsAndData/1568899025974796289',\n                params=params\n            )\n    \n        with allure.step(\"2. 返回校验\"):\n            self.assert_json_value(\n                response,\n                \"$.success\",\n                True,\n                \"响应success字段应为true\"\n            )\n    \n        with allure.step(f\"3. 查询校验\"):\n            slave_ticket_list = self.json_utils.extract(\n                response.json(),\n                \"$.result.data.records[0].slave_ticket\",\n                default=[],\n                multi_match=True\n            )\n            follow_account = var_manager.get_variable(\"follow_account\")\n            if not slave_ticket_list:\n                attach_body = f\"跟单账号：{follow_account}，返回的slave_ticket列表为空（暂无数据）\"\n            else:\n                attach_body = f\"跟单账号：{follow_account}，返回 {len(slave_ticket_list)} 条记录，slave_ticket值如下：\\n\" + \\\n                              \"\\n\".join(\n                                  [f\"第 {idx + 1} 条：{s}\" for idx, s in enumerate(slave_ticket_list)])\n    \n            allure.attach(\n                body=attach_body,\n                name=f\"跟单账号：{follow_account}结果\",\n                attachment_type=\"text/plain\"\n            )\n    \n            for idx, slave_ticket in enumerate(slave_ticket_list):\n                order_no = var_manager.get_variable(\"order_no\")\n                self.verify_data(\n                    actual_value=slave_ticket,\n                    expected_value=order_no,\n                    op=CompareOp.EQ,\n                    use_isclose=False,\n                    message=f\"第 {idx + 1} 条记录的订单号应为{slave_ticket}\",\n                    attachment_name=f\"跟单账户:{follow_account}第 {idx + 1} 条记录校验\"\n                )\n    \n            with allure.step(\"喊单者订单号校验\"):\n                master_ticket = self.json_utils.extract(response.json(),\n                                                        \"$.result.data.records[0].master_ticket\")\n                ticket_open = var_manager.get_variable(\"ticket_open\")\n    \n                self.verify_data(\n                    actual_value=master_ticket,\n                    expected_value=ticket_open,\n                    op=CompareOp.EQ,\n                    use_isclose=False,\n                    message=f\"喊单者订单号符合预期\",\n                    attachment_name=\"喊单者订单号详情\"\n                )\n                logger.info(f\"喊单者订单号验证通过: {master_ticket}\")\n    \n            with allure.step(\"喊单者手数校验\"):\n                master_lots = self.json_utils.extract(response.json(),\n                                                      \"$.result.data.records[0].master_lots\")\n                lots_open = var_manager.get_variable(\"lots_open\")\n    \n                self.verify_data(\n                    actual_value=float(master_lots),\n                    expected_value=float(lots_open),\n                    op=CompareOp.EQ,\n                    message=f\"喊单者手数符合预期\",\n                    attachment_name=\"喊单者手数详情\"\n                )\n                logger.info(f\"喊单者手数验证通过: {master_lots}\")\n    \n            with allure.step(\"跟单手数校验\"):\n                slave_lots = self.json_utils.extract(response.json(),\n                                                     \"$.result.data.records[0].slave_lots\")\n                if not slave_lots:\n                    allure.attach(\"跟单手数返回为空\", \"跟单手数详情\", allure.attachment_type.TEXT)\n                else:\n                    lots_open = var_manager.get_variable(\"lots_open\")\n                    follow_periodP = var_manager.get_variable(\"follow_periodP\")\n                    trader_periodP = var_manager.get_variable(\"trader_periodP\")\n                    # 获取跟单净值比例\n                    fixed_proportion = var_manager.get_variable(\"fixed_proportion\")\n                    # 百分比数据转换\n                    follow_fixed_decimal = percentage_to_decimal(fixed_proportion)\n                    expected_lots_open = lots_open * (follow_periodP / trader_periodP) * follow_fixed_decimal\n    \n                    # 最小手数限制（0.01）\n                    min_order_size = 0.01\n                    if expected_lots_open < min_order_size:\n                        allure.attach(\n                            f\"计算预期手数{expected_lots_open} < 最小手数{min_order_size}，强制重置为{min_order_size}\",\n                            \"预期手数调整说明\", allure.attachment_type.TEXT)\n                        expected_lots_open = min_order_size\n    \n>                   self.verify_data(\n                        actual_value=float(slave_lots),\n                        expected_value=float(expected_lots_open),\n                        op=CompareOp.EQ,\n                        message=f\"跟单手数符合预期\",\n                        attachment_name=\"跟单手数详情\"\n                    )\n\ntest_cloudTrader\\test_lianxi.py:735: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template.test_cloudTrader.test_lianxi.Test_openandclouseall.Test_orderseng2 object at 0x000001E679AAE790>\nactual_value = 0.01, expected_value = 0.010898741854727577\nop = <CompareOp.EQ: '=='>, message = '跟单手数符合预期', attachment_name = '跟单手数详情'\nattachment_type = 'text/plain', use_isclose = True, rel_tol = 1e-09, abs_tol = 0\n\n    def verify_data(\n            self,\n            actual_value,\n            expected_value,\n            op: CompareOp,\n            message: str,\n            attachment_name: str,\n            attachment_type=\"text/plain\",\n            use_isclose=True,  # 新增参数：是否启用math.isclose容错（默认启用）\n            rel_tol=1e-9,  # 相对容差（仅当use_isclose=True时生效）\n            abs_tol=0  # 绝对容差（仅当use_isclose=True时生效）\n    ):\n        \"\"\"\n        通用数据校验函数，支持浮点容错比较\n        :param actual_value: 实际值\n        :param expected_value: 预期值\n        :param op: 比较操作，CompareOp 枚举\n        :param message: 校验失败时的提示信息\n        :param attachment_name: Allure 附件名称\n        :param attachment_type: Allure 附件类型，默认文本\n        :param use_isclose: 是否使用math.isclose进行浮点容错比较\n        :param rel_tol: 相对容差（默认1e-9）\n        :param abs_tol: 绝对容差（默认0.0）\n        其他参数同前\n        \"\"\"\n        with allure.step(f\"校验: {message}\"):\n            result = False\n            try:\n                # 处理浮点容错比较（仅对EQ/NE操作生效）\n                if use_isclose and op in (CompareOp.EQ, CompareOp.NE):\n                    if not (isinstance(actual_value, (int, float)) and\n                            isinstance(expected_value, (int, float))):\n                        # 非数字类型自动禁用isclose，避免报错\n                        use_isclose = False\n                        logging.warning(f\"自动禁用isclose：非数字类型比较（实际值类型：{type(actual_value)}）\")\n    \n                    # 计算isclose结果\n                    is_close = math.isclose(\n                        actual_value,\n                        expected_value,\n                        rel_tol=rel_tol,\n                        abs_tol=abs_tol\n                    )\n                    # 根据操作类型取反\n                    result = is_close if op == CompareOp.EQ else not is_close\n    \n                # 普通比较逻辑\n                else:\n                    if op == CompareOp.EQ:\n                        result = actual_value == expected_value\n                    elif op == CompareOp.NE:\n                        result = actual_value != expected_value\n                    elif op == CompareOp.GT:\n                        result = actual_value > expected_value\n                    elif op == CompareOp.LT:\n                        result = actual_value < expected_value\n                    elif op == CompareOp.GE:\n                        result = actual_value >= expected_value\n                    elif op == CompareOp.LE:\n                        result = actual_value <= expected_value\n                    elif op == CompareOp.IN:\n                        result = actual_value in expected_value\n                    elif op == CompareOp.NOT_IN:\n                        result = actual_value not in expected_value\n    \n            except TypeError as e:\n                pytest.fail(\n                    f\"校验类型错误: {str(e)}\\n实际值类型: {type(actual_value)}, 预期值类型: {type(expected_value)}\")\n    \n            # 生成详细提示信息（包含容差参数）\n            detail_msg = (\n                f\"\\n实际: {actual_value}\\n\"\n                f\"操作: {op.value}\\n\"\n                f\"预期: {expected_value}\\n\"\n            )\n    \n            # 添加allure.attach，将信息写入报告\n            allure.attach(\n                detail_msg,  # 附件内容\n                name=attachment_name,  # 附件名称（来自参数）\n                attachment_type=attachment_type  # 附件类型\n            )\n    \n            if not result:\n>               pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\nE               Failed: 校验失败: 跟单手数符合预期\nE               \nE               实际: 0.01\nE               操作: ==\nE               预期: 0.010898741854727577\n\ncommons\\api_base.py:1362: Failed",
    "steps" : [ {
      "name" : "1. 发送请求",
      "time" : {
        "start" : 1758183965057,
        "stop" : 1758183968643,
        "duration" : 3586
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "执行 GET 请求",
        "time" : {
          "start" : 1758183965057,
          "stop" : 1758183968643,
          "duration" : 3586
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "请求详情",
          "time" : {
            "start" : 1758183965057,
            "stop" : 1758183965058,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "4f7c9b5f9a31ace9",
            "name" : "请求URL",
            "source" : "4f7c9b5f9a31ace9.txt",
            "type" : "text/plain",
            "size" : 58
          }, {
            "uid" : "bdacfd8ce5d82bd1",
            "name" : "请求头",
            "source" : "bdacfd8ce5d82bd1.json",
            "type" : "application/json",
            "size" : 429
          }, {
            "uid" : "1725573bce759ab7",
            "name" : "请求体（表单/文件）",
            "source" : "1725573bce759ab7.txt",
            "type" : "text/plain",
            "size" : 79
          } ],
          "parameters" : [ ],
          "hasContent" : true,
          "stepsCount" : 0,
          "attachmentsCount" : 3,
          "shouldDisplayMessage" : false
        }, {
          "name" : "响应详情",
          "time" : {
            "start" : 1758183965626,
            "stop" : 1758183965628,
            "duration" : 2
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "9962c6b10c9375fb",
            "name" : "响应状态码",
            "source" : "9962c6b10c9375fb.txt",
            "type" : "text/plain",
            "size" : 3
          }, {
            "uid" : "3379ff270a8b3e82",
            "name" : "响应头",
            "source" : "3379ff270a8b3e82.json",
            "type" : "application/json",
            "size" : 460
          }, {
            "uid" : "6ed17944c060458e",
            "name" : "响应体（JSON）",
            "source" : "6ed17944c060458e.json",
            "type" : "application/json",
            "size" : 5405
          } ],
          "parameters" : [ ],
          "hasContent" : true,
          "stepsCount" : 0,
          "attachmentsCount" : 3,
          "shouldDisplayMessage" : false
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "hasContent" : true,
        "stepsCount" : 2,
        "attachmentsCount" : 6,
        "shouldDisplayMessage" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 3,
      "attachmentsCount" : 6,
      "shouldDisplayMessage" : false
    }, {
      "name" : "2. 返回校验",
      "time" : {
        "start" : 1758183968643,
        "stop" : 1758183968648,
        "duration" : 5
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "断言JSON路径: $.success",
        "time" : {
          "start" : 1758183968647,
          "stop" : 1758183968648,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "c3f6dc7e96a8611",
          "name" : "请求URL",
          "source" : "c3f6dc7e96a8611.txt",
          "type" : "text/plain",
          "size" : 152
        }, {
          "uid" : "35c0295f9b53534c",
          "name" : "预期值",
          "source" : "35c0295f9b53534c.txt",
          "type" : "text/plain",
          "size" : 15
        }, {
          "uid" : "17b1bb5cca933d87",
          "name" : "实际值",
          "source" : "17b1bb5cca933d87.txt",
          "type" : "text/plain",
          "size" : 15
        } ],
        "parameters" : [ ],
        "hasContent" : true,
        "stepsCount" : 0,
        "attachmentsCount" : 3,
        "shouldDisplayMessage" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 1,
      "attachmentsCount" : 3,
      "shouldDisplayMessage" : false
    }, {
      "name" : "3. 查询校验",
      "time" : {
        "start" : 1758183968648,
        "stop" : 1758183968667,
        "duration" : 19
      },
      "status" : "failed",
      "statusMessage" : "Failed: 校验失败: 跟单手数符合预期\n\n实际: 0.01\n操作: ==\n预期: 0.010898741854727577\n\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\template\\test_cloudTrader\\test_lianxi.py\", line 735, in test_query_opentrader_detail\n    self.verify_data(\n  File \"D:\\pycharm_test\\template\\commons\\api_base.py\", line 1362, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n",
      "steps" : [ {
        "name" : "校验: 第 1 条记录的订单号应为44269148",
        "time" : {
          "start" : 1758183968653,
          "stop" : 1758183968653,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "3611ef87f25d859b",
          "name" : "跟单账户:2088767546第 1 条记录校验",
          "source" : "3611ef87f25d859b.attach",
          "type" : "text/plain",
          "size" : 46
        } ],
        "parameters" : [ ],
        "hasContent" : true,
        "stepsCount" : 0,
        "attachmentsCount" : 1,
        "shouldDisplayMessage" : false
      }, {
        "name" : "喊单者订单号校验",
        "time" : {
          "start" : 1758183968653,
          "stop" : 1758183968658,
          "duration" : 5
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "校验: 喊单者订单号符合预期",
          "time" : {
            "start" : 1758183968658,
            "stop" : 1758183968658,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "74f2a8547fae6619",
            "name" : "喊单者订单号详情",
            "source" : "74f2a8547fae6619.attach",
            "type" : "text/plain",
            "size" : 46
          } ],
          "parameters" : [ ],
          "hasContent" : true,
          "stepsCount" : 0,
          "attachmentsCount" : 1,
          "shouldDisplayMessage" : false
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "hasContent" : true,
        "stepsCount" : 1,
        "attachmentsCount" : 1,
        "shouldDisplayMessage" : false
      }, {
        "name" : "喊单者手数校验",
        "time" : {
          "start" : 1758183968658,
          "stop" : 1758183968663,
          "duration" : 5
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "校验: 喊单者手数符合预期",
          "time" : {
            "start" : 1758183968662,
            "stop" : 1758183968663,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "9f463c7913d8aaca",
            "name" : "喊单者手数详情",
            "source" : "9f463c7913d8aaca.attach",
            "type" : "text/plain",
            "size" : 38
          } ],
          "parameters" : [ ],
          "hasContent" : true,
          "stepsCount" : 0,
          "attachmentsCount" : 1,
          "shouldDisplayMessage" : false
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "hasContent" : true,
        "stepsCount" : 1,
        "attachmentsCount" : 1,
        "shouldDisplayMessage" : false
      }, {
        "name" : "跟单手数校验",
        "time" : {
          "start" : 1758183968663,
          "stop" : 1758183968667,
          "duration" : 4
        },
        "status" : "failed",
        "statusMessage" : "Failed: 校验失败: 跟单手数符合预期\n\n实际: 0.01\n操作: ==\n预期: 0.010898741854727577\n\n",
        "statusTrace" : "  File \"D:\\pycharm_test\\template\\test_cloudTrader\\test_lianxi.py\", line 735, in test_query_opentrader_detail\n    self.verify_data(\n  File \"D:\\pycharm_test\\template\\commons\\api_base.py\", line 1362, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n",
        "steps" : [ {
          "name" : "校验: 跟单手数符合预期",
          "time" : {
            "start" : 1758183968666,
            "stop" : 1758183968666,
            "duration" : 0
          },
          "status" : "failed",
          "statusMessage" : "Failed: 校验失败: 跟单手数符合预期\n\n实际: 0.01\n操作: ==\n预期: 0.010898741854727577\n\n",
          "statusTrace" : "  File \"D:\\pycharm_test\\template\\commons\\api_base.py\", line 1362, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "9213427cace0e716",
            "name" : "跟单手数详情",
            "source" : "9213427cace0e716.attach",
            "type" : "text/plain",
            "size" : 54
          } ],
          "parameters" : [ ],
          "hasContent" : true,
          "stepsCount" : 0,
          "attachmentsCount" : 1,
          "shouldDisplayMessage" : true
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "hasContent" : true,
        "stepsCount" : 1,
        "attachmentsCount" : 1,
        "shouldDisplayMessage" : false
      } ],
      "attachments" : [ {
        "uid" : "bdfb1b71af9338bc",
        "name" : "跟单账号：2088767546结果",
        "source" : "bdfb1b71af9338bc.attach",
        "type" : "text/plain",
        "size" : 94
      } ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 7,
      "attachmentsCount" : 5,
      "shouldDisplayMessage" : false
    } ],
    "attachments" : [ {
      "uid" : "dc3e59a7c2ef99b7",
      "name" : "log",
      "source" : "dc3e59a7c2ef99b7.txt",
      "type" : "text/plain",
      "size" : 784
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 14,
    "attachmentsCount" : 15,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "场景2：跟随方式-按净值-1%"
  }, {
    "name" : "feature",
    "value" : "跟随方式-按净值"
  }, {
    "name" : "parentSuite",
    "value" : "test_cloudTrader"
  }, {
    "name" : "suite",
    "value" : "test_lianxi"
  }, {
    "name" : "subSuite",
    "value" : "Test_openandclouseall"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "40272-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_cloudTrader.test_lianxi"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "1618b3f65d0762ba.json",
  "parameterValues" : [ ]
}