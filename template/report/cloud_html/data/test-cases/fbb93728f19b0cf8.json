{
  "uid" : "fbb93728f19b0cf8",
  "name" : "跟单管理-VPS管理-跟单者账号-开仓后",
  "fullName" : "test_cloudTrader.test_oac_proportion.Test_orderseng4#test_query_openfollow_getRecordList",
  "historyId" : "54ba1471b86c46996f82a4db0e769976",
  "time" : {
    "start" : 1758168456700,
    "stop" : 1758168460270,
    "duration" : 3570
  },
  "description" : "\n    ### 测试说明\n    - 前置条件：有喊单账号、跟单账号，跟单已经和喊单有订阅关系\n      1. MT4进行登录，然后进行开仓，总手数0.01\n      2. 账号管理-持仓订单-喊单和跟单数据校验\n      3. 跟单管理-开仓日志-喊单和跟单数据校验\n      4. 跟单管理-VPS管理-喊单和跟单数据校验\n      5. MT4进行平仓\n      6.账号管理-持仓订单-喊单和跟单数据校验\n      7.跟单管理-开仓日志-喊单和跟单数据校验\n      8.跟单管理-VPS管理-喊单和跟单数据校验\n    - 预期结果：喊单和跟单数据校验正确\n    ",
  "descriptionHtml" : "<pre><code>### 测试说明\n- 前置条件：有喊单账号、跟单账号，跟单已经和喊单有订阅关系\n  1. MT4进行登录，然后进行开仓，总手数0.01\n  2. 账号管理-持仓订单-喊单和跟单数据校验\n  3. 跟单管理-开仓日志-喊单和跟单数据校验\n  4. 跟单管理-VPS管理-喊单和跟单数据校验\n  5. MT4进行平仓\n  6.账号管理-持仓订单-喊单和跟单数据校验\n  7.跟单管理-开仓日志-喊单和跟单数据校验\n  8.跟单管理-VPS管理-喊单和跟单数据校验\n- 预期结果：喊单和跟单数据校验正确\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "Failed: 校验失败: 手数符合预期\n\n实际: 0.0\n操作: ==\n预期: 0.2",
  "statusTrace" : "self = <template.test_cloudTrader.test_oac_proportion.Test_openandclouseall.Test_orderseng4 object at 0x000002707CFF8070>\nvar_manager = <template.commons.variable_manager.VariableManager object at 0x000002707CFF8FA0>\nlogged_session = <template.commons.session.EnvironmentSession object at 0x000002707CFF2DF0>\n\n    @allure.title(\"跟单管理-VPS管理-跟单者账号-开仓后\")\n    def test_query_openfollow_getRecordList(self, var_manager, logged_session):\n        with allure.step(\"1. 发送请求\"):\n            follow_account = var_manager.get_variable(\"follow_account\")\n            vpsrunIpAddr = var_manager.get_variable(\"vpsrunIpAddr\")\n            params = {\n                \"_t\": current_timestamp_seconds,\n                \"pageNo\": \"1\",\n                \"pageSize\": \"50\",\n                \"accountLike\": follow_account,\n                \"serverNameLike\": \"\",\n                \"connectTraderLike\": \"\",\n                \"connected\": \"\",\n                \"runIpAddr\": vpsrunIpAddr\n            }\n            response = self.send_get_request(\n                logged_session,\n                '/blockchain/account/getRecordList',\n                params=params\n            )\n    \n        with allure.step(\"2. 返回校验\"):\n            self.assert_json_value(\n                response,\n                \"$.searchCount\",\n                True,\n                \"响应searchCount字段应为true\"\n            )\n    \n        with allure.step(f\"3. 数据校验\"):\n            with allure.step(\"跟单手数校验-MT4开仓手数和持仓订单手数\"):\n                totalLots = self.json_utils.extract(response.json(), \"$.records[0].totalLots\")\n                logging.info(f\"手数是: {totalLots}\")\n    \n                lots_open = var_manager.get_variable(\"lots_open\")\n    \n                follow_fixed_proportion = var_manager.get_variable(\"follow_fixed_proportion\")\n                follow_fixed_decimal = percentage_to_decimal(follow_fixed_proportion)\n                expected_lots_open = lots_open * follow_fixed_decimal\n    \n                # 最小手数限制（0.01）\n                min_order_size = 0.01\n                if expected_lots_open < min_order_size:\n                    allure.attach(\n                        f\"计算预期手数{expected_lots_open} < 最小手数{min_order_size}，强制重置为{min_order_size}\",\n                        \"预期手数调整说明\", allure.attachment_type.TEXT)\n                    expected_lots_open = min_order_size\n    \n>               self.verify_data(\n                    actual_value=float(totalLots),\n                    expected_value=float(expected_lots_open),\n                    op=CompareOp.EQ,\n                    message=f\"手数符合预期\",\n                    attachment_name=\"手数详情\"\n                )\n\ntest_cloudTrader\\test_oac_proportion.py:4312: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template.test_cloudTrader.test_oac_proportion.Test_openandclouseall.Test_orderseng4 object at 0x000002707CFF8070>\nactual_value = 0.0, expected_value = 0.2, op = <CompareOp.EQ: '=='>\nmessage = '手数符合预期', attachment_name = '手数详情', attachment_type = 'text/plain'\nuse_isclose = True, rel_tol = 1e-09, abs_tol = 0\n\n    def verify_data(\n            self,\n            actual_value,\n            expected_value,\n            op: CompareOp,\n            message: str,\n            attachment_name: str,\n            attachment_type=\"text/plain\",\n            use_isclose=True,  # 新增参数：是否启用math.isclose容错（默认启用）\n            rel_tol=1e-9,  # 相对容差（仅当use_isclose=True时生效）\n            abs_tol=0  # 绝对容差（仅当use_isclose=True时生效）\n    ):\n        \"\"\"\n        通用数据校验函数，支持浮点容错比较\n        :param actual_value: 实际值\n        :param expected_value: 预期值\n        :param op: 比较操作，CompareOp 枚举\n        :param message: 校验失败时的提示信息\n        :param attachment_name: Allure 附件名称\n        :param attachment_type: Allure 附件类型，默认文本\n        :param use_isclose: 是否使用math.isclose进行浮点容错比较\n        :param rel_tol: 相对容差（默认1e-9）\n        :param abs_tol: 绝对容差（默认0.0）\n        其他参数同前\n        \"\"\"\n        with allure.step(f\"校验: {message}\"):\n            result = False\n            try:\n                # 处理浮点容错比较（仅对EQ/NE操作生效）\n                if use_isclose and op in (CompareOp.EQ, CompareOp.NE):\n                    if not (isinstance(actual_value, (int, float)) and\n                            isinstance(expected_value, (int, float))):\n                        # 非数字类型自动禁用isclose，避免报错\n                        use_isclose = False\n                        logging.warning(f\"自动禁用isclose：非数字类型比较（实际值类型：{type(actual_value)}）\")\n    \n                    # 计算isclose结果\n                    is_close = math.isclose(\n                        actual_value,\n                        expected_value,\n                        rel_tol=rel_tol,\n                        abs_tol=abs_tol\n                    )\n                    # 根据操作类型取反\n                    result = is_close if op == CompareOp.EQ else not is_close\n    \n                # 普通比较逻辑\n                else:\n                    if op == CompareOp.EQ:\n                        result = actual_value == expected_value\n                    elif op == CompareOp.NE:\n                        result = actual_value != expected_value\n                    elif op == CompareOp.GT:\n                        result = actual_value > expected_value\n                    elif op == CompareOp.LT:\n                        result = actual_value < expected_value\n                    elif op == CompareOp.GE:\n                        result = actual_value >= expected_value\n                    elif op == CompareOp.LE:\n                        result = actual_value <= expected_value\n                    elif op == CompareOp.IN:\n                        result = actual_value in expected_value\n                    elif op == CompareOp.NOT_IN:\n                        result = actual_value not in expected_value\n    \n            except TypeError as e:\n                pytest.fail(\n                    f\"校验类型错误: {str(e)}\\n实际值类型: {type(actual_value)}, 预期值类型: {type(expected_value)}\")\n    \n            # 生成详细提示信息（包含容差参数）\n            detail_msg = (\n                f\"\\n实际: {actual_value}\\n\"\n                f\"操作: {op.value}\\n\"\n                f\"预期: {expected_value}\\n\"\n            )\n    \n            # 添加allure.attach，将信息写入报告\n            allure.attach(\n                detail_msg,  # 附件内容\n                name=attachment_name,  # 附件名称（来自参数）\n                attachment_type=attachment_type  # 附件类型\n            )\n    \n            if not result:\n>               pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\nE               Failed: 校验失败: 手数符合预期\nE               \nE               实际: 0.0\nE               操作: ==\nE               预期: 0.2\n\ncommons\\api_base.py:1362: Failed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "\n    ### 测试说明\n    - 前置条件：有喊单账号、跟单账号，跟单已经和喊单有订阅关系\n      1. MT4进行登录，然后进行开仓，总手数0.01\n      2. 账号管理-持仓订单-喊单和跟单数据校验\n      3. 跟单管理-开仓日志-喊单和跟单数据校验\n      4. 跟单管理-VPS管理-喊单和跟单数据校验\n      5. MT4进行平仓\n      6.账号管理-持仓订单-喊单和跟单数据校验\n      7.跟单管理-开仓日志-喊单和跟单数据校验\n      8.跟单管理-VPS管理-喊单和跟单数据校验\n    - 预期结果：喊单和跟单数据校验正确\n    ",
    "status" : "failed",
    "statusMessage" : "Failed: 校验失败: 手数符合预期\n\n实际: 0.0\n操作: ==\n预期: 0.2",
    "statusTrace" : "self = <template.test_cloudTrader.test_oac_proportion.Test_openandclouseall.Test_orderseng4 object at 0x000002707CFF8070>\nvar_manager = <template.commons.variable_manager.VariableManager object at 0x000002707CFF8FA0>\nlogged_session = <template.commons.session.EnvironmentSession object at 0x000002707CFF2DF0>\n\n    @allure.title(\"跟单管理-VPS管理-跟单者账号-开仓后\")\n    def test_query_openfollow_getRecordList(self, var_manager, logged_session):\n        with allure.step(\"1. 发送请求\"):\n            follow_account = var_manager.get_variable(\"follow_account\")\n            vpsrunIpAddr = var_manager.get_variable(\"vpsrunIpAddr\")\n            params = {\n                \"_t\": current_timestamp_seconds,\n                \"pageNo\": \"1\",\n                \"pageSize\": \"50\",\n                \"accountLike\": follow_account,\n                \"serverNameLike\": \"\",\n                \"connectTraderLike\": \"\",\n                \"connected\": \"\",\n                \"runIpAddr\": vpsrunIpAddr\n            }\n            response = self.send_get_request(\n                logged_session,\n                '/blockchain/account/getRecordList',\n                params=params\n            )\n    \n        with allure.step(\"2. 返回校验\"):\n            self.assert_json_value(\n                response,\n                \"$.searchCount\",\n                True,\n                \"响应searchCount字段应为true\"\n            )\n    \n        with allure.step(f\"3. 数据校验\"):\n            with allure.step(\"跟单手数校验-MT4开仓手数和持仓订单手数\"):\n                totalLots = self.json_utils.extract(response.json(), \"$.records[0].totalLots\")\n                logging.info(f\"手数是: {totalLots}\")\n    \n                lots_open = var_manager.get_variable(\"lots_open\")\n    \n                follow_fixed_proportion = var_manager.get_variable(\"follow_fixed_proportion\")\n                follow_fixed_decimal = percentage_to_decimal(follow_fixed_proportion)\n                expected_lots_open = lots_open * follow_fixed_decimal\n    \n                # 最小手数限制（0.01）\n                min_order_size = 0.01\n                if expected_lots_open < min_order_size:\n                    allure.attach(\n                        f\"计算预期手数{expected_lots_open} < 最小手数{min_order_size}，强制重置为{min_order_size}\",\n                        \"预期手数调整说明\", allure.attachment_type.TEXT)\n                    expected_lots_open = min_order_size\n    \n>               self.verify_data(\n                    actual_value=float(totalLots),\n                    expected_value=float(expected_lots_open),\n                    op=CompareOp.EQ,\n                    message=f\"手数符合预期\",\n                    attachment_name=\"手数详情\"\n                )\n\ntest_cloudTrader\\test_oac_proportion.py:4312: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template.test_cloudTrader.test_oac_proportion.Test_openandclouseall.Test_orderseng4 object at 0x000002707CFF8070>\nactual_value = 0.0, expected_value = 0.2, op = <CompareOp.EQ: '=='>\nmessage = '手数符合预期', attachment_name = '手数详情', attachment_type = 'text/plain'\nuse_isclose = True, rel_tol = 1e-09, abs_tol = 0\n\n    def verify_data(\n            self,\n            actual_value,\n            expected_value,\n            op: CompareOp,\n            message: str,\n            attachment_name: str,\n            attachment_type=\"text/plain\",\n            use_isclose=True,  # 新增参数：是否启用math.isclose容错（默认启用）\n            rel_tol=1e-9,  # 相对容差（仅当use_isclose=True时生效）\n            abs_tol=0  # 绝对容差（仅当use_isclose=True时生效）\n    ):\n        \"\"\"\n        通用数据校验函数，支持浮点容错比较\n        :param actual_value: 实际值\n        :param expected_value: 预期值\n        :param op: 比较操作，CompareOp 枚举\n        :param message: 校验失败时的提示信息\n        :param attachment_name: Allure 附件名称\n        :param attachment_type: Allure 附件类型，默认文本\n        :param use_isclose: 是否使用math.isclose进行浮点容错比较\n        :param rel_tol: 相对容差（默认1e-9）\n        :param abs_tol: 绝对容差（默认0.0）\n        其他参数同前\n        \"\"\"\n        with allure.step(f\"校验: {message}\"):\n            result = False\n            try:\n                # 处理浮点容错比较（仅对EQ/NE操作生效）\n                if use_isclose and op in (CompareOp.EQ, CompareOp.NE):\n                    if not (isinstance(actual_value, (int, float)) and\n                            isinstance(expected_value, (int, float))):\n                        # 非数字类型自动禁用isclose，避免报错\n                        use_isclose = False\n                        logging.warning(f\"自动禁用isclose：非数字类型比较（实际值类型：{type(actual_value)}）\")\n    \n                    # 计算isclose结果\n                    is_close = math.isclose(\n                        actual_value,\n                        expected_value,\n                        rel_tol=rel_tol,\n                        abs_tol=abs_tol\n                    )\n                    # 根据操作类型取反\n                    result = is_close if op == CompareOp.EQ else not is_close\n    \n                # 普通比较逻辑\n                else:\n                    if op == CompareOp.EQ:\n                        result = actual_value == expected_value\n                    elif op == CompareOp.NE:\n                        result = actual_value != expected_value\n                    elif op == CompareOp.GT:\n                        result = actual_value > expected_value\n                    elif op == CompareOp.LT:\n                        result = actual_value < expected_value\n                    elif op == CompareOp.GE:\n                        result = actual_value >= expected_value\n                    elif op == CompareOp.LE:\n                        result = actual_value <= expected_value\n                    elif op == CompareOp.IN:\n                        result = actual_value in expected_value\n                    elif op == CompareOp.NOT_IN:\n                        result = actual_value not in expected_value\n    \n            except TypeError as e:\n                pytest.fail(\n                    f\"校验类型错误: {str(e)}\\n实际值类型: {type(actual_value)}, 预期值类型: {type(expected_value)}\")\n    \n            # 生成详细提示信息（包含容差参数）\n            detail_msg = (\n                f\"\\n实际: {actual_value}\\n\"\n                f\"操作: {op.value}\\n\"\n                f\"预期: {expected_value}\\n\"\n            )\n    \n            # 添加allure.attach，将信息写入报告\n            allure.attach(\n                detail_msg,  # 附件内容\n                name=attachment_name,  # 附件名称（来自参数）\n                attachment_type=attachment_type  # 附件类型\n            )\n    \n            if not result:\n>               pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\nE               Failed: 校验失败: 手数符合预期\nE               \nE               实际: 0.0\nE               操作: ==\nE               预期: 0.2\n\ncommons\\api_base.py:1362: Failed",
    "steps" : [ {
      "name" : "1. 发送请求",
      "time" : {
        "start" : 1758168456700,
        "stop" : 1758168460259,
        "duration" : 3559
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "执行 GET 请求",
        "time" : {
          "start" : 1758168456700,
          "stop" : 1758168460259,
          "duration" : 3559
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "请求详情",
          "time" : {
            "start" : 1758168456700,
            "stop" : 1758168456701,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "9691ab85d987c619",
            "name" : "请求URL",
            "source" : "9691ab85d987c619.txt",
            "type" : "text/plain",
            "size" : 33
          }, {
            "uid" : "3988347835908555",
            "name" : "请求头",
            "source" : "3988347835908555.json",
            "type" : "application/json",
            "size" : 429
          }, {
            "uid" : "84cea5c1ae0e1999",
            "name" : "请求体（表单/文件）",
            "source" : "84cea5c1ae0e1999.txt",
            "type" : "text/plain",
            "size" : 173
          } ],
          "parameters" : [ ],
          "hasContent" : true,
          "stepsCount" : 0,
          "attachmentsCount" : 3,
          "shouldDisplayMessage" : false
        }, {
          "name" : "响应详情",
          "time" : {
            "start" : 1758168457256,
            "stop" : 1758168457257,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "fce9a3d67f9848b2",
            "name" : "响应状态码",
            "source" : "fce9a3d67f9848b2.txt",
            "type" : "text/plain",
            "size" : 3
          }, {
            "uid" : "42fb549c06cecbfd",
            "name" : "响应头",
            "source" : "42fb549c06cecbfd.json",
            "type" : "application/json",
            "size" : 460
          }, {
            "uid" : "caf953825b0191a4",
            "name" : "响应体（JSON）",
            "source" : "caf953825b0191a4.json",
            "type" : "application/json",
            "size" : 850
          } ],
          "parameters" : [ ],
          "hasContent" : true,
          "stepsCount" : 0,
          "attachmentsCount" : 3,
          "shouldDisplayMessage" : false
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "hasContent" : true,
        "stepsCount" : 2,
        "attachmentsCount" : 6,
        "shouldDisplayMessage" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 3,
      "attachmentsCount" : 6,
      "shouldDisplayMessage" : false
    }, {
      "name" : "2. 返回校验",
      "time" : {
        "start" : 1758168460259,
        "stop" : 1758168460265,
        "duration" : 6
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "断言JSON路径: $.searchCount",
        "time" : {
          "start" : 1758168460264,
          "stop" : 1758168460265,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "6e1180aafadd5652",
          "name" : "请求URL",
          "source" : "6e1180aafadd5652.txt",
          "type" : "text/plain",
          "size" : 191
        }, {
          "uid" : "36d7ab5abf36d2ff",
          "name" : "预期值",
          "source" : "36d7ab5abf36d2ff.txt",
          "type" : "text/plain",
          "size" : 15
        }, {
          "uid" : "e9c0c64a6e8cb040",
          "name" : "实际值",
          "source" : "e9c0c64a6e8cb040.txt",
          "type" : "text/plain",
          "size" : 15
        } ],
        "parameters" : [ ],
        "hasContent" : true,
        "stepsCount" : 0,
        "attachmentsCount" : 3,
        "shouldDisplayMessage" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 1,
      "attachmentsCount" : 3,
      "shouldDisplayMessage" : false
    }, {
      "name" : "3. 数据校验",
      "time" : {
        "start" : 1758168460265,
        "stop" : 1758168460270,
        "duration" : 5
      },
      "status" : "failed",
      "statusMessage" : "Failed: 校验失败: 手数符合预期\n\n实际: 0.0\n操作: ==\n预期: 0.2\n\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\template\\test_cloudTrader\\test_oac_proportion.py\", line 4312, in test_query_openfollow_getRecordList\n    self.verify_data(\n  File \"D:\\pycharm_test\\template\\commons\\api_base.py\", line 1362, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n",
      "steps" : [ {
        "name" : "跟单手数校验-MT4开仓手数和持仓订单手数",
        "time" : {
          "start" : 1758168460265,
          "stop" : 1758168460269,
          "duration" : 4
        },
        "status" : "failed",
        "statusMessage" : "Failed: 校验失败: 手数符合预期\n\n实际: 0.0\n操作: ==\n预期: 0.2\n\n",
        "statusTrace" : "  File \"D:\\pycharm_test\\template\\test_cloudTrader\\test_oac_proportion.py\", line 4312, in test_query_openfollow_getRecordList\n    self.verify_data(\n  File \"D:\\pycharm_test\\template\\commons\\api_base.py\", line 1362, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n",
        "steps" : [ {
          "name" : "校验: 手数符合预期",
          "time" : {
            "start" : 1758168460269,
            "stop" : 1758168460269,
            "duration" : 0
          },
          "status" : "failed",
          "statusMessage" : "Failed: 校验失败: 手数符合预期\n\n实际: 0.0\n操作: ==\n预期: 0.2\n\n",
          "statusTrace" : "  File \"D:\\pycharm_test\\template\\commons\\api_base.py\", line 1362, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "2b75264543628777",
            "name" : "手数详情",
            "source" : "2b75264543628777.attach",
            "type" : "text/plain",
            "size" : 36
          } ],
          "parameters" : [ ],
          "hasContent" : true,
          "stepsCount" : 0,
          "attachmentsCount" : 1,
          "shouldDisplayMessage" : true
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "hasContent" : true,
        "stepsCount" : 1,
        "attachmentsCount" : 1,
        "shouldDisplayMessage" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 2,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false
    } ],
    "attachments" : [ {
      "uid" : "1e8adf3dc7fde919",
      "name" : "log",
      "source" : "1e8adf3dc7fde919.txt",
      "type" : "text/plain",
      "size" : 719
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 9,
    "attachmentsCount" : 11,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "场景4：跟随方式-按比例-固定比例100%-跟单方向反向"
  }, {
    "name" : "feature",
    "value" : "跟随方式-按比例"
  }, {
    "name" : "parentSuite",
    "value" : "test_cloudTrader"
  }, {
    "name" : "suite",
    "value" : "test_oac_proportion"
  }, {
    "name" : "subSuite",
    "value" : "Test_openandclouseall"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "21464-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_cloudTrader.test_oac_proportion"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "fbb93728f19b0cf8.json",
  "parameterValues" : [ ]
}