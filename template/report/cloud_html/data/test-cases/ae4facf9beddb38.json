{
  "uid" : "ae4facf9beddb38",
  "name" : "跟单管理-开仓日志-喊单账户查询-开仓后",
  "fullName" : "test_cloudTrader.test_openandclose.Test_orderseng#test_query_opentrader_getdata",
  "historyId" : "294a057816cd8ade840cd785dfe3c505",
  "time" : {
    "start" : 1758017421786,
    "stop" : 1758017425382,
    "duration" : 3596
  },
  "status" : "failed",
  "statusMessage" : "Failed: 校验失败: 第 1 条记录的订单号应为44253282\n\n实际: 44253282\n操作: ==\n预期: 44253458",
  "statusTrace" : "self = <template.test_cloudTrader.test_openandclose.Test_openandclouseall.Test_orderseng object at 0x000001D2BE1DB160>\nvar_manager = <template.commons.variable_manager.VariableManager object at 0x000001D2BE1DBB50>\nlogged_session = <template.commons.session.EnvironmentSession object at 0x000001D2BE1CCE50>\n\n    @allure.title(\"跟单管理-开仓日志-喊单账户查询-开仓后\")\n    def test_query_opentrader_getdata(self, var_manager, logged_session):\n        with allure.step(\"1. 发送请求\"):\n            trader_account = var_manager.get_variable(\"trader_account\")\n            params = {\n                \"_t\": current_timestamp_seconds,\n                \"master_account\": trader_account,\n                \"column\": \"id\",\n                \"order\": \"desc\",\n                \"pageNo\": 1,\n                \"pageSize\": 50,\n                \"superQueryMatchType\": \"and\"\n            }\n            response = self.send_get_request(\n                logged_session,\n                '/online/cgform/api/getData/2c934301834efb6801834efbe1ba0002',\n                params=params\n            )\n    \n        with allure.step(\"2. 返回校验\"):\n            self.assert_json_value(\n                response,\n                \"$.success\",\n                True,\n                \"响应success字段应为true\"\n            )\n    \n        with allure.step(f\"3. 查询校验\"):\n            master_ticket_list = self.json_utils.extract(\n                response.json(),\n                \"$.result.records[0].master_ticket\",\n                default=[],\n                multi_match=True\n            )\n    \n            if not master_ticket_list:\n                attach_body = f\"喊单账户查询[{trader_account}]，返回的master_ticket列表为空（暂无数据）\"\n            else:\n                attach_body = f\"喊单账户查询[{trader_account}]，返回 {len(master_ticket_list)} 条记录，master_ticket值如下：\\n\" + \\\n                              \"\\n\".join([f\"第 {idx + 1} 条：{s}\" for idx, s in enumerate(master_ticket_list)])\n    \n            allure.attach(\n                body=attach_body,\n                name=f\"喊单账户:{trader_account}查询结果\",\n                attachment_type=\"text/plain\"\n            )\n    \n            for idx, master_ticket in enumerate(master_ticket_list):\n                ticket_open = var_manager.get_variable(\"ticket_open\")\n>               self.verify_data(\n                    actual_value=master_ticket,\n                    expected_value=ticket_open,\n                    op=CompareOp.EQ,\n                    use_isclose=False,\n                    message=f\"第 {idx + 1} 条记录的订单号应为{master_ticket}\",\n                    attachment_name=f\"喊单账户:{trader_account}第 {idx + 1} 条记录校验\"\n                )\n\ntest_cloudTrader\\test_openandclose.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template.test_cloudTrader.test_openandclose.Test_openandclouseall.Test_orderseng object at 0x000001D2BE1DB160>\nactual_value = 44253282, expected_value = 44253458, op = <CompareOp.EQ: '=='>\nmessage = '第 1 条记录的订单号应为44253282', attachment_name = '喊单账户:2088767545第 1 条记录校验'\nattachment_type = 'text/plain', use_isclose = False, rel_tol = 1e-09\nabs_tol = 0\n\n    def verify_data(\n            self,\n            actual_value,\n            expected_value,\n            op: CompareOp,\n            message: str,\n            attachment_name: str,\n            attachment_type=\"text/plain\",\n            use_isclose=True,  # 新增参数：是否启用math.isclose容错（默认启用）\n            rel_tol=1e-9,  # 相对容差（仅当use_isclose=True时生效）\n            abs_tol=0  # 绝对容差（仅当use_isclose=True时生效）\n    ):\n        \"\"\"\n        通用数据校验函数，支持浮点容错比较\n        :param actual_value: 实际值\n        :param expected_value: 预期值\n        :param op: 比较操作，CompareOp 枚举\n        :param message: 校验失败时的提示信息\n        :param attachment_name: Allure 附件名称\n        :param attachment_type: Allure 附件类型，默认文本\n        :param use_isclose: 是否使用math.isclose进行浮点容错比较\n        :param rel_tol: 相对容差（默认1e-9）\n        :param abs_tol: 绝对容差（默认0.0）\n        其他参数同前\n        \"\"\"\n        with allure.step(f\"校验: {message}\"):\n            result = False\n            try:\n                # 处理浮点容错比较（仅对EQ/NE操作生效）\n                if use_isclose and op in (CompareOp.EQ, CompareOp.NE):\n                    if not (isinstance(actual_value, (int, float)) and\n                            isinstance(expected_value, (int, float))):\n                        # 非数字类型自动禁用isclose，避免报错\n                        use_isclose = False\n                        logging.warning(f\"自动禁用isclose：非数字类型比较（实际值类型：{type(actual_value)}）\")\n    \n                    # 计算isclose结果\n                    is_close = math.isclose(\n                        actual_value,\n                        expected_value,\n                        rel_tol=rel_tol,\n                        abs_tol=abs_tol\n                    )\n                    # 根据操作类型取反\n                    result = is_close if op == CompareOp.EQ else not is_close\n    \n                # 普通比较逻辑\n                else:\n                    if op == CompareOp.EQ:\n                        result = actual_value == expected_value\n                    elif op == CompareOp.NE:\n                        result = actual_value != expected_value\n                    elif op == CompareOp.GT:\n                        result = actual_value > expected_value\n                    elif op == CompareOp.LT:\n                        result = actual_value < expected_value\n                    elif op == CompareOp.GE:\n                        result = actual_value >= expected_value\n                    elif op == CompareOp.LE:\n                        result = actual_value <= expected_value\n                    elif op == CompareOp.IN:\n                        result = actual_value in expected_value\n                    elif op == CompareOp.NOT_IN:\n                        result = actual_value not in expected_value\n    \n            except TypeError as e:\n                pytest.fail(\n                    f\"校验类型错误: {str(e)}\\n实际值类型: {type(actual_value)}, 预期值类型: {type(expected_value)}\")\n    \n            # 生成详细提示信息（包含容差参数）\n            detail_msg = (\n                f\"\\n实际: {actual_value}\\n\"\n                f\"操作: {op.value}\\n\"\n                f\"预期: {expected_value}\\n\"\n            )\n    \n            # 添加allure.attach，将信息写入报告\n            allure.attach(\n                detail_msg,  # 附件内容\n                name=attachment_name,  # 附件名称（来自参数）\n                attachment_type=attachment_type  # 附件类型\n            )\n    \n            if not result:\n>               pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\nE               Failed: 校验失败: 第 1 条记录的订单号应为44253282\nE               \nE               实际: 44253282\nE               操作: ==\nE               预期: 44253458\n\ncommons\\api_base.py:1364: Failed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "environment",
    "time" : {
      "start" : 1758017394208,
      "stop" : 1758017394208,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "var_manager",
    "time" : {
      "start" : 1758017394208,
      "stop" : 1758017394208,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "test_group",
    "time" : {
      "start" : 1758017394208,
      "stop" : 1758017394208,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "logged_session",
    "time" : {
      "start" : 1758017394209,
      "stop" : 1758017395790,
      "duration" : 1581
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "api_session",
    "time" : {
      "start" : 1758017394208,
      "stop" : 1758017394209,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "Failed: 校验失败: 第 1 条记录的订单号应为44253282\n\n实际: 44253282\n操作: ==\n预期: 44253458",
    "statusTrace" : "self = <template.test_cloudTrader.test_openandclose.Test_openandclouseall.Test_orderseng object at 0x000001D2BE1DB160>\nvar_manager = <template.commons.variable_manager.VariableManager object at 0x000001D2BE1DBB50>\nlogged_session = <template.commons.session.EnvironmentSession object at 0x000001D2BE1CCE50>\n\n    @allure.title(\"跟单管理-开仓日志-喊单账户查询-开仓后\")\n    def test_query_opentrader_getdata(self, var_manager, logged_session):\n        with allure.step(\"1. 发送请求\"):\n            trader_account = var_manager.get_variable(\"trader_account\")\n            params = {\n                \"_t\": current_timestamp_seconds,\n                \"master_account\": trader_account,\n                \"column\": \"id\",\n                \"order\": \"desc\",\n                \"pageNo\": 1,\n                \"pageSize\": 50,\n                \"superQueryMatchType\": \"and\"\n            }\n            response = self.send_get_request(\n                logged_session,\n                '/online/cgform/api/getData/2c934301834efb6801834efbe1ba0002',\n                params=params\n            )\n    \n        with allure.step(\"2. 返回校验\"):\n            self.assert_json_value(\n                response,\n                \"$.success\",\n                True,\n                \"响应success字段应为true\"\n            )\n    \n        with allure.step(f\"3. 查询校验\"):\n            master_ticket_list = self.json_utils.extract(\n                response.json(),\n                \"$.result.records[0].master_ticket\",\n                default=[],\n                multi_match=True\n            )\n    \n            if not master_ticket_list:\n                attach_body = f\"喊单账户查询[{trader_account}]，返回的master_ticket列表为空（暂无数据）\"\n            else:\n                attach_body = f\"喊单账户查询[{trader_account}]，返回 {len(master_ticket_list)} 条记录，master_ticket值如下：\\n\" + \\\n                              \"\\n\".join([f\"第 {idx + 1} 条：{s}\" for idx, s in enumerate(master_ticket_list)])\n    \n            allure.attach(\n                body=attach_body,\n                name=f\"喊单账户:{trader_account}查询结果\",\n                attachment_type=\"text/plain\"\n            )\n    \n            for idx, master_ticket in enumerate(master_ticket_list):\n                ticket_open = var_manager.get_variable(\"ticket_open\")\n>               self.verify_data(\n                    actual_value=master_ticket,\n                    expected_value=ticket_open,\n                    op=CompareOp.EQ,\n                    use_isclose=False,\n                    message=f\"第 {idx + 1} 条记录的订单号应为{master_ticket}\",\n                    attachment_name=f\"喊单账户:{trader_account}第 {idx + 1} 条记录校验\"\n                )\n\ntest_cloudTrader\\test_openandclose.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template.test_cloudTrader.test_openandclose.Test_openandclouseall.Test_orderseng object at 0x000001D2BE1DB160>\nactual_value = 44253282, expected_value = 44253458, op = <CompareOp.EQ: '=='>\nmessage = '第 1 条记录的订单号应为44253282', attachment_name = '喊单账户:2088767545第 1 条记录校验'\nattachment_type = 'text/plain', use_isclose = False, rel_tol = 1e-09\nabs_tol = 0\n\n    def verify_data(\n            self,\n            actual_value,\n            expected_value,\n            op: CompareOp,\n            message: str,\n            attachment_name: str,\n            attachment_type=\"text/plain\",\n            use_isclose=True,  # 新增参数：是否启用math.isclose容错（默认启用）\n            rel_tol=1e-9,  # 相对容差（仅当use_isclose=True时生效）\n            abs_tol=0  # 绝对容差（仅当use_isclose=True时生效）\n    ):\n        \"\"\"\n        通用数据校验函数，支持浮点容错比较\n        :param actual_value: 实际值\n        :param expected_value: 预期值\n        :param op: 比较操作，CompareOp 枚举\n        :param message: 校验失败时的提示信息\n        :param attachment_name: Allure 附件名称\n        :param attachment_type: Allure 附件类型，默认文本\n        :param use_isclose: 是否使用math.isclose进行浮点容错比较\n        :param rel_tol: 相对容差（默认1e-9）\n        :param abs_tol: 绝对容差（默认0.0）\n        其他参数同前\n        \"\"\"\n        with allure.step(f\"校验: {message}\"):\n            result = False\n            try:\n                # 处理浮点容错比较（仅对EQ/NE操作生效）\n                if use_isclose and op in (CompareOp.EQ, CompareOp.NE):\n                    if not (isinstance(actual_value, (int, float)) and\n                            isinstance(expected_value, (int, float))):\n                        # 非数字类型自动禁用isclose，避免报错\n                        use_isclose = False\n                        logging.warning(f\"自动禁用isclose：非数字类型比较（实际值类型：{type(actual_value)}）\")\n    \n                    # 计算isclose结果\n                    is_close = math.isclose(\n                        actual_value,\n                        expected_value,\n                        rel_tol=rel_tol,\n                        abs_tol=abs_tol\n                    )\n                    # 根据操作类型取反\n                    result = is_close if op == CompareOp.EQ else not is_close\n    \n                # 普通比较逻辑\n                else:\n                    if op == CompareOp.EQ:\n                        result = actual_value == expected_value\n                    elif op == CompareOp.NE:\n                        result = actual_value != expected_value\n                    elif op == CompareOp.GT:\n                        result = actual_value > expected_value\n                    elif op == CompareOp.LT:\n                        result = actual_value < expected_value\n                    elif op == CompareOp.GE:\n                        result = actual_value >= expected_value\n                    elif op == CompareOp.LE:\n                        result = actual_value <= expected_value\n                    elif op == CompareOp.IN:\n                        result = actual_value in expected_value\n                    elif op == CompareOp.NOT_IN:\n                        result = actual_value not in expected_value\n    \n            except TypeError as e:\n                pytest.fail(\n                    f\"校验类型错误: {str(e)}\\n实际值类型: {type(actual_value)}, 预期值类型: {type(expected_value)}\")\n    \n            # 生成详细提示信息（包含容差参数）\n            detail_msg = (\n                f\"\\n实际: {actual_value}\\n\"\n                f\"操作: {op.value}\\n\"\n                f\"预期: {expected_value}\\n\"\n            )\n    \n            # 添加allure.attach，将信息写入报告\n            allure.attach(\n                detail_msg,  # 附件内容\n                name=attachment_name,  # 附件名称（来自参数）\n                attachment_type=attachment_type  # 附件类型\n            )\n    \n            if not result:\n>               pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\nE               Failed: 校验失败: 第 1 条记录的订单号应为44253282\nE               \nE               实际: 44253282\nE               操作: ==\nE               预期: 44253458\n\ncommons\\api_base.py:1364: Failed",
    "steps" : [ {
      "name" : "1. 发送请求",
      "time" : {
        "start" : 1758017421786,
        "stop" : 1758017425360,
        "duration" : 3574
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "执行 GET 请求",
        "time" : {
          "start" : 1758017421786,
          "stop" : 1758017425360,
          "duration" : 3574
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "请求详情",
          "time" : {
            "start" : 1758017421786,
            "stop" : 1758017421788,
            "duration" : 2
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "b777a6f389766895",
            "name" : "请求URL",
            "source" : "b777a6f389766895.txt",
            "type" : "text/plain",
            "size" : 59
          }, {
            "uid" : "bacb72cd87d1b2d3",
            "name" : "请求头",
            "source" : "bacb72cd87d1b2d3.json",
            "type" : "application/json",
            "size" : 429
          }, {
            "uid" : "294b3f89dea853d",
            "name" : "请求体（表单/文件）",
            "source" : "294b3f89dea853d.txt",
            "type" : "text/plain",
            "size" : 142
          } ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "hasContent" : true,
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 3
        }, {
          "name" : "响应详情",
          "time" : {
            "start" : 1758017422353,
            "stop" : 1758017422358,
            "duration" : 5
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "5e37315ecc290e9c",
            "name" : "响应状态码",
            "source" : "5e37315ecc290e9c.txt",
            "type" : "text/plain",
            "size" : 3
          }, {
            "uid" : "76d4931a61744d95",
            "name" : "响应头",
            "source" : "76d4931a61744d95.json",
            "type" : "application/json",
            "size" : 460
          }, {
            "uid" : "99395dcb58bfde4",
            "name" : "响应体（JSON）",
            "source" : "99395dcb58bfde4.json",
            "type" : "application/json",
            "size" : 45153
          } ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "hasContent" : true,
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 3
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 2,
        "hasContent" : true,
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 6
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 3,
      "hasContent" : true,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 6
    }, {
      "name" : "2. 返回校验",
      "time" : {
        "start" : 1758017425360,
        "stop" : 1758017425371,
        "duration" : 11
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "断言JSON路径: $.success",
        "time" : {
          "start" : 1758017425369,
          "stop" : 1758017425371,
          "duration" : 2
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "ebd346f281520e44",
          "name" : "请求URL",
          "source" : "ebd346f281520e44.txt",
          "type" : "text/plain",
          "size" : 196
        }, {
          "uid" : "806d59d0a7d9ac32",
          "name" : "预期值",
          "source" : "806d59d0a7d9ac32.txt",
          "type" : "text/plain",
          "size" : 15
        }, {
          "uid" : "61735bfae273dd7c",
          "name" : "实际值",
          "source" : "61735bfae273dd7c.txt",
          "type" : "text/plain",
          "size" : 15
        } ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "hasContent" : true,
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 3
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 1,
      "hasContent" : true,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 3
    }, {
      "name" : "3. 查询校验",
      "time" : {
        "start" : 1758017425371,
        "stop" : 1758017425381,
        "duration" : 10
      },
      "status" : "failed",
      "statusMessage" : "Failed: 校验失败: 第 1 条记录的订单号应为44253282\n\n实际: 44253282\n操作: ==\n预期: 44253458\n\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\template\\test_cloudTrader\\test_openandclose.py\", line 442, in test_query_opentrader_getdata\n    self.verify_data(\n  File \"D:\\pycharm_test\\template\\commons\\api_base.py\", line 1364, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n",
      "steps" : [ {
        "name" : "校验: 第 1 条记录的订单号应为44253282",
        "time" : {
          "start" : 1758017425380,
          "stop" : 1758017425381,
          "duration" : 1
        },
        "status" : "failed",
        "statusMessage" : "Failed: 校验失败: 第 1 条记录的订单号应为44253282\n\n实际: 44253282\n操作: ==\n预期: 44253458\n\n",
        "statusTrace" : "  File \"D:\\pycharm_test\\template\\commons\\api_base.py\", line 1364, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "99e4123a55672147",
          "name" : "喊单账户:2088767545第 1 条记录校验",
          "source" : "99e4123a55672147.attach",
          "type" : "text/plain",
          "size" : 46
        } ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "hasContent" : true,
        "shouldDisplayMessage" : true,
        "attachmentsCount" : 1
      } ],
      "attachments" : [ {
        "uid" : "517170e6557ce634",
        "name" : "喊单账户:2088767545查询结果",
        "source" : "517170e6557ce634.attach",
        "type" : "text/plain",
        "size" : 100
      } ],
      "parameters" : [ ],
      "stepsCount" : 1,
      "hasContent" : true,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 2
    } ],
    "attachments" : [ {
      "uid" : "7102f4b687845476",
      "name" : "log",
      "source" : "7102f4b687845476.txt",
      "type" : "text/plain",
      "size" : 296
    } ],
    "parameters" : [ ],
    "stepsCount" : 8,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 12
  },
  "afterStages" : [ {
    "name" : "var_manager::0",
    "time" : {
      "start" : 1758017441633,
      "stop" : 1758017441634,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "logged_session::0",
    "time" : {
      "start" : 1758017441632,
      "stop" : 1758017441632,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "api_session::0",
    "time" : {
      "start" : 1758017441633,
      "stop" : 1758017441633,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "账户管理-持仓订单"
  }, {
    "name" : "parentSuite",
    "value" : "test_cloudTrader"
  }, {
    "name" : "suite",
    "value" : "test_openandclose"
  }, {
    "name" : "subSuite",
    "value" : "Test_openandclouseall"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "39736-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_cloudTrader.test_openandclose"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "ae4facf9beddb38.json",
  "parameterValues" : [ ]
}