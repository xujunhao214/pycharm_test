{
  "uid" : "dbd4cc33f245930c",
  "name" : "跟单管理-开仓日志-开平仓明细-平仓后",
  "fullName" : "test_cloudTrader.test_lianxi3.Test_orderseng1#test_query_closetrader_detail",
  "historyId" : "9cc194e5aa36d8bac603b9b4518a1d8c",
  "time" : {
    "start" : 1758598961841,
    "stop" : 1758598965465,
    "duration" : 3624
  },
  "description" : "\n    ### 测试说明\n    - 前置条件：有喊单账号、跟单账号，跟单已经和喊单有订阅关系\n      1. MT4进行登录，然后进行开仓，总手数0.01\n      2. 账号管理-持仓订单-喊单和跟单数据校验\n      3. 跟单管理-开仓日志-喊单和跟单数据校验\n      4. 跟单管理-VPS管理-喊单和跟单数据校验\n      5. MT4进行平仓\n      6.账号管理-持仓订单-喊单和跟单数据校验\n      7.跟单管理-开仓日志-喊单和跟单数据校验\n      8.跟单管理-VPS管理-喊单和跟单数据校验\n    - 预期结果：喊单和跟单数据校验正确\n    ",
  "descriptionHtml" : "<pre><code>### 测试说明\n- 前置条件：有喊单账号、跟单账号，跟单已经和喊单有订阅关系\n  1. MT4进行登录，然后进行开仓，总手数0.01\n  2. 账号管理-持仓订单-喊单和跟单数据校验\n  3. 跟单管理-开仓日志-喊单和跟单数据校验\n  4. 跟单管理-VPS管理-喊单和跟单数据校验\n  5. MT4进行平仓\n  6.账号管理-持仓订单-喊单和跟单数据校验\n  7.跟单管理-开仓日志-喊单和跟单数据校验\n  8.跟单管理-VPS管理-喊单和跟单数据校验\n- 预期结果：喊单和跟单数据校验正确\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "Failed: 校验失败: 第 1 条记录的订单号应为86525803\n\n实际: 86525803\n操作: ==\n预期: None",
  "statusTrace" : "self = <template.test_cloudTrader.test_lianxi3.Test_openandclouseall.Test_orderseng1 object at 0x000002244DBF08E0>\nvar_manager = <template.commons.variable_manager.VariableManager object at 0x000002244DC24C10>\nlogged_session = <template.commons.session.EnvironmentSession object at 0x000002244DC74490>\n\n    @allure.title(\"跟单管理-开仓日志-开平仓明细-平仓后\")\n    def test_query_closetrader_detail(self, var_manager, logged_session):\n        with allure.step(\"1. 发送请求\"):\n            ticket_open = var_manager.get_variable(\"ticket_open\")\n            params = {\n                \"_t\": current_timestamp_seconds,\n                \"pageNo\": 1,\n                \"pageSize\": 50,\n                \"self_master_ticket\": ticket_open\n            }\n            response = self.send_get_request(\n                logged_session,\n                '/online/cgreport/api/getColumnsAndData/1568899025974796289',\n                params=params\n            )\n    \n        with allure.step(\"2. 返回校验\"):\n            self.assert_json_value(\n                response,\n                \"$.success\",\n                True,\n                \"响应success字段应为true\"\n            )\n    \n        with allure.step(f\"3. 查询校验\"):\n            slave_ticket_list = self.json_utils.extract(\n                response.json(),\n                \"$.result.data.records[0].slave_ticket\",\n                default=[],\n                multi_match=True\n            )\n            follow_account = var_manager.get_variable(\"follow_account\")\n            if not slave_ticket_list:\n                attach_body = f\"跟单账号：{follow_account}，返回的slave_ticket列表为空（暂无数据）\"\n            else:\n                attach_body = f\"跟单账号：{follow_account}，返回 {len(slave_ticket_list)} 条记录，slave_ticket值如下：\\n\" + \\\n                              \"\\n\".join(\n                                  [f\"第 {idx + 1} 条：{s}\" for idx, s in enumerate(slave_ticket_list)])\n    \n            allure.attach(\n                body=attach_body,\n                name=f\"跟单账号：{follow_account}结果\",\n                attachment_type=\"text/plain\"\n            )\n    \n            for idx, slave_ticket in enumerate(slave_ticket_list):\n                order_no = var_manager.get_variable(\"order_no\")\n>               self.verify_data(\n                    actual_value=slave_ticket,\n                    expected_value=order_no,\n                    op=CompareOp.EQ,\n                    use_isclose=False,\n                    message=f\"第 {idx + 1} 条记录的订单号应为{slave_ticket}\",\n                    attachment_name=f\"跟单账户:{follow_account}第 {idx + 1} 条记录校验\"\n                )\n\ntest_cloudTrader\\test_lianxi3.py:682: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template.test_cloudTrader.test_lianxi3.Test_openandclouseall.Test_orderseng1 object at 0x000002244DBF08E0>\nactual_value = 86525803, expected_value = None, op = <CompareOp.EQ: '=='>\nmessage = '第 1 条记录的订单号应为86525803', attachment_name = '跟单账户:301390787第 1 条记录校验'\nattachment_type = 'text/plain', use_isclose = False, rel_tol = 1e-09\nabs_tol = 0\n\n    def verify_data(\n            self,\n            actual_value,\n            expected_value,\n            op: CompareOp,\n            message: str,\n            attachment_name: str,\n            attachment_type=\"text/plain\",\n            use_isclose=True,  # 新增参数：是否启用math.isclose容错（默认启用）\n            rel_tol=1e-9,  # 相对容差（仅当use_isclose=True时生效）\n            abs_tol=0  # 绝对容差（仅当use_isclose=True时生效）\n    ):\n        \"\"\"\n        通用数据校验函数，支持浮点容错比较\n        :param actual_value: 实际值\n        :param expected_value: 预期值\n        :param op: 比较操作，CompareOp 枚举\n        :param message: 校验失败时的提示信息\n        :param attachment_name: Allure 附件名称\n        :param attachment_type: Allure 附件类型，默认文本\n        :param use_isclose: 是否使用math.isclose进行浮点容错比较\n        :param rel_tol: 相对容差（默认1e-9）\n        :param abs_tol: 绝对容差（默认0.0）\n        其他参数同前\n        \"\"\"\n        with allure.step(f\"校验: {message}\"):\n            result = False\n            try:\n                # 处理浮点容错比较（仅对EQ/NE操作生效）\n                if use_isclose and op in (CompareOp.EQ, CompareOp.NE):\n                    if not (isinstance(actual_value, (int, float)) and\n                            isinstance(expected_value, (int, float))):\n                        # 非数字类型自动禁用isclose，避免报错\n                        use_isclose = False\n                        logging.warning(f\"自动禁用isclose：非数字类型比较（实际值类型：{type(actual_value)}）\")\n    \n                    # 计算isclose结果\n                    is_close = math.isclose(\n                        actual_value,\n                        expected_value,\n                        rel_tol=rel_tol,\n                        abs_tol=abs_tol\n                    )\n                    # 根据操作类型取反\n                    result = is_close if op == CompareOp.EQ else not is_close\n    \n                # 普通比较逻辑\n                else:\n                    if op == CompareOp.EQ:\n                        result = actual_value == expected_value\n                    elif op == CompareOp.NE:\n                        result = actual_value != expected_value\n                    elif op == CompareOp.GT:\n                        result = actual_value > expected_value\n                    elif op == CompareOp.LT:\n                        result = actual_value < expected_value\n                    elif op == CompareOp.GE:\n                        result = actual_value >= expected_value\n                    elif op == CompareOp.LE:\n                        result = actual_value <= expected_value\n                    elif op == CompareOp.IN:\n                        result = actual_value in expected_value\n                    elif op == CompareOp.NOT_IN:\n                        result = actual_value not in expected_value\n    \n            except TypeError as e:\n                pytest.fail(\n                    f\"校验类型错误: {str(e)}\\n实际值类型: {type(actual_value)}, 预期值类型: {type(expected_value)}\")\n    \n            # 生成详细提示信息（包含容差参数）\n            detail_msg = (\n                f\"\\n实际: {actual_value}\\n\"\n                f\"操作: {op.value}\\n\"\n                f\"预期: {expected_value}\\n\"\n            )\n    \n            # 添加allure.attach，将信息写入报告\n            allure.attach(\n                detail_msg,  # 附件内容\n                name=attachment_name,  # 附件名称（来自参数）\n                attachment_type=attachment_type  # 附件类型\n            )\n    \n            if not result:\n>               pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\nE               Failed: 校验失败: 第 1 条记录的订单号应为86525803\nE               \nE               实际: 86525803\nE               操作: ==\nE               预期: None\n\ncommons\\api_base.py:1362: Failed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "\n    ### 测试说明\n    - 前置条件：有喊单账号、跟单账号，跟单已经和喊单有订阅关系\n      1. MT4进行登录，然后进行开仓，总手数0.01\n      2. 账号管理-持仓订单-喊单和跟单数据校验\n      3. 跟单管理-开仓日志-喊单和跟单数据校验\n      4. 跟单管理-VPS管理-喊单和跟单数据校验\n      5. MT4进行平仓\n      6.账号管理-持仓订单-喊单和跟单数据校验\n      7.跟单管理-开仓日志-喊单和跟单数据校验\n      8.跟单管理-VPS管理-喊单和跟单数据校验\n    - 预期结果：喊单和跟单数据校验正确\n    ",
    "status" : "failed",
    "statusMessage" : "Failed: 校验失败: 第 1 条记录的订单号应为86525803\n\n实际: 86525803\n操作: ==\n预期: None",
    "statusTrace" : "self = <template.test_cloudTrader.test_lianxi3.Test_openandclouseall.Test_orderseng1 object at 0x000002244DBF08E0>\nvar_manager = <template.commons.variable_manager.VariableManager object at 0x000002244DC24C10>\nlogged_session = <template.commons.session.EnvironmentSession object at 0x000002244DC74490>\n\n    @allure.title(\"跟单管理-开仓日志-开平仓明细-平仓后\")\n    def test_query_closetrader_detail(self, var_manager, logged_session):\n        with allure.step(\"1. 发送请求\"):\n            ticket_open = var_manager.get_variable(\"ticket_open\")\n            params = {\n                \"_t\": current_timestamp_seconds,\n                \"pageNo\": 1,\n                \"pageSize\": 50,\n                \"self_master_ticket\": ticket_open\n            }\n            response = self.send_get_request(\n                logged_session,\n                '/online/cgreport/api/getColumnsAndData/1568899025974796289',\n                params=params\n            )\n    \n        with allure.step(\"2. 返回校验\"):\n            self.assert_json_value(\n                response,\n                \"$.success\",\n                True,\n                \"响应success字段应为true\"\n            )\n    \n        with allure.step(f\"3. 查询校验\"):\n            slave_ticket_list = self.json_utils.extract(\n                response.json(),\n                \"$.result.data.records[0].slave_ticket\",\n                default=[],\n                multi_match=True\n            )\n            follow_account = var_manager.get_variable(\"follow_account\")\n            if not slave_ticket_list:\n                attach_body = f\"跟单账号：{follow_account}，返回的slave_ticket列表为空（暂无数据）\"\n            else:\n                attach_body = f\"跟单账号：{follow_account}，返回 {len(slave_ticket_list)} 条记录，slave_ticket值如下：\\n\" + \\\n                              \"\\n\".join(\n                                  [f\"第 {idx + 1} 条：{s}\" for idx, s in enumerate(slave_ticket_list)])\n    \n            allure.attach(\n                body=attach_body,\n                name=f\"跟单账号：{follow_account}结果\",\n                attachment_type=\"text/plain\"\n            )\n    \n            for idx, slave_ticket in enumerate(slave_ticket_list):\n                order_no = var_manager.get_variable(\"order_no\")\n>               self.verify_data(\n                    actual_value=slave_ticket,\n                    expected_value=order_no,\n                    op=CompareOp.EQ,\n                    use_isclose=False,\n                    message=f\"第 {idx + 1} 条记录的订单号应为{slave_ticket}\",\n                    attachment_name=f\"跟单账户:{follow_account}第 {idx + 1} 条记录校验\"\n                )\n\ntest_cloudTrader\\test_lianxi3.py:682: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template.test_cloudTrader.test_lianxi3.Test_openandclouseall.Test_orderseng1 object at 0x000002244DBF08E0>\nactual_value = 86525803, expected_value = None, op = <CompareOp.EQ: '=='>\nmessage = '第 1 条记录的订单号应为86525803', attachment_name = '跟单账户:301390787第 1 条记录校验'\nattachment_type = 'text/plain', use_isclose = False, rel_tol = 1e-09\nabs_tol = 0\n\n    def verify_data(\n            self,\n            actual_value,\n            expected_value,\n            op: CompareOp,\n            message: str,\n            attachment_name: str,\n            attachment_type=\"text/plain\",\n            use_isclose=True,  # 新增参数：是否启用math.isclose容错（默认启用）\n            rel_tol=1e-9,  # 相对容差（仅当use_isclose=True时生效）\n            abs_tol=0  # 绝对容差（仅当use_isclose=True时生效）\n    ):\n        \"\"\"\n        通用数据校验函数，支持浮点容错比较\n        :param actual_value: 实际值\n        :param expected_value: 预期值\n        :param op: 比较操作，CompareOp 枚举\n        :param message: 校验失败时的提示信息\n        :param attachment_name: Allure 附件名称\n        :param attachment_type: Allure 附件类型，默认文本\n        :param use_isclose: 是否使用math.isclose进行浮点容错比较\n        :param rel_tol: 相对容差（默认1e-9）\n        :param abs_tol: 绝对容差（默认0.0）\n        其他参数同前\n        \"\"\"\n        with allure.step(f\"校验: {message}\"):\n            result = False\n            try:\n                # 处理浮点容错比较（仅对EQ/NE操作生效）\n                if use_isclose and op in (CompareOp.EQ, CompareOp.NE):\n                    if not (isinstance(actual_value, (int, float)) and\n                            isinstance(expected_value, (int, float))):\n                        # 非数字类型自动禁用isclose，避免报错\n                        use_isclose = False\n                        logging.warning(f\"自动禁用isclose：非数字类型比较（实际值类型：{type(actual_value)}）\")\n    \n                    # 计算isclose结果\n                    is_close = math.isclose(\n                        actual_value,\n                        expected_value,\n                        rel_tol=rel_tol,\n                        abs_tol=abs_tol\n                    )\n                    # 根据操作类型取反\n                    result = is_close if op == CompareOp.EQ else not is_close\n    \n                # 普通比较逻辑\n                else:\n                    if op == CompareOp.EQ:\n                        result = actual_value == expected_value\n                    elif op == CompareOp.NE:\n                        result = actual_value != expected_value\n                    elif op == CompareOp.GT:\n                        result = actual_value > expected_value\n                    elif op == CompareOp.LT:\n                        result = actual_value < expected_value\n                    elif op == CompareOp.GE:\n                        result = actual_value >= expected_value\n                    elif op == CompareOp.LE:\n                        result = actual_value <= expected_value\n                    elif op == CompareOp.IN:\n                        result = actual_value in expected_value\n                    elif op == CompareOp.NOT_IN:\n                        result = actual_value not in expected_value\n    \n            except TypeError as e:\n                pytest.fail(\n                    f\"校验类型错误: {str(e)}\\n实际值类型: {type(actual_value)}, 预期值类型: {type(expected_value)}\")\n    \n            # 生成详细提示信息（包含容差参数）\n            detail_msg = (\n                f\"\\n实际: {actual_value}\\n\"\n                f\"操作: {op.value}\\n\"\n                f\"预期: {expected_value}\\n\"\n            )\n    \n            # 添加allure.attach，将信息写入报告\n            allure.attach(\n                detail_msg,  # 附件内容\n                name=attachment_name,  # 附件名称（来自参数）\n                attachment_type=attachment_type  # 附件类型\n            )\n    \n            if not result:\n>               pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\nE               Failed: 校验失败: 第 1 条记录的订单号应为86525803\nE               \nE               实际: 86525803\nE               操作: ==\nE               预期: None\n\ncommons\\api_base.py:1362: Failed",
    "steps" : [ {
      "name" : "1. 发送请求",
      "time" : {
        "start" : 1758598961841,
        "stop" : 1758598965455,
        "duration" : 3614
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "执行 GET 请求",
        "time" : {
          "start" : 1758598961841,
          "stop" : 1758598965455,
          "duration" : 3614
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "请求详情",
          "time" : {
            "start" : 1758598961841,
            "stop" : 1758598961842,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "2f05f347cfa5cf1f",
            "name" : "请求URL",
            "source" : "2f05f347cfa5cf1f.txt",
            "type" : "text/plain",
            "size" : 58
          }, {
            "uid" : "c0bc7eca8e6fc76e",
            "name" : "请求头",
            "source" : "c0bc7eca8e6fc76e.json",
            "type" : "application/json",
            "size" : 429
          }, {
            "uid" : "dbf9869811a9a2ef",
            "name" : "请求体（表单/文件）",
            "source" : "dbf9869811a9a2ef.txt",
            "type" : "text/plain",
            "size" : 79
          } ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "hasContent" : true,
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 3
        }, {
          "name" : "响应详情",
          "time" : {
            "start" : 1758598962445,
            "stop" : 1758598962446,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "991c7a963c82569a",
            "name" : "响应状态码",
            "source" : "991c7a963c82569a.txt",
            "type" : "text/plain",
            "size" : 3
          }, {
            "uid" : "264a412d99a9c679",
            "name" : "响应头",
            "source" : "264a412d99a9c679.json",
            "type" : "application/json",
            "size" : 460
          }, {
            "uid" : "c1bdcb85c0d0c304",
            "name" : "响应体（JSON）",
            "source" : "c1bdcb85c0d0c304.json",
            "type" : "application/json",
            "size" : 5404
          } ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "hasContent" : true,
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 3
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 2,
        "hasContent" : true,
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 6
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 3,
      "hasContent" : true,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 6
    }, {
      "name" : "2. 返回校验",
      "time" : {
        "start" : 1758598965455,
        "stop" : 1758598965460,
        "duration" : 5
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "断言JSON路径: $.success",
        "time" : {
          "start" : 1758598965459,
          "stop" : 1758598965460,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "df78dce3caba2e87",
          "name" : "请求URL",
          "source" : "df78dce3caba2e87.txt",
          "type" : "text/plain",
          "size" : 152
        }, {
          "uid" : "ef31b28ccd3221d9",
          "name" : "预期值",
          "source" : "ef31b28ccd3221d9.txt",
          "type" : "text/plain",
          "size" : 15
        }, {
          "uid" : "1026cc2ed1d08521",
          "name" : "实际值",
          "source" : "1026cc2ed1d08521.txt",
          "type" : "text/plain",
          "size" : 15
        } ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "hasContent" : true,
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 3
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 1,
      "hasContent" : true,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 3
    }, {
      "name" : "3. 查询校验",
      "time" : {
        "start" : 1758598965460,
        "stop" : 1758598965465,
        "duration" : 5
      },
      "status" : "failed",
      "statusMessage" : "Failed: 校验失败: 第 1 条记录的订单号应为86525803\n\n实际: 86525803\n操作: ==\n预期: None\n\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\template\\test_cloudTrader\\test_lianxi3.py\", line 682, in test_query_closetrader_detail\n    self.verify_data(\n  File \"D:\\pycharm_test\\template\\commons\\api_base.py\", line 1362, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n",
      "steps" : [ {
        "name" : "校验: 第 1 条记录的订单号应为86525803",
        "time" : {
          "start" : 1758598965464,
          "stop" : 1758598965464,
          "duration" : 0
        },
        "status" : "failed",
        "statusMessage" : "Failed: 校验失败: 第 1 条记录的订单号应为86525803\n\n实际: 86525803\n操作: ==\n预期: None\n\n",
        "statusTrace" : "  File \"D:\\pycharm_test\\template\\commons\\api_base.py\", line 1362, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "9fa95a2d0e9eee92",
          "name" : "跟单账户:301390787第 1 条记录校验",
          "source" : "9fa95a2d0e9eee92.attach",
          "type" : "text/plain",
          "size" : 42
        } ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "hasContent" : true,
        "shouldDisplayMessage" : true,
        "attachmentsCount" : 1
      } ],
      "attachments" : [ {
        "uid" : "61cd0a7e7dd07ab3",
        "name" : "跟单账号：301390787结果",
        "source" : "61cd0a7e7dd07ab3.attach",
        "type" : "text/plain",
        "size" : 93
      } ],
      "parameters" : [ ],
      "stepsCount" : 1,
      "hasContent" : true,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 2
    } ],
    "attachments" : [ {
      "uid" : "f657b39dd09195d",
      "name" : "log",
      "source" : "f657b39dd09195d.txt",
      "type" : "text/plain",
      "size" : 935
    } ],
    "parameters" : [ ],
    "stepsCount" : 8,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 12
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "场景1：跟随方式-按比例-固定比例100%"
  }, {
    "name" : "feature",
    "value" : "跟随方式-按比例"
  }, {
    "name" : "parentSuite",
    "value" : "test_cloudTrader"
  }, {
    "name" : "suite",
    "value" : "test_lianxi3"
  }, {
    "name" : "subSuite",
    "value" : "Test_openandclouseall"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "24900-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_cloudTrader.test_lianxi3"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "dbd4cc33f245930c.json",
  "parameterValues" : [ ]
}