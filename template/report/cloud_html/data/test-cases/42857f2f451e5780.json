{
  "uid" : "42857f2f451e5780",
  "name" : "返佣管理-跟单分红-4级代理-AUD币种",
  "fullName" : "test_cloudTrader.test_agent.Test_trader#test_agent_dividend_4level_aud",
  "historyId" : "f747f376beb0e32cfbf4046f32bc0c18",
  "time" : {
    "start" : 1757575023013,
    "stop" : 1757575026841,
    "duration" : 3828
  },
  "status" : "failed",
  "statusMessage" : "Failed: 校验失败: 信号源分红金额应符合预期\n\n实际: 168.11\n操作: ==\n预期: 227.17",
  "statusTrace" : "self = <template.test_cloudTrader.test_agent.Test_create.Test_trader object at 0x000002187F99ADC0>\nvar_manager = <template.commons.variable_manager.VariableManager object at 0x000002187F99A400>\nlogged_session = <template.commons.session.EnvironmentSession object at 0x000002187F9BA1F0>\ncase_params = {'_t': 1757574998, 'dividendTimeBegin': '', 'dividendTimeEnd': '', 'dividendUser': '', ...}\n\n    @allure.title(\"返佣管理-跟单分红-4级代理-AUD币种\")\n    @pytest.mark.parametrize(\"case_params\", [case_params_list[5]])\n    def test_agent_dividend_4level_aud(self, var_manager, logged_session, case_params):\n>       self._run_test(case_params, logged_session)\n\ntest_cloudTrader\\test_agent.py:132: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_cloudTrader\\test_agent.py:385: in _run_test\n    self.verify_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template.test_cloudTrader.test_agent.Test_create.Test_trader object at 0x000002187F99ADC0>\nactual_value = 168.11, expected_value = 227.17, op = <CompareOp.EQ: '=='>\nmessage = '信号源分红金额应符合预期', attachment_name = '信号源分红金额详情'\nattachment_type = 'text/plain', use_isclose = True, rel_tol = 0.01, abs_tol = 0\n\n    def verify_data(\n            self,\n            actual_value,\n            expected_value,\n            op: CompareOp,\n            message: str,\n            attachment_name: str,\n            attachment_type=\"text/plain\",\n            use_isclose=True,  # 新增参数：是否启用math.isclose容错（默认启用）\n            rel_tol=1e-9,  # 相对容差（仅当use_isclose=True时生效）\n            abs_tol=0  # 绝对容差（仅当use_isclose=True时生效）\n    ):\n        \"\"\"\n        通用数据校验函数，支持浮点容错比较\n        :param actual_value: 实际值\n        :param expected_value: 预期值\n        :param op: 比较操作，CompareOp 枚举\n        :param message: 校验失败时的提示信息\n        :param attachment_name: Allure 附件名称\n        :param attachment_type: Allure 附件类型，默认文本\n        :param use_isclose: 是否使用math.isclose进行浮点容错比较\n        :param rel_tol: 相对容差（默认1e-9）\n        :param abs_tol: 绝对容差（默认0.0）\n        其他参数同前\n        \"\"\"\n        with allure.step(f\"校验: {message}\"):\n            result = False\n            try:\n                # 处理浮点容错比较（仅对EQ/NE操作生效）\n                if use_isclose and op in (CompareOp.EQ, CompareOp.NE):\n                    if not (isinstance(actual_value, (int, float)) and\n                            isinstance(expected_value, (int, float))):\n                        # 非数字类型自动禁用isclose，避免报错\n                        use_isclose = False\n                        logging.warning(f\"自动禁用isclose：非数字类型比较（实际值类型：{type(actual_value)}）\")\n    \n                    # 计算isclose结果\n                    is_close = math.isclose(\n                        actual_value,\n                        expected_value,\n                        rel_tol=rel_tol,\n                        abs_tol=abs_tol\n                    )\n                    # 根据操作类型取反\n                    result = is_close if op == CompareOp.EQ else not is_close\n    \n                # 普通比较逻辑\n                else:\n                    if op == CompareOp.EQ:\n                        result = actual_value == expected_value\n                    elif op == CompareOp.NE:\n                        result = actual_value != expected_value\n                    elif op == CompareOp.GT:\n                        result = actual_value > expected_value\n                    elif op == CompareOp.LT:\n                        result = actual_value < expected_value\n                    elif op == CompareOp.GE:\n                        result = actual_value >= expected_value\n                    elif op == CompareOp.LE:\n                        result = actual_value <= expected_value\n                    elif op == CompareOp.IN:\n                        result = actual_value in expected_value\n                    elif op == CompareOp.NOT_IN:\n                        result = actual_value not in expected_value\n    \n            except TypeError as e:\n                pytest.fail(\n                    f\"校验类型错误: {str(e)}\\n实际值类型: {type(actual_value)}, 预期值类型: {type(expected_value)}\")\n    \n            # 生成详细提示信息（包含容差参数）\n            detail_msg = (\n                f\"\\n实际: {actual_value}\\n\"\n                f\"操作: {op.value}\\n\"\n                f\"预期: {expected_value}\\n\"\n            )\n    \n            # 添加allure.attach，将信息写入报告\n            allure.attach(\n                detail_msg,  # 附件内容\n                name=attachment_name,  # 附件名称（来自参数）\n                attachment_type=attachment_type  # 附件类型\n            )\n    \n            if not result:\n>               pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\nE               Failed: 校验失败: 信号源分红金额应符合预期\nE               \nE               实际: 168.11\nE               操作: ==\nE               预期: 227.17\n\ncommons\\api_base.py:1364: Failed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "test_group",
    "time" : {
      "start" : 1757574998585,
      "stop" : 1757574998585,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "environment",
    "time" : {
      "start" : 1757574998584,
      "stop" : 1757574998585,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "api_session",
    "time" : {
      "start" : 1757574998585,
      "stop" : 1757574998585,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "logged_session",
    "time" : {
      "start" : 1757574998585,
      "stop" : 1757575000895,
      "duration" : 2310
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "var_manager",
    "time" : {
      "start" : 1757574998585,
      "stop" : 1757574998585,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "Failed: 校验失败: 信号源分红金额应符合预期\n\n实际: 168.11\n操作: ==\n预期: 227.17",
    "statusTrace" : "self = <template.test_cloudTrader.test_agent.Test_create.Test_trader object at 0x000002187F99ADC0>\nvar_manager = <template.commons.variable_manager.VariableManager object at 0x000002187F99A400>\nlogged_session = <template.commons.session.EnvironmentSession object at 0x000002187F9BA1F0>\ncase_params = {'_t': 1757574998, 'dividendTimeBegin': '', 'dividendTimeEnd': '', 'dividendUser': '', ...}\n\n    @allure.title(\"返佣管理-跟单分红-4级代理-AUD币种\")\n    @pytest.mark.parametrize(\"case_params\", [case_params_list[5]])\n    def test_agent_dividend_4level_aud(self, var_manager, logged_session, case_params):\n>       self._run_test(case_params, logged_session)\n\ntest_cloudTrader\\test_agent.py:132: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_cloudTrader\\test_agent.py:385: in _run_test\n    self.verify_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template.test_cloudTrader.test_agent.Test_create.Test_trader object at 0x000002187F99ADC0>\nactual_value = 168.11, expected_value = 227.17, op = <CompareOp.EQ: '=='>\nmessage = '信号源分红金额应符合预期', attachment_name = '信号源分红金额详情'\nattachment_type = 'text/plain', use_isclose = True, rel_tol = 0.01, abs_tol = 0\n\n    def verify_data(\n            self,\n            actual_value,\n            expected_value,\n            op: CompareOp,\n            message: str,\n            attachment_name: str,\n            attachment_type=\"text/plain\",\n            use_isclose=True,  # 新增参数：是否启用math.isclose容错（默认启用）\n            rel_tol=1e-9,  # 相对容差（仅当use_isclose=True时生效）\n            abs_tol=0  # 绝对容差（仅当use_isclose=True时生效）\n    ):\n        \"\"\"\n        通用数据校验函数，支持浮点容错比较\n        :param actual_value: 实际值\n        :param expected_value: 预期值\n        :param op: 比较操作，CompareOp 枚举\n        :param message: 校验失败时的提示信息\n        :param attachment_name: Allure 附件名称\n        :param attachment_type: Allure 附件类型，默认文本\n        :param use_isclose: 是否使用math.isclose进行浮点容错比较\n        :param rel_tol: 相对容差（默认1e-9）\n        :param abs_tol: 绝对容差（默认0.0）\n        其他参数同前\n        \"\"\"\n        with allure.step(f\"校验: {message}\"):\n            result = False\n            try:\n                # 处理浮点容错比较（仅对EQ/NE操作生效）\n                if use_isclose and op in (CompareOp.EQ, CompareOp.NE):\n                    if not (isinstance(actual_value, (int, float)) and\n                            isinstance(expected_value, (int, float))):\n                        # 非数字类型自动禁用isclose，避免报错\n                        use_isclose = False\n                        logging.warning(f\"自动禁用isclose：非数字类型比较（实际值类型：{type(actual_value)}）\")\n    \n                    # 计算isclose结果\n                    is_close = math.isclose(\n                        actual_value,\n                        expected_value,\n                        rel_tol=rel_tol,\n                        abs_tol=abs_tol\n                    )\n                    # 根据操作类型取反\n                    result = is_close if op == CompareOp.EQ else not is_close\n    \n                # 普通比较逻辑\n                else:\n                    if op == CompareOp.EQ:\n                        result = actual_value == expected_value\n                    elif op == CompareOp.NE:\n                        result = actual_value != expected_value\n                    elif op == CompareOp.GT:\n                        result = actual_value > expected_value\n                    elif op == CompareOp.LT:\n                        result = actual_value < expected_value\n                    elif op == CompareOp.GE:\n                        result = actual_value >= expected_value\n                    elif op == CompareOp.LE:\n                        result = actual_value <= expected_value\n                    elif op == CompareOp.IN:\n                        result = actual_value in expected_value\n                    elif op == CompareOp.NOT_IN:\n                        result = actual_value not in expected_value\n    \n            except TypeError as e:\n                pytest.fail(\n                    f\"校验类型错误: {str(e)}\\n实际值类型: {type(actual_value)}, 预期值类型: {type(expected_value)}\")\n    \n            # 生成详细提示信息（包含容差参数）\n            detail_msg = (\n                f\"\\n实际: {actual_value}\\n\"\n                f\"操作: {op.value}\\n\"\n                f\"预期: {expected_value}\\n\"\n            )\n    \n            # 添加allure.attach，将信息写入报告\n            allure.attach(\n                detail_msg,  # 附件内容\n                name=attachment_name,  # 附件名称（来自参数）\n                attachment_type=attachment_type  # 附件类型\n            )\n    \n            if not result:\n>               pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\nE               Failed: 校验失败: 信号源分红金额应符合预期\nE               \nE               实际: 168.11\nE               操作: ==\nE               预期: 227.17\n\ncommons\\api_base.py:1364: Failed",
    "steps" : [ {
      "name" : "1. 构造参数并发送GET请求",
      "time" : {
        "start" : 1757575023013,
        "stop" : 1757575026669,
        "duration" : 3656
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "执行 GET 请求",
        "time" : {
          "start" : 1757575023013,
          "stop" : 1757575026669,
          "duration" : 3656
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "请求详情",
          "time" : {
            "start" : 1757575023013,
            "stop" : 1757575023016,
            "duration" : 3
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "f9f156f2963c22b0",
            "name" : "请求URL",
            "source" : "f9f156f2963c22b0.txt",
            "type" : "text/plain",
            "size" : 30
          }, {
            "uid" : "1968228ff404e4f",
            "name" : "请求头",
            "source" : "1968228ff404e4f.json",
            "type" : "application/json",
            "size" : 429
          }, {
            "uid" : "27091236cbee6377",
            "name" : "请求体（表单/文件）",
            "source" : "27091236cbee6377.txt",
            "type" : "text/plain",
            "size" : 201
          } ],
          "parameters" : [ ],
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 3,
          "stepsCount" : 0,
          "hasContent" : true
        }, {
          "name" : "响应详情",
          "time" : {
            "start" : 1757575023660,
            "stop" : 1757575023662,
            "duration" : 2
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "3ab31298fbf35764",
            "name" : "响应状态码",
            "source" : "3ab31298fbf35764.txt",
            "type" : "text/plain",
            "size" : 3
          }, {
            "uid" : "5fff66c3ba1a3054",
            "name" : "响应头",
            "source" : "5fff66c3ba1a3054.json",
            "type" : "application/json",
            "size" : 460
          }, {
            "uid" : "ced085699a5ef83c",
            "name" : "响应体（JSON）",
            "source" : "ced085699a5ef83c.json",
            "type" : "application/json",
            "size" : 15791
          } ],
          "parameters" : [ ],
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 3,
          "stepsCount" : 0,
          "hasContent" : true
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 6,
        "stepsCount" : 2,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 6,
      "stepsCount" : 3,
      "hasContent" : true
    }, {
      "name" : "2. 返回校验",
      "time" : {
        "start" : 1757575026669,
        "stop" : 1757575026675,
        "duration" : 6
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "断言JSON路径: $.success",
        "time" : {
          "start" : 1757575026674,
          "stop" : 1757575026675,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "bd96207fe2011d1f",
          "name" : "请求URL",
          "source" : "bd96207fe2011d1f.txt",
          "type" : "text/plain",
          "size" : 210
        }, {
          "uid" : "fa42aa8cab850789",
          "name" : "预期值",
          "source" : "fa42aa8cab850789.txt",
          "type" : "text/plain",
          "size" : 15
        }, {
          "uid" : "5b685945d557b24c",
          "name" : "实际值",
          "source" : "5b685945d557b24c.txt",
          "type" : "text/plain",
          "size" : 15
        } ],
        "parameters" : [ ],
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 3,
        "stepsCount" : 0,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 3,
      "stepsCount" : 1,
      "hasContent" : true
    }, {
      "name" : "3. 数据校验",
      "time" : {
        "start" : 1757575026679,
        "stop" : 1757575026841,
        "duration" : 162
      },
      "status" : "failed",
      "statusMessage" : "Failed: 校验失败: 信号源分红金额应符合预期\n\n实际: 168.11\n操作: ==\n预期: 227.17\n\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\template\\test_cloudTrader\\test_agent.py\", line 385, in _run_test\n    self.verify_data(\n  File \"D:\\pycharm_test\\template\\commons\\api_base.py\", line 1364, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n",
      "steps" : [ {
        "name" : "验证期间盈利是否正确",
        "time" : {
          "start" : 1757575026734,
          "stop" : 1757575026735,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "校验: 期间盈利应符合预期",
          "time" : {
            "start" : 1757575026734,
            "stop" : 1757575026735,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "28e4ab7a70ed0d87",
            "name" : "期间盈利详情",
            "source" : "28e4ab7a70ed0d87.attach",
            "type" : "text/plain",
            "size" : 42
          } ],
          "parameters" : [ ],
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 1,
          "stepsCount" : 0,
          "hasContent" : true
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 1,
        "stepsCount" : 1,
        "hasContent" : true
      }, {
        "name" : "验证币种的转换是否正确",
        "time" : {
          "start" : 1757575026736,
          "stop" : 1757575026737,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "校验: 币种的转换应符合预期",
          "time" : {
            "start" : 1757575026736,
            "stop" : 1757575026737,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "5c01c1e5c30c93bf",
            "name" : "币种的转换详情,当前币种AUD，转换前：726.83,转换后：454.34",
            "source" : "5c01c1e5c30c93bf.attach",
            "type" : "text/plain",
            "size" : 42
          } ],
          "parameters" : [ ],
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 1,
          "stepsCount" : 0,
          "hasContent" : true
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 1,
        "stepsCount" : 1,
        "hasContent" : true
      }, {
        "name" : "验证预计分红金额是否正确",
        "time" : {
          "start" : 1757575026737,
          "stop" : 1757575026746,
          "duration" : 9
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "校验: 预计分红金额应符合预期",
          "time" : {
            "start" : 1757575026745,
            "stop" : 1757575026746,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "d4cee7b6a3861b09",
            "name" : "预计分红金额详情",
            "source" : "d4cee7b6a3861b09.attach",
            "type" : "text/plain",
            "size" : 41
          } ],
          "parameters" : [ ],
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 1,
          "stepsCount" : 0,
          "hasContent" : true
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 1,
        "stepsCount" : 1,
        "hasContent" : true
      }, {
        "name" : "验证分红金额是否正确",
        "time" : {
          "start" : 1757575026758,
          "stop" : 1757575026759,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "f5c4284c98d994b4",
          "name" : "text/plain",
          "source" : "f5c4284c98d994b4.attach",
          "type" : "text/plain",
          "size" : 21
        } ],
        "parameters" : [ ],
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 1,
        "stepsCount" : 0,
        "hasContent" : true
      }, {
        "name" : "验证分红金额是否正确",
        "time" : {
          "start" : 1757575026768,
          "stop" : 1757575026783,
          "duration" : 15
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "18e08a885e73a1c7",
          "name" : "text/plain",
          "source" : "18e08a885e73a1c7.attach",
          "type" : "text/plain",
          "size" : 21
        } ],
        "parameters" : [ ],
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 1,
        "stepsCount" : 0,
        "hasContent" : true
      }, {
        "name" : "验证分红金额是否正确",
        "time" : {
          "start" : 1757575026792,
          "stop" : 1757575026818,
          "duration" : 26
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "7107d386c62a9c22",
          "name" : "text/plain",
          "source" : "7107d386c62a9c22.attach",
          "type" : "text/plain",
          "size" : 21
        } ],
        "parameters" : [ ],
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 1,
        "stepsCount" : 0,
        "hasContent" : true
      }, {
        "name" : "验证分红金额是否正确",
        "time" : {
          "start" : 1757575026828,
          "stop" : 1757575026829,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "c2eec63e169e14c9",
          "name" : "text/plain",
          "source" : "c2eec63e169e14c9.attach",
          "type" : "text/plain",
          "size" : 21
        } ],
        "parameters" : [ ],
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 1,
        "stepsCount" : 0,
        "hasContent" : true
      }, {
        "name" : "验证信号源分红金额是否正确",
        "time" : {
          "start" : 1757575026829,
          "stop" : 1757575026841,
          "duration" : 12
        },
        "status" : "failed",
        "statusMessage" : "Failed: 校验失败: 信号源分红金额应符合预期\n\n实际: 168.11\n操作: ==\n预期: 227.17\n\n",
        "statusTrace" : "  File \"D:\\pycharm_test\\template\\test_cloudTrader\\test_agent.py\", line 385, in _run_test\n    self.verify_data(\n  File \"D:\\pycharm_test\\template\\commons\\api_base.py\", line 1364, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n",
        "steps" : [ {
          "name" : "校验: 信号源分红金额应符合预期",
          "time" : {
            "start" : 1757575026838,
            "stop" : 1757575026839,
            "duration" : 1
          },
          "status" : "failed",
          "statusMessage" : "Failed: 校验失败: 信号源分红金额应符合预期\n\n实际: 168.11\n操作: ==\n预期: 227.17\n\n",
          "statusTrace" : "  File \"D:\\pycharm_test\\template\\commons\\api_base.py\", line 1364, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "8a6541199bbdfac4",
            "name" : "信号源分红金额详情",
            "source" : "8a6541199bbdfac4.attach",
            "type" : "text/plain",
            "size" : 42
          } ],
          "parameters" : [ ],
          "shouldDisplayMessage" : true,
          "attachmentsCount" : 1,
          "stepsCount" : 0,
          "hasContent" : true
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 1,
        "stepsCount" : 1,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 8,
      "stepsCount" : 12,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "9506f8c9ab3f7e54",
      "name" : "slaveRecords排序对比",
      "source" : "9506f8c9ab3f7e54.txt",
      "type" : "text/plain",
      "size" : 53
    }, {
      "uid" : "2d1a500b6161c3c1",
      "name" : "log",
      "source" : "2d1a500b6161c3c1.txt",
      "type" : "text/plain",
      "size" : 1216
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 19,
    "stepsCount" : 19,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "api_session::0",
    "time" : {
      "start" : 1757575031112,
      "stop" : 1757575031112,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "logged_session::0",
    "time" : {
      "start" : 1757575031110,
      "stop" : 1757575031111,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "var_manager::0",
    "time" : {
      "start" : 1757575031113,
      "stop" : 1757575031113,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "返佣管理-跟单分红"
  }, {
    "name" : "parentSuite",
    "value" : "test_cloudTrader"
  }, {
    "name" : "suite",
    "value" : "test_agent"
  }, {
    "name" : "subSuite",
    "value" : "Test_create"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "34960-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_cloudTrader.test_agent"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case_params",
    "value" : "{'_t': 1757574998, 'page': 1, 'limit': 20, 'type': '', 'status': '', 'dividendTimeBegin': '', 'dividendTimeEnd': '', 'followerUser': 'xujunhao5@163.com', 'followerTa': '2088767546', 'dividendUser': ''}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "42857f2f451e5780.json",
  "parameterValues" : [ "{'_t': 1757574998, 'page': 1, 'limit': 20, 'type': '', 'status': '', 'dividendTimeBegin': '', 'dividendTimeEnd': '', 'followerUser': 'xujunhao5@163.com', 'followerTa': '2088767546', 'dividendUser': ''}" ]
}