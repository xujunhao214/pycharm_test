{
  "uid" : "71788489da945f59",
  "name" : "账号管理-交易员账号-绑定账户-已经绑定过",
  "fullName" : "test_cloudTrader.test_user.Test_usr#test_account_bind",
  "historyId" : "be1b0fffcfcdd017a95f1cd044f487ed",
  "time" : {
    "start" : 1756979717702,
    "stop" : 1756979719784,
    "duration" : 2082
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Failed: 响应success字段应为true（JSON断言失败）",
  "statusTrace" : "self = <template.test_cloudTrader.test_user.Test_usr object at 0x0000027A690FE0A0>\nresponse = <Response [200]>, json_path = '$.success', expected_value = False\nerror_msg_prefix = '响应success字段应为true'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n    \n>           assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\nE               AssertionError: Failed: 响应success字段应为true（JSON路径值不匹配）\n\ncommons\\api_base.py:475: AssertionError\n\nThe above exception was the direct cause of the following exception:\n\nself = <template.test_cloudTrader.test_user.Test_usr object at 0x0000027A690FE0A0>\nlogged_session = <template.commons.session.EnvironmentSession object at 0x0000027A68E28400>\n\n    @allure.title(\"账号管理-交易员账号-绑定账户-已经绑定过\")\n    def test_account_bind(self, logged_session):\n        data = {\n            \"userId\": user_id,\n            \"brokerId\": broker_id,\n            \"serverId\": server_id,\n            \"account\": \"301387254\",\n            \"password\": password,\n            \"display\": display_upper,\n            \"passwordType\": password_type,\n            \"subscribeFee\": subscribe_fee,\n            \"type\": type,\n            \"strategy\": \"\",\n            \"platform\": meta_trader_platform_id\n        }\n        response = self.send_post_request(\n            logged_session,\n            '/blockchain/account/bind',\n            json_data=data\n        )\n    \n>       self.assert_json_value(\n            response,\n            \"$.success\",\n            False,\n            \"响应success字段应为true\"\n        )\n\ntest_cloudTrader\\test_user.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template.test_cloudTrader.test_user.Test_usr object at 0x0000027A690FE0A0>\nresponse = <Response [200]>, json_path = '$.success', expected_value = False\nerror_msg_prefix = '响应success字段应为true'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n    \n            assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\n        except Exception as e:\n            with allure.step(f\"JSON断言失败: {json_path}\"):\n                allure.attach(json_path, \"JSON路径\", allure.attachment_type.TEXT)\n                allure.attach(str(expected_value), \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(response.text[:500], \"响应内容\", allure.attachment_type.TEXT)\n            logger.error(\n                f\"[{self._get_current_time()}] JSON断言失败: {str(e)} | 路径: {json_path} | 响应: {response.text[:500]}\")\n>           raise AssertionError(f\"Failed: {error_msg_prefix}（JSON断言失败）\") from e\nE           AssertionError: Failed: 响应success字段应为true（JSON断言失败）\n\ncommons\\api_base.py:484: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "environment",
    "time" : {
      "start" : 1756979714963,
      "stop" : 1756979714963,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "logged_session",
    "time" : {
      "start" : 1756979715381,
      "stop" : 1756979717702,
      "duration" : 2321
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "var_manager",
    "time" : {
      "start" : 1756979714963,
      "stop" : 1756979714963,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "test_group",
    "time" : {
      "start" : 1756979714963,
      "stop" : 1756979714963,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "api_session",
    "time" : {
      "start" : 1756979715381,
      "stop" : 1756979715381,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Failed: 响应success字段应为true（JSON断言失败）",
    "statusTrace" : "self = <template.test_cloudTrader.test_user.Test_usr object at 0x0000027A690FE0A0>\nresponse = <Response [200]>, json_path = '$.success', expected_value = False\nerror_msg_prefix = '响应success字段应为true'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n    \n>           assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\nE               AssertionError: Failed: 响应success字段应为true（JSON路径值不匹配）\n\ncommons\\api_base.py:475: AssertionError\n\nThe above exception was the direct cause of the following exception:\n\nself = <template.test_cloudTrader.test_user.Test_usr object at 0x0000027A690FE0A0>\nlogged_session = <template.commons.session.EnvironmentSession object at 0x0000027A68E28400>\n\n    @allure.title(\"账号管理-交易员账号-绑定账户-已经绑定过\")\n    def test_account_bind(self, logged_session):\n        data = {\n            \"userId\": user_id,\n            \"brokerId\": broker_id,\n            \"serverId\": server_id,\n            \"account\": \"301387254\",\n            \"password\": password,\n            \"display\": display_upper,\n            \"passwordType\": password_type,\n            \"subscribeFee\": subscribe_fee,\n            \"type\": type,\n            \"strategy\": \"\",\n            \"platform\": meta_trader_platform_id\n        }\n        response = self.send_post_request(\n            logged_session,\n            '/blockchain/account/bind',\n            json_data=data\n        )\n    \n>       self.assert_json_value(\n            response,\n            \"$.success\",\n            False,\n            \"响应success字段应为true\"\n        )\n\ntest_cloudTrader\\test_user.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template.test_cloudTrader.test_user.Test_usr object at 0x0000027A690FE0A0>\nresponse = <Response [200]>, json_path = '$.success', expected_value = False\nerror_msg_prefix = '响应success字段应为true'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n    \n            assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\n        except Exception as e:\n            with allure.step(f\"JSON断言失败: {json_path}\"):\n                allure.attach(json_path, \"JSON路径\", allure.attachment_type.TEXT)\n                allure.attach(str(expected_value), \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(response.text[:500], \"响应内容\", allure.attachment_type.TEXT)\n            logger.error(\n                f\"[{self._get_current_time()}] JSON断言失败: {str(e)} | 路径: {json_path} | 响应: {response.text[:500]}\")\n>           raise AssertionError(f\"Failed: {error_msg_prefix}（JSON断言失败）\") from e\nE           AssertionError: Failed: 响应success字段应为true（JSON断言失败）\n\ncommons\\api_base.py:484: AssertionError",
    "steps" : [ {
      "name" : "执行 POST 请求",
      "time" : {
        "start" : 1756979717702,
        "stop" : 1756979719778,
        "duration" : 2076
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "请求详情",
        "time" : {
          "start" : 1756979717702,
          "stop" : 1756979717703,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "45e94d28bc33df4f",
          "name" : "请求URL",
          "source" : "45e94d28bc33df4f.txt",
          "type" : "text/plain",
          "size" : 24
        }, {
          "uid" : "efcefe602b92aca6",
          "name" : "请求头",
          "source" : "efcefe602b92aca6.json",
          "type" : "application/json",
          "size" : 429
        }, {
          "uid" : "45ac651452f4032b",
          "name" : "请求体（JSON）",
          "source" : "45ac651452f4032b.json",
          "type" : "application/json",
          "size" : 289
        } ],
        "parameters" : [ ],
        "attachmentsCount" : 3,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : true
      }, {
        "name" : "响应详情",
        "time" : {
          "start" : 1756979718776,
          "stop" : 1756979718777,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "6019e5ce2ff0089c",
          "name" : "响应状态码",
          "source" : "6019e5ce2ff0089c.txt",
          "type" : "text/plain",
          "size" : 3
        }, {
          "uid" : "84e05d8cfaef00fc",
          "name" : "响应头",
          "source" : "84e05d8cfaef00fc.json",
          "type" : "application/json",
          "size" : 910
        }, {
          "uid" : "387906af8c1dc7b8",
          "name" : "响应体（JSON）",
          "source" : "387906af8c1dc7b8.json",
          "type" : "application/json",
          "size" : 101
        } ],
        "parameters" : [ ],
        "attachmentsCount" : 3,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 6,
      "shouldDisplayMessage" : false,
      "stepsCount" : 2,
      "hasContent" : true
    }, {
      "name" : "断言JSON路径: $.success",
      "time" : {
        "start" : 1756979719782,
        "stop" : 1756979719783,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "5ed24e4312863e99",
        "name" : "请求URL",
        "source" : "5ed24e4312863e99.txt",
        "type" : "text/plain",
        "size" : 55
      }, {
        "uid" : "ee205616f2cef1ad",
        "name" : "预期值",
        "source" : "ee205616f2cef1ad.txt",
        "type" : "text/plain",
        "size" : 16
      }, {
        "uid" : "c1f9e642d9db0179",
        "name" : "实际值",
        "source" : "c1f9e642d9db0179.txt",
        "type" : "text/plain",
        "size" : 15
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 3,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : true
    }, {
      "name" : "JSON断言失败: $.success",
      "time" : {
        "start" : 1756979719783,
        "stop" : 1756979719784,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "91a380c009476730",
        "name" : "JSON路径",
        "source" : "91a380c009476730.txt",
        "type" : "text/plain",
        "size" : 9
      }, {
        "uid" : "32fe3d3bb64890ae",
        "name" : "预期值",
        "source" : "32fe3d3bb64890ae.txt",
        "type" : "text/plain",
        "size" : 5
      }, {
        "uid" : "86b36548013083b",
        "name" : "响应内容",
        "source" : "86b36548013083b.txt",
        "type" : "text/plain",
        "size" : 80
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 3,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "9f657f6c63ca0885",
      "name" : "log",
      "source" : "9f657f6c63ca0885.txt",
      "type" : "text/plain",
      "size" : 1231
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 13,
    "shouldDisplayMessage" : true,
    "stepsCount" : 5,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "logged_session::0",
    "time" : {
      "start" : 1756979725325,
      "stop" : 1756979725326,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "var_manager::0",
    "time" : {
      "start" : 1756979725327,
      "stop" : 1756979725328,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "api_session::0",
    "time" : {
      "start" : 1756979725326,
      "stop" : 1756979725326,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "test_cloudTrader"
  }, {
    "name" : "suite",
    "value" : "test_user"
  }, {
    "name" : "subSuite",
    "value" : "Test_usr"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "48964-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_cloudTrader.test_user"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "71788489da945f59.json",
  "parameterValues" : [ ]
}