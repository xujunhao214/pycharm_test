{
  "uid" : "5f97b3d2b764890f",
  "name" : "MT4平台平仓操作",
  "fullName" : "test_cloudTrader.test_lianxi3.Test_orderseng1#test_mt4_close",
  "historyId" : "e79caa5d4ab1cfb6f7b8a8779109d216",
  "time" : {
    "start" : 1758598822748,
    "stop" : 1758598847914,
    "duration" : 25166
  },
  "description" : "\n    ### 测试说明\n    - 前置条件：有喊单账号、跟单账号，跟单已经和喊单有订阅关系\n      1. MT4进行登录，然后进行开仓，总手数0.01\n      2. 账号管理-持仓订单-喊单和跟单数据校验\n      3. 跟单管理-开仓日志-喊单和跟单数据校验\n      4. 跟单管理-VPS管理-喊单和跟单数据校验\n      5. MT4进行平仓\n      6.账号管理-持仓订单-喊单和跟单数据校验\n      7.跟单管理-开仓日志-喊单和跟单数据校验\n      8.跟单管理-VPS管理-喊单和跟单数据校验\n    - 预期结果：喊单和跟单数据校验正确\n    ",
  "descriptionHtml" : "<pre><code>### 测试说明\n- 前置条件：有喊单账号、跟单账号，跟单已经和喊单有订阅关系\n  1. MT4进行登录，然后进行开仓，总手数0.01\n  2. 账号管理-持仓订单-喊单和跟单数据校验\n  3. 跟单管理-开仓日志-喊单和跟单数据校验\n  4. 跟单管理-VPS管理-喊单和跟单数据校验\n  5. MT4进行平仓\n  6.账号管理-持仓订单-喊单和跟单数据校验\n  7.跟单管理-开仓日志-喊单和跟单数据校验\n  8.跟单管理-VPS管理-喊单和跟单数据校验\n- 预期结果：喊单和跟单数据校验正确\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "Failed: 经过3次尝试（包含重新登录）后，平仓仍失败，订单号: 86525801",
  "statusTrace" : "self = <template.test_cloudTrader.test_lianxi3.Test_openandclouseall.Test_orderseng1 object at 0x000002244DBF0670>\nvar_manager = <template.commons.variable_manager.VariableManager object at 0x000002244DC24C10>\n\n    @allure.title(\"MT4平台平仓操作\")\n    def test_mt4_close(self, var_manager):\n        # 实例化类\n        public_front = Test_public()\n    \n        # MT4平台平仓操作\n>       public_front.test_mt4_close(var_manager)\n\ntest_cloudTrader\\test_lianxi3.py:632: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template.public_function.test_proportion_public.Test_public object at 0x000002244DE7C460>\nvar_manager = <template.commons.variable_manager.VariableManager object at 0x000002244DC24C10>\n\n    @allure.title(\"MT4平台平仓操作\")\n    def test_mt4_close(self, var_manager):\n        max_attempts = 3  # 最大总尝试次数\n        retry_interval = 10  # 每次尝试间隔时间(秒)\n        ticket_open = var_manager.get_variable(\"ticket_open\")\n        ticket_close = None\n    \n        # 提取登录所需变量\n        uuid_pattern = re.compile(\n            r'^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$')\n    \n        for attempt in range(max_attempts):\n            try:\n                with allure.step(f\"1. 发送平仓请求 (第{attempt + 1}次尝试)\"):\n                    # 检查token是否有效，无效则重新登录\n                    if not token_mt4 or not uuid_pattern.match(token_mt4):\n                        with allure.step(\"token无效或不存在，重新登录MT4\"):\n                            self.test_mt4_login(var_manager)\n    \n                    # 发送平仓请求\n                    url = f\"{MT4_URL}/OrderClose?id={token_mt4}&ticket={ticket_open}&price=0.00\"\n                    self.response = requests.request(\"GET\", url, headers=headers)\n                    self.response_json = self.response.json()\n                    logging.info(f\"第{attempt + 1}次平仓响应: {self.response_json}\")\n    \n                # 提取平仓订单号\n                ticket_close = self.json_utils.extract(self.response_json, \"$.ticket\")\n    \n                # 检查平仓是否成功\n                if ticket_close is not None:\n                    with allure.step(\"2. 数据校验\"):\n                        self.verify_data(\n                            actual_value=ticket_close,\n                            expected_value=ticket_open,\n                            op=CompareOp.EQ,\n                            use_isclose=False,\n                            message=\"预期：开仓订单号和平仓订单号一致\",\n                            attachment_name=\"订单号详情\"\n                        )\n                        logger.info(\n                            f\"开仓订单号和平仓订单号一致,开仓订单号：{ticket_open} 平仓订单号：{ticket_close}\")\n                    break  # 成功则跳出循环\n                else:\n                    logging.warning(f\"第{attempt + 1}次平仓失败，未获取到平仓订单号\")\n    \n            except Exception as e:\n                logging.error(f\"第{attempt + 1}次平仓发生异常: {str(e)}\")\n    \n            # 如果不是最后一次尝试，等待后重试\n            if attempt < max_attempts - 1:\n                logging.info(f\"将在{retry_interval}秒后进行第{attempt + 2}次尝试...\")\n                time.sleep(retry_interval)\n                # 主动重新登录获取新token\n                with allure.step(f\"准备第{attempt + 2}次尝试，先重新登录MT4\"):\n                    self.test_mt4_login(var_manager)\n    \n        # 所有尝试结束后仍失败，标记用例失败\n        if ticket_close is None:\n>           pytest.fail(f\"经过{max_attempts}次尝试（包含重新登录）后，平仓仍失败，订单号: {ticket_open}\")\nE           Failed: 经过3次尝试（包含重新登录）后，平仓仍失败，订单号: 86525801\n\npublic_function\\test_proportion_public.py:389: Failed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "\n    ### 测试说明\n    - 前置条件：有喊单账号、跟单账号，跟单已经和喊单有订阅关系\n      1. MT4进行登录，然后进行开仓，总手数0.01\n      2. 账号管理-持仓订单-喊单和跟单数据校验\n      3. 跟单管理-开仓日志-喊单和跟单数据校验\n      4. 跟单管理-VPS管理-喊单和跟单数据校验\n      5. MT4进行平仓\n      6.账号管理-持仓订单-喊单和跟单数据校验\n      7.跟单管理-开仓日志-喊单和跟单数据校验\n      8.跟单管理-VPS管理-喊单和跟单数据校验\n    - 预期结果：喊单和跟单数据校验正确\n    ",
    "status" : "failed",
    "statusMessage" : "Failed: 经过3次尝试（包含重新登录）后，平仓仍失败，订单号: 86525801",
    "statusTrace" : "self = <template.test_cloudTrader.test_lianxi3.Test_openandclouseall.Test_orderseng1 object at 0x000002244DBF0670>\nvar_manager = <template.commons.variable_manager.VariableManager object at 0x000002244DC24C10>\n\n    @allure.title(\"MT4平台平仓操作\")\n    def test_mt4_close(self, var_manager):\n        # 实例化类\n        public_front = Test_public()\n    \n        # MT4平台平仓操作\n>       public_front.test_mt4_close(var_manager)\n\ntest_cloudTrader\\test_lianxi3.py:632: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template.public_function.test_proportion_public.Test_public object at 0x000002244DE7C460>\nvar_manager = <template.commons.variable_manager.VariableManager object at 0x000002244DC24C10>\n\n    @allure.title(\"MT4平台平仓操作\")\n    def test_mt4_close(self, var_manager):\n        max_attempts = 3  # 最大总尝试次数\n        retry_interval = 10  # 每次尝试间隔时间(秒)\n        ticket_open = var_manager.get_variable(\"ticket_open\")\n        ticket_close = None\n    \n        # 提取登录所需变量\n        uuid_pattern = re.compile(\n            r'^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$')\n    \n        for attempt in range(max_attempts):\n            try:\n                with allure.step(f\"1. 发送平仓请求 (第{attempt + 1}次尝试)\"):\n                    # 检查token是否有效，无效则重新登录\n                    if not token_mt4 or not uuid_pattern.match(token_mt4):\n                        with allure.step(\"token无效或不存在，重新登录MT4\"):\n                            self.test_mt4_login(var_manager)\n    \n                    # 发送平仓请求\n                    url = f\"{MT4_URL}/OrderClose?id={token_mt4}&ticket={ticket_open}&price=0.00\"\n                    self.response = requests.request(\"GET\", url, headers=headers)\n                    self.response_json = self.response.json()\n                    logging.info(f\"第{attempt + 1}次平仓响应: {self.response_json}\")\n    \n                # 提取平仓订单号\n                ticket_close = self.json_utils.extract(self.response_json, \"$.ticket\")\n    \n                # 检查平仓是否成功\n                if ticket_close is not None:\n                    with allure.step(\"2. 数据校验\"):\n                        self.verify_data(\n                            actual_value=ticket_close,\n                            expected_value=ticket_open,\n                            op=CompareOp.EQ,\n                            use_isclose=False,\n                            message=\"预期：开仓订单号和平仓订单号一致\",\n                            attachment_name=\"订单号详情\"\n                        )\n                        logger.info(\n                            f\"开仓订单号和平仓订单号一致,开仓订单号：{ticket_open} 平仓订单号：{ticket_close}\")\n                    break  # 成功则跳出循环\n                else:\n                    logging.warning(f\"第{attempt + 1}次平仓失败，未获取到平仓订单号\")\n    \n            except Exception as e:\n                logging.error(f\"第{attempt + 1}次平仓发生异常: {str(e)}\")\n    \n            # 如果不是最后一次尝试，等待后重试\n            if attempt < max_attempts - 1:\n                logging.info(f\"将在{retry_interval}秒后进行第{attempt + 2}次尝试...\")\n                time.sleep(retry_interval)\n                # 主动重新登录获取新token\n                with allure.step(f\"准备第{attempt + 2}次尝试，先重新登录MT4\"):\n                    self.test_mt4_login(var_manager)\n    \n        # 所有尝试结束后仍失败，标记用例失败\n        if ticket_close is None:\n>           pytest.fail(f\"经过{max_attempts}次尝试（包含重新登录）后，平仓仍失败，订单号: {ticket_open}\")\nE           Failed: 经过3次尝试（包含重新登录）后，平仓仍失败，订单号: 86525801\n\npublic_function\\test_proportion_public.py:389: Failed",
    "steps" : [ {
      "name" : "1. 发送平仓请求 (第1次尝试)",
      "time" : {
        "start" : 1758598822748,
        "stop" : 1758598823696,
        "duration" : 948
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0
    }, {
      "name" : "准备第2次尝试，先重新登录MT4",
      "time" : {
        "start" : 1758598833703,
        "stop" : 1758598834767,
        "duration" : 1064
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0
    }, {
      "name" : "1. 发送平仓请求 (第2次尝试)",
      "time" : {
        "start" : 1758598834767,
        "stop" : 1758598835727,
        "duration" : 960
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0
    }, {
      "name" : "准备第3次尝试，先重新登录MT4",
      "time" : {
        "start" : 1758598845745,
        "stop" : 1758598846946,
        "duration" : 1201
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0
    }, {
      "name" : "1. 发送平仓请求 (第3次尝试)",
      "time" : {
        "start" : 1758598846946,
        "stop" : 1758598847909,
        "duration" : 963
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0
    } ],
    "attachments" : [ {
      "uid" : "3c36cdc6daebec6d",
      "name" : "log",
      "source" : "3c36cdc6daebec6d.txt",
      "type" : "text/plain",
      "size" : 10753
    } ],
    "parameters" : [ ],
    "stepsCount" : 5,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "场景1：跟随方式-按比例-固定比例100%"
  }, {
    "name" : "feature",
    "value" : "跟随方式-按比例"
  }, {
    "name" : "parentSuite",
    "value" : "test_cloudTrader"
  }, {
    "name" : "suite",
    "value" : "test_lianxi3"
  }, {
    "name" : "subSuite",
    "value" : "Test_openandclouseall"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "24900-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_cloudTrader.test_lianxi3"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "5f97b3d2b764890f.json",
  "parameterValues" : [ ]
}