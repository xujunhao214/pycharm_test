{
  "uid" : "d08bd14ee0f51c8d",
  "name" : "数据库校验-VPS数据-删除策略账号",
  "fullName" : "test_community_vps.test_delete.TestDeleteUser#test_dbdelete_vpstrader",
  "historyId" : "153e02380f97491c7fd95c4501af5b9c",
  "time" : {
    "start" : 1760526391184,
    "stop" : 1760526397590,
    "duration" : 6406
  },
  "status" : "failed",
  "statusMessage" : "Failed: 删除失败: Failed: 等待记录删除超时（5秒）",
  "statusTrace" : "self = <test_delete.TestDeleteUser object at 0x00000211AA3D6280>\nvar_manager = <template.commons.variable_manager.VariableManager object at 0x00000211AA5E0E20>\ndbvps_transaction = <pymysql.connections.Connection object at 0x00000211AA736EE0>\n\n    @allure.title(\"数据库校验-VPS数据-删除策略账号\")\n    def test_dbdelete_vpstrader(self, var_manager, dbvps_transaction):\n        with allure.step(\"1. 查询数据库验证是否删除成功\"):\n            vps_user_accounts_1 = var_manager.get_variable(\"vps_user_accounts_1\")\n            logging.info(f\"查询条件: table=follow_trader, account={vps_user_accounts_1}\")\n    \n            sql = f\"SELECT * FROM follow_trader WHERE account = %s\"\n            params = (vps_user_accounts_1,)\n            try:\n>               self.wait_for_database_deletion(\n                    dbvps_transaction=dbvps_transaction,\n                    sql=sql,\n                    params=params\n                )\n\ntest_community_vps\\test_delete.py:153: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <test_delete.TestDeleteUser object at 0x00000211AA3D6280>\ndbvps_transaction = <pymysql.connections.Connection object at 0x00000211AA736EE0>\nsql = 'SELECT * FROM follow_trader WHERE account = %s', params = ('301391174',)\ntime_field = None, time_range = 1, order_by = 'create_time DESC', timeout = 5\npoll_interval = 2\n\n    def wait_for_database_deletion(self, dbvps_transaction: pymysql.connections.Connection,\n                                   sql: str,\n                                   params: tuple = (),\n                                   time_field: Optional[str] = None,\n                                   time_range: int = MYSQL_TIME,\n                                   order_by: str = \"create_time DESC\",\n                                   timeout: int = DELETE_WAIT_TIMEOUT,\n                                   poll_interval: int = POLL_INTERVAL) -> None:\n        \"\"\"轮询等待数据库记录删除（带Allure分层提示）\"\"\"\n        start_time = time.time()\n    \n        # 生成固定时间范围（轮询开始时计算一次）\n        poll_start_datetime = datetime.datetime.now()\n        fixed_time_start = (poll_start_datetime - datetime.timedelta(minutes=time_range)).strftime(\n            \"%Y-%m-%d %H:%M:%S\")\n        fixed_time_end = (poll_start_datetime + datetime.timedelta(minutes=time_range)).strftime(\n            \"%Y-%m-%d %H:%M:%S\")\n    \n        logger.info(f\"[{self._get_current_time()}] 开始等待数据库记录删除 | SQL: {sql[:200]} | 超时: {timeout}秒\")\n    \n        with allure.step(f\"等待数据库记录删除（超时: {timeout}秒）\"):\n            while time.time() - start_time < timeout:\n                try:\n                    dbvps_transaction.commit()\n    \n                    if time_field:\n                        result = self._execute_query(\n                            dbvps_transaction=dbvps_transaction,\n                            sql=sql,\n                            params=params,\n                            time_field=time_field,\n                            order_by=order_by,\n                            fixed_time_start=fixed_time_start,\n                            fixed_time_end=fixed_time_end,\n                            attach_to_allure=False\n                        )\n                    else:\n                        result = self.query_database(\n                            dbvps_transaction=dbvps_transaction,\n                            sql=sql,\n                            params=params,\n                            order_by=order_by,\n                            attach_to_allure=False\n                        )\n    \n                    elapsed = time.time() - start_time\n                    with allure.step(f\"等待中（已等待{elapsed:.1f}秒）\"):\n                        allure.attach(f\"剩余记录数: {len(result)}\", \"当前状态\", allure.attachment_type.TEXT)\n                        allure.attach(f\"剩余时间: {timeout - elapsed:.1f}秒\", \"超时倒计时\", allure.attachment_type.TEXT)\n    \n                    if not result:\n                        logger.info(\n                            f\"[{self._get_current_time()}] 删除成功（耗时{time.time() - start_time:.1f}秒）| SQL: {sql[:200]}\")\n                        with allure.step(\"删除验证成功\"):\n                            allure.attach(f\"耗时{time.time() - start_time:.1f}秒，记录已删除\", \"结果说明\",\n                                          allure.attachment_type.TEXT)\n                        return\n    \n                    logger.info(\n                        f\"[{self._get_current_time()}] 记录仍存在（已等待{elapsed:.1f}秒）| 剩余时间: {timeout - elapsed:.1f}秒 | 结果数: {len(result)}\")\n                    time.sleep(poll_interval)\n    \n                except Exception as e:\n                    with allure.step(\"删除等待异常\"):\n                        allure.attach(sql, \"执行SQL\", allure.attachment_type.TEXT)\n                        allure.attach(str(params), \"SQL参数\", allure.attachment_type.TEXT)\n                        allure.attach(str(e), \"错误详情\", allure.attachment_type.TEXT)\n                    logger.warning(f\"[{self._get_current_time()}] 轮询查询异常: {str(e)} | 继续等待...\")\n                    time.sleep(poll_interval)\n    \n            # 超时处理\n            dbvps_transaction.commit()\n            if time_field:\n                final_result = self._execute_query(\n                    dbvps_transaction=dbvps_transaction,\n                    sql=sql,\n                    params=params,\n                    time_field=time_field,\n                    order_by=order_by,\n                    fixed_time_start=fixed_time_start,\n                    fixed_time_end=fixed_time_end,\n                    attach_to_allure=True\n                )\n            else:\n                final_result = self.query_database(\n                    dbvps_transaction=dbvps_transaction,\n                    sql=sql,\n                    params=params,\n                    order_by=order_by,\n                    attach_to_allure=True\n                )\n    \n            display_count = min(len(final_result), 50)\n            with allure.step(\"等待删除超时\"):\n                allure.attach(f\"超过{timeout}秒仍有{len(final_result)}条记录未删除\", \"超时说明\",\n                              allure.attachment_type.TEXT)\n                allure.attach(\n                    self.serialize_data(final_result[:display_count]),\n                    f\"剩余记录（共{len(final_result)}条）\",\n                    allure.attachment_type.JSON\n                )\n    \n>           raise TimeoutError(f\"Failed: 等待记录删除超时（{timeout}秒）\")\nE           TimeoutError: Failed: 等待记录删除超时（5秒）\n\ncommons\\api_vpsbase.py:870: TimeoutError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_delete.TestDeleteUser object at 0x00000211AA3D6280>\nvar_manager = <template.commons.variable_manager.VariableManager object at 0x00000211AA5E0E20>\ndbvps_transaction = <pymysql.connections.Connection object at 0x00000211AA736EE0>\n\n    @allure.title(\"数据库校验-VPS数据-删除策略账号\")\n    def test_dbdelete_vpstrader(self, var_manager, dbvps_transaction):\n        with allure.step(\"1. 查询数据库验证是否删除成功\"):\n            vps_user_accounts_1 = var_manager.get_variable(\"vps_user_accounts_1\")\n            logging.info(f\"查询条件: table=follow_trader, account={vps_user_accounts_1}\")\n    \n            sql = f\"SELECT * FROM follow_trader WHERE account = %s\"\n            params = (vps_user_accounts_1,)\n            try:\n                self.wait_for_database_deletion(\n                    dbvps_transaction=dbvps_transaction,\n                    sql=sql,\n                    params=params\n                )\n                allure.attach(f\"策略账号 {vps_user_accounts_1} 已成功从数据库删除\", \"验证结果\")\n            except TimeoutError as e:\n                allure.attach(f\"删除超时: {str(e)}\", \"验证结果\")\n>               pytest.fail(f\"删除失败: {str(e)}\")\nE               Failed: 删除失败: Failed: 等待记录删除超时（5秒）\n\ntest_community_vps\\test_delete.py:161: Failed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "dbvps_transaction",
    "time" : {
      "start" : 1760526391184,
      "stop" : 1760526391184,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "dbvps",
    "time" : {
      "start" : 1760526390957,
      "stop" : 1760526391183,
      "duration" : 226
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "Failed: 删除失败: Failed: 等待记录删除超时（5秒）",
    "statusTrace" : "self = <test_delete.TestDeleteUser object at 0x00000211AA3D6280>\nvar_manager = <template.commons.variable_manager.VariableManager object at 0x00000211AA5E0E20>\ndbvps_transaction = <pymysql.connections.Connection object at 0x00000211AA736EE0>\n\n    @allure.title(\"数据库校验-VPS数据-删除策略账号\")\n    def test_dbdelete_vpstrader(self, var_manager, dbvps_transaction):\n        with allure.step(\"1. 查询数据库验证是否删除成功\"):\n            vps_user_accounts_1 = var_manager.get_variable(\"vps_user_accounts_1\")\n            logging.info(f\"查询条件: table=follow_trader, account={vps_user_accounts_1}\")\n    \n            sql = f\"SELECT * FROM follow_trader WHERE account = %s\"\n            params = (vps_user_accounts_1,)\n            try:\n>               self.wait_for_database_deletion(\n                    dbvps_transaction=dbvps_transaction,\n                    sql=sql,\n                    params=params\n                )\n\ntest_community_vps\\test_delete.py:153: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <test_delete.TestDeleteUser object at 0x00000211AA3D6280>\ndbvps_transaction = <pymysql.connections.Connection object at 0x00000211AA736EE0>\nsql = 'SELECT * FROM follow_trader WHERE account = %s', params = ('301391174',)\ntime_field = None, time_range = 1, order_by = 'create_time DESC', timeout = 5\npoll_interval = 2\n\n    def wait_for_database_deletion(self, dbvps_transaction: pymysql.connections.Connection,\n                                   sql: str,\n                                   params: tuple = (),\n                                   time_field: Optional[str] = None,\n                                   time_range: int = MYSQL_TIME,\n                                   order_by: str = \"create_time DESC\",\n                                   timeout: int = DELETE_WAIT_TIMEOUT,\n                                   poll_interval: int = POLL_INTERVAL) -> None:\n        \"\"\"轮询等待数据库记录删除（带Allure分层提示）\"\"\"\n        start_time = time.time()\n    \n        # 生成固定时间范围（轮询开始时计算一次）\n        poll_start_datetime = datetime.datetime.now()\n        fixed_time_start = (poll_start_datetime - datetime.timedelta(minutes=time_range)).strftime(\n            \"%Y-%m-%d %H:%M:%S\")\n        fixed_time_end = (poll_start_datetime + datetime.timedelta(minutes=time_range)).strftime(\n            \"%Y-%m-%d %H:%M:%S\")\n    \n        logger.info(f\"[{self._get_current_time()}] 开始等待数据库记录删除 | SQL: {sql[:200]} | 超时: {timeout}秒\")\n    \n        with allure.step(f\"等待数据库记录删除（超时: {timeout}秒）\"):\n            while time.time() - start_time < timeout:\n                try:\n                    dbvps_transaction.commit()\n    \n                    if time_field:\n                        result = self._execute_query(\n                            dbvps_transaction=dbvps_transaction,\n                            sql=sql,\n                            params=params,\n                            time_field=time_field,\n                            order_by=order_by,\n                            fixed_time_start=fixed_time_start,\n                            fixed_time_end=fixed_time_end,\n                            attach_to_allure=False\n                        )\n                    else:\n                        result = self.query_database(\n                            dbvps_transaction=dbvps_transaction,\n                            sql=sql,\n                            params=params,\n                            order_by=order_by,\n                            attach_to_allure=False\n                        )\n    \n                    elapsed = time.time() - start_time\n                    with allure.step(f\"等待中（已等待{elapsed:.1f}秒）\"):\n                        allure.attach(f\"剩余记录数: {len(result)}\", \"当前状态\", allure.attachment_type.TEXT)\n                        allure.attach(f\"剩余时间: {timeout - elapsed:.1f}秒\", \"超时倒计时\", allure.attachment_type.TEXT)\n    \n                    if not result:\n                        logger.info(\n                            f\"[{self._get_current_time()}] 删除成功（耗时{time.time() - start_time:.1f}秒）| SQL: {sql[:200]}\")\n                        with allure.step(\"删除验证成功\"):\n                            allure.attach(f\"耗时{time.time() - start_time:.1f}秒，记录已删除\", \"结果说明\",\n                                          allure.attachment_type.TEXT)\n                        return\n    \n                    logger.info(\n                        f\"[{self._get_current_time()}] 记录仍存在（已等待{elapsed:.1f}秒）| 剩余时间: {timeout - elapsed:.1f}秒 | 结果数: {len(result)}\")\n                    time.sleep(poll_interval)\n    \n                except Exception as e:\n                    with allure.step(\"删除等待异常\"):\n                        allure.attach(sql, \"执行SQL\", allure.attachment_type.TEXT)\n                        allure.attach(str(params), \"SQL参数\", allure.attachment_type.TEXT)\n                        allure.attach(str(e), \"错误详情\", allure.attachment_type.TEXT)\n                    logger.warning(f\"[{self._get_current_time()}] 轮询查询异常: {str(e)} | 继续等待...\")\n                    time.sleep(poll_interval)\n    \n            # 超时处理\n            dbvps_transaction.commit()\n            if time_field:\n                final_result = self._execute_query(\n                    dbvps_transaction=dbvps_transaction,\n                    sql=sql,\n                    params=params,\n                    time_field=time_field,\n                    order_by=order_by,\n                    fixed_time_start=fixed_time_start,\n                    fixed_time_end=fixed_time_end,\n                    attach_to_allure=True\n                )\n            else:\n                final_result = self.query_database(\n                    dbvps_transaction=dbvps_transaction,\n                    sql=sql,\n                    params=params,\n                    order_by=order_by,\n                    attach_to_allure=True\n                )\n    \n            display_count = min(len(final_result), 50)\n            with allure.step(\"等待删除超时\"):\n                allure.attach(f\"超过{timeout}秒仍有{len(final_result)}条记录未删除\", \"超时说明\",\n                              allure.attachment_type.TEXT)\n                allure.attach(\n                    self.serialize_data(final_result[:display_count]),\n                    f\"剩余记录（共{len(final_result)}条）\",\n                    allure.attachment_type.JSON\n                )\n    \n>           raise TimeoutError(f\"Failed: 等待记录删除超时（{timeout}秒）\")\nE           TimeoutError: Failed: 等待记录删除超时（5秒）\n\ncommons\\api_vpsbase.py:870: TimeoutError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_delete.TestDeleteUser object at 0x00000211AA3D6280>\nvar_manager = <template.commons.variable_manager.VariableManager object at 0x00000211AA5E0E20>\ndbvps_transaction = <pymysql.connections.Connection object at 0x00000211AA736EE0>\n\n    @allure.title(\"数据库校验-VPS数据-删除策略账号\")\n    def test_dbdelete_vpstrader(self, var_manager, dbvps_transaction):\n        with allure.step(\"1. 查询数据库验证是否删除成功\"):\n            vps_user_accounts_1 = var_manager.get_variable(\"vps_user_accounts_1\")\n            logging.info(f\"查询条件: table=follow_trader, account={vps_user_accounts_1}\")\n    \n            sql = f\"SELECT * FROM follow_trader WHERE account = %s\"\n            params = (vps_user_accounts_1,)\n            try:\n                self.wait_for_database_deletion(\n                    dbvps_transaction=dbvps_transaction,\n                    sql=sql,\n                    params=params\n                )\n                allure.attach(f\"策略账号 {vps_user_accounts_1} 已成功从数据库删除\", \"验证结果\")\n            except TimeoutError as e:\n                allure.attach(f\"删除超时: {str(e)}\", \"验证结果\")\n>               pytest.fail(f\"删除失败: {str(e)}\")\nE               Failed: 删除失败: Failed: 等待记录删除超时（5秒）\n\ntest_community_vps\\test_delete.py:161: Failed",
    "steps" : [ {
      "name" : "1. 查询数据库验证是否删除成功",
      "time" : {
        "start" : 1760526391184,
        "stop" : 1760526397590,
        "duration" : 6406
      },
      "status" : "failed",
      "statusMessage" : "Failed: 删除失败: Failed: 等待记录删除超时（5秒）\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\template\\test_community_vps\\test_delete.py\", line 161, in test_dbdelete_vpstrader\n    pytest.fail(f\"删除失败: {str(e)}\")\n  File \"D:\\pycharm_test\\Community\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n",
      "steps" : [ {
        "name" : "等待数据库记录删除（超时: 5秒）",
        "time" : {
          "start" : 1760526391184,
          "stop" : 1760526397589,
          "duration" : 6405
        },
        "status" : "broken",
        "statusMessage" : "TimeoutError: Failed: 等待记录删除超时（5秒）\n",
        "statusTrace" : "  File \"D:\\pycharm_test\\template\\commons\\api_vpsbase.py\", line 870, in wait_for_database_deletion\n    raise TimeoutError(f\"Failed: 等待记录删除超时（{timeout}秒）\")\n",
        "steps" : [ {
          "name" : "执行数据库查询",
          "time" : {
            "start" : 1760526391229,
            "stop" : 1760526391281,
            "duration" : 52
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "d1e120d900eb6716",
            "name" : "执行SQL",
            "source" : "d1e120d900eb6716.txt",
            "type" : "text/plain",
            "size" : 72
          }, {
            "uid" : "28586b8cc54c200d",
            "name" : "SQL参数",
            "source" : "28586b8cc54c200d.txt",
            "type" : "text/plain",
            "size" : 14
          } ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "hasContent" : true,
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 2
        }, {
          "name" : "等待中（已等待0.1秒）",
          "time" : {
            "start" : 1760526391281,
            "stop" : 1760526391282,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "3da55235abd7ec80",
            "name" : "当前状态",
            "source" : "3da55235abd7ec80.txt",
            "type" : "text/plain",
            "size" : 18
          }, {
            "uid" : "38b7bd9f4ce69c75",
            "name" : "超时倒计时",
            "source" : "38b7bd9f4ce69c75.txt",
            "type" : "text/plain",
            "size" : 20
          } ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "hasContent" : true,
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 2
        }, {
          "name" : "执行数据库查询",
          "time" : {
            "start" : 1760526393330,
            "stop" : 1760526393380,
            "duration" : 50
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "99e7c4a4d85c9fa9",
            "name" : "执行SQL",
            "source" : "99e7c4a4d85c9fa9.txt",
            "type" : "text/plain",
            "size" : 72
          }, {
            "uid" : "186a694727b26418",
            "name" : "SQL参数",
            "source" : "186a694727b26418.txt",
            "type" : "text/plain",
            "size" : 14
          } ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "hasContent" : true,
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 2
        }, {
          "name" : "等待中（已等待2.2秒）",
          "time" : {
            "start" : 1760526393380,
            "stop" : 1760526393381,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "87cdbf2e201fb089",
            "name" : "当前状态",
            "source" : "87cdbf2e201fb089.txt",
            "type" : "text/plain",
            "size" : 18
          }, {
            "uid" : "389c670b9cdda5b2",
            "name" : "超时倒计时",
            "source" : "389c670b9cdda5b2.txt",
            "type" : "text/plain",
            "size" : 20
          } ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "hasContent" : true,
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 2
        }, {
          "name" : "执行数据库查询",
          "time" : {
            "start" : 1760526395437,
            "stop" : 1760526395486,
            "duration" : 49
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "254e8c3dda4dc12f",
            "name" : "执行SQL",
            "source" : "254e8c3dda4dc12f.txt",
            "type" : "text/plain",
            "size" : 72
          }, {
            "uid" : "dc1ba77096fc129e",
            "name" : "SQL参数",
            "source" : "dc1ba77096fc129e.txt",
            "type" : "text/plain",
            "size" : 14
          } ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "hasContent" : true,
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 2
        }, {
          "name" : "等待中（已等待4.3秒）",
          "time" : {
            "start" : 1760526395486,
            "stop" : 1760526395487,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "74c919a446b9d392",
            "name" : "当前状态",
            "source" : "74c919a446b9d392.txt",
            "type" : "text/plain",
            "size" : 18
          }, {
            "uid" : "4b8d72dd125193de",
            "name" : "超时倒计时",
            "source" : "4b8d72dd125193de.txt",
            "type" : "text/plain",
            "size" : 20
          } ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "hasContent" : true,
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 2
        }, {
          "name" : "执行数据库查询",
          "time" : {
            "start" : 1760526397542,
            "stop" : 1760526397588,
            "duration" : 46
          },
          "status" : "passed",
          "steps" : [ {
            "name" : "数据库查询结果",
            "time" : {
              "start" : 1760526397587,
              "stop" : 1760526397588,
              "duration" : 1
            },
            "status" : "passed",
            "steps" : [ ],
            "attachments" : [ {
              "uid" : "3776c69d1549bca9",
              "name" : "查询结果（共1条，显示前50条）",
              "source" : "3776c69d1549bca9.json",
              "type" : "application/json",
              "size" : 1055
            } ],
            "parameters" : [ ],
            "stepsCount" : 0,
            "hasContent" : true,
            "shouldDisplayMessage" : false,
            "attachmentsCount" : 1
          } ],
          "attachments" : [ {
            "uid" : "55fbab9c3b6c5aec",
            "name" : "执行SQL",
            "source" : "55fbab9c3b6c5aec.txt",
            "type" : "text/plain",
            "size" : 72
          }, {
            "uid" : "e9707041191ad291",
            "name" : "SQL参数",
            "source" : "e9707041191ad291.txt",
            "type" : "text/plain",
            "size" : 14
          } ],
          "parameters" : [ ],
          "stepsCount" : 1,
          "hasContent" : true,
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 3
        }, {
          "name" : "等待删除超时",
          "time" : {
            "start" : 1760526397588,
            "stop" : 1760526397589,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "2750a5ee4f02978f",
            "name" : "超时说明",
            "source" : "2750a5ee4f02978f.txt",
            "type" : "text/plain",
            "size" : 35
          }, {
            "uid" : "1e1dacf2dc91e9ab",
            "name" : "剩余记录（共1条）",
            "source" : "1e1dacf2dc91e9ab.json",
            "type" : "application/json",
            "size" : 1055
          } ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "hasContent" : true,
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 2
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 9,
        "hasContent" : true,
        "shouldDisplayMessage" : true,
        "attachmentsCount" : 17
      } ],
      "attachments" : [ {
        "uid" : "9736eafd7b6fb1c3",
        "name" : "验证结果",
        "source" : "9736eafd7b6fb1c3.attach",
        "type" : "text/plain",
        "size" : 56
      } ],
      "parameters" : [ ],
      "stepsCount" : 10,
      "hasContent" : true,
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 18
    } ],
    "attachments" : [ {
      "uid" : "7be215f7020e06ea",
      "name" : "log",
      "source" : "7be215f7020e06ea.txt",
      "type" : "text/plain",
      "size" : 17468
    } ],
    "parameters" : [ ],
    "stepsCount" : 11,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 19
  },
  "afterStages" : [ {
    "name" : "dbvps_transaction::0",
    "time" : {
      "start" : 1760526397608,
      "stop" : 1760526397608,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "dbvps::0",
    "time" : {
      "start" : 1760526397609,
      "stop" : 1760526397609,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "数据管理-删除跟单社区测试数据"
  }, {
    "name" : "parentSuite",
    "value" : "test_community_vps"
  }, {
    "name" : "suite",
    "value" : "test_delete"
  }, {
    "name" : "subSuite",
    "value" : "TestDeleteUser"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "20652-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_community_vps.test_delete"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "d08bd14ee0f51c8d.json",
  "parameterValues" : [ ]
}