{
  "uid" : "837106ba6dbf590d",
  "name" : "跟单管理-VPS管理-提取喊单者净值",
  "fullName" : "test_cloudTrader.test_oac_equit.Test_orderseng2#test_query_get_traderquit",
  "historyId" : "cf3f897b9292d9412eac5ba8efe488db",
  "time" : {
    "start" : 1758249451010,
    "stop" : 1758249454649,
    "duration" : 3639
  },
  "description" : "\n    ### 测试说明\n    - 前置条件：有喊单账号、跟单账号，跟单已经和喊单有订阅关系\n      1. MT4进行登录，然后进行开仓，总手数0.01\n      2. 账号管理-持仓订单-喊单和跟单数据校验\n      3. 跟单管理-开仓日志-喊单和跟单数据校验\n      4. 跟单管理-VPS管理-喊单和跟单数据校验\n      5. MT4进行平仓\n      6.账号管理-持仓订单-喊单和跟单数据校验\n      7.跟单管理-开仓日志-喊单和跟单数据校验\n      8.跟单管理-VPS管理-喊单和跟单数据校验\n    - 预期结果：喊单和跟单数据校验正确\n    ",
  "descriptionHtml" : "<pre><code>### 测试说明\n- 前置条件：有喊单账号、跟单账号，跟单已经和喊单有订阅关系\n  1. MT4进行登录，然后进行开仓，总手数0.01\n  2. 账号管理-持仓订单-喊单和跟单数据校验\n  3. 跟单管理-开仓日志-喊单和跟单数据校验\n  4. 跟单管理-VPS管理-喊单和跟单数据校验\n  5. MT4进行平仓\n  6.账号管理-持仓订单-喊单和跟单数据校验\n  7.跟单管理-开仓日志-喊单和跟单数据校验\n  8.跟单管理-VPS管理-喊单和跟单数据校验\n- 预期结果：喊单和跟单数据校验正确\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "Failed: 不支持的币种：None，请补充币种转换逻辑",
  "statusTrace" : "self = <template.test_cloudTrader.test_oac_equit.Test_openandclouseall.Test_orderseng2 object at 0x000001F114E4C400>\nvar_manager = <template.commons.variable_manager.VariableManager object at 0x000001F114E58640>\nlogged_session = <template.commons.session.EnvironmentSession object at 0x000001F114E53280>\n\n    @pytest.mark.retry(n=3, delay=20)\n    @allure.title(\"跟单管理-VPS管理-提取喊单者净值\")\n    def test_query_get_traderquit(self, var_manager, logged_session):\n        with allure.step(\"1. 发送请求\"):\n            trader_account = var_manager.get_variable(\"trader_account\")\n            vpsrunIpAddr = var_manager.get_variable(\"vpsrunIpAddr\")\n            params = {\n                \"_t\": current_timestamp_seconds,\n                \"pageNo\": \"1\",\n                \"pageSize\": \"50\",\n                \"accountLike\": trader_account,\n                \"serverNameLike\": \"\",\n                \"connectTraderLike\": \"\",\n                \"connected\": \"\",\n                \"runIpAddr\": vpsrunIpAddr\n            }\n            response = self.send_get_request(\n                logged_session,\n                '/blockchain/account/getRecordList',\n                params=params\n            )\n    \n        with allure.step(\"2. 返回校验\"):\n            self.assert_json_value(\n                response,\n                \"$.searchCount\",\n                True,\n                \"响应searchCount字段应为true\"\n            )\n    \n        with allure.step(f\"3. 提取净值数据\"):\n            trader_equity = self.json_utils.extract(response.json(), \"$.records[0].equity\")\n            currency = self.json_utils.extract(response.json(), \"$.records[0].currency\")\n    \n            if currency == \"USD\":\n                trader_periodP = round(float(trader_equity) * 1.0, 2)\n            elif currency == \"JPY\":\n                trader_periodP = round(float(trader_equity) * 0.00672, 2)\n            elif currency == \"AUD\":\n                trader_periodP = round(float(trader_equity) * 0.6251, 2)\n            elif currency == \"USC\":\n                trader_periodP = round(float(trader_equity) * 0.01, 2)\n            else:\n>               pytest.fail(f\"不支持的币种：{currency}，请补充币种转换逻辑\")\nE               Failed: 不支持的币种：None，请补充币种转换逻辑\n\ntest_cloudTrader\\test_oac_equit.py:1381: Failed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "\n    ### 测试说明\n    - 前置条件：有喊单账号、跟单账号，跟单已经和喊单有订阅关系\n      1. MT4进行登录，然后进行开仓，总手数0.01\n      2. 账号管理-持仓订单-喊单和跟单数据校验\n      3. 跟单管理-开仓日志-喊单和跟单数据校验\n      4. 跟单管理-VPS管理-喊单和跟单数据校验\n      5. MT4进行平仓\n      6.账号管理-持仓订单-喊单和跟单数据校验\n      7.跟单管理-开仓日志-喊单和跟单数据校验\n      8.跟单管理-VPS管理-喊单和跟单数据校验\n    - 预期结果：喊单和跟单数据校验正确\n    ",
    "status" : "failed",
    "statusMessage" : "Failed: 不支持的币种：None，请补充币种转换逻辑",
    "statusTrace" : "self = <template.test_cloudTrader.test_oac_equit.Test_openandclouseall.Test_orderseng2 object at 0x000001F114E4C400>\nvar_manager = <template.commons.variable_manager.VariableManager object at 0x000001F114E58640>\nlogged_session = <template.commons.session.EnvironmentSession object at 0x000001F114E53280>\n\n    @pytest.mark.retry(n=3, delay=20)\n    @allure.title(\"跟单管理-VPS管理-提取喊单者净值\")\n    def test_query_get_traderquit(self, var_manager, logged_session):\n        with allure.step(\"1. 发送请求\"):\n            trader_account = var_manager.get_variable(\"trader_account\")\n            vpsrunIpAddr = var_manager.get_variable(\"vpsrunIpAddr\")\n            params = {\n                \"_t\": current_timestamp_seconds,\n                \"pageNo\": \"1\",\n                \"pageSize\": \"50\",\n                \"accountLike\": trader_account,\n                \"serverNameLike\": \"\",\n                \"connectTraderLike\": \"\",\n                \"connected\": \"\",\n                \"runIpAddr\": vpsrunIpAddr\n            }\n            response = self.send_get_request(\n                logged_session,\n                '/blockchain/account/getRecordList',\n                params=params\n            )\n    \n        with allure.step(\"2. 返回校验\"):\n            self.assert_json_value(\n                response,\n                \"$.searchCount\",\n                True,\n                \"响应searchCount字段应为true\"\n            )\n    \n        with allure.step(f\"3. 提取净值数据\"):\n            trader_equity = self.json_utils.extract(response.json(), \"$.records[0].equity\")\n            currency = self.json_utils.extract(response.json(), \"$.records[0].currency\")\n    \n            if currency == \"USD\":\n                trader_periodP = round(float(trader_equity) * 1.0, 2)\n            elif currency == \"JPY\":\n                trader_periodP = round(float(trader_equity) * 0.00672, 2)\n            elif currency == \"AUD\":\n                trader_periodP = round(float(trader_equity) * 0.6251, 2)\n            elif currency == \"USC\":\n                trader_periodP = round(float(trader_equity) * 0.01, 2)\n            else:\n>               pytest.fail(f\"不支持的币种：{currency}，请补充币种转换逻辑\")\nE               Failed: 不支持的币种：None，请补充币种转换逻辑\n\ntest_cloudTrader\\test_oac_equit.py:1381: Failed",
    "steps" : [ {
      "name" : "1. 发送请求",
      "time" : {
        "start" : 1758249451010,
        "stop" : 1758249454634,
        "duration" : 3624
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "执行 GET 请求",
        "time" : {
          "start" : 1758249451010,
          "stop" : 1758249454634,
          "duration" : 3624
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "请求详情",
          "time" : {
            "start" : 1758249451010,
            "stop" : 1758249451011,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "e2c46e4fd4f96209",
            "name" : "请求URL",
            "source" : "e2c46e4fd4f96209.txt",
            "type" : "text/plain",
            "size" : 33
          }, {
            "uid" : "d7f4ffc8781612ee",
            "name" : "请求头",
            "source" : "d7f4ffc8781612ee.json",
            "type" : "application/json",
            "size" : 429
          }, {
            "uid" : "d8b30a7c66cc6d1d",
            "name" : "请求体（表单/文件）",
            "source" : "d8b30a7c66cc6d1d.txt",
            "type" : "text/plain",
            "size" : 173
          } ],
          "parameters" : [ ],
          "attachmentsCount" : 3,
          "shouldDisplayMessage" : false,
          "stepsCount" : 0,
          "hasContent" : true
        }, {
          "name" : "响应详情",
          "time" : {
            "start" : 1758249451622,
            "stop" : 1758249451623,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "6383ebaaf629d94f",
            "name" : "响应状态码",
            "source" : "6383ebaaf629d94f.txt",
            "type" : "text/plain",
            "size" : 3
          }, {
            "uid" : "7714b1b6bc70ab65",
            "name" : "响应头",
            "source" : "7714b1b6bc70ab65.json",
            "type" : "application/json",
            "size" : 460
          }, {
            "uid" : "9f63039b2af3c16c",
            "name" : "响应体（JSON）",
            "source" : "9f63039b2af3c16c.json",
            "type" : "application/json",
            "size" : 183
          } ],
          "parameters" : [ ],
          "attachmentsCount" : 3,
          "shouldDisplayMessage" : false,
          "stepsCount" : 0,
          "hasContent" : true
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "attachmentsCount" : 6,
        "shouldDisplayMessage" : false,
        "stepsCount" : 2,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 6,
      "shouldDisplayMessage" : false,
      "stepsCount" : 3,
      "hasContent" : true
    }, {
      "name" : "2. 返回校验",
      "time" : {
        "start" : 1758249454634,
        "stop" : 1758249454639,
        "duration" : 5
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "断言JSON路径: $.searchCount",
        "time" : {
          "start" : 1758249454638,
          "stop" : 1758249454639,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "f787c43b49ccba66",
          "name" : "请求URL",
          "source" : "f787c43b49ccba66.txt",
          "type" : "text/plain",
          "size" : 191
        }, {
          "uid" : "d54e4e37680d074",
          "name" : "预期值",
          "source" : "d54e4e37680d074.txt",
          "type" : "text/plain",
          "size" : 15
        }, {
          "uid" : "c5c06045f3994107",
          "name" : "实际值",
          "source" : "c5c06045f3994107.txt",
          "type" : "text/plain",
          "size" : 15
        } ],
        "parameters" : [ ],
        "attachmentsCount" : 3,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 3,
      "shouldDisplayMessage" : false,
      "stepsCount" : 1,
      "hasContent" : true
    }, {
      "name" : "3. 提取净值数据",
      "time" : {
        "start" : 1758249454639,
        "stop" : 1758249454648,
        "duration" : 9
      },
      "status" : "failed",
      "statusMessage" : "Failed: 不支持的币种：None，请补充币种转换逻辑\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\template\\test_cloudTrader\\test_oac_equit.py\", line 1381, in test_query_get_traderquit\n    pytest.fail(f\"不支持的币种：{currency}，请补充币种转换逻辑\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "697fa448079bba9d",
      "name" : "log",
      "source" : "697fa448079bba9d.txt",
      "type" : "text/plain",
      "size" : 1151
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 10,
    "shouldDisplayMessage" : true,
    "stepsCount" : 7,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "场景2：跟随方式-按净值-50%"
  }, {
    "name" : "feature",
    "value" : "跟随方式-按净值"
  }, {
    "name" : "tag",
    "value" : "retry(n=3, delay=20)"
  }, {
    "name" : "parentSuite",
    "value" : "test_cloudTrader"
  }, {
    "name" : "suite",
    "value" : "test_oac_equit"
  }, {
    "name" : "subSuite",
    "value" : "Test_openandclouseall"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "17284-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_cloudTrader.test_oac_equit"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "retry(n=3, delay=20)" ]
  },
  "source" : "837106ba6dbf590d.json",
  "parameterValues" : [ ]
}