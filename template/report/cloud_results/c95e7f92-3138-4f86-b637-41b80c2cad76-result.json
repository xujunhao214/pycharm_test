{"name": "账号管理-持仓订单-跟单账号ID查询-开仓后", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 订单号数据正确\n\n实际: None\n操作: ==\n预期: 86527006", "trace": "self = <template.test_cloudTrader.test_lianxi3.Test_openandclouseall.Test_orderseng1 object at 0x0000020AFF244F10>\nvar_manager = <template.commons.variable_manager.VariableManager object at 0x0000020AFF251E50>\nlogged_session = <template.commons.session.EnvironmentSession object at 0x0000020AFF325850>\n\n    @allure.title(\"账号管理-持仓订单-跟单账号ID查询-开仓后\")\n    def test_query_openfollow_passid(self, var_manager, logged_session):\n        with allure.step(\"1. 发送请求\"):\n            follow_pass_id = var_manager.get_variable(\"follow_pass_id\")\n            follow_account = var_manager.get_variable(\"follow_account\")\n            params = {\n                \"_t\": current_timestamp_seconds,\n                \"trader_id\": follow_pass_id,\n                \"column\": \"id\",\n                \"order\": \"desc\",\n                \"pageNo\": 1,\n                \"pageSize\": 50,\n                \"superQueryMatchType\": \"and\"\n            }\n            response = self.send_get_request(\n                logged_session,\n                '/online/cgform/api/getData/402883977b38c9ca017b38c9caff0000',\n                params=params\n            )\n    \n        with allure.step(\"2. 返回校验\"):\n            self.assert_json_value(\n                response,\n                \"$.success\",\n                True,\n                \"响应success字段应为true\"\n            )\n    \n        with allure.step(\"3. 提取数据\"):\n            order_no = self.json_utils.extract(response.json(), \"$.result.records[0].order_no\")\n            var_manager.set_runtime_variable(\"order_no\", order_no)\n            allure.attach(f\"{order_no}\", \"跟单订单号\", allure.attachment_type.TEXT)\n    \n        with allure.step(f\"3. 查询校验\"):\n            trader_id_list = self.json_utils.extract(\n                response.json(),\n                \"$.result.records[0].trader_id\",\n                default=[],\n                multi_match=True\n            )\n    \n            if not trader_id_list:\n                attach_body = f\"账号ID查询[{follow_account}]，返回的trader_id列表为空（暂无数据）\"\n            else:\n                attach_body = f\"账号ID查询[{follow_account}]，返回 {len(trader_id_list)} 条记录，trader_id值如下：\\n\" + \\\n                              \"\\n\".join([f\"第 {idx + 1} 条：{s}\" for idx, s in enumerate(trader_id_list)])\n    \n            allure.attach(\n                body=attach_body,\n                name=f\"账号ID:{follow_account}查询结果\",\n                attachment_type=\"text/plain\"\n            )\n    \n            for idx, trader_id in enumerate(trader_id_list):\n                self.verify_data(\n                    actual_value=int(trader_id),\n                    expected_value=int(follow_pass_id),\n                    op=CompareOp.EQ,\n                    use_isclose=False,\n                    message=f\"第 {idx + 1} 条记录的账号ID应为{trader_id}\",\n                    attachment_name=f\"账号ID:{follow_pass_id}第 {idx + 1} 条记录校验\"\n                )\n    \n            with allure.step(\"喊单者订单号校验\"):\n                master_order_no = self.json_utils.extract(response.json(), \"$.result.records[0].master_order_no\")\n                ticket_open = var_manager.get_variable(\"ticket_open\")\n    \n>               self.verify_data(\n                    actual_value=master_order_no,\n                    expected_value=ticket_open,\n                    op=CompareOp.EQ,\n                    use_isclose=False,\n                    message=f\"订单号数据正确\",\n                    attachment_name=\"订单号详情\"\n                )\n\ntest_cloudTrader\\test_lianxi3.py:249: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template.test_cloudTrader.test_lianxi3.Test_openandclouseall.Test_orderseng1 object at 0x0000020AFF244F10>\nactual_value = None, expected_value = 86527006, op = <CompareOp.EQ: '=='>\nmessage = '订单号数据正确', attachment_name = '订单号详情', attachment_type = 'text/plain'\nuse_isclose = False, rel_tol = 1e-09, abs_tol = 0\n\n    def verify_data(\n            self,\n            actual_value,\n            expected_value,\n            op: CompareOp,\n            message: str,\n            attachment_name: str,\n            attachment_type=\"text/plain\",\n            use_isclose=True,  # 新增参数：是否启用math.isclose容错（默认启用）\n            rel_tol=1e-9,  # 相对容差（仅当use_isclose=True时生效）\n            abs_tol=0  # 绝对容差（仅当use_isclose=True时生效）\n    ):\n        \"\"\"\n        通用数据校验函数，支持浮点容错比较\n        :param actual_value: 实际值\n        :param expected_value: 预期值\n        :param op: 比较操作，CompareOp 枚举\n        :param message: 校验失败时的提示信息\n        :param attachment_name: Allure 附件名称\n        :param attachment_type: Allure 附件类型，默认文本\n        :param use_isclose: 是否使用math.isclose进行浮点容错比较\n        :param rel_tol: 相对容差（默认1e-9）\n        :param abs_tol: 绝对容差（默认0.0）\n        其他参数同前\n        \"\"\"\n        with allure.step(f\"校验: {message}\"):\n            result = False\n            try:\n                # 处理浮点容错比较（仅对EQ/NE操作生效）\n                if use_isclose and op in (CompareOp.EQ, CompareOp.NE):\n                    if not (isinstance(actual_value, (int, float)) and\n                            isinstance(expected_value, (int, float))):\n                        # 非数字类型自动禁用isclose，避免报错\n                        use_isclose = False\n                        logging.warning(f\"自动禁用isclose：非数字类型比较（实际值类型：{type(actual_value)}）\")\n    \n                    # 计算isclose结果\n                    is_close = math.isclose(\n                        actual_value,\n                        expected_value,\n                        rel_tol=rel_tol,\n                        abs_tol=abs_tol\n                    )\n                    # 根据操作类型取反\n                    result = is_close if op == CompareOp.EQ else not is_close\n    \n                # 普通比较逻辑\n                else:\n                    if op == CompareOp.EQ:\n                        result = actual_value == expected_value\n                    elif op == CompareOp.NE:\n                        result = actual_value != expected_value\n                    elif op == CompareOp.GT:\n                        result = actual_value > expected_value\n                    elif op == CompareOp.LT:\n                        result = actual_value < expected_value\n                    elif op == CompareOp.GE:\n                        result = actual_value >= expected_value\n                    elif op == CompareOp.LE:\n                        result = actual_value <= expected_value\n                    elif op == CompareOp.IN:\n                        result = actual_value in expected_value\n                    elif op == CompareOp.NOT_IN:\n                        result = actual_value not in expected_value\n    \n            except TypeError as e:\n                pytest.fail(\n                    f\"校验类型错误: {str(e)}\\n实际值类型: {type(actual_value)}, 预期值类型: {type(expected_value)}\")\n    \n            # 生成详细提示信息（包含容差参数）\n            detail_msg = (\n                f\"\\n实际: {actual_value}\\n\"\n                f\"操作: {op.value}\\n\"\n                f\"预期: {expected_value}\\n\"\n            )\n    \n            # 添加allure.attach，将信息写入报告\n            allure.attach(\n                detail_msg,  # 附件内容\n                name=attachment_name,  # 附件名称（来自参数）\n                attachment_type=attachment_type  # 附件类型\n            )\n    \n            if not result:\n>               pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\nE               Failed: 校验失败: 订单号数据正确\nE               \nE               实际: None\nE               操作: ==\nE               预期: 86527006\n\ncommons\\api_base.py:1362: Failed"}, "description": "\n    ### 测试说明\n    - 前置条件：有喊单账号、跟单账号，跟单已经和喊单有订阅关系\n      1. MT4进行登录，然后进行开仓，总手数0.01\n      2. 账号管理-持仓订单-喊单和跟单数据校验\n      3. 跟单管理-开仓日志-喊单和跟单数据校验\n      4. 跟单管理-VPS管理-喊单和跟单数据校验\n      5. MT4进行平仓\n      6.账号管理-持仓订单-喊单和跟单数据校验\n      7.跟单管理-开仓日志-喊单和跟单数据校验\n      8.跟单管理-VPS管理-喊单和跟单数据校验\n    - 预期结果：喊单和跟单数据校验正确\n    ", "steps": [{"name": "1. 发送请求", "status": "passed", "steps": [{"name": "执行 GET 请求", "status": "passed", "steps": [{"name": "请求详情", "status": "passed", "attachments": [{"name": "请求URL", "source": "746a0a61-a13b-4cc3-aacc-eba635d932c0-attachment.txt", "type": "text/plain"}, {"name": "请求头", "source": "2328e967-10ca-4445-a964-b9fb6c0187c6-attachment.json", "type": "application/json"}, {"name": "请求体（表单/文件）", "source": "722f79d3-1d99-4b83-99f0-2a4d3044bee4-attachment.txt", "type": "text/plain"}], "start": 1758599668743, "stop": 1758599668744}, {"name": "响应详情", "status": "passed", "attachments": [{"name": "响应状态码", "source": "7f61d8f4-8d79-4b53-84a0-9b70a587a8b0-attachment.txt", "type": "text/plain"}, {"name": "响应头", "source": "5dc02f05-bad2-4c81-b6fc-19b8c188a499-attachment.json", "type": "application/json"}, {"name": "响应体（JSON）", "source": "dba10d06-4534-4297-ba0a-fa3e0f20a42c-attachment.json", "type": "application/json"}], "start": 1758599669352, "stop": 1758599669353}], "start": 1758599668743, "stop": 1758599672353}], "start": 1758599668743, "stop": 1758599672353}, {"name": "2. 返回校验", "status": "passed", "steps": [{"name": "断言JSON路径: $.success", "status": "passed", "attachments": [{"name": "请求URL", "source": "1bce8aa8-61b8-4bea-abaa-659acf777048-attachment.txt", "type": "text/plain"}, {"name": "预期值", "source": "28a83a62-2748-433b-a153-86b75b080a34-attachment.txt", "type": "text/plain"}, {"name": "实际值", "source": "32b67741-80b3-48d2-920c-6d5c77dc58ca-attachment.txt", "type": "text/plain"}], "start": 1758599672357, "stop": 1758599672358}], "start": 1758599672353, "stop": 1758599672358}, {"name": "3. 提取数据", "status": "passed", "attachments": [{"name": "跟单订单号", "source": "18788583-8cce-4dca-96b6-26595a279948-attachment.txt", "type": "text/plain"}], "start": 1758599672358, "stop": 1758599672364}, {"name": "3. 查询校验", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 订单号数据正确\n\n实际: None\n操作: ==\n预期: 86527006\n\n", "trace": "  File \"D:\\pycharm_test\\template\\test_cloudTrader\\test_lianxi3.py\", line 249, in test_query_openfollow_passid\n    self.verify_data(\n  File \"D:\\pycharm_test\\template\\commons\\api_base.py\", line 1362, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "喊单者订单号校验", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 订单号数据正确\n\n实际: None\n操作: ==\n预期: 86527006\n\n", "trace": "  File \"D:\\pycharm_test\\template\\test_cloudTrader\\test_lianxi3.py\", line 249, in test_query_openfollow_passid\n    self.verify_data(\n  File \"D:\\pycharm_test\\template\\commons\\api_base.py\", line 1362, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "校验: 订单号数据正确", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 订单号数据正确\n\n实际: None\n操作: ==\n预期: 86527006\n\n", "trace": "  File \"D:\\pycharm_test\\template\\commons\\api_base.py\", line 1362, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "attachments": [{"name": "订单号详情", "source": "4df386d2-ffb3-4853-9c9c-13b5f9e25955-attachment.attach", "type": "text/plain"}], "start": 1758599672373, "stop": 1758599672373}], "start": 1758599672368, "stop": 1758599672374}], "attachments": [{"name": "账号ID:301390787查询结果", "source": "255aff2d-cc81-4bc2-ab8e-70ec10317540-attachment.attach", "type": "text/plain"}], "start": 1758599672364, "stop": 1758599672375}], "attachments": [{"name": "log", "source": "9ac47e14-0ef0-4994-b452-943889fd78dc-attachment.txt", "type": "text/plain"}], "start": 1758599668743, "stop": 1758599672375, "uuid": "5d7f7aab-f474-429f-a2f7-bf247f611ad3", "historyId": "5e838cafde257a683930619c81c64026", "testCaseId": "5e838cafde257a683930619c81c64026", "fullName": "test_cloudTrader.test_lianxi3.Test_orderseng1#test_query_openfollow_passid", "labels": [{"name": "feature", "value": "跟随方式-按比例"}, {"name": "story", "value": "场景1：跟随方式-按比例-固定比例100%"}, {"name": "parentSuite", "value": "test_cloudTrader"}, {"name": "suite", "value": "test_lianxi3"}, {"name": "subSuite", "value": "Test_openandclouseall"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "39332-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cloudTrader.test_lianxi3"}]}