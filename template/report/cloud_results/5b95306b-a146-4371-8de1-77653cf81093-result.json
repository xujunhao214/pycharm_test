{"name": "账号管理-历史订单-跟单MT4账户查询-平仓后", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 订单号数据正确\n\n实际: \n操作: ==\n预期: 90338169", "trace": "self = <template.test_cloudTrader.test_lianxi2.Test_proportionall.Test_orderseng1 object at 0x0000022A25942820>\nvar_manager = <template.commons.variable_manager.VariableManager object at 0x0000022A259CAD60>\nlogged_session = <template.commons.session.EnvironmentSession object at 0x0000022A259A4BB0>\n\n>   ???\n\nD:\\pycharm_test\\template\\test_community\\test_lianxi2.py:1155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template.test_cloudTrader.test_lianxi2.Test_proportionall.Test_orderseng1 object at 0x0000022A25942820>\nactual_value = '', expected_value = 90338169, op = <CompareOp.EQ: '=='>\nmessage = '订单号数据正确', attachment_name = '订单号详情', attachment_type = 'text/plain'\nuse_isclose = False, rel_tol = 1e-09, abs_tol = 0\n\n    def verify_data(\n            self,\n            actual_value,\n            expected_value,\n            op: CompareOp,\n            message: str,\n            attachment_name: str,\n            attachment_type=\"text/plain\",\n            use_isclose=True,  # 新增参数：是否启用math.isclose容错（默认启用）\n            rel_tol=1e-9,  # 相对容差（仅当use_isclose=True时生效）\n            abs_tol=0  # 绝对容差（仅当use_isclose=True时生效）\n    ):\n        \"\"\"\n        通用数据校验函数，支持浮点容错比较\n        :param actual_value: 实际值\n        :param expected_value: 预期值\n        :param op: 比较操作，CompareOp 枚举\n        :param message: 校验失败时的提示信息\n        :param attachment_name: Allure 附件名称\n        :param attachment_type: Allure 附件类型，默认文本\n        :param use_isclose: 是否使用math.isclose进行浮点容错比较\n        :param rel_tol: 相对容差（默认1e-9）\n        :param abs_tol: 绝对容差（默认0.0）\n        其他参数同前\n        \"\"\"\n        with allure.step(f\"校验: {message}\"):\n            result = False\n            try:\n                # 处理浮点容错比较（仅对EQ/NE操作生效）\n                if use_isclose and op in (CompareOp.EQ, CompareOp.NE):\n                    if not (isinstance(actual_value, (int, float)) and\n                            isinstance(expected_value, (int, float))):\n                        # 非数字类型自动禁用isclose，避免报错\n                        use_isclose = False\n                        logging.warning(f\"自动禁用isclose：非数字类型比较（实际值类型：{type(actual_value)}）\")\n    \n                    # 计算isclose结果\n                    is_close = math.isclose(\n                        actual_value,\n                        expected_value,\n                        rel_tol=rel_tol,\n                        abs_tol=abs_tol\n                    )\n                    # 根据操作类型取反\n                    result = is_close if op == CompareOp.EQ else not is_close\n    \n                # 普通比较逻辑\n                else:\n                    if op == CompareOp.EQ:\n                        result = actual_value == expected_value\n                    elif op == CompareOp.NE:\n                        result = actual_value != expected_value\n                    elif op == CompareOp.GT:\n                        result = actual_value > expected_value\n                    elif op == CompareOp.LT:\n                        result = actual_value < expected_value\n                    elif op == CompareOp.GE:\n                        result = actual_value >= expected_value\n                    elif op == CompareOp.LE:\n                        result = actual_value <= expected_value\n                    elif op == CompareOp.IN:\n                        result = actual_value in expected_value\n                    elif op == CompareOp.NOT_IN:\n                        result = actual_value not in expected_value\n    \n            except TypeError as e:\n                pytest.fail(\n                    f\"校验类型错误: {str(e)}\\n实际值类型: {type(actual_value)}, 预期值类型: {type(expected_value)}\")\n    \n            # 生成详细提示信息（包含容差参数）\n            detail_msg = (\n                f\"\\n实际: {actual_value}\\n\"\n                f\"操作: {op.value}\\n\"\n                f\"预期: {expected_value}\\n\"\n            )\n    \n            # 添加allure.attach，将信息写入报告\n            allure.attach(\n                detail_msg,  # 附件内容\n                name=attachment_name,  # 附件名称（来自参数）\n                attachment_type=attachment_type  # 附件类型\n            )\n    \n            if not result:\n>               pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\nE               Failed: 校验失败: 订单号数据正确\nE               \nE               实际: \nE               操作: ==\nE               预期: 90338169\n\ncommons\\api_base.py:1775: Failed"}, "description": "\n    ### 测试说明\n    - 前置条件：有喊单账号、跟单账号，跟单已经和喊单有订阅关系\n      1. 修改订阅信息，跟随方式-按比例-固定比例100%\n      2. 自研跟单-VPS策略账号进行开仓，总手数0.01\n      3. 账号管理-持仓订单-喊单和跟单数据校验\n      4. 跟单管理-开仓日志-喊单和跟单数据校验\n      5. 跟单管理-VPS管理-喊单和跟单数据校验\n      6. 自研跟单-VPS策略账号进行平仓\n      7. 账号管理-持仓订单-喊单和跟单数据校验\n      8. 账号管理-历史订单-喊单和跟单数据校验\n      9. 跟单管理-开仓日志-喊单和跟单数据校验\n      10.跟单管理-VPS管理-喊单和跟单数据校验\n    - 预期结果：喊单和跟单数据校验正确\n    ", "steps": [{"name": "1. 发送请求", "status": "passed", "steps": [{"name": "执行 GET 请求", "status": "passed", "steps": [{"name": "请求详情", "status": "passed", "attachments": [{"name": "请求URL", "source": "be69a736-7502-4b52-baec-a92bee79863b-attachment.txt", "type": "text/plain"}, {"name": "请求头", "source": "73c87f33-4646-49d7-aa37-7f05434e5a9f-attachment.json", "type": "application/json"}, {"name": "请求体（表单/文件）", "source": "defe2d5d-f725-40e4-9289-d9da10d27580-attachment.txt", "type": "text/plain"}], "start": 1760586651903, "stop": 1760586651904}, {"name": "响应详情", "status": "passed", "attachments": [{"name": "响应状态码", "source": "bd1b7601-1997-4ac1-b2a4-024be763f3ee-attachment.txt", "type": "text/plain"}, {"name": "响应头", "source": "0f879b1c-f75a-4337-9030-9ad3d485a6d4-attachment.json", "type": "application/json"}, {"name": "响应体（JSON）", "source": "cd245e62-07fd-4398-ac32-671c8bcd83c3-attachment.json", "type": "application/json"}], "start": 1760586652516, "stop": 1760586652517}], "start": 1760586651903, "stop": 1760586655525}], "start": 1760586651903, "stop": 1760586655525}, {"name": "2. 返回校验", "status": "passed", "steps": [{"name": "断言JSON路径: $.success", "status": "passed", "attachments": [{"name": "请求URL", "source": "4037a7de-ee90-482e-8def-bfa685c65244-attachment.txt", "type": "text/plain"}, {"name": "预期值", "source": "bdd42636-b64e-4d70-9892-d00543fb3608-attachment.txt", "type": "text/plain"}, {"name": "实际值", "source": "3f127873-e71f-4bb7-8183-763d585168e2-attachment.txt", "type": "text/plain"}], "start": 1760586655529, "stop": 1760586655531}], "start": 1760586655525, "stop": 1760586655531}, {"name": "3. 提取数据", "status": "passed", "attachments": [{"name": "跟单订单号", "source": "0c283132-7bff-4b87-8eac-5d6c3d4680aa-attachment.txt", "type": "text/plain"}], "start": 1760586655531, "stop": 1760586655536}, {"name": "3. 查询校验", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 订单号数据正确\n\n实际: \n操作: ==\n预期: 90338169\n\n", "trace": "  File \"D:\\pycharm_test\\template\\test_community\\test_lianxi2.py\", line 1155, in test_query_follow_id\n  File \"D:\\pycharm_test\\template\\commons\\api_base.py\", line 1775, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\Community\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "校验: 第 1 条记录的账号ID应为1978669405108662274", "status": "passed", "attachments": [{"name": "账号ID:1978669405108662274第 1 条记录校验", "source": "cf1c2da1-bf77-4b70-8d76-f5e719c96f5b-attachment.attach", "type": "text/plain"}], "start": 1760586655541, "stop": 1760586655541}, {"name": "喊单者订单号校验", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 订单号数据正确\n\n实际: \n操作: ==\n预期: 90338169\n\n", "trace": "  File \"D:\\pycharm_test\\template\\test_community\\test_lianxi2.py\", line 1155, in test_query_follow_id\n  File \"D:\\pycharm_test\\template\\commons\\api_base.py\", line 1775, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\Community\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "校验: 订单号数据正确", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 订单号数据正确\n\n实际: \n操作: ==\n预期: 90338169\n\n", "trace": "  File \"D:\\pycharm_test\\template\\commons\\api_base.py\", line 1775, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\Community\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "attachments": [{"name": "订单号详情", "source": "76d18b24-ba69-4180-a438-370f6c2dd126-attachment.attach", "type": "text/plain"}], "start": 1760586655545, "stop": 1760586655546}], "start": 1760586655541, "stop": 1760586655547}], "attachments": [{"name": "账号ID:301391176查询结果", "source": "cde241ab-3de0-4518-a7c3-0ff9b17adf92-attachment.attach", "type": "text/plain"}], "start": 1760586655536, "stop": 1760586655547}], "attachments": [{"name": "log", "source": "96f0aa94-988c-4fca-a376-7f1169eca8d5-attachment.txt", "type": "text/plain"}], "start": 1760586651903, "stop": 1760586655547, "uuid": "84762826-91f5-4508-9287-584f4fb0bcb8", "historyId": "e1b9d1b61059e08712c552ed7056918a", "testCaseId": "e1b9d1b61059e08712c552ed7056918a", "fullName": "test_cloudTrader.test_lianxi2.Test_orderseng1#test_query_follow_id", "labels": [{"name": "feature", "value": "跟随方式-按比例"}, {"name": "story", "value": "场景1：跟随方式-按比例-固定比例100%"}, {"name": "parentSuite", "value": "test_cloudTrader"}, {"name": "suite", "value": "test_lianxi2"}, {"name": "subSuite", "value": "Test_proportionall"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "71996-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cloudTrader.test_lianxi2"}]}