{"name": "账号管理-历史订单-喊单MT4账户查询-平仓后", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 订单号数据正确\n\n实际: 87014684\n操作: ==\n预期: 87014889", "trace": "self = <template.test_cloudTrader.test_oac_proportion.Test_proportionall.Test_orderseng2 object at 0x000001D73AD94B20>\nvar_manager = <template.commons.variable_manager.VariableManager object at 0x000001D73AE420A0>\nlogged_session = <template.commons.session.EnvironmentSession object at 0x000001D73AE428E0>\n\n    @allure.title(\"账号管理-历史订单-喊单MT4账户查询-平仓后\")\n    def test_query_trader_id(self, var_manager, logged_session):\n        with allure.step(\"1. 发送请求\"):\n            trader_pass_id = var_manager.get_variable(\"trader_pass_id\")\n            trader_account = var_manager.get_variable(\"trader_account\")\n            params = {\n                \"_t\": current_timestamp_seconds,\n                \"trader_id\": trader_pass_id,\n                \"column\": \"id\",\n                \"order\": \"desc\",\n                \"pageNo\": 1,\n                \"pageSize\": 20,\n                \"superQueryMatchType\": \"and\"\n            }\n            response = self.send_get_request(\n                logged_session,\n                '/online/cgform/api/getData/402883977b38c9ca017b38c9d0960001',\n                params=params\n            )\n    \n        with allure.step(\"2. 返回校验\"):\n            self.assert_json_value(\n                response,\n                \"$.success\",\n                True,\n                \"响应success字段应为true\"\n            )\n    \n        with allure.step(f\"3. 查询校验\"):\n            order_size = self.json_utils.extract(response.json(), \"$.result.records[0].size\")\n            logging.info(f\"喊单者手数是: {order_size}\")\n            var_manager.set_runtime_variable(\"order_size\", order_size)\n    \n            trader_id_list = self.json_utils.extract(\n                response.json(),\n                \"$.result.records[0].trader_id\",\n                default=[],\n                multi_match=True\n            )\n    \n            if not trader_id_list:\n                attach_body = f\"MT4账号查询[{trader_account}]，返回的trader_id列表为空（暂无数据）\"\n            else:\n                attach_body = f\"MT4账号查询[{trader_account}]，返回 {len(trader_id_list)} 条记录\"\n    \n            allure.attach(\n                body=attach_body,\n                name=f\"账号ID:{trader_account}查询结果\",\n                attachment_type=\"text/plain\"\n            )\n    \n            for idx, trader_id in enumerate(trader_id_list):\n                self.verify_data(\n                    actual_value=int(trader_id),\n                    expected_value=int(trader_pass_id),\n                    op=CompareOp.EQ,\n                    use_isclose=False,\n                    message=f\"第 {idx + 1} 条记录的账号ID应为{trader_id}\",\n                    attachment_name=f\"账号ID:{trader_pass_id}第 {idx + 1} 条记录校验\"\n                )\n    \n                with allure.step(\"订单号校验\"):\n                    order_no = self.json_utils.extract(response.json(), \"$.result.records[0].order_no\")\n                    ticket_open = var_manager.get_variable(\"ticket_open\")\n    \n>                   self.verify_data(\n                        actual_value=order_no,\n                        expected_value=ticket_open,\n                        op=CompareOp.EQ,\n                        use_isclose=False,\n                        message=f\"订单号数据正确\",\n                        attachment_name=\"订单号详情\"\n                    )\n\ntest_cloudTrader\\test_oac_proportion.py:1865: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template.test_cloudTrader.test_oac_proportion.Test_proportionall.Test_orderseng2 object at 0x000001D73AD94B20>\nactual_value = 87014684, expected_value = 87014889, op = <CompareOp.EQ: '=='>\nmessage = '订单号数据正确', attachment_name = '订单号详情', attachment_type = 'text/plain'\nuse_isclose = False, rel_tol = 1e-09, abs_tol = 0\n\n    def verify_data(\n            self,\n            actual_value,\n            expected_value,\n            op: CompareOp,\n            message: str,\n            attachment_name: str,\n            attachment_type=\"text/plain\",\n            use_isclose=True,  # 新增参数：是否启用math.isclose容错（默认启用）\n            rel_tol=1e-9,  # 相对容差（仅当use_isclose=True时生效）\n            abs_tol=0  # 绝对容差（仅当use_isclose=True时生效）\n    ):\n        \"\"\"\n        通用数据校验函数，支持浮点容错比较\n        :param actual_value: 实际值\n        :param expected_value: 预期值\n        :param op: 比较操作，CompareOp 枚举\n        :param message: 校验失败时的提示信息\n        :param attachment_name: Allure 附件名称\n        :param attachment_type: Allure 附件类型，默认文本\n        :param use_isclose: 是否使用math.isclose进行浮点容错比较\n        :param rel_tol: 相对容差（默认1e-9）\n        :param abs_tol: 绝对容差（默认0.0）\n        其他参数同前\n        \"\"\"\n        with allure.step(f\"校验: {message}\"):\n            result = False\n            try:\n                # 处理浮点容错比较（仅对EQ/NE操作生效）\n                if use_isclose and op in (CompareOp.EQ, CompareOp.NE):\n                    if not (isinstance(actual_value, (int, float)) and\n                            isinstance(expected_value, (int, float))):\n                        # 非数字类型自动禁用isclose，避免报错\n                        use_isclose = False\n                        logging.warning(f\"自动禁用isclose：非数字类型比较（实际值类型：{type(actual_value)}）\")\n    \n                    # 计算isclose结果\n                    is_close = math.isclose(\n                        actual_value,\n                        expected_value,\n                        rel_tol=rel_tol,\n                        abs_tol=abs_tol\n                    )\n                    # 根据操作类型取反\n                    result = is_close if op == CompareOp.EQ else not is_close\n    \n                # 普通比较逻辑\n                else:\n                    if op == CompareOp.EQ:\n                        result = actual_value == expected_value\n                    elif op == CompareOp.NE:\n                        result = actual_value != expected_value\n                    elif op == CompareOp.GT:\n                        result = actual_value > expected_value\n                    elif op == CompareOp.LT:\n                        result = actual_value < expected_value\n                    elif op == CompareOp.GE:\n                        result = actual_value >= expected_value\n                    elif op == CompareOp.LE:\n                        result = actual_value <= expected_value\n                    elif op == CompareOp.IN:\n                        result = actual_value in expected_value\n                    elif op == CompareOp.NOT_IN:\n                        result = actual_value not in expected_value\n    \n            except TypeError as e:\n                pytest.fail(\n                    f\"校验类型错误: {str(e)}\\n实际值类型: {type(actual_value)}, 预期值类型: {type(expected_value)}\")\n    \n            # 生成详细提示信息（包含容差参数）\n            detail_msg = (\n                f\"\\n实际: {actual_value}\\n\"\n                f\"操作: {op.value}\\n\"\n                f\"预期: {expected_value}\\n\"\n            )\n    \n            # 添加allure.attach，将信息写入报告\n            allure.attach(\n                detail_msg,  # 附件内容\n                name=attachment_name,  # 附件名称（来自参数）\n                attachment_type=attachment_type  # 附件类型\n            )\n    \n            if not result:\n>               pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\nE               Failed: 校验失败: 订单号数据正确\nE               \nE               实际: 87014684\nE               操作: ==\nE               预期: 87014889\n\ncommons\\api_base.py:1441: Failed"}, "description": "\n    ### 测试说明\n    - 前置条件：有喊单账号、跟单账号，跟单已经和喊单有订阅关系\n      1. 修改订阅信息，跟随方式-按比例-固定比例50%\n      2. MT4进行登录，然后进行开仓，总手数0.2\n      3. 账号管理-持仓订单-喊单和跟单数据校验\n      4. 跟单管理-开仓日志-喊单和跟单数据校验\n      5. 跟单管理-VPS管理-喊单和跟单数据校验\n      6. MT4进行平仓\n      7.账号管理-历史订单-喊单和跟单数据校验\n      8.跟单管理-开仓日志-喊单和跟单数据校验\n    - 预期结果：喊单和跟单数据校验正确\n    ", "steps": [{"name": "1. 发送请求", "status": "passed", "steps": [{"name": "执行 GET 请求", "status": "passed", "steps": [{"name": "请求详情", "status": "passed", "attachments": [{"name": "请求URL", "source": "542b17e5-2cc7-453f-a078-cf79a18462f9-attachment.txt", "type": "text/plain"}, {"name": "请求头", "source": "a7570c61-aadb-4a68-9210-670233f96903-attachment.json", "type": "application/json"}, {"name": "请求体（表单/文件）", "source": "97441e0f-7c03-423a-b80c-74561c05dbe9-attachment.txt", "type": "text/plain"}], "start": 1758869000882, "stop": 1758869000883}, {"name": "响应详情", "status": "passed", "attachments": [{"name": "响应状态码", "source": "e0c5325c-038b-4c9a-8e4f-421260bb6897-attachment.txt", "type": "text/plain"}, {"name": "响应头", "source": "4ad20436-3550-45f1-86fd-08583f3685d0-attachment.json", "type": "application/json"}, {"name": "响应体（JSON）", "source": "817909d1-cbb4-4a61-91f1-56f9e604300d-attachment.json", "type": "application/json"}], "start": 1758869001504, "stop": 1758869001506}], "start": 1758869000882, "stop": 1758869004512}], "start": 1758869000882, "stop": 1758869004512}, {"name": "2. 返回校验", "status": "passed", "steps": [{"name": "断言JSON路径: $.success", "status": "passed", "attachments": [{"name": "请求URL", "source": "4d62933b-2033-4acc-a409-005d0ff38c26-attachment.txt", "type": "text/plain"}, {"name": "预期值", "source": "9a8a081d-c8de-4eed-9258-2cada942563c-attachment.txt", "type": "text/plain"}, {"name": "实际值", "source": "300e68f8-2a36-4b41-9def-3a728ff44029-attachment.txt", "type": "text/plain"}], "start": 1758869004517, "stop": 1758869004518}], "start": 1758869004512, "stop": 1758869004518}, {"name": "3. 查询校验", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 订单号数据正确\n\n实际: 87014684\n操作: ==\n预期: 87014889\n\n", "trace": "  File \"D:\\pycharm_test\\template\\test_cloudTrader\\test_oac_proportion.py\", line 1865, in test_query_trader_id\n    self.verify_data(\n  File \"D:\\pycharm_test\\template\\commons\\api_base.py\", line 1441, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "校验: 第 1 条记录的账号ID应为1971406803496230913", "status": "passed", "attachments": [{"name": "账号ID:1971406803496230913第 1 条记录校验", "source": "308803c9-e804-4f02-ad8b-ebfcdadcd3b6-attachment.attach", "type": "text/plain"}], "start": 1758869004527, "stop": 1758869004527}, {"name": "订单号校验", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 订单号数据正确\n\n实际: 87014684\n操作: ==\n预期: 87014889\n\n", "trace": "  File \"D:\\pycharm_test\\template\\test_cloudTrader\\test_oac_proportion.py\", line 1865, in test_query_trader_id\n    self.verify_data(\n  File \"D:\\pycharm_test\\template\\commons\\api_base.py\", line 1441, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "校验: 订单号数据正确", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 订单号数据正确\n\n实际: 87014684\n操作: ==\n预期: 87014889\n\n", "trace": "  File \"D:\\pycharm_test\\template\\commons\\api_base.py\", line 1441, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "attachments": [{"name": "订单号详情", "source": "930c0ba7-1a72-48da-89b6-ce4f24857d46-attachment.attach", "type": "text/plain"}], "start": 1758869004532, "stop": 1758869004532}], "start": 1758869004527, "stop": 1758869004533}], "attachments": [{"name": "账号ID:301390786查询结果", "source": "f7c3bd7e-8510-47e4-8e85-3b34bf53c6ee-attachment.attach", "type": "text/plain"}], "start": 1758869004518, "stop": 1758869004534}], "attachments": [{"name": "log", "source": "50c2da51-6605-4c79-bb62-08ecd0860b94-attachment.txt", "type": "text/plain"}], "start": 1758869000882, "stop": 1758869004534, "uuid": "05011d16-3aa8-4e7c-9d92-6c71b3c1f36a", "historyId": "6d2ed08068f76531fd64c3d151af694c", "testCaseId": "6d2ed08068f76531fd64c3d151af694c", "fullName": "test_cloudTrader.test_oac_proportion.Test_orderseng2#test_query_trader_id", "labels": [{"name": "story", "value": "场景2：跟随方式-按比例-固定比例50%"}, {"name": "feature", "value": "跟随方式-按比例"}, {"name": "parentSuite", "value": "test_cloudTrader"}, {"name": "suite", "value": "test_oac_proportion"}, {"name": "subSuite", "value": "Test_proportionall"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "37516-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cloudTrader.test_oac_proportion"}]}