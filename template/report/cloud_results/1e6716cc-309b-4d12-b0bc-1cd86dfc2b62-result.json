{"name": "分红用户查询", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 第 1 条记录的dividendUser应为xujunhao4@163.com\n\n实际: xujunhao4@163.com\n操作: ==\n预期: xujunhao@163.com", "trace": "self = <template.test_cloudTrader.test_lianxi.Test_create.Test_trader object at 0x00000218EA2880A0>\nvar_manager = <template.commons.variable_manager.VariableManager object at 0x00000218EA288130>\nlogged_session = <template.commons.session.EnvironmentSession object at 0x00000218EA288430>\n\n    @allure.title(\"分红用户查询\")\n    def test_query_followerTa(self, var_manager, logged_session):\n        with allure.step(\"1. 发送请求\"):\n            login_config = var_manager.get_variable(\"login_config\")\n            dividendUser = login_config.get(\"username\")\n            params = {\n                \"_t\": current_timestamp_seconds,\n                \"page\": 1,\n                \"limit\": 100,\n                \"type\": \"\",\n                \"status\": \"\",\n                \"dividendTimeBegin\": \"\",\n                \"dividendTimeEnd\": \"\",\n                \"followerUser\": \"\",\n                \"followerTa\": \"\",\n                \"dividendUser\": dividendUser\n            }\n            response = self.send_get_request(\n                logged_session,\n                '/agent/agentLevelDividend/page',\n                params=params\n            )\n    \n        with allure.step(\"2. 返回校验\"):\n            self.assert_json_value(\n                response,\n                \"$.success\",\n                True,\n                \"响应success字段应为true\"\n            )\n    \n        with allure.step(f\"3. 查询结果校验\"):\n            dividendUser_list = self.json_utils.extract(\n                response.json(),\n                \"$.result.list[*].slaveRecords[*].dividendUser\",\n                default=[],\n                multi_match=True\n            )\n    \n            if not dividendUser_list:\n                attach_body = f\"分红用户查询：{dividendUser}，返回的dividendUser列表为空（暂无数据）\"\n            else:\n                attach_body = f\"分红用户查询：{dividendUser}，返回 {len(dividendUser_list)} 条记录，dividendUser值如下：\\n\" + \\\n                              \"\\n\".join([f\"第 {idx + 1} 条：{s}\" for idx, s in enumerate(dividendUser_list)])\n    \n            allure.attach(\n                body=attach_body,\n                name=f\"分红用户:{dividendUser}查询结果\",\n                attachment_type=\"text/plain\"\n            )\n    \n            for idx, followerUserlist in enumerate(dividendUser_list):\n>               self.verify_data(\n                    actual_value=followerUserlist,\n                    expected_value=dividendUser,\n                    op=CompareOp.EQ,\n                    use_isclose=False,\n                    message=f\"第 {idx + 1} 条记录的dividendUser应为{followerUserlist}\",\n                    attachment_name=f\"分红用户:{dividendUser}第 {idx + 1} 条记录校验\"\n                )\n\ntest_cloudTrader\\test_lianxi.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template.test_cloudTrader.test_lianxi.Test_create.Test_trader object at 0x00000218EA2880A0>\nactual_value = 'xujunhao4@163.com', expected_value = 'xujunhao@163.com'\nop = <CompareOp.EQ: '=='>, message = '第 1 条记录的dividendUser应为xujunhao4@163.com'\nattachment_name = '分红用户:xujunhao@163.com第 1 条记录校验'\nattachment_type = 'text/plain', use_isclose = False, rel_tol = 1e-09\nabs_tol = 0\n\n    def verify_data(\n            self,\n            actual_value,\n            expected_value,\n            op: CompareOp,\n            message: str,\n            attachment_name: str,\n            attachment_type=\"text/plain\",\n            use_isclose=True,  # 新增参数：是否启用math.isclose容错（默认启用）\n            rel_tol=1e-9,  # 相对容差（仅当use_isclose=True时生效）\n            abs_tol=0  # 绝对容差（仅当use_isclose=True时生效）\n    ):\n        \"\"\"\n        通用数据校验函数，支持浮点容错比较\n        :param actual_value: 实际值\n        :param expected_value: 预期值\n        :param op: 比较操作，CompareOp 枚举\n        :param message: 校验失败时的提示信息\n        :param attachment_name: Allure 附件名称\n        :param attachment_type: Allure 附件类型，默认文本\n        :param use_isclose: 是否使用math.isclose进行浮点容错比较\n        :param rel_tol: 相对容差（默认1e-9）\n        :param abs_tol: 绝对容差（默认0.0）\n        其他参数同前\n        \"\"\"\n        with allure.step(f\"校验: {message}\"):\n            result = False\n            try:\n                # 处理浮点容错比较（仅对EQ/NE操作生效）\n                if use_isclose and op in (CompareOp.EQ, CompareOp.NE):\n                    if not (isinstance(actual_value, (int, float)) and\n                            isinstance(expected_value, (int, float))):\n                        # 非数字类型自动禁用isclose，避免报错\n                        use_isclose = False\n                        logging.warning(f\"自动禁用isclose：非数字类型比较（实际值类型：{type(actual_value)}）\")\n    \n                    # 计算isclose结果\n                    is_close = math.isclose(\n                        actual_value,\n                        expected_value,\n                        rel_tol=rel_tol,\n                        abs_tol=abs_tol\n                    )\n                    # 根据操作类型取反\n                    result = is_close if op == CompareOp.EQ else not is_close\n    \n                # 普通比较逻辑\n                else:\n                    if op == CompareOp.EQ:\n                        result = actual_value == expected_value\n                    elif op == CompareOp.NE:\n                        result = actual_value != expected_value\n                    elif op == CompareOp.GT:\n                        result = actual_value > expected_value\n                    elif op == CompareOp.LT:\n                        result = actual_value < expected_value\n                    elif op == CompareOp.GE:\n                        result = actual_value >= expected_value\n                    elif op == CompareOp.LE:\n                        result = actual_value <= expected_value\n                    elif op == CompareOp.IN:\n                        result = actual_value in expected_value\n                    elif op == CompareOp.NOT_IN:\n                        result = actual_value not in expected_value\n    \n            except TypeError as e:\n                pytest.fail(\n                    f\"校验类型错误: {str(e)}\\n实际值类型: {type(actual_value)}, 预期值类型: {type(expected_value)}\")\n    \n            # 生成详细提示信息（包含容差参数）\n            detail_msg = (\n                f\"\\n实际: {actual_value}\\n\"\n                f\"操作: {op.value}\\n\"\n                f\"预期: {expected_value}\\n\"\n            )\n    \n            # 添加allure.attach，将信息写入报告\n            allure.attach(\n                detail_msg,  # 附件内容\n                name=attachment_name,  # 附件名称（来自参数）\n                attachment_type=attachment_type  # 附件类型\n            )\n    \n            if not result:\n>               pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\nE               Failed: 校验失败: 第 1 条记录的dividendUser应为xujunhao4@163.com\nE               \nE               实际: xujunhao4@163.com\nE               操作: ==\nE               预期: xujunhao@163.com\n\ncommons\\api_base.py:1364: Failed"}, "steps": [{"name": "1. 发送请求", "status": "passed", "steps": [{"name": "执行 GET 请求", "status": "passed", "steps": [{"name": "请求详情", "status": "passed", "attachments": [{"name": "请求URL", "source": "8e0cce0b-9fca-4d0c-ba44-0dbbdf5bd843-attachment.txt", "type": "text/plain"}, {"name": "请求头", "source": "4ffda901-20b4-43a6-85bd-06ab16d25b75-attachment.json", "type": "application/json"}, {"name": "请求体（表单/文件）", "source": "c7a4807d-9e59-45b5-b2ae-6532f353767a-attachment.txt", "type": "text/plain"}], "start": 1757921808739, "stop": 1757921808740}, {"name": "响应详情", "status": "passed", "attachments": [{"name": "响应状态码", "source": "bc239d33-1314-455f-b6ea-a817a9282cb5-attachment.txt", "type": "text/plain"}, {"name": "响应头", "source": "55d54c82-2e23-4135-99a0-a853e34cb439-attachment.json", "type": "application/json"}, {"name": "响应体（JSON）", "source": "186f3a3d-af32-436a-a1d0-6a44c519b31d-attachment.json", "type": "application/json"}], "start": 1757921809444, "stop": 1757921809449}], "start": 1757921808739, "stop": 1757921812464}], "start": 1757921808739, "stop": 1757921812464}, {"name": "2. 返回校验", "status": "passed", "steps": [{"name": "断言JSON路径: $.success", "status": "passed", "attachments": [{"name": "请求URL", "source": "63f9faf5-d718-4d63-90b2-ebc7a1dea66b-attachment.txt", "type": "text/plain"}, {"name": "预期值", "source": "5b33357c-22a8-4918-9f17-c39b431b62fa-attachment.txt", "type": "text/plain"}, {"name": "实际值", "source": "bbed3950-1ebe-4e43-819a-e33eaaec285e-attachment.txt", "type": "text/plain"}], "start": 1757921812469, "stop": 1757921812470}], "start": 1757921812464, "stop": 1757921812470}, {"name": "3. 查询结果校验", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 第 1 条记录的dividendUser应为xujunhao4@163.com\n\n实际: xujunhao4@163.com\n操作: ==\n预期: xujunhao@163.com\n\n", "trace": "  File \"D:\\pycharm_test\\template\\test_cloudTrader\\test_lianxi.py\", line 72, in test_query_followerTa\n    self.verify_data(\n  File \"D:\\pycharm_test\\template\\commons\\api_base.py\", line 1364, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "校验: 第 1 条记录的dividendUser应为xujunhao4@163.com", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 第 1 条记录的dividendUser应为xujunhao4@163.com\n\n实际: xujunhao4@163.com\n操作: ==\n预期: xujunhao@163.com\n\n", "trace": "  File \"D:\\pycharm_test\\template\\commons\\api_base.py\", line 1364, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "attachments": [{"name": "分红用户:xujunhao@163.com第 1 条记录校验", "source": "54b59671-7d7f-4b05-a05d-15cd81a4d0fd-attachment.attach", "type": "text/plain"}], "start": 1757921812476, "stop": 1757921812476}], "attachments": [{"name": "分红用户:xujunhao@163.com查询结果", "source": "778b6bee-a1d4-4ec8-a725-cfa05af75f8b-attachment.attach", "type": "text/plain"}], "start": 1757921812470, "stop": 1757921812477}], "attachments": [{"name": "log", "source": "479398e3-01de-4660-8064-451ca0ebcaa8-attachment.txt", "type": "text/plain"}], "start": 1757921808739, "stop": 1757921812477, "uuid": "ea126210-368e-44d4-b329-24e47d36b28b", "historyId": "ffc8db362fbc1052bd9ca767d90b8341", "testCaseId": "ffc8db362fbc1052bd9ca767d90b8341", "fullName": "test_cloudTrader.test_lianxi.Test_trader#test_query_followerTa", "labels": [{"name": "story", "value": "跟随者账户查询校验"}, {"name": "feature", "value": "账号管理"}, {"name": "parentSuite", "value": "test_cloudTrader"}, {"name": "suite", "value": "test_lianxi"}, {"name": "subSuite", "value": "Test_create"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "30792-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cloudTrader.test_lianxi"}]}