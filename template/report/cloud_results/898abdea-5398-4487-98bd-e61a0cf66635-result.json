{"name": "【多账号】完整流程：绑定→审核→订阅（{current_account}）", "status": "failed", "statusDetails": {"message": "Failed: 账号301392109执行失败：Failed: 账号301392109绑定失败（JSON断言失败）", "trace": "self = <template.test_cloudTrader.test_add_create.Test_follow_batch object at 0x000002335B121700>\nresponse = <Response [200]>, json_path = '$.success', expected_value = True\nerror_msg_prefix = '账号301392109绑定失败'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n    \n>           assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\nE               AssertionError: Failed: 账号301392109绑定失败（JSON路径值不匹配）\n\ncommons\\api_base.py:552: AssertionError\n\nThe above exception was the direct cause of the following exception:\n\nself = <template.test_cloudTrader.test_add_create.Test_follow_batch object at 0x000002335B121700>\nfollow_acc = {'account': '301392109', 'password': 'an0emxc'}\nvar_manager = <template.commons.variable_manager.VariableManager object at 0x000002335B146760>\nlogged_session = <template.commons.session.EnvironmentSession object at 0x000002335B119550>\n\n    @allure.title(\"【多账号】完整流程：绑定→审核→订阅（{current_account}）\")  # 修复1：使用简单变量\n    @pytest.mark.parametrize(\"follow_acc\", FOLLOW_ACCOUNT_LIST)\n    @pytest.mark.dependency(depends=[\n        \"test_dbbchain_trader\",\n        \"test_user_list\",\n        \"test_api_getData1\",\n        \"test_api_getData7\"\n    ])\n    def test_follow_full_flow(self, follow_acc, var_manager, logged_session):\n        # 修复2：显式提取账号信息，转换为简单变量\n        current_account = follow_acc.get(\"account\")  # 使用.get()避免KeyError\n        current_password = follow_acc.get(\"password\")\n    \n        # 修复3：增加参数校验\n        assert current_account, \"账号信息中缺少'account'字段\"\n        assert current_password, \"账号信息中缺少'password'字段\"\n    \n        var_prefix = f\"follow_{current_account}\"\n    \n        try:\n            # 以下流程保持不变\n            with allure.step(f\"1. 绑定账号：{current_account}\"):\n                follow_user_id = var_manager.get_variable(\"follow_user_id\")\n                follow_broker_id = var_manager.get_variable(\"follow_broker_id\")\n                follow_server_id = var_manager.get_variable(\"follow_server_id\")\n    \n                bind_data = {\n                    \"userId\": follow_user_id,\n                    \"brokerId\": follow_broker_id,\n                    \"serverId\": follow_server_id,\n                    \"account\": current_account,\n                    \"password\": current_password,\n                    \"display\": \"PRIVATE\",\n                    \"passwordType\": \"0\",\n                    \"subscribeFee\": \"0\",\n                    \"type\": \"SLAVE_REAL\",\n                    \"platform\": \"4\"\n                }\n    \n                bind_response = self.send_post_request(\n                    logged_session,\n                    '/blockchain/account/bind',\n                    json_data=bind_data\n                )\n>               self.assert_json_value(\n                    bind_response,\n                    \"$.success\",\n                    True,\n                    f\"账号{current_account}绑定失败\"\n                )\n\ntest_cloudTrader\\test_add_create.py:216: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template.test_cloudTrader.test_add_create.Test_follow_batch object at 0x000002335B121700>\nresponse = <Response [200]>, json_path = '$.success', expected_value = True\nerror_msg_prefix = '账号301392109绑定失败'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n    \n            assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\n        except Exception as e:\n            with allure.step(f\"JSON断言失败: {json_path}\"):\n                allure.attach(json_path, \"JSON路径\", allure.attachment_type.TEXT)\n                allure.attach(str(expected_value), \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(response.text[:500], \"响应内容\", allure.attachment_type.TEXT)\n            logger.error(\n                f\"[{self._get_current_time()}] JSON断言失败: {str(e)} | 路径: {json_path} | 响应: {response.text[:500]}\")\n>           raise AssertionError(f\"Failed: {error_msg_prefix}（JSON断言失败）\") from e\nE           AssertionError: Failed: 账号301392109绑定失败（JSON断言失败）\n\ncommons\\api_base.py:561: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <template.test_cloudTrader.test_add_create.Test_follow_batch object at 0x000002335B121700>\nfollow_acc = {'account': '301392109', 'password': 'an0emxc'}\nvar_manager = <template.commons.variable_manager.VariableManager object at 0x000002335B146760>\nlogged_session = <template.commons.session.EnvironmentSession object at 0x000002335B119550>\n\n    @allure.title(\"【多账号】完整流程：绑定→审核→订阅（{current_account}）\")  # 修复1：使用简单变量\n    @pytest.mark.parametrize(\"follow_acc\", FOLLOW_ACCOUNT_LIST)\n    @pytest.mark.dependency(depends=[\n        \"test_dbbchain_trader\",\n        \"test_user_list\",\n        \"test_api_getData1\",\n        \"test_api_getData7\"\n    ])\n    def test_follow_full_flow(self, follow_acc, var_manager, logged_session):\n        # 修复2：显式提取账号信息，转换为简单变量\n        current_account = follow_acc.get(\"account\")  # 使用.get()避免KeyError\n        current_password = follow_acc.get(\"password\")\n    \n        # 修复3：增加参数校验\n        assert current_account, \"账号信息中缺少'account'字段\"\n        assert current_password, \"账号信息中缺少'password'字段\"\n    \n        var_prefix = f\"follow_{current_account}\"\n    \n        try:\n            # 以下流程保持不变\n            with allure.step(f\"1. 绑定账号：{current_account}\"):\n                follow_user_id = var_manager.get_variable(\"follow_user_id\")\n                follow_broker_id = var_manager.get_variable(\"follow_broker_id\")\n                follow_server_id = var_manager.get_variable(\"follow_server_id\")\n    \n                bind_data = {\n                    \"userId\": follow_user_id,\n                    \"brokerId\": follow_broker_id,\n                    \"serverId\": follow_server_id,\n                    \"account\": current_account,\n                    \"password\": current_password,\n                    \"display\": \"PRIVATE\",\n                    \"passwordType\": \"0\",\n                    \"subscribeFee\": \"0\",\n                    \"type\": \"SLAVE_REAL\",\n                    \"platform\": \"4\"\n                }\n    \n                bind_response = self.send_post_request(\n                    logged_session,\n                    '/blockchain/account/bind',\n                    json_data=bind_data\n                )\n                self.assert_json_value(\n                    bind_response,\n                    \"$.success\",\n                    True,\n                    f\"账号{current_account}绑定失败\"\n                )\n                allure.attach(\n                    json.dumps(bind_data, indent=2),\n                    name=f\"{current_account}绑定请求数据\",\n                    attachment_type=allure.attachment_type.JSON\n                )\n                logging.info(f\"账号{current_account}绑定成功\")\n    \n            # -------------------------- 步骤2：提取MT4审核ID --------------------------\n            with allure.step(f\"2. 提取{current_account}的MT4审核ID\"):\n                params = {\n                    \"_t\": current_timestamp_seconds,\n                    \"column\": \"id\",\n                    \"order\": \"desc\",\n                    \"pageNo\": 1,\n                    \"pageSize\": 20,\n                    \"superQueryMatchType\": \"and\",\n                    \"status\": \"PENDING,VERIFICATION\"\n                }\n                pass_response = self.send_get_request(\n                    logged_session,\n                    '/online/cgform/api/getData/2c9a814a81d3a91b0181d3a91b250000',\n                    params=params\n                )\n    \n                # 校验响应并提取ID\n                self.assert_json_value(\n                    pass_response,\n                    \"$.success\",\n                    True,\n                    f\"查询{current_account}审核记录失败\"\n                )\n                all_pass_records = self.json_utils.extract(\n                    pass_response.json(),\n                    \"$.result.records[*]\",\n                    multi_match=True,\n                    default=[]\n                )\n                existing_accounts = [r.get(\"account\") for r in all_pass_records if r.get(\"account\")]\n    \n                current_pass_id = None\n                for record in all_pass_records:\n                    if record.get(\"account\") == current_account:\n                        current_pass_id = record.get(\"id\")\n                        break\n    \n                assert current_pass_id is not None, (\n                    f\"未找到{current_account}的审核ID！当前列表：{existing_accounts}\"\n                )\n                var_manager.set_runtime_variable(f\"{var_prefix}_pass_id\", current_pass_id)\n                allure.attach(str(current_pass_id), name=f\"{current_account}审核ID\",\n                              attachment_type=allure.attachment_type.TEXT)\n    \n            # -------------------------- 步骤3：MT4审核通过 --------------------------\n            with allure.step(f\"3. {current_account}的MT4审核通过\"):\n                # 读取变量\n                follow_jeecgrow_key = var_manager.get_variable(\"follow_jeecgrow_key\")\n                vpsrunIpAddr = var_manager.get_variable(\"vpsrunIpAddr\")\n                current_pass_id = var_manager.get_variable(f\"{var_prefix}_pass_id\")\n    \n                # 构造请求数据\n                pass_data = {\n                    \"pass\": True,\n                    \"commission\": False,\n                    \"planId\": follow_jeecgrow_key,\n                    \"toSynDate\": DATETIME_NOW,\n                    \"bindIpAddr\": vpsrunIpAddr\n                }\n    \n                # 发送请求并校验\n                audit_response = self.send_post_request(\n                    logged_session,\n                    f'/blockchain/account/pass/{current_pass_id}',\n                    json_data=pass_data\n                )\n                self.assert_json_value(\n                    audit_response,\n                    \"$.success\",\n                    True,\n                    f\"{current_account}审核通过失败\"\n                )\n                allure.attach(json.dumps(pass_data, indent=2), name=f\"{current_account}审核数据\",\n                              attachment_type=allure.attachment_type.JSON)\n    \n            # -------------------------- 步骤4：清理历史订阅记录 --------------------------\n            with allure.step(f\"4. 清理{current_account}的历史订阅\"):\n                params = {\n                    \"_t\": current_timestamp_seconds,\n                    \"account\": current_account,\n                    \"pageNo\": 1,\n                    \"pageSize\": 100,\n                    \"status\": \"NORMAL,AUDIT\"\n                }\n                clean_response = self.send_get_request(\n                    logged_session,\n                    '/online/cgreport/api/getColumnsAndData/1560189381093109761',\n                    params=params\n                )\n    \n                # 校验响应并删除记录\n                self.assert_json_value(\n                    clean_response,\n                    \"$.success\",\n                    True,\n                    f\"查询{current_account}订阅记录失败\"\n                )\n                history_records = self.json_utils.extract(\n                    clean_response.json(),\n                    \"$.result.data.records[*]\",\n                    multi_match=True,\n                    default=[]\n                )\n    \n                if history_records:\n                    delete_count = 0\n                    for record in history_records:\n                        record_id = record.get(\"id\")\n                        if record_id:\n                            delete_response = self.send_delete_request(\n                                logged_session,\n                                '/blockchain/master-slave/deletePa',\n                                json_data={\"id\": record_id}\n                            )\n                            self.assert_json_value(\n                                delete_response,\n                                \"$.success\",\n                                True,\n                                f\"删除{current_account}订阅记录（ID：{record_id}）失败\"\n                            )\n                            delete_count += 1\n                    allure.attach(f\"删除{delete_count}条记录\", name=f\"{current_account}清理结果\")\n                else:\n                    allure.attach(\"无历史记录\", name=f\"{current_account}清理结果\")\n    \n            # -------------------------- 步骤5：订阅跟单 --------------------------\n            with allure.step(f\"5. {current_account}订阅跟单\"):\n                # 读取变量\n                trader_pass_id = var_manager.get_variable(\"trader_pass_id\")\n                current_pass_id = var_manager.get_variable(f\"{var_prefix}_pass_id\")\n    \n                # 构造请求数据\n                subscribe_data = {\n                    \"masterId\": trader_pass_id,\n                    \"slaveId\": current_pass_id,\n                    \"direction\": \"FORWARD\",\n                    \"followingMode\": \"2\",\n                    \"fixedProportion\": \"100\",\n                    \"fixedLots\": None,\n                    \"order\": {\"paymentAccount\": \"\", \"paymentMethod\": \"\"},\n                }\n    \n                # 发送请求并校验\n                subscribe_response = self.send_post_request(\n                    logged_session,\n                    '/blockchain/master-slave/admin/add',\n                    json_data=subscribe_data\n                )\n                self.assert_json_value(\n                    subscribe_response,\n                    \"$.success\",\n                    True,\n                    f\"{current_account}订阅跟单失败\"\n                )\n                allure.attach(json.dumps(subscribe_data, indent=2), name=f\"{current_account}订阅数据\",\n                              attachment_type=allure.attachment_type.JSON)\n    \n            # -------------------------- 步骤6：校验订阅结果 --------------------------\n            with allure.step(f\"6. 校验{current_account}的订阅记录\"):\n                params = {\n                    \"_t\": current_timestamp_seconds,\n                    \"account\": current_account,\n                    \"pageNo\": 1,\n                    \"pageSize\": 100,\n                    \"status\": \"NORMAL,AUDIT\"\n                }\n                verify_response = self.send_get_request(\n                    logged_session,\n                    '/online/cgreport/api/getColumnsAndData/1560189381093109761',\n                    params=params\n                )\n    \n                # 校验响应并判断结果\n                self.assert_json_value(\n                    verify_response,\n                    \"$.success\",\n                    True,\n                    f\"校验{current_account}订阅记录失败\"\n                )\n                result = self.json_utils.extract(\n                    verify_response.json(),\n                    \"$.result.data.records[*]\",\n                    multi_match=True,\n                    default=[]\n                )\n    \n                if not result:\n                    pytest.fail(f\"{current_account}未查询到订阅记录\")\n                else:\n                    follow_jeecg_rowkey = self.json_utils.extract(\n                        verify_response.json(),\n                        \"$.result.data.records[0].jeecg_row_key\"\n                    )\n                    var_manager.set_runtime_variable(f\"{var_prefix}_jeecg_rowkey\", follow_jeecg_rowkey)\n                    allure.attach(\"订阅记录存在\", name=f\"{current_account}订阅结果\")\n                    logging.info(f\"账号{current_account}订阅校验成功\")\n    \n    \n        except Exception as e:\n            error_msg = f\"账号{current_account}执行失败：{str(e)[:200]}\"\n            allure.attach(error_msg, name=f\"{current_account}失败详情\", attachment_type=allure.attachment_type.TEXT)\n            logging.error(error_msg, exc_info=True)\n>           pytest.fail(error_msg)\nE           Failed: 账号301392109执行失败：Failed: 账号301392109绑定失败（JSON断言失败）\n\ntest_cloudTrader\\test_add_create.py:432: Failed"}, "steps": [{"name": "1. 绑定账号：301392109", "status": "failed", "statusDetails": {"message": "AssertionError: Failed: 账号301392109绑定失败（JSON断言失败）\n", "trace": "  File \"D:\\pycharm_test\\template\\test_cloudTrader\\test_add_create.py\", line 216, in test_follow_full_flow\n    self.assert_json_value(\n  File \"D:\\pycharm_test\\template\\commons\\api_base.py\", line 561, in assert_json_value\n    raise AssertionError(f\"Failed: {error_msg_prefix}（JSON断言失败）\") from e\n"}, "steps": [{"name": "执行 POST 请求", "status": "passed", "steps": [{"name": "请求详情", "status": "passed", "attachments": [{"name": "请求URL", "source": "8e29944a-dc8f-4ce2-ae95-370578cc1fb6-attachment.txt", "type": "text/plain"}, {"name": "请求头", "source": "dd2a5912-7541-4984-9fe5-426673ed90fa-attachment.json", "type": "application/json"}, {"name": "请求体（JSON）", "source": "af7137bc-aada-40ce-95d6-275ff5c5e7bd-attachment.json", "type": "application/json"}], "start": 1758789864074, "stop": 1758789864075}, {"name": "响应详情", "status": "passed", "attachments": [{"name": "响应状态码", "source": "51b43ba6-a64a-46c0-bcad-21802ca51427-attachment.txt", "type": "text/plain"}, {"name": "响应头", "source": "6f9b234a-c9cb-458e-8520-8dec26bb8e40-attachment.json", "type": "application/json"}, {"name": "响应体（JSON）", "source": "1cc16576-f4e0-43ad-a695-2e494e5b0d29-attachment.json", "type": "application/json"}], "start": 1758789864682, "stop": 1758789864683}], "start": 1758789864074, "stop": 1758789867692}, {"name": "断言JSON路径: $.success", "status": "passed", "attachments": [{"name": "请求URL", "source": "d39974b3-6c55-4a9a-a1cb-fb4dc7634444-attachment.txt", "type": "text/plain"}, {"name": "预期值", "source": "54aa9669-81d6-4a75-bdc6-e474794fd194-attachment.txt", "type": "text/plain"}, {"name": "实际值", "source": "3dcf885b-980c-4d88-8858-b72c16ec8cf6-attachment.txt", "type": "text/plain"}], "start": 1758789867696, "stop": 1758789867697}, {"name": "JSON断言失败: $.success", "status": "passed", "attachments": [{"name": "JSON路径", "source": "f3d75bff-057b-4810-a6b3-6a30ded5e3f6-attachment.txt", "type": "text/plain"}, {"name": "预期值", "source": "13e43736-2cce-4178-9485-d24fb290f311-attachment.txt", "type": "text/plain"}, {"name": "响应内容", "source": "94b69211-dc24-417e-8626-cd7c092c3dcc-attachment.txt", "type": "text/plain"}], "start": 1758789867697, "stop": 1758789867697}], "start": 1758789864074, "stop": 1758789867698}], "attachments": [{"name": "301392109失败详情", "source": "ea476f25-b280-499c-b327-4fe6103e5958-attachment.txt", "type": "text/plain"}, {"name": "log", "source": "f827a72d-5043-4ef9-8c45-c8ee7dd515bf-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "follow_acc", "value": "{'account': '301392109', 'password': 'an0emxc'}"}], "start": 1758789864074, "stop": 1758789867698, "uuid": "94fb37f8-5c08-4084-92bf-f4dbfc68b7ef", "historyId": "d77517a4a3ababad4467e9a19d445415", "testCaseId": "16f0c0be53966fe8d9c879d576145561", "fullName": "test_cloudTrader.test_add_create.Test_follow_batch#test_follow_full_flow", "labels": [{"name": "story", "value": "绑定跟随者账号（多账号批量版）"}, {"name": "tag", "value": "dependency(depends=['test_dbbchain_trader', 'test_user_list', 'test_api_getData1', 'test_api_getData7'])"}, {"name": "parentSuite", "value": "test_cloudTrader"}, {"name": "suite", "value": "test_add_create"}, {"name": "subSuite", "value": "Test_follow_batch"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "31556-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cloudTrader.test_add_create"}]}