{"name": "跟单管理-VPS管理-喊单者账号-平仓后", "status": "failed", "statusDetails": {"message": "AssertionError: Failed: 响应searchCount字段应为true（JSON断言失败）", "trace": "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Decodes the JSON response body (if any) as a Python object.\n    \n        This may return a dictionary, list, etc. depending on what is in the response.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n..\\venv\\lib\\site-packages\\requests\\models.py:976: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\python_tools\\python\\lib\\json\\__init__.py:357: in loads\n    return _default_decoder.decode(s)\nD:\\python_tools\\python\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x00000195818FF640>\ns = '访问超时，请稍后再试!', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nD:\\python_tools\\python\\lib\\json\\decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <template.test_cloudTrader.test_oac_equit.Test_openandclouseall.Test_orderseng1 object at 0x00000195AB2CDDF0>\nresponse = <Response [200]>, json_path = '$.searchCount'\n\n    def extract_jsonpath(self, response: requests.Response, json_path: str) -> Any:\n        \"\"\"使用jsonpath-ng解析JSON路径（分层提示优化）\"\"\"\n        try:\n>           json_data = response.json()\n\ncommons\\api_base.py:449: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Decodes the JSON response body (if any) as a Python object.\n    \n        This may return a dictionary, list, etc. depending on what is in the response.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n..\\venv\\lib\\site-packages\\requests\\models.py:980: JSONDecodeError\n\nThe above exception was the direct cause of the following exception:\n\nself = <template.test_cloudTrader.test_oac_equit.Test_openandclouseall.Test_orderseng1 object at 0x00000195AB2CDDF0>\nresponse = <Response [200]>, json_path = '$.searchCount', expected_value = True\nerror_msg_prefix = '响应searchCount字段应为true'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n>           actual_value = self.extract_jsonpath(response, json_path)\n\ncommons\\api_base.py:464: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template.test_cloudTrader.test_oac_equit.Test_openandclouseall.Test_orderseng1 object at 0x00000195AB2CDDF0>\nresponse = <Response [200]>, json_path = '$.searchCount'\n\n    def extract_jsonpath(self, response: requests.Response, json_path: str) -> Any:\n        \"\"\"使用jsonpath-ng解析JSON路径（分层提示优化）\"\"\"\n        try:\n            json_data = response.json()\n            jsonpath_expr = parse(json_path)\n            matches = jsonpath_expr.find(json_data)\n            return [match.value for match in matches] if matches else None\n        except Exception as e:\n            with allure.step(\"JSONPath解析异常\"):\n                allure.attach(json_path, \"解析路径\", allure.attachment_type.TEXT)\n                allure.attach(response.text[:500], \"响应内容\", allure.attachment_type.TEXT)\n                allure.attach(str(e), \"解析错误\", allure.attachment_type.TEXT)\n            logger.error(f\"JSONPath解析失败: {json_path} | 响应: {response.text[:500]}\")\n>           raise ValueError(f\"Failed: JSONPath解析失败（{json_path}）\") from e\nE           ValueError: Failed: JSONPath解析失败（$.searchCount）\n\ncommons\\api_base.py:459: ValueError\n\nThe above exception was the direct cause of the following exception:\n\nself = <template.test_cloudTrader.test_oac_equit.Test_openandclouseall.Test_orderseng1 object at 0x00000195AB2CDDF0>\nvar_manager = <template.commons.variable_manager.VariableManager object at 0x00000195AB2CD3A0>\nlogged_session = <template.commons.session.EnvironmentSession object at 0x00000195AB2E87F0>\n\n    @pytest.mark.retry(n=3, delay=5)\n    @allure.title(\"跟单管理-VPS管理-喊单者账号-平仓后\")\n    def test_query_closetrader_getRecordList(self, var_manager, logged_session):\n        with allure.step(\"1. 发送请求\"):\n            trader_account = var_manager.get_variable(\"trader_account\")\n            vpsrunIpAddr = var_manager.get_variable(\"vpsrunIpAddr\")\n            params = {\n                \"_t\": current_timestamp_seconds,\n                \"pageNo\": \"1\",\n                \"pageSize\": \"50\",\n                \"accountLike\": trader_account,\n                \"serverNameLike\": \"\",\n                \"connectTraderLike\": \"\",\n                \"connected\": \"\",\n                \"runIpAddr\": vpsrunIpAddr\n            }\n            response = self.send_get_request(\n                logged_session,\n                '/blockchain/account/getRecordList',\n                params=params\n            )\n    \n        with allure.step(\"2. 返回校验\"):\n>           self.assert_json_value(\n                response,\n                \"$.searchCount\",\n                True,\n                \"响应searchCount字段应为true\"\n            )\n\ntest_cloudTrader\\test_oac_equit.py:1234: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template.test_cloudTrader.test_oac_equit.Test_openandclouseall.Test_orderseng1 object at 0x00000195AB2CDDF0>\nresponse = <Response [200]>, json_path = '$.searchCount', expected_value = True\nerror_msg_prefix = '响应searchCount字段应为true'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n    \n            assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\n        except Exception as e:\n            with allure.step(f\"JSON断言失败: {json_path}\"):\n                allure.attach(json_path, \"JSON路径\", allure.attachment_type.TEXT)\n                allure.attach(str(expected_value), \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(response.text[:500], \"响应内容\", allure.attachment_type.TEXT)\n            logger.error(\n                f\"[{self._get_current_time()}] JSON断言失败: {str(e)} | 路径: {json_path} | 响应: {response.text[:500]}\")\n>           raise AssertionError(f\"Failed: {error_msg_prefix}（JSON断言失败）\") from e\nE           AssertionError: Failed: 响应searchCount字段应为true（JSON断言失败）\n\ncommons\\api_base.py:482: AssertionError"}, "description": "\n    ### 测试说明\n    - 前置条件：有喊单账号、跟单账号，跟单已经和喊单有订阅关系\n      1. MT4进行登录，然后进行开仓，总手数0.01\n      2. 账号管理-持仓订单-喊单和跟单数据校验\n      3. 跟单管理-开仓日志-喊单和跟单数据校验\n      4. 跟单管理-VPS管理-喊单和跟单数据校验\n      5. MT4进行平仓\n      6.账号管理-持仓订单-喊单和跟单数据校验\n      7.跟单管理-开仓日志-喊单和跟单数据校验\n      8.跟单管理-VPS管理-喊单和跟单数据校验\n    - 预期结果：喊单和跟单数据校验正确\n    ", "steps": [{"name": "1. 发送请求", "status": "passed", "steps": [{"name": "执行 GET 请求", "status": "passed", "steps": [{"name": "请求详情", "status": "passed", "attachments": [{"name": "请求URL", "source": "734586de-5434-4f70-8c9a-a6a8896488d2-attachment.txt", "type": "text/plain"}, {"name": "请求头", "source": "7526360e-a1c5-47b8-b26d-b0b6545de305-attachment.json", "type": "application/json"}, {"name": "请求体（表单/文件）", "source": "4f20e214-ded2-45ea-a2f0-765c8087dbe1-attachment.txt", "type": "text/plain"}], "start": 1758177604459, "stop": 1758177604459}, {"name": "响应详情", "status": "passed", "attachments": [{"name": "响应状态码", "source": "98ff9cf2-9bd8-4b97-9898-a9f70a078a88-attachment.txt", "type": "text/plain"}, {"name": "响应头", "source": "af957e63-c6fc-45b7-83d7-9ad99ddf32ce-attachment.json", "type": "application/json"}, {"name": "响应体（文本）", "source": "d355d742-601a-4b68-b0be-cf2d96bec69e-attachment.txt", "type": "text/plain"}], "start": 1758177605392, "stop": 1758177605393}], "start": 1758177604459, "stop": 1758177608397}], "start": 1758177604459, "stop": 1758177608397}, {"name": "2. 返回校验", "status": "failed", "statusDetails": {"message": "AssertionError: Failed: 响应searchCount字段应为true（JSON断言失败）\n", "trace": "  File \"D:\\pycharm_test\\template\\test_cloudTrader\\test_oac_equit.py\", line 1234, in test_query_closetrader_getRecordList\n    self.assert_json_value(\n  File \"D:\\pycharm_test\\template\\commons\\api_base.py\", line 482, in assert_json_value\n    raise AssertionError(f\"Failed: {error_msg_prefix}（JSON断言失败）\") from e\n"}, "steps": [{"name": "JSONPath解析异常", "status": "passed", "attachments": [{"name": "解析路径", "source": "599e5f07-f064-44a4-81fe-441eecdb5792-attachment.txt", "type": "text/plain"}, {"name": "响应内容", "source": "14f3f209-0bc4-4af1-a6fd-f6e025ab5bbc-attachment.txt", "type": "text/plain"}, {"name": "解析错误", "source": "c2cc9308-1d08-401d-b67e-e6320fbd2027-attachment.txt", "type": "text/plain"}], "start": 1758177608397, "stop": 1758177608397}, {"name": "JSON断言失败: $.searchCount", "status": "passed", "attachments": [{"name": "JSON路径", "source": "d3a8eb18-2d6d-4f12-ad0e-4add37bfdf0d-attachment.txt", "type": "text/plain"}, {"name": "预期值", "source": "47902c0e-3a65-4358-84ff-bcccb5fc37e6-attachment.txt", "type": "text/plain"}, {"name": "响应内容", "source": "9fb3c42e-aee1-478a-a525-ba3285da74ad-attachment.txt", "type": "text/plain"}], "start": 1758177608398, "stop": 1758177608398}], "start": 1758177608397, "stop": 1758177608399}], "attachments": [{"name": "log", "source": "b5117f27-2f65-4f64-b72f-7fbf03c3a4e8-attachment.txt", "type": "text/plain"}], "start": 1758177604458, "stop": 1758177608400, "uuid": "6193c3a4-30a7-4c0a-8462-7443a4481cfd", "historyId": "4e05ed52c20bd41d23b58c8099ac6998", "testCaseId": "4e05ed52c20bd41d23b58c8099ac6998", "fullName": "test_cloudTrader.test_oac_equit.Test_orderseng1#test_query_closetrader_getRecordList", "labels": [{"name": "story", "value": "场景1：跟随方式-按净值-100%"}, {"name": "feature", "value": "跟随方式-按净值"}, {"name": "tag", "value": "retry(n=3, delay=5)"}, {"name": "parentSuite", "value": "test_cloudTrader"}, {"name": "suite", "value": "test_oac_equit"}, {"name": "subSuite", "value": "Test_openandclouseall"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "18712-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cloudTrader.test_oac_equit"}]}