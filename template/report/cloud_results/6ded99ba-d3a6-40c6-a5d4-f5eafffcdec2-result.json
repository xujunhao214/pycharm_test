{"name": "跟单管理-开仓日志-开平仓明细-平仓后", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 跟单手数符合预期\n\n实际: 0.01\n操作: ==\n预期: 0.010898741854727577", "trace": "self = <template.test_cloudTrader.test_lianxi.Test_openandclouseall.Test_orderseng2 object at 0x000001E679B0E490>\nvar_manager = <template.commons.variable_manager.VariableManager object at 0x000001E679B0E9A0>\nlogged_session = <template.commons.session.EnvironmentSession object at 0x000001E679AAE7F0>\n\n    @allure.title(\"跟单管理-开仓日志-开平仓明细-平仓后\")\n    def test_query_closetrader_detail(self, var_manager, logged_session):\n        with allure.step(\"1. 发送请求\"):\n            ticket_open = var_manager.get_variable(\"ticket_open\")\n            params = {\n                \"_t\": current_timestamp_seconds,\n                \"pageNo\": 1,\n                \"pageSize\": 50,\n                \"self_master_ticket\": ticket_open\n            }\n            response = self.send_get_request(\n                logged_session,\n                '/online/cgreport/api/getColumnsAndData/1568899025974796289',\n                params=params\n            )\n    \n        with allure.step(\"2. 返回校验\"):\n            self.assert_json_value(\n                response,\n                \"$.success\",\n                True,\n                \"响应success字段应为true\"\n            )\n    \n        with allure.step(f\"3. 查询校验\"):\n            slave_ticket_list = self.json_utils.extract(\n                response.json(),\n                \"$.result.data.records[0].slave_ticket\",\n                default=[],\n                multi_match=True\n            )\n            follow_account = var_manager.get_variable(\"follow_account\")\n            if not slave_ticket_list:\n                attach_body = f\"跟单账号：{follow_account}，返回的slave_ticket列表为空（暂无数据）\"\n            else:\n                attach_body = f\"跟单账号：{follow_account}，返回 {len(slave_ticket_list)} 条记录，slave_ticket值如下：\\n\" + \\\n                              \"\\n\".join(\n                                  [f\"第 {idx + 1} 条：{s}\" for idx, s in enumerate(slave_ticket_list)])\n    \n            allure.attach(\n                body=attach_body,\n                name=f\"跟单账号：{follow_account}结果\",\n                attachment_type=\"text/plain\"\n            )\n    \n            for idx, slave_ticket in enumerate(slave_ticket_list):\n                order_no = var_manager.get_variable(\"order_no\")\n                self.verify_data(\n                    actual_value=slave_ticket,\n                    expected_value=order_no,\n                    op=CompareOp.EQ,\n                    use_isclose=False,\n                    message=f\"第 {idx + 1} 条记录的订单号应为{slave_ticket}\",\n                    attachment_name=f\"跟单账户:{follow_account}第 {idx + 1} 条记录校验\"\n                )\n    \n            with allure.step(\"喊单者订单号校验\"):\n                master_ticket = self.json_utils.extract(response.json(),\n                                                        \"$.result.data.records[0].master_ticket\")\n                ticket_open = var_manager.get_variable(\"ticket_open\")\n    \n                self.verify_data(\n                    actual_value=master_ticket,\n                    expected_value=ticket_open,\n                    op=CompareOp.EQ,\n                    use_isclose=False,\n                    message=f\"喊单者订单号符合预期\",\n                    attachment_name=\"喊单者订单号详情\"\n                )\n                logger.info(f\"喊单者订单号验证通过: {master_ticket}\")\n    \n            with allure.step(\"喊单者手数校验\"):\n                master_lots = self.json_utils.extract(response.json(),\n                                                      \"$.result.data.records[0].master_lots\")\n                lots_open = var_manager.get_variable(\"lots_open\")\n    \n                self.verify_data(\n                    actual_value=float(master_lots),\n                    expected_value=float(lots_open),\n                    op=CompareOp.EQ,\n                    message=f\"喊单者手数符合预期\",\n                    attachment_name=\"喊单者手数详情\"\n                )\n                logger.info(f\"喊单者手数验证通过: {master_lots}\")\n    \n            with allure.step(\"跟单手数校验\"):\n                slave_lots = self.json_utils.extract(response.json(),\n                                                     \"$.result.data.records[0].slave_lots\")\n                if not slave_lots:\n                    allure.attach(\"跟单手数为空\", \"跟单手数详情\", allure.attachment_type.TEXT)\n                else:\n                    lots_open = var_manager.get_variable(\"lots_open\")\n                    follow_periodP = var_manager.get_variable(\"follow_periodP\")\n                    trader_periodP = var_manager.get_variable(\"trader_periodP\")\n                    # 获取跟单净值比例\n                    fixed_proportion = var_manager.get_variable(\"fixed_proportion\")\n                    # 百分比数据转换\n                    follow_fixed_decimal = percentage_to_decimal(fixed_proportion)\n                    expected_lots_open = lots_open * (follow_periodP / trader_periodP) * follow_fixed_decimal\n    \n                    # 最小手数限制（0.01）\n                    min_order_size = 0.01\n                    if expected_lots_open < min_order_size:\n                        allure.attach(\n                            f\"计算预期手数{expected_lots_open} < 最小手数{min_order_size}，强制重置为{min_order_size}\",\n                            \"预期手数调整说明\", allure.attachment_type.TEXT)\n                        expected_lots_open = min_order_size\n    \n>                   self.verify_data(\n                        actual_value=float(slave_lots),\n                        expected_value=float(expected_lots_open),\n                        op=CompareOp.EQ,\n                        message=f\"跟单手数符合预期\",\n                        attachment_name=\"跟单手数详情\"\n                    )\n\ntest_cloudTrader\\test_lianxi.py:1107: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template.test_cloudTrader.test_lianxi.Test_openandclouseall.Test_orderseng2 object at 0x000001E679B0E490>\nactual_value = 0.01, expected_value = 0.010898741854727577\nop = <CompareOp.EQ: '=='>, message = '跟单手数符合预期', attachment_name = '跟单手数详情'\nattachment_type = 'text/plain', use_isclose = True, rel_tol = 1e-09, abs_tol = 0\n\n    def verify_data(\n            self,\n            actual_value,\n            expected_value,\n            op: CompareOp,\n            message: str,\n            attachment_name: str,\n            attachment_type=\"text/plain\",\n            use_isclose=True,  # 新增参数：是否启用math.isclose容错（默认启用）\n            rel_tol=1e-9,  # 相对容差（仅当use_isclose=True时生效）\n            abs_tol=0  # 绝对容差（仅当use_isclose=True时生效）\n    ):\n        \"\"\"\n        通用数据校验函数，支持浮点容错比较\n        :param actual_value: 实际值\n        :param expected_value: 预期值\n        :param op: 比较操作，CompareOp 枚举\n        :param message: 校验失败时的提示信息\n        :param attachment_name: Allure 附件名称\n        :param attachment_type: Allure 附件类型，默认文本\n        :param use_isclose: 是否使用math.isclose进行浮点容错比较\n        :param rel_tol: 相对容差（默认1e-9）\n        :param abs_tol: 绝对容差（默认0.0）\n        其他参数同前\n        \"\"\"\n        with allure.step(f\"校验: {message}\"):\n            result = False\n            try:\n                # 处理浮点容错比较（仅对EQ/NE操作生效）\n                if use_isclose and op in (CompareOp.EQ, CompareOp.NE):\n                    if not (isinstance(actual_value, (int, float)) and\n                            isinstance(expected_value, (int, float))):\n                        # 非数字类型自动禁用isclose，避免报错\n                        use_isclose = False\n                        logging.warning(f\"自动禁用isclose：非数字类型比较（实际值类型：{type(actual_value)}）\")\n    \n                    # 计算isclose结果\n                    is_close = math.isclose(\n                        actual_value,\n                        expected_value,\n                        rel_tol=rel_tol,\n                        abs_tol=abs_tol\n                    )\n                    # 根据操作类型取反\n                    result = is_close if op == CompareOp.EQ else not is_close\n    \n                # 普通比较逻辑\n                else:\n                    if op == CompareOp.EQ:\n                        result = actual_value == expected_value\n                    elif op == CompareOp.NE:\n                        result = actual_value != expected_value\n                    elif op == CompareOp.GT:\n                        result = actual_value > expected_value\n                    elif op == CompareOp.LT:\n                        result = actual_value < expected_value\n                    elif op == CompareOp.GE:\n                        result = actual_value >= expected_value\n                    elif op == CompareOp.LE:\n                        result = actual_value <= expected_value\n                    elif op == CompareOp.IN:\n                        result = actual_value in expected_value\n                    elif op == CompareOp.NOT_IN:\n                        result = actual_value not in expected_value\n    \n            except TypeError as e:\n                pytest.fail(\n                    f\"校验类型错误: {str(e)}\\n实际值类型: {type(actual_value)}, 预期值类型: {type(expected_value)}\")\n    \n            # 生成详细提示信息（包含容差参数）\n            detail_msg = (\n                f\"\\n实际: {actual_value}\\n\"\n                f\"操作: {op.value}\\n\"\n                f\"预期: {expected_value}\\n\"\n            )\n    \n            # 添加allure.attach，将信息写入报告\n            allure.attach(\n                detail_msg,  # 附件内容\n                name=attachment_name,  # 附件名称（来自参数）\n                attachment_type=attachment_type  # 附件类型\n            )\n    \n            if not result:\n>               pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\nE               Failed: 校验失败: 跟单手数符合预期\nE               \nE               实际: 0.01\nE               操作: ==\nE               预期: 0.010898741854727577\n\ncommons\\api_base.py:1362: Failed"}, "description": "\n    ### 测试说明\n    - 前置条件：有喊单账号、跟单账号，跟单已经和喊单有订阅关系\n      1. MT4进行登录，然后进行开仓，总手数0.01\n      2. 账号管理-持仓订单-喊单和跟单数据校验\n      3. 跟单管理-开仓日志-喊单和跟单数据校验\n      4. 跟单管理-VPS管理-喊单和跟单数据校验\n      5. MT4进行平仓\n      6.账号管理-持仓订单-喊单和跟单数据校验\n      7.跟单管理-开仓日志-喊单和跟单数据校验\n      8.跟单管理-VPS管理-喊单和跟单数据校验\n    - 预期结果：喊单和跟单数据校验正确\n    ", "steps": [{"name": "1. 发送请求", "status": "passed", "steps": [{"name": "执行 GET 请求", "status": "passed", "steps": [{"name": "请求详情", "status": "passed", "attachments": [{"name": "请求URL", "source": "6b5ba7a4-0d73-4bef-a650-86f4f67e7cb8-attachment.txt", "type": "text/plain"}, {"name": "请求头", "source": "57d2b984-3af6-43d2-a5ad-9e9ed768f6b5-attachment.json", "type": "application/json"}, {"name": "请求体（表单/文件）", "source": "2542cce5-ac2d-4add-95d9-fd7e5d9abaa1-attachment.txt", "type": "text/plain"}], "start": 1758184029118, "stop": 1758184029119}, {"name": "响应详情", "status": "passed", "attachments": [{"name": "响应状态码", "source": "8a5605b0-f274-4766-9cca-f5abf146dfb1-attachment.txt", "type": "text/plain"}, {"name": "响应头", "source": "0a2439f7-4d46-4a11-9584-8130dba99c53-attachment.json", "type": "application/json"}, {"name": "响应体（JSON）", "source": "d3927404-f1d5-4fa1-a771-48f133ee1959-attachment.json", "type": "application/json"}], "start": 1758184029726, "stop": 1758184029727}], "start": 1758184029118, "stop": 1758184032739}], "start": 1758184029118, "stop": 1758184032739}, {"name": "2. 返回校验", "status": "passed", "steps": [{"name": "断言JSON路径: $.success", "status": "passed", "attachments": [{"name": "请求URL", "source": "277c82c6-2bbe-4369-a9f1-4aaaf8ec72ac-attachment.txt", "type": "text/plain"}, {"name": "预期值", "source": "ddfa8009-6d1b-4ae6-8307-e5dfb576ff23-attachment.txt", "type": "text/plain"}, {"name": "实际值", "source": "783aba28-c414-4815-ab80-5118408925e5-attachment.txt", "type": "text/plain"}], "start": 1758184032743, "stop": 1758184032744}], "start": 1758184032739, "stop": 1758184032744}, {"name": "3. 查询校验", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 跟单手数符合预期\n\n实际: 0.01\n操作: ==\n预期: 0.010898741854727577\n\n", "trace": "  File \"D:\\pycharm_test\\template\\test_cloudTrader\\test_lianxi.py\", line 1107, in test_query_closetrader_detail\n    self.verify_data(\n  File \"D:\\pycharm_test\\template\\commons\\api_base.py\", line 1362, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "校验: 第 1 条记录的订单号应为44269148", "status": "passed", "attachments": [{"name": "跟单账户:2088767546第 1 条记录校验", "source": "578fc266-0c69-4a01-86bf-187afd65208b-attachment.attach", "type": "text/plain"}], "start": 1758184032749, "stop": 1758184032749}, {"name": "喊单者订单号校验", "status": "passed", "steps": [{"name": "校验: 喊单者订单号符合预期", "status": "passed", "attachments": [{"name": "喊单者订单号详情", "source": "30ce0988-d27a-4b38-bbcf-cf507914f4b0-attachment.attach", "type": "text/plain"}], "start": 1758184032754, "stop": 1758184032754}], "start": 1758184032749, "stop": 1758184032754}, {"name": "喊单者手数校验", "status": "passed", "steps": [{"name": "校验: 喊单者手数符合预期", "status": "passed", "attachments": [{"name": "喊单者手数详情", "source": "f113fda8-dbf1-47bb-93f7-945e3824f63c-attachment.attach", "type": "text/plain"}], "start": 1758184032758, "stop": 1758184032758}], "start": 1758184032754, "stop": 1758184032758}, {"name": "跟单手数校验", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 跟单手数符合预期\n\n实际: 0.01\n操作: ==\n预期: 0.010898741854727577\n\n", "trace": "  File \"D:\\pycharm_test\\template\\test_cloudTrader\\test_lianxi.py\", line 1107, in test_query_closetrader_detail\n    self.verify_data(\n  File \"D:\\pycharm_test\\template\\commons\\api_base.py\", line 1362, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "校验: 跟单手数符合预期", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 跟单手数符合预期\n\n实际: 0.01\n操作: ==\n预期: 0.010898741854727577\n\n", "trace": "  File \"D:\\pycharm_test\\template\\commons\\api_base.py\", line 1362, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "attachments": [{"name": "跟单手数详情", "source": "8dd11548-7365-4145-8b3c-7ed025b3082a-attachment.attach", "type": "text/plain"}], "start": 1758184032762, "stop": 1758184032762}], "start": 1758184032758, "stop": 1758184032763}], "attachments": [{"name": "跟单账号：2088767546结果", "source": "c68bd73b-81d7-406f-9094-64f010891bf7-attachment.attach", "type": "text/plain"}], "start": 1758184032744, "stop": 1758184032763}], "attachments": [{"name": "log", "source": "339b9e57-9e67-4f47-bd02-3c968e4b7e2a-attachment.txt", "type": "text/plain"}], "start": 1758184029118, "stop": 1758184032763, "uuid": "a300d353-f65d-49cd-b48f-32cfadd11368", "historyId": "f44623e36ed95add73eeec7f4bb94119", "testCaseId": "f44623e36ed95add73eeec7f4bb94119", "fullName": "test_cloudTrader.test_lianxi.Test_orderseng2#test_query_closetrader_detail", "labels": [{"name": "story", "value": "场景2：跟随方式-按净值-1%"}, {"name": "feature", "value": "跟随方式-按净值"}, {"name": "parentSuite", "value": "test_cloudTrader"}, {"name": "suite", "value": "test_lianxi"}, {"name": "subSuite", "value": "Test_openandclouseall"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "40272-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cloudTrader.test_lianxi"}]}