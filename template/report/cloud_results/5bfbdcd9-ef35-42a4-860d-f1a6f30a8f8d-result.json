{"name": "跟单管理-VPS管理-跟单者账号-平仓后", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 手数符合预期\n\n实际: 0.01\n操作: ==\n预期: 0.0", "trace": "self = <template.test_cloudTrader.test_lianxi.Test_openandclouseall.Test_orderseng2 object at 0x000001E679C900A0>\nvar_manager = <template.commons.variable_manager.VariableManager object at 0x000001E679B0E9A0>\nlogged_session = <template.commons.session.EnvironmentSession object at 0x000001E679AAE7F0>\n\n    @allure.title(\"跟单管理-VPS管理-跟单者账号-平仓后\")\n    def test_query_closefollow_getRecordList(self, var_manager, logged_session):\n        with allure.step(\"1. 发送请求\"):\n            follow_account = var_manager.get_variable(\"follow_account\")\n            vpsrunIpAddr = var_manager.get_variable(\"vpsrunIpAddr\")\n            params = {\n                \"_t\": current_timestamp_seconds,\n                \"pageNo\": \"1\",\n                \"pageSize\": \"50\",\n                \"accountLike\": follow_account,\n                \"serverNameLike\": \"\",\n                \"connectTraderLike\": \"\",\n                \"connected\": \"\",\n                \"runIpAddr\": vpsrunIpAddr\n            }\n            response = self.send_get_request(\n                logged_session,\n                '/blockchain/account/getRecordList',\n                params=params\n            )\n    \n        with allure.step(\"2. 返回校验\"):\n            self.assert_json_value(\n                response,\n                \"$.searchCount\",\n                True,\n                \"响应searchCount字段应为true\"\n            )\n    \n        with allure.step(f\"3. 查询校验\"):\n            order_size = self.json_utils.extract(response.json(), \"$.result.records[0].size\")\n            logging.info(f\"喊单者手数是: {order_size}\")\n            var_manager.set_runtime_variable(\"order_size\", order_size)\n    \n            account_list = self.json_utils.extract(\n                response.json(),\n                \"$.records[0].account\",\n                default=[],\n                multi_match=True\n            )\n    \n            if not account_list:\n                attach_body = f\"账号查询[{follow_account}]，返回的account列表为空（暂无数据）\"\n            else:\n                attach_body = f\"账号查询[{follow_account}]，返回 {len(account_list)} 条记录，account值如下：\\n\" + \\\n                              \"\\n\".join([f\"第 {idx + 1} 条：{s}\" for idx, s in enumerate(account_list)])\n    \n            allure.attach(\n                body=attach_body,\n                name=f\"账号:{follow_account}查询结果\",\n                attachment_type=\"text/plain\"\n            )\n    \n            for idx, account in enumerate(account_list):\n                self.verify_data(\n                    actual_value=account,\n                    expected_value=follow_account,\n                    op=CompareOp.EQ,\n                    use_isclose=False,\n                    message=f\"第 {idx + 1} 条记录的账号应为{account}\",\n                    attachment_name=f\"账号:{follow_account}第 {idx + 1} 条记录校验\"\n                )\n    \n                with allure.step(\"手数校验-MT4开仓手数和持仓订单手数\"):\n                    totalLots = self.json_utils.extract(response.json(), \"$.records[0].totalLots\")\n                    logging.info(f\"手数是: {totalLots}\")\n    \n>                   self.verify_data(\n                        actual_value=float(totalLots),\n                        expected_value=float(0),\n                        op=CompareOp.EQ,\n                        message=f\"手数符合预期\",\n                        attachment_name=\"手数详情\"\n                    )\n\ntest_cloudTrader\\test_lianxi.py:1349: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template.test_cloudTrader.test_lianxi.Test_openandclouseall.Test_orderseng2 object at 0x000001E679C900A0>\nactual_value = 0.01, expected_value = 0.0, op = <CompareOp.EQ: '=='>\nmessage = '手数符合预期', attachment_name = '手数详情', attachment_type = 'text/plain'\nuse_isclose = True, rel_tol = 1e-09, abs_tol = 0\n\n    def verify_data(\n            self,\n            actual_value,\n            expected_value,\n            op: CompareOp,\n            message: str,\n            attachment_name: str,\n            attachment_type=\"text/plain\",\n            use_isclose=True,  # 新增参数：是否启用math.isclose容错（默认启用）\n            rel_tol=1e-9,  # 相对容差（仅当use_isclose=True时生效）\n            abs_tol=0  # 绝对容差（仅当use_isclose=True时生效）\n    ):\n        \"\"\"\n        通用数据校验函数，支持浮点容错比较\n        :param actual_value: 实际值\n        :param expected_value: 预期值\n        :param op: 比较操作，CompareOp 枚举\n        :param message: 校验失败时的提示信息\n        :param attachment_name: Allure 附件名称\n        :param attachment_type: Allure 附件类型，默认文本\n        :param use_isclose: 是否使用math.isclose进行浮点容错比较\n        :param rel_tol: 相对容差（默认1e-9）\n        :param abs_tol: 绝对容差（默认0.0）\n        其他参数同前\n        \"\"\"\n        with allure.step(f\"校验: {message}\"):\n            result = False\n            try:\n                # 处理浮点容错比较（仅对EQ/NE操作生效）\n                if use_isclose and op in (CompareOp.EQ, CompareOp.NE):\n                    if not (isinstance(actual_value, (int, float)) and\n                            isinstance(expected_value, (int, float))):\n                        # 非数字类型自动禁用isclose，避免报错\n                        use_isclose = False\n                        logging.warning(f\"自动禁用isclose：非数字类型比较（实际值类型：{type(actual_value)}）\")\n    \n                    # 计算isclose结果\n                    is_close = math.isclose(\n                        actual_value,\n                        expected_value,\n                        rel_tol=rel_tol,\n                        abs_tol=abs_tol\n                    )\n                    # 根据操作类型取反\n                    result = is_close if op == CompareOp.EQ else not is_close\n    \n                # 普通比较逻辑\n                else:\n                    if op == CompareOp.EQ:\n                        result = actual_value == expected_value\n                    elif op == CompareOp.NE:\n                        result = actual_value != expected_value\n                    elif op == CompareOp.GT:\n                        result = actual_value > expected_value\n                    elif op == CompareOp.LT:\n                        result = actual_value < expected_value\n                    elif op == CompareOp.GE:\n                        result = actual_value >= expected_value\n                    elif op == CompareOp.LE:\n                        result = actual_value <= expected_value\n                    elif op == CompareOp.IN:\n                        result = actual_value in expected_value\n                    elif op == CompareOp.NOT_IN:\n                        result = actual_value not in expected_value\n    \n            except TypeError as e:\n                pytest.fail(\n                    f\"校验类型错误: {str(e)}\\n实际值类型: {type(actual_value)}, 预期值类型: {type(expected_value)}\")\n    \n            # 生成详细提示信息（包含容差参数）\n            detail_msg = (\n                f\"\\n实际: {actual_value}\\n\"\n                f\"操作: {op.value}\\n\"\n                f\"预期: {expected_value}\\n\"\n            )\n    \n            # 添加allure.attach，将信息写入报告\n            allure.attach(\n                detail_msg,  # 附件内容\n                name=attachment_name,  # 附件名称（来自参数）\n                attachment_type=attachment_type  # 附件类型\n            )\n    \n            if not result:\n>               pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\nE               Failed: 校验失败: 手数符合预期\nE               \nE               实际: 0.01\nE               操作: ==\nE               预期: 0.0\n\ncommons\\api_base.py:1362: Failed"}, "description": "\n    ### 测试说明\n    - 前置条件：有喊单账号、跟单账号，跟单已经和喊单有订阅关系\n      1. MT4进行登录，然后进行开仓，总手数0.01\n      2. 账号管理-持仓订单-喊单和跟单数据校验\n      3. 跟单管理-开仓日志-喊单和跟单数据校验\n      4. 跟单管理-VPS管理-喊单和跟单数据校验\n      5. MT4进行平仓\n      6.账号管理-持仓订单-喊单和跟单数据校验\n      7.跟单管理-开仓日志-喊单和跟单数据校验\n      8.跟单管理-VPS管理-喊单和跟单数据校验\n    - 预期结果：喊单和跟单数据校验正确\n    ", "steps": [{"name": "1. 发送请求", "status": "passed", "steps": [{"name": "执行 GET 请求", "status": "passed", "steps": [{"name": "请求详情", "status": "passed", "attachments": [{"name": "请求URL", "source": "4936535c-c04d-4274-8f8b-b0edaaf401fe-attachment.txt", "type": "text/plain"}, {"name": "请求头", "source": "b42ce2e8-16cd-4520-aa44-e99e122767d7-attachment.json", "type": "application/json"}, {"name": "请求体（表单/文件）", "source": "76ea8823-b165-4f1a-bde3-504dcdfb475a-attachment.txt", "type": "text/plain"}], "start": 1758184078863, "stop": 1758184078865}, {"name": "响应详情", "status": "passed", "attachments": [{"name": "响应状态码", "source": "9dadfd7c-b4da-4e7f-af0b-2cd8778ed7a1-attachment.txt", "type": "text/plain"}, {"name": "响应头", "source": "39dfeb47-7f40-40aa-ad58-7853c72cabac-attachment.json", "type": "application/json"}, {"name": "响应体（JSON）", "source": "6b920bc2-aea7-4083-9600-f16b00489d99-attachment.json", "type": "application/json"}], "start": 1758184079464, "stop": 1758184079465}], "start": 1758184078863, "stop": 1758184082466}], "start": 1758184078863, "stop": 1758184082466}, {"name": "2. 返回校验", "status": "passed", "steps": [{"name": "断言JSON路径: $.searchCount", "status": "passed", "attachments": [{"name": "请求URL", "source": "72c7aec0-f026-4e11-a756-7554d29f0337-attachment.txt", "type": "text/plain"}, {"name": "预期值", "source": "13e2ffd8-ef80-4c2c-a646-6e279eddf1bb-attachment.txt", "type": "text/plain"}, {"name": "实际值", "source": "a0da8d29-2562-4701-b020-387cd783fa08-attachment.txt", "type": "text/plain"}], "start": 1758184082470, "stop": 1758184082471}], "start": 1758184082466, "stop": 1758184082471}, {"name": "3. 查询校验", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 手数符合预期\n\n实际: 0.01\n操作: ==\n预期: 0.0\n\n", "trace": "  File \"D:\\pycharm_test\\template\\test_cloudTrader\\test_lianxi.py\", line 1349, in test_query_closefollow_getRecordList\n    self.verify_data(\n  File \"D:\\pycharm_test\\template\\commons\\api_base.py\", line 1362, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "校验: 第 1 条记录的账号应为2088767546", "status": "passed", "attachments": [{"name": "账号:2088767546第 1 条记录校验", "source": "1d813d50-076e-4731-873d-337a029460c2-attachment.attach", "type": "text/plain"}], "start": 1758184082480, "stop": 1758184082481}, {"name": "手数校验-MT4开仓手数和持仓订单手数", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 手数符合预期\n\n实际: 0.01\n操作: ==\n预期: 0.0\n\n", "trace": "  File \"D:\\pycharm_test\\template\\test_cloudTrader\\test_lianxi.py\", line 1349, in test_query_closefollow_getRecordList\n    self.verify_data(\n  File \"D:\\pycharm_test\\template\\commons\\api_base.py\", line 1362, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "校验: 手数符合预期", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 手数符合预期\n\n实际: 0.01\n操作: ==\n预期: 0.0\n\n", "trace": "  File \"D:\\pycharm_test\\template\\commons\\api_base.py\", line 1362, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "attachments": [{"name": "手数详情", "source": "5b9f9f17-b07d-405f-a646-a80b7f1b1d5d-attachment.attach", "type": "text/plain"}], "start": 1758184082484, "stop": 1758184082484}], "start": 1758184082481, "stop": 1758184082485}], "attachments": [{"name": "账号:2088767546查询结果", "source": "d3fa9e5c-47db-4c92-949b-5bdad5a89d57-attachment.attach", "type": "text/plain"}], "start": 1758184082471, "stop": 1758184082485}], "attachments": [{"name": "log", "source": "9fca12c3-37a1-4559-ade2-e271efc0e242-attachment.txt", "type": "text/plain"}], "start": 1758184078863, "stop": 1758184082485, "uuid": "62bbb7fe-f9c9-4274-983b-cdce5678ba81", "historyId": "eb3e16f2121d6cf5db37b50af0e73707", "testCaseId": "eb3e16f2121d6cf5db37b50af0e73707", "fullName": "test_cloudTrader.test_lianxi.Test_orderseng2#test_query_closefollow_getRecordList", "labels": [{"name": "story", "value": "场景2：跟随方式-按净值-1%"}, {"name": "feature", "value": "跟随方式-按净值"}, {"name": "parentSuite", "value": "test_cloudTrader"}, {"name": "suite", "value": "test_lianxi"}, {"name": "subSuite", "value": "Test_openandclouseall"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "40272-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cloudTrader.test_lianxi"}]}