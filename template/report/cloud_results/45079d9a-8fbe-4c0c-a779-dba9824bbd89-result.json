{"name": "账号管理-持仓订单-跟单账号ID查询-开仓后", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 跟单方向符合预期\n\n实际: 0.0\n操作: ==\n预期: 1.0", "trace": "self = <template.test_cloudTrader.test_oac_equit.Test_openandclouseall.Test_orderseng1 object at 0x00000195AB2E8100>\nvar_manager = <template.commons.variable_manager.VariableManager object at 0x00000195AB2CD3A0>\nlogged_session = <template.commons.session.EnvironmentSession object at 0x00000195AB2E87F0>\n\n    @allure.title(\"账号管理-持仓订单-跟单账号ID查询-开仓后\")\n    def test_query_openfollow_passid(self, var_manager, logged_session):\n        with allure.step(\"1. 发送请求\"):\n            follow_pass_id = var_manager.get_variable(\"follow_pass_id\")\n            follow_account = var_manager.get_variable(\"follow_account\")\n            params = {\n                \"_t\": current_timestamp_seconds,\n                \"trader_id\": follow_pass_id,\n                \"column\": \"id\",\n                \"order\": \"desc\",\n                \"pageNo\": 1,\n                \"pageSize\": 50,\n                \"superQueryMatchType\": \"and\"\n            }\n            response = self.send_get_request(\n                logged_session,\n                '/online/cgform/api/getData/402883977b38c9ca017b38c9caff0000',\n                params=params\n            )\n    \n        with allure.step(\"2. 返回校验\"):\n            self.assert_json_value(\n                response,\n                \"$.success\",\n                True,\n                \"响应success字段应为true\"\n            )\n    \n        with allure.step(\"3. 提取数据\"):\n            order_no = self.json_utils.extract(response.json(), \"$.result.records[0].order_no\")\n            var_manager.set_runtime_variable(\"order_no\", order_no)\n            allure.attach(f\"{order_no}\", \"跟单订单号\", allure.attachment_type.TEXT)\n    \n        with allure.step(f\"3. 查询校验\"):\n            trader_id_list = self.json_utils.extract(\n                response.json(),\n                \"$.result.records[0].trader_id\",\n                default=[],\n                multi_match=True\n            )\n    \n            if not trader_id_list:\n                attach_body = f\"账号ID查询[{follow_account}]，返回的trader_id列表为空（暂无数据）\"\n            else:\n                attach_body = f\"账号ID查询[{follow_account}]，返回 {len(trader_id_list)} 条记录，trader_id值如下：\\n\" + \\\n                              \"\\n\".join([f\"第 {idx + 1} 条：{s}\" for idx, s in enumerate(trader_id_list)])\n    \n            allure.attach(\n                body=attach_body,\n                name=f\"账号ID:{follow_account}查询结果\",\n                attachment_type=\"text/plain\"\n            )\n    \n            for idx, trader_id in enumerate(trader_id_list):\n                self.verify_data(\n                    actual_value=int(trader_id),\n                    expected_value=int(follow_pass_id),\n                    op=CompareOp.EQ,\n                    use_isclose=False,\n                    message=f\"第 {idx + 1} 条记录的账号ID应为{trader_id}\",\n                    attachment_name=f\"账号ID:{follow_pass_id}第 {idx + 1} 条记录校验\"\n                )\n    \n            with allure.step(\"喊单者订单号校验\"):\n                master_order_no = self.json_utils.extract(response.json(), \"$.result.records[0].master_order_no\")\n                ticket_open = var_manager.get_variable(\"ticket_open\")\n    \n                self.verify_data(\n                    actual_value=master_order_no,\n                    expected_value=ticket_open,\n                    op=CompareOp.EQ,\n                    use_isclose=False,\n                    message=f\"订单号数据正确\",\n                    attachment_name=\"订单号详情\"\n                )\n                logger.info(f\"订单号数据正确,开仓订单号：{ticket_open} 喊单者订单号：{master_order_no}\")\n    \n            with allure.step(\"跟单订单号校验\"):\n                slave_ticket = var_manager.get_variable(\"slave_ticket\")\n                self.verify_data(\n                    actual_value=slave_ticket,\n                    expected_value=order_no,\n                    op=CompareOp.EQ,\n                    use_isclose=False,\n                    message=f\"订单号数据正确\",\n                    attachment_name=\"订单号详情\"\n                )\n                logger.info(f\"订单号数据正确,跟单者订单号：{order_no} 数据库数据：{slave_ticket}\")\n    \n            with allure.step(\"跟单手数校验\"):\n                add_size = self.json_utils.extract(response.json(), \"$.result.records[0].size\")\n                if not add_size:\n                    allure.attach(\"订单手数数据为空\", \"订单手数数据\", allure.attachment_type.TEXT)\n                else:\n                    lots_open = var_manager.get_variable(\"lots_open\")\n                    follow_periodP = var_manager.get_variable(\"follow_periodP\")\n                    trader_periodP = var_manager.get_variable(\"trader_periodP\")\n                    # 获取跟单净值比例\n                    follow_fixed_proportion = var_manager.get_variable(\"follow_fixed_proportion\")\n                    # 百分比数据转换\n                    follow_fixed_decimal = percentage_to_decimal(follow_fixed_proportion)\n                    expected_lots_open = lots_open * (follow_periodP / trader_periodP) * follow_fixed_decimal\n                    # 四舍五入保留两位小数\n                    expected_lots_open = round(expected_lots_open, 2)\n    \n                    # 最小手数限制（0.01）\n                    min_order_size = 0.01\n                    if expected_lots_open < min_order_size:\n                        allure.attach(\n                            f\"计算预期手数{expected_lots_open} < 最小手数{min_order_size}，强制重置为{min_order_size}\",\n                            \"预期手数调整说明\", allure.attachment_type.TEXT)\n                        expected_lots_open = min_order_size\n    \n                    self.verify_data(\n                        actual_value=float(add_size),\n                        expected_value=float(expected_lots_open),\n                        op=CompareOp.EQ,\n                        message=f\"手数符合预期\",\n                        attachment_name=\"手数详情\"\n                    )\n                    logger.info(f\"跟单者手数：{add_size}\")\n    \n            with allure.step(\"跟单的订单方向校验\"):\n                type = self.json_utils.extract(response.json(), \"$.result.records[0].type\")\n                logging.info(f\"跟单方向是: {type}\")\n    \n>               self.verify_data(\n                    actual_value=float(type),\n                    expected_value=float(1),\n                    op=CompareOp.EQ,\n                    message=f\"跟单方向符合预期\",\n                    attachment_name=\"跟单方向详情\"\n                )\n\ntest_cloudTrader\\test_oac_equit.py:530: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template.test_cloudTrader.test_oac_equit.Test_openandclouseall.Test_orderseng1 object at 0x00000195AB2E8100>\nactual_value = 0.0, expected_value = 1.0, op = <CompareOp.EQ: '=='>\nmessage = '跟单方向符合预期', attachment_name = '跟单方向详情', attachment_type = 'text/plain'\nuse_isclose = True, rel_tol = 1e-09, abs_tol = 0\n\n    def verify_data(\n            self,\n            actual_value,\n            expected_value,\n            op: CompareOp,\n            message: str,\n            attachment_name: str,\n            attachment_type=\"text/plain\",\n            use_isclose=True,  # 新增参数：是否启用math.isclose容错（默认启用）\n            rel_tol=1e-9,  # 相对容差（仅当use_isclose=True时生效）\n            abs_tol=0  # 绝对容差（仅当use_isclose=True时生效）\n    ):\n        \"\"\"\n        通用数据校验函数，支持浮点容错比较\n        :param actual_value: 实际值\n        :param expected_value: 预期值\n        :param op: 比较操作，CompareOp 枚举\n        :param message: 校验失败时的提示信息\n        :param attachment_name: Allure 附件名称\n        :param attachment_type: Allure 附件类型，默认文本\n        :param use_isclose: 是否使用math.isclose进行浮点容错比较\n        :param rel_tol: 相对容差（默认1e-9）\n        :param abs_tol: 绝对容差（默认0.0）\n        其他参数同前\n        \"\"\"\n        with allure.step(f\"校验: {message}\"):\n            result = False\n            try:\n                # 处理浮点容错比较（仅对EQ/NE操作生效）\n                if use_isclose and op in (CompareOp.EQ, CompareOp.NE):\n                    if not (isinstance(actual_value, (int, float)) and\n                            isinstance(expected_value, (int, float))):\n                        # 非数字类型自动禁用isclose，避免报错\n                        use_isclose = False\n                        logging.warning(f\"自动禁用isclose：非数字类型比较（实际值类型：{type(actual_value)}）\")\n    \n                    # 计算isclose结果\n                    is_close = math.isclose(\n                        actual_value,\n                        expected_value,\n                        rel_tol=rel_tol,\n                        abs_tol=abs_tol\n                    )\n                    # 根据操作类型取反\n                    result = is_close if op == CompareOp.EQ else not is_close\n    \n                # 普通比较逻辑\n                else:\n                    if op == CompareOp.EQ:\n                        result = actual_value == expected_value\n                    elif op == CompareOp.NE:\n                        result = actual_value != expected_value\n                    elif op == CompareOp.GT:\n                        result = actual_value > expected_value\n                    elif op == CompareOp.LT:\n                        result = actual_value < expected_value\n                    elif op == CompareOp.GE:\n                        result = actual_value >= expected_value\n                    elif op == CompareOp.LE:\n                        result = actual_value <= expected_value\n                    elif op == CompareOp.IN:\n                        result = actual_value in expected_value\n                    elif op == CompareOp.NOT_IN:\n                        result = actual_value not in expected_value\n    \n            except TypeError as e:\n                pytest.fail(\n                    f\"校验类型错误: {str(e)}\\n实际值类型: {type(actual_value)}, 预期值类型: {type(expected_value)}\")\n    \n            # 生成详细提示信息（包含容差参数）\n            detail_msg = (\n                f\"\\n实际: {actual_value}\\n\"\n                f\"操作: {op.value}\\n\"\n                f\"预期: {expected_value}\\n\"\n            )\n    \n            # 添加allure.attach，将信息写入报告\n            allure.attach(\n                detail_msg,  # 附件内容\n                name=attachment_name,  # 附件名称（来自参数）\n                attachment_type=attachment_type  # 附件类型\n            )\n    \n            if not result:\n>               pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\nE               Failed: 校验失败: 跟单方向符合预期\nE               \nE               实际: 0.0\nE               操作: ==\nE               预期: 1.0\n\ncommons\\api_base.py:1362: Failed"}, "description": "\n    ### 测试说明\n    - 前置条件：有喊单账号、跟单账号，跟单已经和喊单有订阅关系\n      1. MT4进行登录，然后进行开仓，总手数0.01\n      2. 账号管理-持仓订单-喊单和跟单数据校验\n      3. 跟单管理-开仓日志-喊单和跟单数据校验\n      4. 跟单管理-VPS管理-喊单和跟单数据校验\n      5. MT4进行平仓\n      6.账号管理-持仓订单-喊单和跟单数据校验\n      7.跟单管理-开仓日志-喊单和跟单数据校验\n      8.跟单管理-VPS管理-喊单和跟单数据校验\n    - 预期结果：喊单和跟单数据校验正确\n    ", "steps": [{"name": "1. 发送请求", "status": "passed", "steps": [{"name": "执行 GET 请求", "status": "passed", "steps": [{"name": "请求详情", "status": "passed", "attachments": [{"name": "请求URL", "source": "4c7459fb-be93-4210-925c-6b06c2dbd723-attachment.txt", "type": "text/plain"}, {"name": "请求头", "source": "594ccdf2-162b-49e5-8a83-407d3b854489-attachment.json", "type": "application/json"}, {"name": "请求体（表单/文件）", "source": "cbe29ae8-bb01-4201-aeac-02b9b1d4ab4d-attachment.txt", "type": "text/plain"}], "start": 1758177338894, "stop": 1758177338895}, {"name": "响应详情", "status": "passed", "attachments": [{"name": "响应状态码", "source": "bbbb9a46-1aff-4f52-8baa-2760b6e25b2c-attachment.txt", "type": "text/plain"}, {"name": "响应头", "source": "31af998e-b33f-4846-aa98-994e3cbc3ae0-attachment.json", "type": "application/json"}, {"name": "响应体（JSON）", "source": "ef267bf9-c199-4156-8744-4726bf564e8f-attachment.json", "type": "application/json"}], "start": 1758177339549, "stop": 1758177339550}], "start": 1758177338894, "stop": 1758177342559}], "start": 1758177338894, "stop": 1758177342559}, {"name": "2. 返回校验", "status": "passed", "steps": [{"name": "断言JSON路径: $.success", "status": "passed", "attachments": [{"name": "请求URL", "source": "bed72a8f-d9bc-48ea-8c42-4c3f300173a7-attachment.txt", "type": "text/plain"}, {"name": "预期值", "source": "6f759f6e-e3ce-43e8-8d85-04dcde2c8c39-attachment.txt", "type": "text/plain"}, {"name": "实际值", "source": "d3850683-9fa7-4271-86af-134151966e00-attachment.txt", "type": "text/plain"}], "start": 1758177342563, "stop": 1758177342564}], "start": 1758177342559, "stop": 1758177342564}, {"name": "3. 提取数据", "status": "passed", "attachments": [{"name": "跟单订单号", "source": "564abaad-2e2c-4796-9ddd-6e3de8c9e312-attachment.txt", "type": "text/plain"}], "start": 1758177342564, "stop": 1758177342570}, {"name": "3. 查询校验", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 跟单方向符合预期\n\n实际: 0.0\n操作: ==\n预期: 1.0\n\n", "trace": "  File \"D:\\pycharm_test\\template\\test_cloudTrader\\test_oac_equit.py\", line 530, in test_query_openfollow_passid\n    self.verify_data(\n  File \"D:\\pycharm_test\\template\\commons\\api_base.py\", line 1362, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "校验: 第 1 条记录的账号ID应为1968134649581289473", "status": "passed", "attachments": [{"name": "账号ID:1968134649581289473第 1 条记录校验", "source": "d8df243b-2f31-4e7d-b5f9-acc50ed431d9-attachment.attach", "type": "text/plain"}], "start": 1758177342574, "stop": 1758177342574}, {"name": "喊单者订单号校验", "status": "passed", "steps": [{"name": "校验: 订单号数据正确", "status": "passed", "attachments": [{"name": "订单号详情", "source": "98346810-f695-4252-a64d-79cd4fb96026-attachment.attach", "type": "text/plain"}], "start": 1758177342578, "stop": 1758177342578}], "start": 1758177342574, "stop": 1758177342578}, {"name": "跟单订单号校验", "status": "passed", "steps": [{"name": "校验: 订单号数据正确", "status": "passed", "attachments": [{"name": "订单号详情", "source": "9942635f-4700-471c-91d2-5cb6af3f1809-attachment.attach", "type": "text/plain"}], "start": 1758177342578, "stop": 1758177342579}], "start": 1758177342578, "stop": 1758177342579}, {"name": "跟单手数校验", "status": "passed", "steps": [{"name": "校验: 手数符合预期", "status": "passed", "attachments": [{"name": "手数详情", "source": "18c64f26-90fe-4b35-99ac-d77a768a1c32-attachment.attach", "type": "text/plain"}], "start": 1758177342583, "stop": 1758177342583}], "start": 1758177342579, "stop": 1758177342583}, {"name": "跟单的订单方向校验", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 跟单方向符合预期\n\n实际: 0.0\n操作: ==\n预期: 1.0\n\n", "trace": "  File \"D:\\pycharm_test\\template\\test_cloudTrader\\test_oac_equit.py\", line 530, in test_query_openfollow_passid\n    self.verify_data(\n  File \"D:\\pycharm_test\\template\\commons\\api_base.py\", line 1362, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "校验: 跟单方向符合预期", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 跟单方向符合预期\n\n实际: 0.0\n操作: ==\n预期: 1.0\n\n", "trace": "  File \"D:\\pycharm_test\\template\\commons\\api_base.py\", line 1362, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "attachments": [{"name": "跟单方向详情", "source": "0b20bf74-acba-4154-88bd-9499afffcf1b-attachment.attach", "type": "text/plain"}], "start": 1758177342587, "stop": 1758177342588}], "start": 1758177342583, "stop": 1758177342588}], "attachments": [{"name": "账号ID:2088767546查询结果", "source": "31a7df05-e509-4c09-a2ca-9655f42cbc66-attachment.attach", "type": "text/plain"}], "start": 1758177342570, "stop": 1758177342588}], "attachments": [{"name": "log", "source": "9f00ccfd-9d27-4f7e-9e36-d43ced4fee35-attachment.txt", "type": "text/plain"}], "start": 1758177338894, "stop": 1758177342588, "uuid": "bda4ebed-bac7-4f86-8c0d-c254f67ff04c", "historyId": "437b720f58e2adce00cbfd54377b87c9", "testCaseId": "437b720f58e2adce00cbfd54377b87c9", "fullName": "test_cloudTrader.test_oac_equit.Test_orderseng1#test_query_openfollow_passid", "labels": [{"name": "story", "value": "场景1：跟随方式-按净值-100%"}, {"name": "feature", "value": "跟随方式-按净值"}, {"name": "parentSuite", "value": "test_cloudTrader"}, {"name": "suite", "value": "test_oac_equit"}, {"name": "subSuite", "value": "Test_openandclouseall"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "18712-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cloudTrader.test_oac_equit"}]}