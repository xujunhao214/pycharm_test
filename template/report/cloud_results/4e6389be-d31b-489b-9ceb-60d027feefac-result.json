{"name": "跟单管理-开仓日志-喊单账户查询-开仓后", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 第 1 条记录的订单号应为44253282\n\n实际: 44253282\n操作: ==\n预期: 44253370", "trace": "self = <template.test_cloudTrader.test_lianxi2.Test_openandclouseall.Test_orderseng object at 0x000001527FD990D0>\nvar_manager = <template.commons.variable_manager.VariableManager object at 0x000001527FD99460>\nlogged_session = <template.commons.session.EnvironmentSession object at 0x000001527FD997C0>\n\n    @allure.title(\"跟单管理-开仓日志-喊单账户查询-开仓后\")\n    def test_query_opentrader_getdata(self, var_manager, logged_session):\n        with allure.step(\"1. 发送请求\"):\n            trader_account = var_manager.get_variable(\"trader_account\")\n            params = {\n                \"_t\": current_timestamp_seconds,\n                \"master_account\": trader_account,\n                \"column\": \"id\",\n                \"order\": \"desc\",\n                \"pageNo\": 1,\n                \"pageSize\": 50,\n                \"superQueryMatchType\": \"and\"\n            }\n            response = self.send_get_request(\n                logged_session,\n                '/online/cgform/api/getData/2c934301834efb6801834efbe1ba0002',\n                params=params\n            )\n    \n        with allure.step(\"2. 返回校验\"):\n            self.assert_json_value(\n                response,\n                \"$.success\",\n                True,\n                \"响应success字段应为true\"\n            )\n    \n        with allure.step(f\"3. 查询校验\"):\n            master_ticket_list = self.json_utils.extract(\n                response.json(),\n                \"$.result.records[0].master_ticket\",\n                default=[],\n                multi_match=True\n            )\n    \n            if not master_ticket_list:\n                attach_body = f\"喊单账户查询[{trader_account}]，返回的master_ticket列表为空（暂无数据）\"\n            else:\n                attach_body = f\"喊单账户查询[{trader_account}]，返回 {len(master_ticket_list)} 条记录，master_ticket值如下：\\n\" + \\\n                              \"\\n\".join([f\"第 {idx + 1} 条：{s}\" for idx, s in enumerate(master_ticket_list)])\n    \n            allure.attach(\n                body=attach_body,\n                name=f\"喊单账户:{trader_account}查询结果\",\n                attachment_type=\"text/plain\"\n            )\n    \n            for idx, master_ticket in enumerate(master_ticket_list):\n                ticket_open = var_manager.get_variable(\"ticket_open\")\n>               self.verify_data(\n                    actual_value=master_ticket,\n                    expected_value=ticket_open,\n                    op=CompareOp.EQ,\n                    use_isclose=False,\n                    message=f\"第 {idx + 1} 条记录的订单号应为{master_ticket}\",\n                    attachment_name=f\"喊单账户:{trader_account}第 {idx + 1} 条记录校验\"\n                )\n\ntest_cloudTrader\\test_lianxi2.py:442: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template.test_cloudTrader.test_lianxi2.Test_openandclouseall.Test_orderseng object at 0x000001527FD990D0>\nactual_value = 44253282, expected_value = 44253370, op = <CompareOp.EQ: '=='>\nmessage = '第 1 条记录的订单号应为44253282', attachment_name = '喊单账户:2088767545第 1 条记录校验'\nattachment_type = 'text/plain', use_isclose = False, rel_tol = 1e-09\nabs_tol = 0\n\n    def verify_data(\n            self,\n            actual_value,\n            expected_value,\n            op: CompareOp,\n            message: str,\n            attachment_name: str,\n            attachment_type=\"text/plain\",\n            use_isclose=True,  # 新增参数：是否启用math.isclose容错（默认启用）\n            rel_tol=1e-9,  # 相对容差（仅当use_isclose=True时生效）\n            abs_tol=0  # 绝对容差（仅当use_isclose=True时生效）\n    ):\n        \"\"\"\n        通用数据校验函数，支持浮点容错比较\n        :param actual_value: 实际值\n        :param expected_value: 预期值\n        :param op: 比较操作，CompareOp 枚举\n        :param message: 校验失败时的提示信息\n        :param attachment_name: Allure 附件名称\n        :param attachment_type: Allure 附件类型，默认文本\n        :param use_isclose: 是否使用math.isclose进行浮点容错比较\n        :param rel_tol: 相对容差（默认1e-9）\n        :param abs_tol: 绝对容差（默认0.0）\n        其他参数同前\n        \"\"\"\n        with allure.step(f\"校验: {message}\"):\n            result = False\n            try:\n                # 处理浮点容错比较（仅对EQ/NE操作生效）\n                if use_isclose and op in (CompareOp.EQ, CompareOp.NE):\n                    if not (isinstance(actual_value, (int, float)) and\n                            isinstance(expected_value, (int, float))):\n                        # 非数字类型自动禁用isclose，避免报错\n                        use_isclose = False\n                        logging.warning(f\"自动禁用isclose：非数字类型比较（实际值类型：{type(actual_value)}）\")\n    \n                    # 计算isclose结果\n                    is_close = math.isclose(\n                        actual_value,\n                        expected_value,\n                        rel_tol=rel_tol,\n                        abs_tol=abs_tol\n                    )\n                    # 根据操作类型取反\n                    result = is_close if op == CompareOp.EQ else not is_close\n    \n                # 普通比较逻辑\n                else:\n                    if op == CompareOp.EQ:\n                        result = actual_value == expected_value\n                    elif op == CompareOp.NE:\n                        result = actual_value != expected_value\n                    elif op == CompareOp.GT:\n                        result = actual_value > expected_value\n                    elif op == CompareOp.LT:\n                        result = actual_value < expected_value\n                    elif op == CompareOp.GE:\n                        result = actual_value >= expected_value\n                    elif op == CompareOp.LE:\n                        result = actual_value <= expected_value\n                    elif op == CompareOp.IN:\n                        result = actual_value in expected_value\n                    elif op == CompareOp.NOT_IN:\n                        result = actual_value not in expected_value\n    \n            except TypeError as e:\n                pytest.fail(\n                    f\"校验类型错误: {str(e)}\\n实际值类型: {type(actual_value)}, 预期值类型: {type(expected_value)}\")\n    \n            # 生成详细提示信息（包含容差参数）\n            detail_msg = (\n                f\"\\n实际: {actual_value}\\n\"\n                f\"操作: {op.value}\\n\"\n                f\"预期: {expected_value}\\n\"\n            )\n    \n            # 添加allure.attach，将信息写入报告\n            allure.attach(\n                detail_msg,  # 附件内容\n                name=attachment_name,  # 附件名称（来自参数）\n                attachment_type=attachment_type  # 附件类型\n            )\n    \n            if not result:\n>               pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\nE               Failed: 校验失败: 第 1 条记录的订单号应为44253282\nE               \nE               实际: 44253282\nE               操作: ==\nE               预期: 44253370\n\ncommons\\api_base.py:1364: Failed"}, "steps": [{"name": "1. 发送请求", "status": "passed", "steps": [{"name": "执行 GET 请求", "status": "passed", "steps": [{"name": "请求详情", "status": "passed", "attachments": [{"name": "请求URL", "source": "78924d17-bef7-4c66-ac73-bd10b699013c-attachment.txt", "type": "text/plain"}, {"name": "请求头", "source": "eb8a5cdc-6c07-44d7-9b9d-16fd15babca8-attachment.json", "type": "application/json"}, {"name": "请求体（表单/文件）", "source": "1f7cdcc7-0ad5-4a9b-9018-a4ea3694cd48-attachment.txt", "type": "text/plain"}], "start": 1758016187712, "stop": 1758016187714}, {"name": "响应详情", "status": "passed", "attachments": [{"name": "响应状态码", "source": "7c90571b-fb05-4c7c-8e41-a3188cf3c836-attachment.txt", "type": "text/plain"}, {"name": "响应头", "source": "8e340644-bc38-4259-b6aa-3666e5e64565-attachment.json", "type": "application/json"}, {"name": "响应体（JSON）", "source": "95b3e74c-cd89-402c-8901-c989a8c2dcbd-attachment.json", "type": "application/json"}], "start": 1758016188250, "stop": 1758016188253}], "start": 1758016187712, "stop": 1758016191260}], "start": 1758016187712, "stop": 1758016191260}, {"name": "2. 返回校验", "status": "passed", "steps": [{"name": "断言JSON路径: $.success", "status": "passed", "attachments": [{"name": "请求URL", "source": "4e5e8492-cb46-467e-a504-5c2441cb4d4c-attachment.txt", "type": "text/plain"}, {"name": "预期值", "source": "450523b0-ccbf-4bb4-8d4d-28a1c58ca00b-attachment.txt", "type": "text/plain"}, {"name": "实际值", "source": "018db2c4-ac94-4ac9-91b6-681f177a2c49-attachment.txt", "type": "text/plain"}], "start": 1758016191267, "stop": 1758016191269}], "start": 1758016191260, "stop": 1758016191269}, {"name": "3. 查询校验", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 第 1 条记录的订单号应为44253282\n\n实际: 44253282\n操作: ==\n预期: 44253370\n\n", "trace": "  File \"D:\\pycharm_test\\template\\test_cloudTrader\\test_lianxi2.py\", line 442, in test_query_opentrader_getdata\n    self.verify_data(\n  File \"D:\\pycharm_test\\template\\commons\\api_base.py\", line 1364, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "校验: 第 1 条记录的订单号应为44253282", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 第 1 条记录的订单号应为44253282\n\n实际: 44253282\n操作: ==\n预期: 44253370\n\n", "trace": "  File \"D:\\pycharm_test\\template\\commons\\api_base.py\", line 1364, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "attachments": [{"name": "喊单账户:2088767545第 1 条记录校验", "source": "7c920b90-abc6-40c2-8c3a-a03c4e82cec7-attachment.attach", "type": "text/plain"}], "start": 1758016191279, "stop": 1758016191280}], "attachments": [{"name": "喊单账户:2088767545查询结果", "source": "27937f7e-51bd-4547-a56a-633ec44a5fb2-attachment.attach", "type": "text/plain"}], "start": 1758016191269, "stop": 1758016191280}], "attachments": [{"name": "log", "source": "aaac8e50-4020-4807-93a4-4884fd71f1da-attachment.txt", "type": "text/plain"}], "start": 1758016187712, "stop": 1758016191281, "uuid": "ae8d2ddb-75c5-4a47-a155-a256a978f058", "historyId": "693ca633dac40682f7f88a5c4182945b", "testCaseId": "693ca633dac40682f7f88a5c4182945b", "fullName": "test_cloudTrader.test_lianxi2.Test_orderseng#test_query_opentrader_getdata", "labels": [{"name": "feature", "value": "账户管理-持仓订单"}, {"name": "parentSuite", "value": "test_cloudTrader"}, {"name": "suite", "value": "test_lianxi2"}, {"name": "subSuite", "value": "Test_openandclouseall"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "38124-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cloudTrader.test_lianxi2"}]}