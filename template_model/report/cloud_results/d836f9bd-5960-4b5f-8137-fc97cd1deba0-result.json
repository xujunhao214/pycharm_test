{"name": "返佣管理-跟单分红-4级代理-JPY币种", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 信号源分红金额应符合预期\n\n实际: 220.47\n操作: ==\n预期: 297.93", "trace": "self = <template_model.test_cloudTrader.test_agent.Test_create.Test_trader object at 0x000002187F99A3A0>\nvar_manager = <template_model.commons.variable_manager.VariableManager object at 0x000002187F99A400>\nlogged_session = <template_model.commons.session.EnvironmentSession object at 0x000002187F9BA1F0>\ncase_params = {'_t': 1757574998, 'dividendTimeBegin': '', 'dividendTimeEnd': '', 'dividendUser': '', ...}\n\n    @allure.title(\"返佣管理-跟单分红-4级代理-JPY币种\")\n    @pytest.mark.parametrize(\"case_params\", [case_params_list[6]])\n    def test_agent_dividend_4level_jpy(self, var_manager, logged_session, case_params):\n>       self._run_test(case_params, logged_session)\n\ntest_cloudTrader\\test_agent.py:137: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_cloudTrader\\test_agent.py:385: in _run_test\n    self.verify_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template_model.test_cloudTrader.test_agent.Test_create.Test_trader object at 0x000002187F99A3A0>\nactual_value = 220.47, expected_value = 297.93, op = <CompareOp.EQ: '=='>\nmessage = '信号源分红金额应符合预期', attachment_name = '信号源分红金额详情'\nattachment_type = 'text/plain', use_isclose = True, rel_tol = 0.01, abs_tol = 0\n\n    def verify_data(\n            self,\n            actual_value,\n            expected_value,\n            op: CompareOp,\n            message: str,\n            attachment_name: str,\n            attachment_type=\"text/plain\",\n            use_isclose=True,  # 新增参数：是否启用math.isclose容错（默认启用）\n            rel_tol=1e-9,  # 相对容差（仅当use_isclose=True时生效）\n            abs_tol=0  # 绝对容差（仅当use_isclose=True时生效）\n    ):\n        \"\"\"\n        通用数据校验函数，支持浮点容错比较\n        :param actual_value: 实际值\n        :param expected_value: 预期值\n        :param op: 比较操作，CompareOp 枚举\n        :param message: 校验失败时的提示信息\n        :param attachment_name: Allure 附件名称\n        :param attachment_type: Allure 附件类型，默认文本\n        :param use_isclose: 是否使用math.isclose进行浮点容错比较\n        :param rel_tol: 相对容差（默认1e-9）\n        :param abs_tol: 绝对容差（默认0.0）\n        其他参数同前\n        \"\"\"\n        with allure.step(f\"校验: {message}\"):\n            result = False\n            try:\n                # 处理浮点容错比较（仅对EQ/NE操作生效）\n                if use_isclose and op in (CompareOp.EQ, CompareOp.NE):\n                    if not (isinstance(actual_value, (int, float)) and\n                            isinstance(expected_value, (int, float))):\n                        # 非数字类型自动禁用isclose，避免报错\n                        use_isclose = False\n                        logging.warning(f\"自动禁用isclose：非数字类型比较（实际值类型：{type(actual_value)}）\")\n    \n                    # 计算isclose结果\n                    is_close = math.isclose(\n                        actual_value,\n                        expected_value,\n                        rel_tol=rel_tol,\n                        abs_tol=abs_tol\n                    )\n                    # 根据操作类型取反\n                    result = is_close if op == CompareOp.EQ else not is_close\n    \n                # 普通比较逻辑\n                else:\n                    if op == CompareOp.EQ:\n                        result = actual_value == expected_value\n                    elif op == CompareOp.NE:\n                        result = actual_value != expected_value\n                    elif op == CompareOp.GT:\n                        result = actual_value > expected_value\n                    elif op == CompareOp.LT:\n                        result = actual_value < expected_value\n                    elif op == CompareOp.GE:\n                        result = actual_value >= expected_value\n                    elif op == CompareOp.LE:\n                        result = actual_value <= expected_value\n                    elif op == CompareOp.IN:\n                        result = actual_value in expected_value\n                    elif op == CompareOp.NOT_IN:\n                        result = actual_value not in expected_value\n    \n            except TypeError as e:\n                pytest.fail(\n                    f\"校验类型错误: {str(e)}\\n实际值类型: {type(actual_value)}, 预期值类型: {type(expected_value)}\")\n    \n            # 生成详细提示信息（包含容差参数）\n            detail_msg = (\n                f\"\\n实际: {actual_value}\\n\"\n                f\"操作: {op.value}\\n\"\n                f\"预期: {expected_value}\\n\"\n            )\n    \n            # 添加allure.attach，将信息写入报告\n            allure.attach(\n                detail_msg,  # 附件内容\n                name=attachment_name,  # 附件名称（来自参数）\n                attachment_type=attachment_type  # 附件类型\n            )\n    \n            if not result:\n>               pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\nE               Failed: 校验失败: 信号源分红金额应符合预期\nE               \nE               实际: 220.47\nE               操作: ==\nE               预期: 297.93\n\ncommons\\api_base.py:1364: Failed"}, "steps": [{"name": "1. 构造参数并发送GET请求", "status": "passed", "steps": [{"name": "执行 GET 请求", "status": "passed", "steps": [{"name": "请求详情", "status": "passed", "attachments": [{"name": "请求URL", "source": "4792360c-d5a9-4135-91a6-d9a30059dba3-attachment.txt", "type": "text/plain"}, {"name": "请求头", "source": "ec4d4aa6-5126-46e5-8f8b-2455ab4b841f-attachment.json", "type": "application/json"}, {"name": "请求体（表单/文件）", "source": "8fe1ab81-3286-4e2e-b8cb-34c205b10498-attachment.txt", "type": "text/plain"}], "start": 1757575027244, "stop": 1757575027245}, {"name": "响应详情", "status": "passed", "attachments": [{"name": "响应状态码", "source": "15576e07-8c2d-46f7-8f16-6d4bd6eed07e-attachment.txt", "type": "text/plain"}, {"name": "响应头", "source": "13685a25-07f0-497d-bea8-ce14897dbdc5-attachment.json", "type": "application/json"}, {"name": "响应体（JSON）", "source": "07a59cc1-15cf-4a27-8e37-c4d765d493f9-attachment.json", "type": "application/json"}], "start": 1757575027930, "stop": 1757575027935}], "start": 1757575027244, "stop": 1757575030944}], "start": 1757575027244, "stop": 1757575030944}, {"name": "2. 返回校验", "status": "passed", "steps": [{"name": "断言JSON路径: $.success", "status": "passed", "attachments": [{"name": "请求URL", "source": "58b322b9-0ed8-4973-a345-2a96b5735736-attachment.txt", "type": "text/plain"}, {"name": "预期值", "source": "6548e5aa-d4d0-4da6-a93e-ab6372866051-attachment.txt", "type": "text/plain"}, {"name": "实际值", "source": "84403826-fb84-4e66-82b0-2536891e967c-attachment.txt", "type": "text/plain"}], "start": 1757575030950, "stop": 1757575030951}], "start": 1757575030944, "stop": 1757575030951}, {"name": "3. 数据校验", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 信号源分红金额应符合预期\n\n实际: 220.47\n操作: ==\n预期: 297.93\n\n", "trace": "  File \"D:\\pycharm_test\\template_model\\test_cloudTrader\\test_agent.py\", line 385, in _run_test\n    self.verify_data(\n  File \"D:\\pycharm_test\\template_model\\commons\\api_base.py\", line 1364, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "验证期间盈利是否正确", "status": "passed", "steps": [{"name": "校验: 期间盈利应符合预期", "status": "passed", "attachments": [{"name": "期间盈利详情", "source": "795f909e-baaa-4874-8566-7e811c8db1b1-attachment.attach", "type": "text/plain"}], "start": 1757575031011, "stop": 1757575031012}], "start": 1757575031011, "stop": 1757575031012}, {"name": "验证币种的转换是否正确", "status": "passed", "steps": [{"name": "校验: 币种的转换应符合预期", "status": "passed", "attachments": [{"name": "币种的转换详情,当前币种JPY，转换前：88670.88,转换后：595.87", "source": "d09439db-e4fd-4c7b-a963-19931d586784-attachment.attach", "type": "text/plain"}], "start": 1757575031012, "stop": 1757575031013}], "start": 1757575031012, "stop": 1757575031013}, {"name": "验证预计分红金额是否正确", "status": "passed", "steps": [{"name": "校验: 预计分红金额应符合预期", "status": "passed", "attachments": [{"name": "预计分红金额详情", "source": "7ef21378-c7df-4417-8973-53a560fdf86a-attachment.attach", "type": "text/plain"}], "start": 1757575031023, "stop": 1757575031024}], "start": 1757575031013, "stop": 1757575031024}, {"name": "验证分红金额是否正确", "status": "passed", "attachments": [{"name": "text/plain", "source": "59436908-12e6-437c-817f-f05b8ec22483-attachment.attach"}], "start": 1757575031032, "stop": 1757575031033}, {"name": "验证分红金额是否正确", "status": "passed", "attachments": [{"name": "text/plain", "source": "b01bbbc0-e800-42e1-a269-f51edd631e88-attachment.attach"}], "start": 1757575031043, "stop": 1757575031044}, {"name": "验证分红金额是否正确", "status": "passed", "attachments": [{"name": "text/plain", "source": "617dac78-7d1d-4423-a026-ef3c782e5e4d-attachment.attach"}], "start": 1757575031051, "stop": 1757575031053}, {"name": "验证分红金额是否正确", "status": "passed", "attachments": [{"name": "text/plain", "source": "cb5f0568-1c2c-4231-bcc5-bce804a144e9-attachment.attach"}], "start": 1757575031060, "stop": 1757575031061}, {"name": "验证信号源分红金额是否正确", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 信号源分红金额应符合预期\n\n实际: 220.47\n操作: ==\n预期: 297.93\n\n", "trace": "  File \"D:\\pycharm_test\\template_model\\test_cloudTrader\\test_agent.py\", line 385, in _run_test\n    self.verify_data(\n  File \"D:\\pycharm_test\\template_model\\commons\\api_base.py\", line 1364, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "校验: 信号源分红金额应符合预期", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 信号源分红金额应符合预期\n\n实际: 220.47\n操作: ==\n预期: 297.93\n\n", "trace": "  File \"D:\\pycharm_test\\template_model\\commons\\api_base.py\", line 1364, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "attachments": [{"name": "信号源分红金额详情", "source": "e0b6da8f-ead1-4a97-9dc8-0f2f69bbd4bf-attachment.attach", "type": "text/plain"}], "start": 1757575031073, "stop": 1757575031074}], "start": 1757575031061, "stop": 1757575031075}], "start": 1757575030962, "stop": 1757575031075}], "attachments": [{"name": "slaveRecords排序对比", "source": "686fd64e-b587-4e70-af20-ec759cf5544a-attachment.txt", "type": "text/plain"}, {"name": "log", "source": "e49546e1-eeb9-48b9-b36d-a658c22a4516-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case_params", "value": "{'_t': 1757574998, 'page': 1, 'limit': 20, 'type': '', 'status': '', 'dividendTimeBegin': '', 'dividendTimeEnd': '', 'followerUser': 'xujunhao5@163.com', 'followerTa': '2088767545', 'dividendUser': ''}"}], "start": 1757575027244, "stop": 1757575031075, "uuid": "af84b2ea-d01a-4ecc-8674-01504bca21e3", "historyId": "34c7a0698fa1b41bfe05212297b80394", "testCaseId": "c4f5e596e729da90c02808e1431f8097", "fullName": "test_cloudTrader.test_agent.Test_trader#test_agent_dividend_4level_jpy", "labels": [{"name": "feature", "value": "返佣管理-跟单分红"}, {"name": "parentSuite", "value": "test_cloudTrader"}, {"name": "suite", "value": "test_agent"}, {"name": "subSuite", "value": "Test_create"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "34960-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cloudTrader.test_agent"}]}