{"name": "返佣管理-跟单分红-4级代理-AUD币种", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 信号源分红金额应符合预期\n\n实际: 168.11\n操作: ==\n预期: 227.17", "trace": "self = <template_model.test_cloudTrader.test_agent.Test_create.Test_trader object at 0x000002187F99ADC0>\nvar_manager = <template_model.commons.variable_manager.VariableManager object at 0x000002187F99A400>\nlogged_session = <template_model.commons.session.EnvironmentSession object at 0x000002187F9BA1F0>\ncase_params = {'_t': 1757574998, 'dividendTimeBegin': '', 'dividendTimeEnd': '', 'dividendUser': '', ...}\n\n    @allure.title(\"返佣管理-跟单分红-4级代理-AUD币种\")\n    @pytest.mark.parametrize(\"case_params\", [case_params_list[5]])\n    def test_agent_dividend_4level_aud(self, var_manager, logged_session, case_params):\n>       self._run_test(case_params, logged_session)\n\ntest_cloudTrader\\test_agent.py:132: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_cloudTrader\\test_agent.py:385: in _run_test\n    self.verify_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template_model.test_cloudTrader.test_agent.Test_create.Test_trader object at 0x000002187F99ADC0>\nactual_value = 168.11, expected_value = 227.17, op = <CompareOp.EQ: '=='>\nmessage = '信号源分红金额应符合预期', attachment_name = '信号源分红金额详情'\nattachment_type = 'text/plain', use_isclose = True, rel_tol = 0.01, abs_tol = 0\n\n    def verify_data(\n            self,\n            actual_value,\n            expected_value,\n            op: CompareOp,\n            message: str,\n            attachment_name: str,\n            attachment_type=\"text/plain\",\n            use_isclose=True,  # 新增参数：是否启用math.isclose容错（默认启用）\n            rel_tol=1e-9,  # 相对容差（仅当use_isclose=True时生效）\n            abs_tol=0  # 绝对容差（仅当use_isclose=True时生效）\n    ):\n        \"\"\"\n        通用数据校验函数，支持浮点容错比较\n        :param actual_value: 实际值\n        :param expected_value: 预期值\n        :param op: 比较操作，CompareOp 枚举\n        :param message: 校验失败时的提示信息\n        :param attachment_name: Allure 附件名称\n        :param attachment_type: Allure 附件类型，默认文本\n        :param use_isclose: 是否使用math.isclose进行浮点容错比较\n        :param rel_tol: 相对容差（默认1e-9）\n        :param abs_tol: 绝对容差（默认0.0）\n        其他参数同前\n        \"\"\"\n        with allure.step(f\"校验: {message}\"):\n            result = False\n            try:\n                # 处理浮点容错比较（仅对EQ/NE操作生效）\n                if use_isclose and op in (CompareOp.EQ, CompareOp.NE):\n                    if not (isinstance(actual_value, (int, float)) and\n                            isinstance(expected_value, (int, float))):\n                        # 非数字类型自动禁用isclose，避免报错\n                        use_isclose = False\n                        logging.warning(f\"自动禁用isclose：非数字类型比较（实际值类型：{type(actual_value)}）\")\n    \n                    # 计算isclose结果\n                    is_close = math.isclose(\n                        actual_value,\n                        expected_value,\n                        rel_tol=rel_tol,\n                        abs_tol=abs_tol\n                    )\n                    # 根据操作类型取反\n                    result = is_close if op == CompareOp.EQ else not is_close\n    \n                # 普通比较逻辑\n                else:\n                    if op == CompareOp.EQ:\n                        result = actual_value == expected_value\n                    elif op == CompareOp.NE:\n                        result = actual_value != expected_value\n                    elif op == CompareOp.GT:\n                        result = actual_value > expected_value\n                    elif op == CompareOp.LT:\n                        result = actual_value < expected_value\n                    elif op == CompareOp.GE:\n                        result = actual_value >= expected_value\n                    elif op == CompareOp.LE:\n                        result = actual_value <= expected_value\n                    elif op == CompareOp.IN:\n                        result = actual_value in expected_value\n                    elif op == CompareOp.NOT_IN:\n                        result = actual_value not in expected_value\n    \n            except TypeError as e:\n                pytest.fail(\n                    f\"校验类型错误: {str(e)}\\n实际值类型: {type(actual_value)}, 预期值类型: {type(expected_value)}\")\n    \n            # 生成详细提示信息（包含容差参数）\n            detail_msg = (\n                f\"\\n实际: {actual_value}\\n\"\n                f\"操作: {op.value}\\n\"\n                f\"预期: {expected_value}\\n\"\n            )\n    \n            # 添加allure.attach，将信息写入报告\n            allure.attach(\n                detail_msg,  # 附件内容\n                name=attachment_name,  # 附件名称（来自参数）\n                attachment_type=attachment_type  # 附件类型\n            )\n    \n            if not result:\n>               pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\nE               Failed: 校验失败: 信号源分红金额应符合预期\nE               \nE               实际: 168.11\nE               操作: ==\nE               预期: 227.17\n\ncommons\\api_base.py:1364: Failed"}, "steps": [{"name": "1. 构造参数并发送GET请求", "status": "passed", "steps": [{"name": "执行 GET 请求", "status": "passed", "steps": [{"name": "请求详情", "status": "passed", "attachments": [{"name": "请求URL", "source": "6ac6ed03-8996-409e-96ad-d0e76b19a7b1-attachment.txt", "type": "text/plain"}, {"name": "请求头", "source": "72948876-2e51-405f-9c65-6246d2b6fa96-attachment.json", "type": "application/json"}, {"name": "请求体（表单/文件）", "source": "fc96e192-33bc-4e07-b7c6-a049ebd5dbc7-attachment.txt", "type": "text/plain"}], "start": 1757575023013, "stop": 1757575023016}, {"name": "响应详情", "status": "passed", "attachments": [{"name": "响应状态码", "source": "b174afc1-6318-4f57-8cf3-26ba94a00cb9-attachment.txt", "type": "text/plain"}, {"name": "响应头", "source": "221b7e53-9108-40fa-b481-972ae617ea1d-attachment.json", "type": "application/json"}, {"name": "响应体（JSON）", "source": "eeec685d-0ac5-4976-bf83-a16266113703-attachment.json", "type": "application/json"}], "start": 1757575023660, "stop": 1757575023662}], "start": 1757575023013, "stop": 1757575026669}], "start": 1757575023013, "stop": 1757575026669}, {"name": "2. 返回校验", "status": "passed", "steps": [{"name": "断言JSON路径: $.success", "status": "passed", "attachments": [{"name": "请求URL", "source": "4adbfb6d-ec6a-4b66-bf0a-d54278d8764c-attachment.txt", "type": "text/plain"}, {"name": "预期值", "source": "8751fd0d-364e-4e5e-aa5f-721c236b1677-attachment.txt", "type": "text/plain"}, {"name": "实际值", "source": "2487c85d-7e3e-4191-a904-5f316a2d7d29-attachment.txt", "type": "text/plain"}], "start": 1757575026674, "stop": 1757575026675}], "start": 1757575026669, "stop": 1757575026675}, {"name": "3. 数据校验", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 信号源分红金额应符合预期\n\n实际: 168.11\n操作: ==\n预期: 227.17\n\n", "trace": "  File \"D:\\pycharm_test\\template_model\\test_cloudTrader\\test_agent.py\", line 385, in _run_test\n    self.verify_data(\n  File \"D:\\pycharm_test\\template_model\\commons\\api_base.py\", line 1364, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "验证期间盈利是否正确", "status": "passed", "steps": [{"name": "校验: 期间盈利应符合预期", "status": "passed", "attachments": [{"name": "期间盈利详情", "source": "04cb1d76-d642-4674-9805-a33b97b16497-attachment.attach", "type": "text/plain"}], "start": 1757575026734, "stop": 1757575026735}], "start": 1757575026734, "stop": 1757575026735}, {"name": "验证币种的转换是否正确", "status": "passed", "steps": [{"name": "校验: 币种的转换应符合预期", "status": "passed", "attachments": [{"name": "币种的转换详情,当前币种AUD，转换前：726.83,转换后：454.34", "source": "4022e37d-9823-4b20-8062-3bd9898f727e-attachment.attach", "type": "text/plain"}], "start": 1757575026736, "stop": 1757575026737}], "start": 1757575026736, "stop": 1757575026737}, {"name": "验证预计分红金额是否正确", "status": "passed", "steps": [{"name": "校验: 预计分红金额应符合预期", "status": "passed", "attachments": [{"name": "预计分红金额详情", "source": "abceaff9-d212-4f8f-884e-130680b86b5c-attachment.attach", "type": "text/plain"}], "start": 1757575026745, "stop": 1757575026746}], "start": 1757575026737, "stop": 1757575026746}, {"name": "验证分红金额是否正确", "status": "passed", "attachments": [{"name": "text/plain", "source": "0718b5b9-7db6-4d76-8cc0-5c92a9f79d14-attachment.attach"}], "start": 1757575026758, "stop": 1757575026759}, {"name": "验证分红金额是否正确", "status": "passed", "attachments": [{"name": "text/plain", "source": "d36c2d23-1dbd-48a2-8470-028e7e61441d-attachment.attach"}], "start": 1757575026768, "stop": 1757575026783}, {"name": "验证分红金额是否正确", "status": "passed", "attachments": [{"name": "text/plain", "source": "276d58cf-7267-404e-9c08-1916abda9538-attachment.attach"}], "start": 1757575026792, "stop": 1757575026818}, {"name": "验证分红金额是否正确", "status": "passed", "attachments": [{"name": "text/plain", "source": "3e394e28-cf7d-4c05-bbfa-fa00b31dd6c9-attachment.attach"}], "start": 1757575026828, "stop": 1757575026829}, {"name": "验证信号源分红金额是否正确", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 信号源分红金额应符合预期\n\n实际: 168.11\n操作: ==\n预期: 227.17\n\n", "trace": "  File \"D:\\pycharm_test\\template_model\\test_cloudTrader\\test_agent.py\", line 385, in _run_test\n    self.verify_data(\n  File \"D:\\pycharm_test\\template_model\\commons\\api_base.py\", line 1364, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "校验: 信号源分红金额应符合预期", "status": "failed", "statusDetails": {"message": "Failed: 校验失败: 信号源分红金额应符合预期\n\n实际: 168.11\n操作: ==\n预期: 227.17\n\n", "trace": "  File \"D:\\pycharm_test\\template_model\\commons\\api_base.py\", line 1364, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\pycharm_test\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "attachments": [{"name": "信号源分红金额详情", "source": "5c3047cc-02fb-40f2-8aff-173615cb1162-attachment.attach", "type": "text/plain"}], "start": 1757575026838, "stop": 1757575026839}], "start": 1757575026829, "stop": 1757575026841}], "start": 1757575026679, "stop": 1757575026841}], "attachments": [{"name": "slaveRecords排序对比", "source": "f2ac96e5-619f-497b-95f5-60bca0e0e151-attachment.txt", "type": "text/plain"}, {"name": "log", "source": "54758d08-609e-4d18-93b5-1a4c2fd8e7c1-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case_params", "value": "{'_t': 1757574998, 'page': 1, 'limit': 20, 'type': '', 'status': '', 'dividendTimeBegin': '', 'dividendTimeEnd': '', 'followerUser': 'xujunhao5@163.com', 'followerTa': '2088767546', 'dividendUser': ''}"}], "start": 1757575023013, "stop": 1757575026841, "uuid": "ca63e966-d076-4070-a3c6-550dda0273e2", "historyId": "f747f376beb0e32cfbf4046f32bc0c18", "testCaseId": "e707da4e26c4d231159c405522741f0f", "fullName": "test_cloudTrader.test_agent.Test_trader#test_agent_dividend_4level_aud", "labels": [{"name": "feature", "value": "返佣管理-跟单分红"}, {"name": "parentSuite", "value": "test_cloudTrader"}, {"name": "suite", "value": "test_agent"}, {"name": "subSuite", "value": "Test_create"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "34960-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cloudTrader.test_agent"}]}