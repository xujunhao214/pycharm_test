{"name": "【多账号】完整流程：绑定→审核→订阅", "status": "failed", "statusDetails": {"message": "Failed: 账号301392106执行失败：未找到账号301392106的MT4审核ID！\n  当前审核列表中的账号：['301392106']\nassert None is not None", "trace": "self = <template_model.test_cloudTrader.test_add_create.Test_follow_batch object at 0x000001FC018B8E50>\nfollow_acc = {'account': 301392106, 'password': '0sgsgtu'}\nvar_manager = <template_model.commons.variable_manager.VariableManager object at 0x000001FC01863AF0>\nlogged_session = <template_model.commons.session.EnvironmentSession object at 0x000001FC01866C40>\n\n    @allure.title(\"【多账号】完整流程：绑定→审核→订阅\")\n    @pytest.mark.parametrize(\"follow_acc\", FOLLOW_ACCOUNT_LIST)\n    def test_follow_full_flow(self, follow_acc, var_manager, logged_session):\n        \"\"\"单个跟随者账号完整流程：绑定→提取审核ID→审核通过→清理历史订阅→订阅→校验结果\"\"\"\n        # 提取当前账号信息并校验\n        current_account = follow_acc.get(\"account\")\n        current_password = follow_acc.get(\"password\")\n        assert current_account, f\"账号数据异常，缺少'account'字段：{follow_acc}\"\n        assert current_password, f\"账号{current_account}缺少'password'字段\"\n        var_prefix = f\"follow_{current_account}\"\n        allure.dynamic.description(f\"当前执行账号：{current_account}\")\n    \n        try:\n            # 步骤1：绑定当前账号\n            with allure.step(f\"1. 绑定账号：{current_account}\"):\n                follow_user_id = var_manager.get_variable(\"follow_user_id\")\n                follow_broker_id = var_manager.get_variable(\"follow_broker_id\")\n                follow_server_id = var_manager.get_variable(\"follow_server_id\")\n    \n                bind_data = {\n                    \"userId\": follow_user_id,\n                    \"brokerId\": follow_broker_id,\n                    \"serverId\": follow_server_id,\n                    \"account\": current_account,\n                    \"password\": current_password,\n                    \"display\": \"PRIVATE\",\n                    \"passwordType\": \"0\",\n                    \"subscribeFee\": \"0\",\n                    \"type\": \"SLAVE_REAL\",\n                    \"platform\": \"4\"\n                }\n    \n                bind_response = self.send_post_request(\n                    logged_session,\n                    '/blockchain/account/bind',\n                    json_data=bind_data\n                )\n                self.assert_json_value(\n                    bind_response,\n                    \"$.success\",\n                    True,\n                    f\"账号{current_account}绑定失败\"\n                )\n                allure.attach(\n                    json.dumps(bind_data, indent=2, ensure_ascii=False),\n                    name=f\"{current_account}绑定请求数据\",\n                    attachment_type=allure.attachment_type.JSON\n                )\n                logging.info(f\"账号{current_account}绑定成功\")\n    \n            with allure.step(f\"进行刷新\"):\n                with allure.step(\"1. 发送请求\"):\n                    params = {\n                        \"_t\": current_timestamp_seconds,\n                        \"column\": \"id\",\n                        \"order\": \"desc\",\n                        \"pageNo\": 1,\n                        \"pageSize\": 20,\n                        \"status\": \"VERIFICATION,PASS,PENDING,ERROR\",\n                        \"type\": \"SLAVE_REAL\"\n                    }\n                    self.send_get_request(\n                        logged_session,\n                        '/online/cgform/api/getData/2c9a814a81d3a91b0181e04a36e00001',\n                        params=params\n                    )\n    \n            # 步骤2：提取当前账号MT4审核ID\n            with allure.step(f\"2. 提取{current_account}的MT4审核ID\"):\n                params = {\n                    \"_t\": current_timestamp_seconds,\n                    \"column\": \"id\",\n                    \"order\": \"desc\",\n                    \"pageNo\": 1,\n                    \"pageSize\": 20,\n                    \"superQueryMatchType\": \"and\",\n                    \"status\": \"PENDING,VERIFICATION\"\n                }\n                pass_response = self.send_get_request(\n                    logged_session,\n                    '/online/cgform/api/getData/2c9a814a81d3a91b0181d3a91b250000',\n                    params=params\n                )\n    \n                self.assert_json_value(\n                    pass_response,\n                    \"$.success\",\n                    True,\n                    f\"查询{current_account}MT4审核记录失败\"\n                )\n                all_pass_records = self.json_utils.extract(\n                    data=pass_response.json(),\n                    expression=\"$.result.records[*]\",\n                    multi_match=True,\n                    default=[]\n                )\n                existing_accounts = [r.get(\"account\") for r in all_pass_records if r.get(\"account\")]\n    \n                current_pass_id = None\n                for record in all_pass_records:\n                    if record.get(\"account\") == current_account:\n                        current_pass_id = record.get(\"id\")\n                        break\n    \n>               assert current_pass_id is not None, (\n                    f\"未找到账号{current_account}的MT4审核ID！\"\n                    f\"\\n当前审核列表中的账号：{existing_accounts}\"\n                )\nE               AssertionError: 未找到账号301392106的MT4审核ID！\nE                 当前审核列表中的账号：['301392106']\nE               assert None is not None\n\ntest_cloudTrader\\test_add_create.py:292: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <template_model.test_cloudTrader.test_add_create.Test_follow_batch object at 0x000001FC018B8E50>\nfollow_acc = {'account': 301392106, 'password': '0sgsgtu'}\nvar_manager = <template_model.commons.variable_manager.VariableManager object at 0x000001FC01863AF0>\nlogged_session = <template_model.commons.session.EnvironmentSession object at 0x000001FC01866C40>\n\n    @allure.title(\"【多账号】完整流程：绑定→审核→订阅\")\n    @pytest.mark.parametrize(\"follow_acc\", FOLLOW_ACCOUNT_LIST)\n    def test_follow_full_flow(self, follow_acc, var_manager, logged_session):\n        \"\"\"单个跟随者账号完整流程：绑定→提取审核ID→审核通过→清理历史订阅→订阅→校验结果\"\"\"\n        # 提取当前账号信息并校验\n        current_account = follow_acc.get(\"account\")\n        current_password = follow_acc.get(\"password\")\n        assert current_account, f\"账号数据异常，缺少'account'字段：{follow_acc}\"\n        assert current_password, f\"账号{current_account}缺少'password'字段\"\n        var_prefix = f\"follow_{current_account}\"\n        allure.dynamic.description(f\"当前执行账号：{current_account}\")\n    \n        try:\n            # 步骤1：绑定当前账号\n            with allure.step(f\"1. 绑定账号：{current_account}\"):\n                follow_user_id = var_manager.get_variable(\"follow_user_id\")\n                follow_broker_id = var_manager.get_variable(\"follow_broker_id\")\n                follow_server_id = var_manager.get_variable(\"follow_server_id\")\n    \n                bind_data = {\n                    \"userId\": follow_user_id,\n                    \"brokerId\": follow_broker_id,\n                    \"serverId\": follow_server_id,\n                    \"account\": current_account,\n                    \"password\": current_password,\n                    \"display\": \"PRIVATE\",\n                    \"passwordType\": \"0\",\n                    \"subscribeFee\": \"0\",\n                    \"type\": \"SLAVE_REAL\",\n                    \"platform\": \"4\"\n                }\n    \n                bind_response = self.send_post_request(\n                    logged_session,\n                    '/blockchain/account/bind',\n                    json_data=bind_data\n                )\n                self.assert_json_value(\n                    bind_response,\n                    \"$.success\",\n                    True,\n                    f\"账号{current_account}绑定失败\"\n                )\n                allure.attach(\n                    json.dumps(bind_data, indent=2, ensure_ascii=False),\n                    name=f\"{current_account}绑定请求数据\",\n                    attachment_type=allure.attachment_type.JSON\n                )\n                logging.info(f\"账号{current_account}绑定成功\")\n    \n            with allure.step(f\"进行刷新\"):\n                with allure.step(\"1. 发送请求\"):\n                    params = {\n                        \"_t\": current_timestamp_seconds,\n                        \"column\": \"id\",\n                        \"order\": \"desc\",\n                        \"pageNo\": 1,\n                        \"pageSize\": 20,\n                        \"status\": \"VERIFICATION,PASS,PENDING,ERROR\",\n                        \"type\": \"SLAVE_REAL\"\n                    }\n                    self.send_get_request(\n                        logged_session,\n                        '/online/cgform/api/getData/2c9a814a81d3a91b0181e04a36e00001',\n                        params=params\n                    )\n    \n            # 步骤2：提取当前账号MT4审核ID\n            with allure.step(f\"2. 提取{current_account}的MT4审核ID\"):\n                params = {\n                    \"_t\": current_timestamp_seconds,\n                    \"column\": \"id\",\n                    \"order\": \"desc\",\n                    \"pageNo\": 1,\n                    \"pageSize\": 20,\n                    \"superQueryMatchType\": \"and\",\n                    \"status\": \"PENDING,VERIFICATION\"\n                }\n                pass_response = self.send_get_request(\n                    logged_session,\n                    '/online/cgform/api/getData/2c9a814a81d3a91b0181d3a91b250000',\n                    params=params\n                )\n    \n                self.assert_json_value(\n                    pass_response,\n                    \"$.success\",\n                    True,\n                    f\"查询{current_account}MT4审核记录失败\"\n                )\n                all_pass_records = self.json_utils.extract(\n                    data=pass_response.json(),\n                    expression=\"$.result.records[*]\",\n                    multi_match=True,\n                    default=[]\n                )\n                existing_accounts = [r.get(\"account\") for r in all_pass_records if r.get(\"account\")]\n    \n                current_pass_id = None\n                for record in all_pass_records:\n                    if record.get(\"account\") == current_account:\n                        current_pass_id = record.get(\"id\")\n                        break\n    \n                assert current_pass_id is not None, (\n                    f\"未找到账号{current_account}的MT4审核ID！\"\n                    f\"\\n当前审核列表中的账号：{existing_accounts}\"\n                )\n                var_manager.set_runtime_variable(f\"{var_prefix}_pass_id\", current_pass_id)\n                allure.attach(\n                    str(current_pass_id),\n                    name=f\"{current_account}MT4审核ID\",\n                    attachment_type=allure.attachment_type.TEXT\n                )\n    \n            # 步骤3：MT4审核通过\n            with allure.step(f\"3. {current_account}的MT4审核通过\"):\n                follow_jeecgrow_key = var_manager.get_variable(\"follow_jeecgrow_key\")\n                vpsrunIpAddr = var_manager.get_variable(\"vpsrunIpAddr\")\n                current_pass_id = var_manager.get_variable(f\"{var_prefix}_pass_id\")\n    \n                pass_data = {\n                    \"pass\": True,\n                    \"commission\": False,\n                    \"planId\": follow_jeecgrow_key,\n                    \"toSynDate\": DATETIME_NOW,\n                    \"bindIpAddr\": vpsrunIpAddr\n                }\n    \n                audit_response = self.send_post_request(\n                    logged_session,\n                    f'/blockchain/account/pass/{current_pass_id}',\n                    json_data=pass_data\n                )\n                self.assert_json_value(\n                    audit_response,\n                    \"$.success\",\n                    True,\n                    f\"账号{current_account}MT4审核通过失败\"\n                )\n                allure.attach(\n                    json.dumps(pass_data, indent=2, ensure_ascii=False),\n                    name=f\"{current_account}审核请求数据\",\n                    attachment_type=allure.attachment_type.JSON\n                )\n    \n            # 步骤4：清理历史订阅记录\n            with allure.step(f\"4. 清理{current_account}的历史订阅记录\"):\n                params = {\n                    \"_t\": current_timestamp_seconds,\n                    \"account\": current_account,\n                    \"pageNo\": 1,\n                    \"pageSize\": 100,\n                    \"status\": \"NORMAL,AUDIT\"\n                }\n                clean_response = self.send_get_request(\n                    logged_session,\n                    '/online/cgreport/api/getColumnsAndData/1560189381093109761',\n                    params=params\n                )\n    \n                self.assert_json_value(\n                    clean_response,\n                    \"$.success\",\n                    True,\n                    f\"查询{current_account}历史订阅记录失败\"\n                )\n                history_records = self.json_utils.extract(\n                    data=clean_response.json(),\n                    expression=\"$.result.data.records[*]\",\n                    multi_match=True,\n                    default=[]\n                )\n    \n                if history_records:\n                    delete_count = 0\n                    for record in history_records:\n                        record_id = record.get(\"id\")\n                        if record_id:\n                            delete_response = self.send_delete_request(\n                                logged_session,\n                                '/blockchain/master-slave/deletePa',\n                                json_data={\"id\": record_id}\n                            )\n                            self.assert_json_value(\n                                delete_response,\n                                \"$.success\",\n                                True,\n                                f\"删除{current_account}历史订阅记录（ID：{record_id}）失败\"\n                            )\n                            delete_count += 1\n                    allure.attach(f\"成功删除{delete_count}条记录\", name=f\"{current_account}清理结果\")\n                else:\n                    allure.attach(\"无历史记录\", name=f\"{current_account}清理结果\")\n    \n            # 步骤5：订阅跟单\n            with allure.step(f\"5. 进行刷新\"):\n                with allure.step(\"1. 发送请求\"):\n                    params = {\n                        \"_t\": current_timestamp_seconds,\n                        \"column\": \"id\",\n                        \"order\": \"desc\",\n                        \"pageNo\": 1,\n                        \"pageSize\": 20,\n                        \"status\": \"VERIFICATION,PASS,PENDING,ERROR\",\n                        \"type\": \"SLAVE_REAL\"\n                    }\n                    self.send_get_request(\n                        logged_session,\n                        '/online/cgform/api/getData/2c9a814a81d3a91b0181e04a36e00001',\n                        params=params\n                    )\n    \n            # 步骤6：订阅跟单\n            with allure.step(f\"6. {current_account}订阅跟单\"):\n                trader_pass_id = var_manager.get_variable(\"trader_pass_id\")\n                current_pass_id = var_manager.get_variable(f\"{var_prefix}_pass_id\")\n                assert trader_pass_id, \"主账号trader_pass_id未配置\"\n    \n                subscribe_data = {\n                    \"masterId\": trader_pass_id,\n                    \"slaveId\": current_pass_id,\n                    \"direction\": \"FORWARD\",\n                    \"followingMode\": \"2\",\n                    \"fixedProportion\": \"100\",\n                    \"fixedLots\": None,\n                    \"order\": {\"paymentAccount\": \"\", \"paymentMethod\": \"\"},\n                }\n    \n                subscribe_response = self.send_post_request(\n                    logged_session,\n                    '/blockchain/master-slave/admin/add',\n                    json_data=subscribe_data\n                )\n                self.assert_json_value(\n                    subscribe_response,\n                    \"$.success\",\n                    True,\n                    f\"{current_account}订阅跟单失败\"\n                )\n                allure.attach(\n                    json.dumps(subscribe_data, indent=2),\n                    name=f\"{current_account}订阅数据\",\n                    attachment_type=allure.attachment_type.JSON\n                )\n    \n            # 步骤7：校验订阅结果\n            with allure.step(f\"7. 校验{current_account}的订阅记录\"):\n                params = {\n                    \"_t\": current_timestamp_seconds,\n                    \"account\": current_account,\n                    \"pageNo\": 1,\n                    \"pageSize\": 100,\n                    \"status\": \"NORMAL,AUDIT\"\n                }\n                verify_response = self.send_get_request(\n                    logged_session,\n                    '/online/cgreport/api/getColumnsAndData/1560189381093109761',\n                    params=params\n                )\n    \n                self.assert_json_value(\n                    verify_response,\n                    \"$.success\",\n                    True,\n                    f\"校验{current_account}订阅记录失败\"\n                )\n                result = self.json_utils.extract(\n                    verify_response.json(),\n                    \"$.result.data.records[*]\",\n                    multi_match=True,\n                    default=[]\n                )\n    \n                if not result:\n                    pytest.fail(f\"{current_account}未查询到订阅记录\")\n                else:\n                    follow_jeecg_rowkey = self.json_utils.extract(\n                        verify_response.json(),\n                        \"$.result.data.records[0].jeecg_row_key\"\n                    )\n                    var_manager.set_runtime_variable(f\"{var_prefix}_jeecg_rowkey\", follow_jeecg_rowkey)\n                    allure.attach(\"订阅记录存在\", name=f\"{current_account}订阅结果\")\n                    logging.info(f\"账号{current_account}订阅校验成功\")\n    \n        except Exception as e:\n            error_msg = f\"账号{current_account}执行失败：{str(e)[:200]}\"\n            allure.attach(error_msg, name=f\"{current_account}失败详情\",\n                          attachment_type=allure.attachment_type.TEXT)\n            logging.error(error_msg, exc_info=True)\n>           pytest.fail(error_msg)\nE           Failed: 账号301392106执行失败：未找到账号301392106的MT4审核ID！\nE             当前审核列表中的账号：['301392106']\nE           assert None is not None\n\ntest_cloudTrader\\test_add_create.py:478: Failed"}, "description": "当前执行账号：301392106", "steps": [{"name": "1. 绑定账号：301392106", "status": "passed", "steps": [{"name": "执行 POST 请求", "status": "passed", "steps": [{"name": "请求详情", "status": "passed", "attachments": [{"name": "请求URL", "source": "82478f80-344b-4fb0-8290-1d5f9264f5a6-attachment.txt", "type": "text/plain"}, {"name": "请求头", "source": "c730eec2-c4e2-45d0-a669-18a5dc804daa-attachment.json", "type": "application/json"}, {"name": "请求体（JSON）", "source": "fa32c99e-fb4d-47c5-ad9e-20a6c40411f9-attachment.json", "type": "application/json"}], "start": 1758858339285, "stop": 1758858339286}, {"name": "响应详情", "status": "passed", "attachments": [{"name": "响应状态码", "source": "c6fc6814-c08a-43a8-8e10-b40bc1bea7ad-attachment.txt", "type": "text/plain"}, {"name": "响应头", "source": "fe8edc3b-4fc7-4bd9-a0c5-2f40cef1b059-attachment.json", "type": "application/json"}, {"name": "响应体（JSON）", "source": "6001d369-10a9-4076-b9ec-3c68d4816e03-attachment.json", "type": "application/json"}], "start": 1758858342915, "stop": 1758858342917}], "start": 1758858339285, "stop": 1758858345923}, {"name": "断言JSON路径: $.success", "status": "passed", "attachments": [{"name": "请求URL", "source": "57328753-5f5a-4e97-adf6-49c3662f8208-attachment.txt", "type": "text/plain"}, {"name": "预期值", "source": "d87d79a2-5234-4e80-a807-c12819c1af27-attachment.txt", "type": "text/plain"}, {"name": "实际值", "source": "ad51f462-5958-4750-aa65-3c87c1619aa8-attachment.txt", "type": "text/plain"}], "start": 1758858345927, "stop": 1758858345929}], "attachments": [{"name": "301392106绑定请求数据", "source": "c3667cd7-846a-4196-9148-069f075817f5-attachment.json", "type": "application/json"}], "start": 1758858339285, "stop": 1758858345929}, {"name": "进行刷新", "status": "passed", "steps": [{"name": "1. 发送请求", "status": "passed", "steps": [{"name": "执行 GET 请求", "status": "passed", "steps": [{"name": "请求详情", "status": "passed", "attachments": [{"name": "请求URL", "source": "62a53a54-b4e7-499e-877c-2ece018c9ba3-attachment.txt", "type": "text/plain"}, {"name": "请求头", "source": "4451820c-a7da-4803-bbd3-3b0d20b73182-attachment.json", "type": "application/json"}, {"name": "请求体（表单/文件）", "source": "59c3fb22-49d0-42fd-aa98-a9aebbfbc27c-attachment.txt", "type": "text/plain"}], "start": 1758858345929, "stop": 1758858345930}, {"name": "响应详情", "status": "passed", "attachments": [{"name": "响应状态码", "source": "c0c6f3e9-9131-404e-8eea-5922f10f692d-attachment.txt", "type": "text/plain"}, {"name": "响应头", "source": "dca53bb8-8f98-4682-a7f2-2a9039a46841-attachment.json", "type": "application/json"}, {"name": "响应体（JSON）", "source": "f7ddef9f-572d-4524-a62a-55fc4fcb4683-attachment.json", "type": "application/json"}], "start": 1758858346556, "stop": 1758858346559}], "start": 1758858345929, "stop": 1758858349568}], "start": 1758858345929, "stop": 1758858349568}], "start": 1758858345929, "stop": 1758858349568}, {"name": "2. 提取301392106的MT4审核ID", "status": "failed", "statusDetails": {"message": "AssertionError: 未找到账号301392106的MT4审核ID！\n  当前审核列表中的账号：['301392106']\nassert None is not None\n", "trace": "  File \"D:\\pycharm_test\\template_model\\test_cloudTrader\\test_add_create.py\", line 292, in test_follow_full_flow\n    assert current_pass_id is not None, (\n"}, "steps": [{"name": "执行 GET 请求", "status": "passed", "steps": [{"name": "请求详情", "status": "passed", "attachments": [{"name": "请求URL", "source": "8d775188-e749-4d39-900e-a6b4f24f484e-attachment.txt", "type": "text/plain"}, {"name": "请求头", "source": "71c154f0-7062-48b8-9d94-e61ea44704f2-attachment.json", "type": "application/json"}, {"name": "请求体（表单/文件）", "source": "51f5e67c-172b-4d0f-8442-d9fc16b2615d-attachment.txt", "type": "text/plain"}], "start": 1758858349568, "stop": 1758858349569}, {"name": "响应详情", "status": "passed", "attachments": [{"name": "响应状态码", "source": "3380c2e6-556d-497f-a488-8f4de518fff8-attachment.txt", "type": "text/plain"}, {"name": "响应头", "source": "192a737f-20e7-43ff-882e-9520ab78525a-attachment.json", "type": "application/json"}, {"name": "响应体（JSON）", "source": "2a8e151a-4d54-4ce9-bd53-fc7ca9b727d1-attachment.json", "type": "application/json"}], "start": 1758858350149, "stop": 1758858350151}], "start": 1758858349568, "stop": 1758858353152}, {"name": "断言JSON路径: $.success", "status": "passed", "attachments": [{"name": "请求URL", "source": "34b043a0-da69-435c-a10b-7ae5b84e39b3-attachment.txt", "type": "text/plain"}, {"name": "预期值", "source": "ca85dfd5-2884-41e9-846b-b876d15389c5-attachment.txt", "type": "text/plain"}, {"name": "实际值", "source": "c4314242-e33f-4a45-8376-f86bee27aba3-attachment.txt", "type": "text/plain"}], "start": 1758858353158, "stop": 1758858353159}], "start": 1758858349568, "stop": 1758858353163}], "attachments": [{"name": "301392106失败详情", "source": "b9900f15-d992-46de-842d-6f9295ca162e-attachment.txt", "type": "text/plain"}, {"name": "log", "source": "531c9148-f464-4f14-8b1f-90527ab3796e-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "follow_acc", "value": "{'account': 301392106, 'password': '0sgsgtu'}"}], "start": 1758858339285, "stop": 1758858353164, "uuid": "891a8d5c-a734-4534-a2e6-fa00e1c38d30", "historyId": "336abd9b39e9ff5167e605d2af87e932", "testCaseId": "16f0c0be53966fe8d9c879d576145561", "fullName": "test_cloudTrader.test_add_create.Test_follow_batch#test_follow_full_flow", "labels": [{"name": "story", "value": "绑定跟随者账号（多账号批量版）"}, {"name": "parentSuite", "value": "test_cloudTrader"}, {"name": "suite", "value": "test_add_create"}, {"name": "subSuite", "value": "Test_follow_batch"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "34900-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cloudTrader.test_add_create"}]}