{"uid":"32bb946c41258e2e","name":"跟单管理-开仓日志-开平仓明细-开仓后","fullName":"test_cloudTrader.test_oac_number.Test_openandclouseall.Test_orderseng2#test_query_opentrader_detail","historyId":"bac6c01844414128a0932ed13de81700","time":{"start":1758709294396,"stop":1758709298098,"duration":3702},"description":"\n    ### 测试说明\n    - 前置条件：有喊单账号、跟单账号，跟单已经和喊单有订阅关系\n      1. 修改订阅信息，跟随方式-按手数-0.5\n      2. MT4进行登录，然后进行开仓，总手数0.01\n      3. 账号管理-持仓订单-喊单和跟单数据校验\n      4. 跟单管理-开仓日志-喊单和跟单数据校验\n      5. 跟单管理-VPS管理-喊单和跟单数据校验\n      6. MT4进行平仓\n      7.账号管理-历史订单-喊单和跟单数据校验\n      8.跟单管理-开仓日志-喊单和跟单数据校验\n    - 预期结果：喊单和跟单数据校验正确\n    ","descriptionHtml":"<pre><code>### 测试说明\n- 前置条件：有喊单账号、跟单账号，跟单已经和喊单有订阅关系\n  1. 修改订阅信息，跟随方式-按手数-0.5\n  2. MT4进行登录，然后进行开仓，总手数0.01\n  3. 账号管理-持仓订单-喊单和跟单数据校验\n  4. 跟单管理-开仓日志-喊单和跟单数据校验\n  5. 跟单管理-VPS管理-喊单和跟单数据校验\n  6. MT4进行平仓\n  7.账号管理-历史订单-喊单和跟单数据校验\n  8.跟单管理-开仓日志-喊单和跟单数据校验\n- 预期结果：喊单和跟单数据校验正确\n</code></pre>\n","status":"failed","statusMessage":"Failed: 校验失败: 第 1 条记录的订单号应为86689355\n\n实际: 86689355\n操作: ==\n预期: None","statusTrace":"self = <template_model.test_cloudTrader.test_oac_number.Test_openandclouseall.Test_orderseng2 object at 0x0000018383F1EAD0>\nvar_manager = <template_model.commons.variable_manager.VariableManager object at 0x0000018383F266D0>\nlogged_session = <template_model.commons.session.EnvironmentSession object at 0x0000018383F11DD0>\n\n    @allure.title(\"跟单管理-开仓日志-开平仓明细-开仓后\")\n    def test_query_opentrader_detail(self, var_manager, logged_session):\n        with allure.step(\"1. 发送请求\"):\n            ticket_open = var_manager.get_variable(\"ticket_open\")\n            params = {\n                \"_t\": current_timestamp_seconds,\n                \"pageNo\": 1,\n                \"pageSize\": 20,\n                \"self_master_ticket\": ticket_open\n            }\n            response = self.send_get_request(\n                logged_session,\n                '/online/cgreport/api/getColumnsAndData/1568899025974796289',\n                params=params\n            )\n    \n        with allure.step(\"2. 返回校验\"):\n            self.assert_json_value(\n                response,\n                \"$.success\",\n                True,\n                \"响应success字段应为true\"\n            )\n    \n        with allure.step(f\"3. 查询校验\"):\n            slave_ticket_list = self.json_utils.extract(\n                response.json(),\n                \"$.result.data.records[0].slave_ticket\",\n                default=[],\n                multi_match=True\n            )\n            follow_account = var_manager.get_variable(\"follow_account\")\n            if not slave_ticket_list:\n                attach_body = f\"跟单账号：{follow_account}，返回的slave_ticket列表为空（暂无数据）\"\n            else:\n                attach_body = f\"跟单账号：{follow_account}，返回 {len(slave_ticket_list)} 条记录\"\n    \n            allure.attach(\n                body=attach_body,\n                name=f\"跟单账号：{follow_account}结果\",\n                attachment_type=\"text/plain\"\n            )\n    \n            for idx, slave_ticket in enumerate(slave_ticket_list):\n                order_no = var_manager.get_variable(\"order_no\")\n>               self.verify_data(\n                    actual_value=slave_ticket,\n                    expected_value=order_no,\n                    op=CompareOp.EQ,\n                    use_isclose=False,\n                    message=f\"第 {idx + 1} 条记录的订单号应为{slave_ticket}\",\n                    attachment_name=f\"跟单账户:{follow_account}第 {idx + 1} 条记录校验\"\n                )\n\ntest_cloudTrader\\test_oac_number.py:1625: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template_model.test_cloudTrader.test_oac_number.Test_openandclouseall.Test_orderseng2 object at 0x0000018383F1EAD0>\nactual_value = 86689355, expected_value = None, op = <CompareOp.EQ: '=='>\nmessage = '第 1 条记录的订单号应为86689355', attachment_name = '跟单账户:301390787第 1 条记录校验'\nattachment_type = 'text/plain', use_isclose = False, rel_tol = 1e-09\nabs_tol = 0\n\n    def verify_data(\n            self,\n            actual_value,\n            expected_value,\n            op: CompareOp,\n            message: str,\n            attachment_name: str,\n            attachment_type=\"text/plain\",\n            use_isclose=True,  # 新增参数：是否启用math.isclose容错（默认启用）\n            rel_tol=1e-9,  # 相对容差（仅当use_isclose=True时生效）\n            abs_tol=0  # 绝对容差（仅当use_isclose=True时生效）\n    ):\n        \"\"\"\n        通用数据校验函数，支持浮点容错比较\n        :param actual_value: 实际值\n        :param expected_value: 预期值\n        :param op: 比较操作，CompareOp 枚举\n        :param message: 校验失败时的提示信息\n        :param attachment_name: Allure 附件名称\n        :param attachment_type: Allure 附件类型，默认文本\n        :param use_isclose: 是否使用math.isclose进行浮点容错比较\n        :param rel_tol: 相对容差（默认1e-9）\n        :param abs_tol: 绝对容差（默认0.0）\n        其他参数同前\n        \"\"\"\n        with allure.step(f\"校验: {message}\"):\n            result = False\n            try:\n                # 处理浮点容错比较（仅对EQ/NE操作生效）\n                if use_isclose and op in (CompareOp.EQ, CompareOp.NE):\n                    if not (isinstance(actual_value, (int, float)) and\n                            isinstance(expected_value, (int, float))):\n                        # 非数字类型自动禁用isclose，避免报错\n                        use_isclose = False\n                        logging.warning(f\"自动禁用isclose：非数字类型比较（实际值类型：{type(actual_value)}）\")\n    \n                    # 计算isclose结果\n                    is_close = math.isclose(\n                        actual_value,\n                        expected_value,\n                        rel_tol=rel_tol,\n                        abs_tol=abs_tol\n                    )\n                    # 根据操作类型取反\n                    result = is_close if op == CompareOp.EQ else not is_close\n    \n                # 普通比较逻辑\n                else:\n                    if op == CompareOp.EQ:\n                        result = actual_value == expected_value\n                    elif op == CompareOp.NE:\n                        result = actual_value != expected_value\n                    elif op == CompareOp.GT:\n                        result = actual_value > expected_value\n                    elif op == CompareOp.LT:\n                        result = actual_value < expected_value\n                    elif op == CompareOp.GE:\n                        result = actual_value >= expected_value\n                    elif op == CompareOp.LE:\n                        result = actual_value <= expected_value\n                    elif op == CompareOp.IN:\n                        result = actual_value in expected_value\n                    elif op == CompareOp.NOT_IN:\n                        result = actual_value not in expected_value\n    \n            except TypeError as e:\n                pytest.fail(\n                    f\"校验类型错误: {str(e)}\\n实际值类型: {type(actual_value)}, 预期值类型: {type(expected_value)}\")\n    \n            # 生成详细提示信息（包含容差参数）\n            detail_msg = (\n                f\"\\n实际: {actual_value}\\n\"\n                f\"操作: {op.value}\\n\"\n                f\"预期: {expected_value}\\n\"\n            )\n    \n            # 添加allure.attach，将信息写入报告\n            allure.attach(\n                detail_msg,  # 附件内容\n                name=attachment_name,  # 附件名称（来自参数）\n                attachment_type=attachment_type  # 附件类型\n            )\n    \n            if not result:\n>               pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\nE               Failed: 校验失败: 第 1 条记录的订单号应为86689355\nE               \nE               实际: 86689355\nE               操作: ==\nE               预期: None\n\ncommons\\api_base.py:1362: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":3,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"\n    ### 测试说明\n    - 前置条件：有喊单账号、跟单账号，跟单已经和喊单有订阅关系\n      1. 修改订阅信息，跟随方式-按手数-0.5\n      2. MT4进行登录，然后进行开仓，总手数0.01\n      3. 账号管理-持仓订单-喊单和跟单数据校验\n      4. 跟单管理-开仓日志-喊单和跟单数据校验\n      5. 跟单管理-VPS管理-喊单和跟单数据校验\n      6. MT4进行平仓\n      7.账号管理-历史订单-喊单和跟单数据校验\n      8.跟单管理-开仓日志-喊单和跟单数据校验\n    - 预期结果：喊单和跟单数据校验正确\n    ","status":"failed","statusMessage":"Failed: 校验失败: 第 1 条记录的订单号应为86689355\n\n实际: 86689355\n操作: ==\n预期: None","statusTrace":"self = <template_model.test_cloudTrader.test_oac_number.Test_openandclouseall.Test_orderseng2 object at 0x0000018383F1EAD0>\nvar_manager = <template_model.commons.variable_manager.VariableManager object at 0x0000018383F266D0>\nlogged_session = <template_model.commons.session.EnvironmentSession object at 0x0000018383F11DD0>\n\n    @allure.title(\"跟单管理-开仓日志-开平仓明细-开仓后\")\n    def test_query_opentrader_detail(self, var_manager, logged_session):\n        with allure.step(\"1. 发送请求\"):\n            ticket_open = var_manager.get_variable(\"ticket_open\")\n            params = {\n                \"_t\": current_timestamp_seconds,\n                \"pageNo\": 1,\n                \"pageSize\": 20,\n                \"self_master_ticket\": ticket_open\n            }\n            response = self.send_get_request(\n                logged_session,\n                '/online/cgreport/api/getColumnsAndData/1568899025974796289',\n                params=params\n            )\n    \n        with allure.step(\"2. 返回校验\"):\n            self.assert_json_value(\n                response,\n                \"$.success\",\n                True,\n                \"响应success字段应为true\"\n            )\n    \n        with allure.step(f\"3. 查询校验\"):\n            slave_ticket_list = self.json_utils.extract(\n                response.json(),\n                \"$.result.data.records[0].slave_ticket\",\n                default=[],\n                multi_match=True\n            )\n            follow_account = var_manager.get_variable(\"follow_account\")\n            if not slave_ticket_list:\n                attach_body = f\"跟单账号：{follow_account}，返回的slave_ticket列表为空（暂无数据）\"\n            else:\n                attach_body = f\"跟单账号：{follow_account}，返回 {len(slave_ticket_list)} 条记录\"\n    \n            allure.attach(\n                body=attach_body,\n                name=f\"跟单账号：{follow_account}结果\",\n                attachment_type=\"text/plain\"\n            )\n    \n            for idx, slave_ticket in enumerate(slave_ticket_list):\n                order_no = var_manager.get_variable(\"order_no\")\n>               self.verify_data(\n                    actual_value=slave_ticket,\n                    expected_value=order_no,\n                    op=CompareOp.EQ,\n                    use_isclose=False,\n                    message=f\"第 {idx + 1} 条记录的订单号应为{slave_ticket}\",\n                    attachment_name=f\"跟单账户:{follow_account}第 {idx + 1} 条记录校验\"\n                )\n\ntest_cloudTrader\\test_oac_number.py:1625: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template_model.test_cloudTrader.test_oac_number.Test_openandclouseall.Test_orderseng2 object at 0x0000018383F1EAD0>\nactual_value = 86689355, expected_value = None, op = <CompareOp.EQ: '=='>\nmessage = '第 1 条记录的订单号应为86689355', attachment_name = '跟单账户:301390787第 1 条记录校验'\nattachment_type = 'text/plain', use_isclose = False, rel_tol = 1e-09\nabs_tol = 0\n\n    def verify_data(\n            self,\n            actual_value,\n            expected_value,\n            op: CompareOp,\n            message: str,\n            attachment_name: str,\n            attachment_type=\"text/plain\",\n            use_isclose=True,  # 新增参数：是否启用math.isclose容错（默认启用）\n            rel_tol=1e-9,  # 相对容差（仅当use_isclose=True时生效）\n            abs_tol=0  # 绝对容差（仅当use_isclose=True时生效）\n    ):\n        \"\"\"\n        通用数据校验函数，支持浮点容错比较\n        :param actual_value: 实际值\n        :param expected_value: 预期值\n        :param op: 比较操作，CompareOp 枚举\n        :param message: 校验失败时的提示信息\n        :param attachment_name: Allure 附件名称\n        :param attachment_type: Allure 附件类型，默认文本\n        :param use_isclose: 是否使用math.isclose进行浮点容错比较\n        :param rel_tol: 相对容差（默认1e-9）\n        :param abs_tol: 绝对容差（默认0.0）\n        其他参数同前\n        \"\"\"\n        with allure.step(f\"校验: {message}\"):\n            result = False\n            try:\n                # 处理浮点容错比较（仅对EQ/NE操作生效）\n                if use_isclose and op in (CompareOp.EQ, CompareOp.NE):\n                    if not (isinstance(actual_value, (int, float)) and\n                            isinstance(expected_value, (int, float))):\n                        # 非数字类型自动禁用isclose，避免报错\n                        use_isclose = False\n                        logging.warning(f\"自动禁用isclose：非数字类型比较（实际值类型：{type(actual_value)}）\")\n    \n                    # 计算isclose结果\n                    is_close = math.isclose(\n                        actual_value,\n                        expected_value,\n                        rel_tol=rel_tol,\n                        abs_tol=abs_tol\n                    )\n                    # 根据操作类型取反\n                    result = is_close if op == CompareOp.EQ else not is_close\n    \n                # 普通比较逻辑\n                else:\n                    if op == CompareOp.EQ:\n                        result = actual_value == expected_value\n                    elif op == CompareOp.NE:\n                        result = actual_value != expected_value\n                    elif op == CompareOp.GT:\n                        result = actual_value > expected_value\n                    elif op == CompareOp.LT:\n                        result = actual_value < expected_value\n                    elif op == CompareOp.GE:\n                        result = actual_value >= expected_value\n                    elif op == CompareOp.LE:\n                        result = actual_value <= expected_value\n                    elif op == CompareOp.IN:\n                        result = actual_value in expected_value\n                    elif op == CompareOp.NOT_IN:\n                        result = actual_value not in expected_value\n    \n            except TypeError as e:\n                pytest.fail(\n                    f\"校验类型错误: {str(e)}\\n实际值类型: {type(actual_value)}, 预期值类型: {type(expected_value)}\")\n    \n            # 生成详细提示信息（包含容差参数）\n            detail_msg = (\n                f\"\\n实际: {actual_value}\\n\"\n                f\"操作: {op.value}\\n\"\n                f\"预期: {expected_value}\\n\"\n            )\n    \n            # 添加allure.attach，将信息写入报告\n            allure.attach(\n                detail_msg,  # 附件内容\n                name=attachment_name,  # 附件名称（来自参数）\n                attachment_type=attachment_type  # 附件类型\n            )\n    \n            if not result:\n>               pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\nE               Failed: 校验失败: 第 1 条记录的订单号应为86689355\nE               \nE               实际: 86689355\nE               操作: ==\nE               预期: None\n\ncommons\\api_base.py:1362: Failed","steps":[{"name":"1. 发送请求","time":{"start":1758709294396,"stop":1758709298080,"duration":3684},"status":"passed","steps":[{"name":"执行 GET 请求","time":{"start":1758709294396,"stop":1758709298080,"duration":3684},"status":"passed","steps":[{"name":"请求详情","time":{"start":1758709294396,"stop":1758709294397,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"ab402c49d18ee1af","name":"请求URL","source":"ab402c49d18ee1af.txt","type":"text/plain","size":58},{"uid":"68b1a43d001da43a","name":"请求头","source":"68b1a43d001da43a.json","type":"application/json","size":429},{"uid":"bd9002017023f269","name":"请求体（表单/文件）","source":"bd9002017023f269.txt","type":"text/plain","size":79}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":3,"hasContent":true,"stepsCount":0,"attachmentStep":false},{"name":"响应详情","time":{"start":1758709295078,"stop":1758709295080,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"5444f567249ffc1c","name":"响应状态码","source":"5444f567249ffc1c.txt","type":"text/plain","size":3},{"uid":"fa6e7149ed51f55c","name":"响应头","source":"fa6e7149ed51f55c.json","type":"application/json","size":460},{"uid":"87de6b536bec217c","name":"响应体（JSON）","source":"87de6b536bec217c.json","type":"application/json","size":5397}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":3,"hasContent":true,"stepsCount":0,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":6,"hasContent":true,"stepsCount":2,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":6,"hasContent":true,"stepsCount":3,"attachmentStep":false},{"name":"2. 返回校验","time":{"start":1758709298080,"stop":1758709298089,"duration":9},"status":"passed","steps":[{"name":"断言JSON路径: $.success","time":{"start":1758709298087,"stop":1758709298089,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"1c186e2a3e38d012","name":"请求URL","source":"1c186e2a3e38d012.txt","type":"text/plain","size":152},{"uid":"9f50d8e936be2368","name":"预期值","source":"9f50d8e936be2368.txt","type":"text/plain","size":15},{"uid":"c051d64acd2cecff","name":"实际值","source":"c051d64acd2cecff.txt","type":"text/plain","size":15}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":3,"hasContent":true,"stepsCount":0,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":3,"hasContent":true,"stepsCount":1,"attachmentStep":false},{"name":"3. 查询校验","time":{"start":1758709298089,"stop":1758709298097,"duration":8},"status":"failed","statusMessage":"Failed: 校验失败: 第 1 条记录的订单号应为86689355\n\n实际: 86689355\n操作: ==\n预期: None\n\n","statusTrace":"  File \"D:\\Practice\\QA-autoTest\\template_model\\test_cloudTrader\\test_oac_number.py\", line 1625, in test_query_opentrader_detail\n    self.verify_data(\n  File \"D:\\Practice\\QA-autoTest\\template_model\\commons\\api_base.py\", line 1362, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\Practice\\pythonProject\\venv\\Lib\\site-packages\\_pytest\\outcomes.py\", line 177, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"校验: 第 1 条记录的订单号应为86689355","time":{"start":1758709298095,"stop":1758709298095,"duration":0},"status":"failed","statusMessage":"Failed: 校验失败: 第 1 条记录的订单号应为86689355\n\n实际: 86689355\n操作: ==\n预期: None\n\n","statusTrace":"  File \"D:\\Practice\\QA-autoTest\\template_model\\commons\\api_base.py\", line 1362, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\Practice\\pythonProject\\venv\\Lib\\site-packages\\_pytest\\outcomes.py\", line 177, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[{"uid":"f97af7d445a8fdd1","name":"跟单账户:301390787第 1 条记录校验","source":"f97af7d445a8fdd1.attach","type":"text/plain","size":42}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"stepsCount":0,"attachmentStep":false}],"attachments":[{"uid":"957260ea03bea686","name":"跟单账号：301390787结果","source":"957260ea03bea686.attach","type":"text/plain","size":45}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":2,"hasContent":true,"stepsCount":1,"attachmentStep":false}],"attachments":[{"uid":"9a7821bf58caf8a6","name":"log","source":"9a7821bf58caf8a6.txt","type":"text/plain","size":1871}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":12,"hasContent":true,"stepsCount":8,"attachmentStep":false},"afterStages":[],"labels":[{"name":"story","value":"场景2：跟随方式-按手数-0.5"},{"name":"feature","value":"跟随方式-按手数"},{"name":"parentSuite","value":"test_cloudTrader"},{"name":"suite","value":"test_oac_number"},{"name":"subSuite","value":"Test_openandclouseall > Test_orderseng2"},{"name":"host","value":"xujunhao"},{"name":"thread","value":"33444-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_cloudTrader.test_oac_number"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"872b0b94a2bf4359","status":"failed","statusDetails":"Failed: 校验失败: 第 1 条记录的订单号应为86689355\n\n实际: 86689355\n操作: ==\n预期: None","time":{"start":1758709270551,"stop":1758709274254,"duration":3703}},{"uid":"e2232119d5aedb05","status":"failed","statusDetails":"Failed: 校验失败: 第 1 条记录的订单号应为86689355\n\n实际: 86689355\n操作: ==\n预期: None","time":{"start":1758709246821,"stop":1758709250510,"duration":3689}},{"uid":"82b085ee506ce32f","status":"failed","statusDetails":"Failed: 校验失败: 第 1 条记录的订单号应为86689355\n\n实际: 86689355\n操作: ==\n预期: None","time":{"start":1758709222972,"stop":1758709226665,"duration":3693}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"32bb946c41258e2e.json","parameterValues":[]}