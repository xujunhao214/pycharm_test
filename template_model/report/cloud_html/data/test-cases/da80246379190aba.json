{
  "uid" : "da80246379190aba",
  "name" : "绑定跟随者账号-301392108",
  "fullName" : "test_cloudTrader.test_create2.Test_follow_batch#test_batch_follow_account",
  "historyId" : "4e974ffe556a3c5f74ece354af7bf2d3",
  "time" : {
    "start" : 1758786281535,
    "stop" : 1758786288247,
    "duration" : 6712
  },
  "status" : "failed",
  "statusMessage" : "Failed: ❌ 账号301392108绑定失败：assert_json_value() missing 1 required positional argument: 'error_msg_prefix'",
  "statusTrace" : "self = <template_model.test_cloudTrader.test_create2.Test_follow_batch object at 0x000002206B479220>\nacc_info = {'account': '301392108', 'password': 'yw5piys3'}\nvar_manager = <template_model.commons.variable_manager.VariableManager object at 0x000002206B4797F0>\nlogged_session = <template_model.commons.session.EnvironmentSession object at 0x000002206B54C1C0>\n\n    @allure.title(\"批量绑定跟随者账号\")\n    @pytest.mark.parametrize(\"acc_info\", FOLLOW_ACCOUNT_LIST)\n    @pytest.mark.dependency(depends=[\n        \"test_extract_global_broker_id\",\n        \"test_extract_global_user_server_id\",\n        \"test_extract_global_jeecg_row_key\"\n    ])\n    def test_batch_follow_account(self, acc_info, var_manager, logged_session):\n        current_acc = acc_info[\"account\"]  # 当前账号（唯一标识）\n        current_pwd = acc_info[\"password\"]\n    \n        # 动态标题+账号信息附加（Allure报告区分账号）\n        allure.dynamic.title(f\"绑定跟随者账号-{current_acc}\")\n        allure.attach(f\"账号：{current_acc}\\n密码：{current_pwd}\",\n                      name=f\"账号{current_acc}基础信息\",\n                      attachment_type=allure.attachment_type.TEXT)\n    \n        try:\n            # 步骤1：首次绑定账号（期望成功）\n>           self._bind_account(logged_session, var_manager, current_acc, current_pwd, expect_success=True)\n\ntest_cloudTrader\\test_create2.py:106: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template_model.test_cloudTrader.test_create2.Test_follow_batch object at 0x000002206B479220>\nlogged_session = <template_model.commons.session.EnvironmentSession object at 0x000002206B54C1C0>\nvar_manager = <template_model.commons.variable_manager.VariableManager object at 0x000002206B4797F0>\ncurrent_acc = '301392108', current_pwd = 'yw5piys3', expect_success = True\n\n    def _bind_account(self, logged_session, var_manager, current_acc, current_pwd, expect_success):\n        \"\"\"账号绑定（支持首次/重复绑定，读取全局变量）\"\"\"\n        step_title = f\"{'首次绑定' if expect_success else '重复绑定'}账号-{current_acc}\"\n        with allure.step(step_title):\n            # 读取全局变量（用户ID、BrokerID、服务器ID）\n            global_user_id = var_manager.get_variable(GLOBAL_USER_ID)\n            global_broker_id = var_manager.get_variable(GLOBAL_BROKER_ID)\n            global_server_id = var_manager.get_variable(GLOBAL_SERVER_ID)\n    \n            # 构造请求数据\n            data = {\n                \"userId\": global_user_id,\n                \"brokerId\": global_broker_id,\n                \"serverId\": global_server_id,\n                \"account\": current_acc,\n                \"password\": current_pwd,\n                \"display\": \"PRIVATE\",\n                \"passwordType\": \"0\",\n                \"subscribeFee\": \"0\",\n                \"type\": \"SLAVE_REAL\",\n                \"platform\": \"4\"\n            }\n    \n            # 发送请求并附加请求数据到报告\n            response = self.send_post_request(logged_session, '/blockchain/account/bind', json_data=data)\n            allure.attach(json.dumps(data, ensure_ascii=False, indent=2),\n                          name=f\"账号{current_acc}{'首次绑定' if expect_success else '重复绑定'}请求数据\",\n                          attachment_type=allure.attachment_type.JSON)\n    \n            # 修复：移除error_msg参数，通过assert上下文提示失败原因\n>           self.assert_json_value(response, \"$.success\", expect_success)\nE           TypeError: assert_json_value() missing 1 required positional argument: 'error_msg_prefix'\n\ntest_cloudTrader\\test_create2.py:244: TypeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <template_model.test_cloudTrader.test_create2.Test_follow_batch object at 0x000002206B479220>\nacc_info = {'account': '301392108', 'password': 'yw5piys3'}\nvar_manager = <template_model.commons.variable_manager.VariableManager object at 0x000002206B4797F0>\nlogged_session = <template_model.commons.session.EnvironmentSession object at 0x000002206B54C1C0>\n\n    @allure.title(\"批量绑定跟随者账号\")\n    @pytest.mark.parametrize(\"acc_info\", FOLLOW_ACCOUNT_LIST)\n    @pytest.mark.dependency(depends=[\n        \"test_extract_global_broker_id\",\n        \"test_extract_global_user_server_id\",\n        \"test_extract_global_jeecg_row_key\"\n    ])\n    def test_batch_follow_account(self, acc_info, var_manager, logged_session):\n        current_acc = acc_info[\"account\"]  # 当前账号（唯一标识）\n        current_pwd = acc_info[\"password\"]\n    \n        # 动态标题+账号信息附加（Allure报告区分账号）\n        allure.dynamic.title(f\"绑定跟随者账号-{current_acc}\")\n        allure.attach(f\"账号：{current_acc}\\n密码：{current_pwd}\",\n                      name=f\"账号{current_acc}基础信息\",\n                      attachment_type=allure.attachment_type.TEXT)\n    \n        try:\n            # 步骤1：首次绑定账号（期望成功）\n            self._bind_account(logged_session, var_manager, current_acc, current_pwd, expect_success=True)\n    \n            # 步骤2：重复绑定校验（期望失败，提示已绑定）\n            self._bind_account(logged_session, var_manager, current_acc, current_pwd, expect_success=False)\n    \n            # 步骤3：提取当前账号的MT4审核ID（保存为账号专属变量）\n            follow_pass_id = self._extract_mt4_audit_id(logged_session, var_manager, current_acc)\n            follow_pass_id_key = FOLLOW_PASS_ID_TPL.format(acc=current_acc)  # 生成账号专属变量名\n            var_manager.set_runtime_variable(follow_pass_id_key, follow_pass_id)\n            allure.attach(str(follow_pass_id), name=f\"账号{current_acc}MT4审核ID\",\n                          attachment_type=allure.attachment_type.TEXT)\n            logging.info(f\"[账号{current_acc}专属变量] 保存 {follow_pass_id_key} = {follow_pass_id}\")\n    \n            # 步骤4：MT4审核通过（读取当前账号专属审核ID）\n            self._pass_mt4_audit(logged_session, var_manager, current_acc)\n    \n            # 步骤5：清理当前账号的历史订阅记录\n            self._clean_subscribe_record(logged_session, current_acc)\n    \n            # 步骤6：订阅跟单（保存账号专属订阅ID）\n            subscribe_id = self._subscribe_follow(logged_session, var_manager, current_acc)\n            follow_subscribe_id_key = FOLLOW_SUBSCRIBE_ID_TPL.format(acc=current_acc)\n            var_manager.set_runtime_variable(follow_subscribe_id_key, subscribe_id)\n            allure.attach(str(subscribe_id), name=f\"账号{current_acc}订阅ID\",\n                          attachment_type=allure.attachment_type.TEXT)\n            logging.info(f\"[账号{current_acc}专属变量] 保存 {follow_subscribe_id_key} = {subscribe_id}\")\n    \n            # 步骤7：校验订阅记录（期望存在）\n            self._verify_subscribe_record(logged_session, var_manager, current_acc, expect_exist=True)\n    \n            logging.info(f\"✅ 账号{current_acc}绑定流程全部完成\")\n    \n        except Exception as e:\n            error_msg = f\"❌ 账号{current_acc}绑定失败：{str(e)[:200]}\"\n            allure.attach(error_msg, name=f\"账号{current_acc}执行失败详情\", attachment_type=allure.attachment_type.TEXT)\n            logging.error(error_msg, exc_info=True)\n>           pytest.fail(error_msg)\nE           Failed: ❌ 账号301392108绑定失败：assert_json_value() missing 1 required positional argument: 'error_msg_prefix'\n\ntest_cloudTrader\\test_create2.py:142: Failed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "logged_session",
    "time" : {
      "start" : 1758786258270,
      "stop" : 1758786259909,
      "duration" : 1639
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "api_session",
    "time" : {
      "start" : 1758786258270,
      "stop" : 1758786258270,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "var_manager",
    "time" : {
      "start" : 1758786257818,
      "stop" : 1758786257818,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "test_group",
    "time" : {
      "start" : 1758786257817,
      "stop" : 1758786257818,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "_xunit_setup_class_fixture_Test_follow_batch",
    "time" : {
      "start" : 1758786257818,
      "stop" : 1758786257818,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "environment",
    "time" : {
      "start" : 1758786257817,
      "stop" : 1758786257817,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "Failed: ❌ 账号301392108绑定失败：assert_json_value() missing 1 required positional argument: 'error_msg_prefix'",
    "statusTrace" : "self = <template_model.test_cloudTrader.test_create2.Test_follow_batch object at 0x000002206B479220>\nacc_info = {'account': '301392108', 'password': 'yw5piys3'}\nvar_manager = <template_model.commons.variable_manager.VariableManager object at 0x000002206B4797F0>\nlogged_session = <template_model.commons.session.EnvironmentSession object at 0x000002206B54C1C0>\n\n    @allure.title(\"批量绑定跟随者账号\")\n    @pytest.mark.parametrize(\"acc_info\", FOLLOW_ACCOUNT_LIST)\n    @pytest.mark.dependency(depends=[\n        \"test_extract_global_broker_id\",\n        \"test_extract_global_user_server_id\",\n        \"test_extract_global_jeecg_row_key\"\n    ])\n    def test_batch_follow_account(self, acc_info, var_manager, logged_session):\n        current_acc = acc_info[\"account\"]  # 当前账号（唯一标识）\n        current_pwd = acc_info[\"password\"]\n    \n        # 动态标题+账号信息附加（Allure报告区分账号）\n        allure.dynamic.title(f\"绑定跟随者账号-{current_acc}\")\n        allure.attach(f\"账号：{current_acc}\\n密码：{current_pwd}\",\n                      name=f\"账号{current_acc}基础信息\",\n                      attachment_type=allure.attachment_type.TEXT)\n    \n        try:\n            # 步骤1：首次绑定账号（期望成功）\n>           self._bind_account(logged_session, var_manager, current_acc, current_pwd, expect_success=True)\n\ntest_cloudTrader\\test_create2.py:106: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template_model.test_cloudTrader.test_create2.Test_follow_batch object at 0x000002206B479220>\nlogged_session = <template_model.commons.session.EnvironmentSession object at 0x000002206B54C1C0>\nvar_manager = <template_model.commons.variable_manager.VariableManager object at 0x000002206B4797F0>\ncurrent_acc = '301392108', current_pwd = 'yw5piys3', expect_success = True\n\n    def _bind_account(self, logged_session, var_manager, current_acc, current_pwd, expect_success):\n        \"\"\"账号绑定（支持首次/重复绑定，读取全局变量）\"\"\"\n        step_title = f\"{'首次绑定' if expect_success else '重复绑定'}账号-{current_acc}\"\n        with allure.step(step_title):\n            # 读取全局变量（用户ID、BrokerID、服务器ID）\n            global_user_id = var_manager.get_variable(GLOBAL_USER_ID)\n            global_broker_id = var_manager.get_variable(GLOBAL_BROKER_ID)\n            global_server_id = var_manager.get_variable(GLOBAL_SERVER_ID)\n    \n            # 构造请求数据\n            data = {\n                \"userId\": global_user_id,\n                \"brokerId\": global_broker_id,\n                \"serverId\": global_server_id,\n                \"account\": current_acc,\n                \"password\": current_pwd,\n                \"display\": \"PRIVATE\",\n                \"passwordType\": \"0\",\n                \"subscribeFee\": \"0\",\n                \"type\": \"SLAVE_REAL\",\n                \"platform\": \"4\"\n            }\n    \n            # 发送请求并附加请求数据到报告\n            response = self.send_post_request(logged_session, '/blockchain/account/bind', json_data=data)\n            allure.attach(json.dumps(data, ensure_ascii=False, indent=2),\n                          name=f\"账号{current_acc}{'首次绑定' if expect_success else '重复绑定'}请求数据\",\n                          attachment_type=allure.attachment_type.JSON)\n    \n            # 修复：移除error_msg参数，通过assert上下文提示失败原因\n>           self.assert_json_value(response, \"$.success\", expect_success)\nE           TypeError: assert_json_value() missing 1 required positional argument: 'error_msg_prefix'\n\ntest_cloudTrader\\test_create2.py:244: TypeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <template_model.test_cloudTrader.test_create2.Test_follow_batch object at 0x000002206B479220>\nacc_info = {'account': '301392108', 'password': 'yw5piys3'}\nvar_manager = <template_model.commons.variable_manager.VariableManager object at 0x000002206B4797F0>\nlogged_session = <template_model.commons.session.EnvironmentSession object at 0x000002206B54C1C0>\n\n    @allure.title(\"批量绑定跟随者账号\")\n    @pytest.mark.parametrize(\"acc_info\", FOLLOW_ACCOUNT_LIST)\n    @pytest.mark.dependency(depends=[\n        \"test_extract_global_broker_id\",\n        \"test_extract_global_user_server_id\",\n        \"test_extract_global_jeecg_row_key\"\n    ])\n    def test_batch_follow_account(self, acc_info, var_manager, logged_session):\n        current_acc = acc_info[\"account\"]  # 当前账号（唯一标识）\n        current_pwd = acc_info[\"password\"]\n    \n        # 动态标题+账号信息附加（Allure报告区分账号）\n        allure.dynamic.title(f\"绑定跟随者账号-{current_acc}\")\n        allure.attach(f\"账号：{current_acc}\\n密码：{current_pwd}\",\n                      name=f\"账号{current_acc}基础信息\",\n                      attachment_type=allure.attachment_type.TEXT)\n    \n        try:\n            # 步骤1：首次绑定账号（期望成功）\n            self._bind_account(logged_session, var_manager, current_acc, current_pwd, expect_success=True)\n    \n            # 步骤2：重复绑定校验（期望失败，提示已绑定）\n            self._bind_account(logged_session, var_manager, current_acc, current_pwd, expect_success=False)\n    \n            # 步骤3：提取当前账号的MT4审核ID（保存为账号专属变量）\n            follow_pass_id = self._extract_mt4_audit_id(logged_session, var_manager, current_acc)\n            follow_pass_id_key = FOLLOW_PASS_ID_TPL.format(acc=current_acc)  # 生成账号专属变量名\n            var_manager.set_runtime_variable(follow_pass_id_key, follow_pass_id)\n            allure.attach(str(follow_pass_id), name=f\"账号{current_acc}MT4审核ID\",\n                          attachment_type=allure.attachment_type.TEXT)\n            logging.info(f\"[账号{current_acc}专属变量] 保存 {follow_pass_id_key} = {follow_pass_id}\")\n    \n            # 步骤4：MT4审核通过（读取当前账号专属审核ID）\n            self._pass_mt4_audit(logged_session, var_manager, current_acc)\n    \n            # 步骤5：清理当前账号的历史订阅记录\n            self._clean_subscribe_record(logged_session, current_acc)\n    \n            # 步骤6：订阅跟单（保存账号专属订阅ID）\n            subscribe_id = self._subscribe_follow(logged_session, var_manager, current_acc)\n            follow_subscribe_id_key = FOLLOW_SUBSCRIBE_ID_TPL.format(acc=current_acc)\n            var_manager.set_runtime_variable(follow_subscribe_id_key, subscribe_id)\n            allure.attach(str(subscribe_id), name=f\"账号{current_acc}订阅ID\",\n                          attachment_type=allure.attachment_type.TEXT)\n            logging.info(f\"[账号{current_acc}专属变量] 保存 {follow_subscribe_id_key} = {subscribe_id}\")\n    \n            # 步骤7：校验订阅记录（期望存在）\n            self._verify_subscribe_record(logged_session, var_manager, current_acc, expect_exist=True)\n    \n            logging.info(f\"✅ 账号{current_acc}绑定流程全部完成\")\n    \n        except Exception as e:\n            error_msg = f\"❌ 账号{current_acc}绑定失败：{str(e)[:200]}\"\n            allure.attach(error_msg, name=f\"账号{current_acc}执行失败详情\", attachment_type=allure.attachment_type.TEXT)\n            logging.error(error_msg, exc_info=True)\n>           pytest.fail(error_msg)\nE           Failed: ❌ 账号301392108绑定失败：assert_json_value() missing 1 required positional argument: 'error_msg_prefix'\n\ntest_cloudTrader\\test_create2.py:142: Failed",
    "steps" : [ {
      "name" : "首次绑定账号-301392108",
      "time" : {
        "start" : 1758786281535,
        "stop" : 1758786288246,
        "duration" : 6711
      },
      "status" : "broken",
      "statusMessage" : "TypeError: assert_json_value() missing 1 required positional argument: 'error_msg_prefix'\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\template_model\\test_cloudTrader\\test_create2.py\", line 244, in _bind_account\n    self.assert_json_value(response, \"$.success\", expect_success)\n",
      "steps" : [ {
        "name" : "执行 POST 请求",
        "time" : {
          "start" : 1758786281536,
          "stop" : 1758786288245,
          "duration" : 6709
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "请求详情",
          "time" : {
            "start" : 1758786281536,
            "stop" : 1758786281536,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "85c58780046ab6c9",
            "name" : "请求URL",
            "source" : "85c58780046ab6c9.txt",
            "type" : "text/plain",
            "size" : 24
          }, {
            "uid" : "52279bf69af56bdb",
            "name" : "请求头",
            "source" : "52279bf69af56bdb.json",
            "type" : "application/json",
            "size" : 429
          }, {
            "uid" : "a89738b1a4a4ba55",
            "name" : "请求体（JSON）",
            "source" : "a89738b1a4a4ba55.json",
            "type" : "application/json",
            "size" : 276
          } ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "hasContent" : true,
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 3
        }, {
          "name" : "响应详情",
          "time" : {
            "start" : 1758786285230,
            "stop" : 1758786285231,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "cfa44e3b12a17062",
            "name" : "响应状态码",
            "source" : "cfa44e3b12a17062.txt",
            "type" : "text/plain",
            "size" : 3
          }, {
            "uid" : "c706edf38857e393",
            "name" : "响应头",
            "source" : "c706edf38857e393.json",
            "type" : "application/json",
            "size" : 460
          }, {
            "uid" : "51324cd2157976cc",
            "name" : "响应体（JSON）",
            "source" : "51324cd2157976cc.json",
            "type" : "application/json",
            "size" : 120
          } ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "hasContent" : true,
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 3
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 2,
        "hasContent" : true,
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 6
      } ],
      "attachments" : [ {
        "uid" : "d1c6ae69cab0cc3b",
        "name" : "账号301392108首次绑定请求数据",
        "source" : "d1c6ae69cab0cc3b.json",
        "type" : "application/json",
        "size" : 276
      } ],
      "parameters" : [ ],
      "stepsCount" : 3,
      "hasContent" : true,
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 7
    } ],
    "attachments" : [ {
      "uid" : "1d9095e384c395b0",
      "name" : "账号301392108基础信息",
      "source" : "1d9095e384c395b0.txt",
      "type" : "text/plain",
      "size" : 36
    }, {
      "uid" : "c73116a8f6ac975c",
      "name" : "账号301392108执行失败详情",
      "source" : "c73116a8f6ac975c.txt",
      "type" : "text/plain",
      "size" : 112
    }, {
      "uid" : "d1fbf8889cb30859",
      "name" : "log",
      "source" : "d1fbf8889cb30859.txt",
      "type" : "text/plain",
      "size" : 1289
    } ],
    "parameters" : [ ],
    "stepsCount" : 4,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 10
  },
  "afterStages" : [ {
    "name" : "logged_session::0",
    "time" : {
      "start" : 1758786295051,
      "stop" : 1758786295052,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "api_session::0",
    "time" : {
      "start" : 1758786295052,
      "stop" : 1758786295052,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "var_manager::0",
    "time" : {
      "start" : 1758786295053,
      "stop" : 1758786295053,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "_xunit_setup_class_fixture_Test_follow_batch::0",
    "time" : {
      "start" : 1758786295050,
      "stop" : 1758786295050,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "绑定跟随者账号（多账号批量版）"
  }, {
    "name" : "tag",
    "value" : "dependency(depends=['test_extract_global_broker_id', 'test_extract_global_user_server_id', 'test_extract_global_jeecg_row_key'])"
  }, {
    "name" : "parentSuite",
    "value" : "test_cloudTrader"
  }, {
    "name" : "suite",
    "value" : "test_create2"
  }, {
    "name" : "subSuite",
    "value" : "Test_follow_batch"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "28576-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_cloudTrader.test_create2"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "acc_info",
    "value" : "{'account': '301392108', 'password': 'yw5piys3'}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "dependency(depends=['test_extract_global_broker_id', 'test_extract_global_user_server_id', 'test_extract_global_jeecg_row_key'])" ]
  },
  "source" : "da80246379190aba.json",
  "parameterValues" : [ "{'account': '301392108', 'password': 'yw5piys3'}" ]
}