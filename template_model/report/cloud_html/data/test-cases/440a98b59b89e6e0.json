{"uid":"440a98b59b89e6e0","name":"账号管理-历史订单-跟单MT4账户查询-平仓后","fullName":"test_cloudTrader.test_oac_number.Test_openandclouseall.Test_orderseng2#test_query_follow_id","historyId":"48146df5efccf7293e82bb1a47cdae0c","time":{"start":1758709352179,"stop":1758709355892,"duration":3713},"description":"\n    ### 测试说明\n    - 前置条件：有喊单账号、跟单账号，跟单已经和喊单有订阅关系\n      1. 修改订阅信息，跟随方式-按手数-0.5\n      2. MT4进行登录，然后进行开仓，总手数0.01\n      3. 账号管理-持仓订单-喊单和跟单数据校验\n      4. 跟单管理-开仓日志-喊单和跟单数据校验\n      5. 跟单管理-VPS管理-喊单和跟单数据校验\n      6. MT4进行平仓\n      7.账号管理-历史订单-喊单和跟单数据校验\n      8.跟单管理-开仓日志-喊单和跟单数据校验\n    - 预期结果：喊单和跟单数据校验正确\n    ","descriptionHtml":"<pre><code>### 测试说明\n- 前置条件：有喊单账号、跟单账号，跟单已经和喊单有订阅关系\n  1. 修改订阅信息，跟随方式-按手数-0.5\n  2. MT4进行登录，然后进行开仓，总手数0.01\n  3. 账号管理-持仓订单-喊单和跟单数据校验\n  4. 跟单管理-开仓日志-喊单和跟单数据校验\n  5. 跟单管理-VPS管理-喊单和跟单数据校验\n  6. MT4进行平仓\n  7.账号管理-历史订单-喊单和跟单数据校验\n  8.跟单管理-开仓日志-喊单和跟单数据校验\n- 预期结果：喊单和跟单数据校验正确\n</code></pre>\n","status":"failed","statusMessage":"Failed: 校验失败: 订单号数据正确\n\n实际: 86689193\n操作: ==\n预期: 86689354","statusTrace":"self = <template_model.test_cloudTrader.test_oac_number.Test_openandclouseall.Test_orderseng2 object at 0x0000018383F1E5D0>\nvar_manager = <template_model.commons.variable_manager.VariableManager object at 0x0000018383F266D0>\nlogged_session = <template_model.commons.session.EnvironmentSession object at 0x0000018383F11DD0>\n\n    @allure.title(\"账号管理-历史订单-跟单MT4账户查询-平仓后\")\n    def test_query_follow_id(self, var_manager, logged_session):\n        with allure.step(\"1. 发送请求\"):\n            follow_pass_id = var_manager.get_variable(\"follow_pass_id\")\n            follow_account = var_manager.get_variable(\"follow_account\")\n            params = {\n                \"_t\": current_timestamp_seconds,\n                \"trader_id\": follow_pass_id,\n                \"column\": \"id\",\n                \"order\": \"desc\",\n                \"pageNo\": 1,\n                \"pageSize\": 20,\n                \"superQueryMatchType\": \"and\"\n            }\n            response = self.send_get_request(\n                logged_session,\n                '/online/cgform/api/getData/402883977b38c9ca017b38c9d0960001',\n                params=params\n            )\n    \n        with allure.step(\"2. 返回校验\"):\n            self.assert_json_value(\n                response,\n                \"$.success\",\n                True,\n                \"响应success字段应为true\"\n            )\n    \n        with allure.step(\"3. 提取数据\"):\n            order_no = self.json_utils.extract(response.json(), \"$.result.records[0].order_no\")\n            var_manager.set_runtime_variable(\"order_no\", order_no)\n            allure.attach(f\"{order_no}\", \"跟单订单号\", allure.attachment_type.TEXT)\n    \n        with allure.step(f\"3. 查询校验\"):\n            trader_id_list = self.json_utils.extract(\n                response.json(),\n                \"$.result.records[0].trader_id\",\n                default=[],\n                multi_match=True\n            )\n    \n            if not trader_id_list:\n                attach_body = f\"MT4账号查询[{follow_account}]，返回的trader_id列表为空（暂无数据）\"\n            else:\n                attach_body = f\"MT4账号查询[{follow_account}]，返回 {len(trader_id_list)} 条记录\"\n    \n            allure.attach(\n                body=attach_body,\n                name=f\"账号ID:{follow_account}查询结果\",\n                attachment_type=\"text/plain\"\n            )\n    \n            for idx, trader_id in enumerate(trader_id_list):\n                self.verify_data(\n                    actual_value=int(trader_id),\n                    expected_value=int(follow_pass_id),\n                    op=CompareOp.EQ,\n                    use_isclose=False,\n                    message=f\"第 {idx + 1} 条记录的账号ID应为{trader_id}\",\n                    attachment_name=f\"账号ID:{follow_pass_id}第 {idx + 1} 条记录校验\"\n                )\n    \n            with allure.step(\"喊单者订单号校验\"):\n                master_order_no = self.json_utils.extract(response.json(),\n                                                          \"$.result.records[0].master_order_no\")\n                ticket_open = var_manager.get_variable(\"ticket_open\")\n    \n>               self.verify_data(\n                    actual_value=master_order_no,\n                    expected_value=ticket_open,\n                    op=CompareOp.EQ,\n                    use_isclose=False,\n                    message=f\"订单号数据正确\",\n                    attachment_name=\"订单号详情\"\n                )\n\ntest_cloudTrader\\test_oac_number.py:1953: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template_model.test_cloudTrader.test_oac_number.Test_openandclouseall.Test_orderseng2 object at 0x0000018383F1E5D0>\nactual_value = 86689193, expected_value = 86689354, op = <CompareOp.EQ: '=='>\nmessage = '订单号数据正确', attachment_name = '订单号详情', attachment_type = 'text/plain'\nuse_isclose = False, rel_tol = 1e-09, abs_tol = 0\n\n    def verify_data(\n            self,\n            actual_value,\n            expected_value,\n            op: CompareOp,\n            message: str,\n            attachment_name: str,\n            attachment_type=\"text/plain\",\n            use_isclose=True,  # 新增参数：是否启用math.isclose容错（默认启用）\n            rel_tol=1e-9,  # 相对容差（仅当use_isclose=True时生效）\n            abs_tol=0  # 绝对容差（仅当use_isclose=True时生效）\n    ):\n        \"\"\"\n        通用数据校验函数，支持浮点容错比较\n        :param actual_value: 实际值\n        :param expected_value: 预期值\n        :param op: 比较操作，CompareOp 枚举\n        :param message: 校验失败时的提示信息\n        :param attachment_name: Allure 附件名称\n        :param attachment_type: Allure 附件类型，默认文本\n        :param use_isclose: 是否使用math.isclose进行浮点容错比较\n        :param rel_tol: 相对容差（默认1e-9）\n        :param abs_tol: 绝对容差（默认0.0）\n        其他参数同前\n        \"\"\"\n        with allure.step(f\"校验: {message}\"):\n            result = False\n            try:\n                # 处理浮点容错比较（仅对EQ/NE操作生效）\n                if use_isclose and op in (CompareOp.EQ, CompareOp.NE):\n                    if not (isinstance(actual_value, (int, float)) and\n                            isinstance(expected_value, (int, float))):\n                        # 非数字类型自动禁用isclose，避免报错\n                        use_isclose = False\n                        logging.warning(f\"自动禁用isclose：非数字类型比较（实际值类型：{type(actual_value)}）\")\n    \n                    # 计算isclose结果\n                    is_close = math.isclose(\n                        actual_value,\n                        expected_value,\n                        rel_tol=rel_tol,\n                        abs_tol=abs_tol\n                    )\n                    # 根据操作类型取反\n                    result = is_close if op == CompareOp.EQ else not is_close\n    \n                # 普通比较逻辑\n                else:\n                    if op == CompareOp.EQ:\n                        result = actual_value == expected_value\n                    elif op == CompareOp.NE:\n                        result = actual_value != expected_value\n                    elif op == CompareOp.GT:\n                        result = actual_value > expected_value\n                    elif op == CompareOp.LT:\n                        result = actual_value < expected_value\n                    elif op == CompareOp.GE:\n                        result = actual_value >= expected_value\n                    elif op == CompareOp.LE:\n                        result = actual_value <= expected_value\n                    elif op == CompareOp.IN:\n                        result = actual_value in expected_value\n                    elif op == CompareOp.NOT_IN:\n                        result = actual_value not in expected_value\n    \n            except TypeError as e:\n                pytest.fail(\n                    f\"校验类型错误: {str(e)}\\n实际值类型: {type(actual_value)}, 预期值类型: {type(expected_value)}\")\n    \n            # 生成详细提示信息（包含容差参数）\n            detail_msg = (\n                f\"\\n实际: {actual_value}\\n\"\n                f\"操作: {op.value}\\n\"\n                f\"预期: {expected_value}\\n\"\n            )\n    \n            # 添加allure.attach，将信息写入报告\n            allure.attach(\n                detail_msg,  # 附件内容\n                name=attachment_name,  # 附件名称（来自参数）\n                attachment_type=attachment_type  # 附件类型\n            )\n    \n            if not result:\n>               pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\nE               Failed: 校验失败: 订单号数据正确\nE               \nE               实际: 86689193\nE               操作: ==\nE               预期: 86689354\n\ncommons\\api_base.py:1362: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"\n    ### 测试说明\n    - 前置条件：有喊单账号、跟单账号，跟单已经和喊单有订阅关系\n      1. 修改订阅信息，跟随方式-按手数-0.5\n      2. MT4进行登录，然后进行开仓，总手数0.01\n      3. 账号管理-持仓订单-喊单和跟单数据校验\n      4. 跟单管理-开仓日志-喊单和跟单数据校验\n      5. 跟单管理-VPS管理-喊单和跟单数据校验\n      6. MT4进行平仓\n      7.账号管理-历史订单-喊单和跟单数据校验\n      8.跟单管理-开仓日志-喊单和跟单数据校验\n    - 预期结果：喊单和跟单数据校验正确\n    ","status":"failed","statusMessage":"Failed: 校验失败: 订单号数据正确\n\n实际: 86689193\n操作: ==\n预期: 86689354","statusTrace":"self = <template_model.test_cloudTrader.test_oac_number.Test_openandclouseall.Test_orderseng2 object at 0x0000018383F1E5D0>\nvar_manager = <template_model.commons.variable_manager.VariableManager object at 0x0000018383F266D0>\nlogged_session = <template_model.commons.session.EnvironmentSession object at 0x0000018383F11DD0>\n\n    @allure.title(\"账号管理-历史订单-跟单MT4账户查询-平仓后\")\n    def test_query_follow_id(self, var_manager, logged_session):\n        with allure.step(\"1. 发送请求\"):\n            follow_pass_id = var_manager.get_variable(\"follow_pass_id\")\n            follow_account = var_manager.get_variable(\"follow_account\")\n            params = {\n                \"_t\": current_timestamp_seconds,\n                \"trader_id\": follow_pass_id,\n                \"column\": \"id\",\n                \"order\": \"desc\",\n                \"pageNo\": 1,\n                \"pageSize\": 20,\n                \"superQueryMatchType\": \"and\"\n            }\n            response = self.send_get_request(\n                logged_session,\n                '/online/cgform/api/getData/402883977b38c9ca017b38c9d0960001',\n                params=params\n            )\n    \n        with allure.step(\"2. 返回校验\"):\n            self.assert_json_value(\n                response,\n                \"$.success\",\n                True,\n                \"响应success字段应为true\"\n            )\n    \n        with allure.step(\"3. 提取数据\"):\n            order_no = self.json_utils.extract(response.json(), \"$.result.records[0].order_no\")\n            var_manager.set_runtime_variable(\"order_no\", order_no)\n            allure.attach(f\"{order_no}\", \"跟单订单号\", allure.attachment_type.TEXT)\n    \n        with allure.step(f\"3. 查询校验\"):\n            trader_id_list = self.json_utils.extract(\n                response.json(),\n                \"$.result.records[0].trader_id\",\n                default=[],\n                multi_match=True\n            )\n    \n            if not trader_id_list:\n                attach_body = f\"MT4账号查询[{follow_account}]，返回的trader_id列表为空（暂无数据）\"\n            else:\n                attach_body = f\"MT4账号查询[{follow_account}]，返回 {len(trader_id_list)} 条记录\"\n    \n            allure.attach(\n                body=attach_body,\n                name=f\"账号ID:{follow_account}查询结果\",\n                attachment_type=\"text/plain\"\n            )\n    \n            for idx, trader_id in enumerate(trader_id_list):\n                self.verify_data(\n                    actual_value=int(trader_id),\n                    expected_value=int(follow_pass_id),\n                    op=CompareOp.EQ,\n                    use_isclose=False,\n                    message=f\"第 {idx + 1} 条记录的账号ID应为{trader_id}\",\n                    attachment_name=f\"账号ID:{follow_pass_id}第 {idx + 1} 条记录校验\"\n                )\n    \n            with allure.step(\"喊单者订单号校验\"):\n                master_order_no = self.json_utils.extract(response.json(),\n                                                          \"$.result.records[0].master_order_no\")\n                ticket_open = var_manager.get_variable(\"ticket_open\")\n    \n>               self.verify_data(\n                    actual_value=master_order_no,\n                    expected_value=ticket_open,\n                    op=CompareOp.EQ,\n                    use_isclose=False,\n                    message=f\"订单号数据正确\",\n                    attachment_name=\"订单号详情\"\n                )\n\ntest_cloudTrader\\test_oac_number.py:1953: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template_model.test_cloudTrader.test_oac_number.Test_openandclouseall.Test_orderseng2 object at 0x0000018383F1E5D0>\nactual_value = 86689193, expected_value = 86689354, op = <CompareOp.EQ: '=='>\nmessage = '订单号数据正确', attachment_name = '订单号详情', attachment_type = 'text/plain'\nuse_isclose = False, rel_tol = 1e-09, abs_tol = 0\n\n    def verify_data(\n            self,\n            actual_value,\n            expected_value,\n            op: CompareOp,\n            message: str,\n            attachment_name: str,\n            attachment_type=\"text/plain\",\n            use_isclose=True,  # 新增参数：是否启用math.isclose容错（默认启用）\n            rel_tol=1e-9,  # 相对容差（仅当use_isclose=True时生效）\n            abs_tol=0  # 绝对容差（仅当use_isclose=True时生效）\n    ):\n        \"\"\"\n        通用数据校验函数，支持浮点容错比较\n        :param actual_value: 实际值\n        :param expected_value: 预期值\n        :param op: 比较操作，CompareOp 枚举\n        :param message: 校验失败时的提示信息\n        :param attachment_name: Allure 附件名称\n        :param attachment_type: Allure 附件类型，默认文本\n        :param use_isclose: 是否使用math.isclose进行浮点容错比较\n        :param rel_tol: 相对容差（默认1e-9）\n        :param abs_tol: 绝对容差（默认0.0）\n        其他参数同前\n        \"\"\"\n        with allure.step(f\"校验: {message}\"):\n            result = False\n            try:\n                # 处理浮点容错比较（仅对EQ/NE操作生效）\n                if use_isclose and op in (CompareOp.EQ, CompareOp.NE):\n                    if not (isinstance(actual_value, (int, float)) and\n                            isinstance(expected_value, (int, float))):\n                        # 非数字类型自动禁用isclose，避免报错\n                        use_isclose = False\n                        logging.warning(f\"自动禁用isclose：非数字类型比较（实际值类型：{type(actual_value)}）\")\n    \n                    # 计算isclose结果\n                    is_close = math.isclose(\n                        actual_value,\n                        expected_value,\n                        rel_tol=rel_tol,\n                        abs_tol=abs_tol\n                    )\n                    # 根据操作类型取反\n                    result = is_close if op == CompareOp.EQ else not is_close\n    \n                # 普通比较逻辑\n                else:\n                    if op == CompareOp.EQ:\n                        result = actual_value == expected_value\n                    elif op == CompareOp.NE:\n                        result = actual_value != expected_value\n                    elif op == CompareOp.GT:\n                        result = actual_value > expected_value\n                    elif op == CompareOp.LT:\n                        result = actual_value < expected_value\n                    elif op == CompareOp.GE:\n                        result = actual_value >= expected_value\n                    elif op == CompareOp.LE:\n                        result = actual_value <= expected_value\n                    elif op == CompareOp.IN:\n                        result = actual_value in expected_value\n                    elif op == CompareOp.NOT_IN:\n                        result = actual_value not in expected_value\n    \n            except TypeError as e:\n                pytest.fail(\n                    f\"校验类型错误: {str(e)}\\n实际值类型: {type(actual_value)}, 预期值类型: {type(expected_value)}\")\n    \n            # 生成详细提示信息（包含容差参数）\n            detail_msg = (\n                f\"\\n实际: {actual_value}\\n\"\n                f\"操作: {op.value}\\n\"\n                f\"预期: {expected_value}\\n\"\n            )\n    \n            # 添加allure.attach，将信息写入报告\n            allure.attach(\n                detail_msg,  # 附件内容\n                name=attachment_name,  # 附件名称（来自参数）\n                attachment_type=attachment_type  # 附件类型\n            )\n    \n            if not result:\n>               pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\nE               Failed: 校验失败: 订单号数据正确\nE               \nE               实际: 86689193\nE               操作: ==\nE               预期: 86689354\n\ncommons\\api_base.py:1362: Failed","steps":[{"name":"1. 发送请求","time":{"start":1758709352179,"stop":1758709355868,"duration":3689},"status":"passed","steps":[{"name":"执行 GET 请求","time":{"start":1758709352179,"stop":1758709355868,"duration":3689},"status":"passed","steps":[{"name":"请求详情","time":{"start":1758709352179,"stop":1758709352180,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"808f297d4c41f2c3","name":"请求URL","source":"808f297d4c41f2c3.txt","type":"text/plain","size":59},{"uid":"91ccb0561c676ebb","name":"请求头","source":"91ccb0561c676ebb.json","type":"application/json","size":429},{"uid":"92cfa52c744278c3","name":"请求体（表单/文件）","source":"92cfa52c744278c3.txt","type":"text/plain","size":146}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":3,"hasContent":true,"stepsCount":0,"attachmentStep":false},{"name":"响应详情","time":{"start":1758709352865,"stop":1758709352867,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"4fb3d1e2aca8b9e4","name":"响应状态码","source":"4fb3d1e2aca8b9e4.txt","type":"text/plain","size":3},{"uid":"ed11002928277991","name":"响应头","source":"ed11002928277991.json","type":"application/json","size":460},{"uid":"a3eb9645e2728adb","name":"响应体（JSON）","source":"a3eb9645e2728adb.json","type":"application/json","size":13265}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":3,"hasContent":true,"stepsCount":0,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":6,"hasContent":true,"stepsCount":2,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":6,"hasContent":true,"stepsCount":3,"attachmentStep":false},{"name":"2. 返回校验","time":{"start":1758709355868,"stop":1758709355873,"duration":5},"status":"passed","steps":[{"name":"断言JSON路径: $.success","time":{"start":1758709355872,"stop":1758709355873,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"411f2146542375c8","name":"请求URL","source":"411f2146542375c8.txt","type":"text/plain","size":200},{"uid":"a96a65cb1640271e","name":"预期值","source":"a96a65cb1640271e.txt","type":"text/plain","size":15},{"uid":"5c2648c054d1f147","name":"实际值","source":"5c2648c054d1f147.txt","type":"text/plain","size":15}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":3,"hasContent":true,"stepsCount":0,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":3,"hasContent":true,"stepsCount":1,"attachmentStep":false},{"name":"3. 提取数据","time":{"start":1758709355873,"stop":1758709355879,"duration":6},"status":"passed","steps":[],"attachments":[{"uid":"683a7be0d525a826","name":"跟单订单号","source":"683a7be0d525a826.txt","type":"text/plain","size":8}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"hasContent":true,"stepsCount":0,"attachmentStep":false},{"name":"3. 查询校验","time":{"start":1758709355880,"stop":1758709355892,"duration":12},"status":"failed","statusMessage":"Failed: 校验失败: 订单号数据正确\n\n实际: 86689193\n操作: ==\n预期: 86689354\n\n","statusTrace":"  File \"D:\\Practice\\QA-autoTest\\template_model\\test_cloudTrader\\test_oac_number.py\", line 1953, in test_query_follow_id\n    self.verify_data(\n  File \"D:\\Practice\\QA-autoTest\\template_model\\commons\\api_base.py\", line 1362, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\Practice\\pythonProject\\venv\\Lib\\site-packages\\_pytest\\outcomes.py\", line 177, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"校验: 第 1 条记录的账号ID应为1970043805108154370","time":{"start":1758709355884,"stop":1758709355886,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"6259ef77e78aba2c","name":"账号ID:1970043805108154370第 1 条记录校验","source":"6259ef77e78aba2c.attach","type":"text/plain","size":68}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"hasContent":true,"stepsCount":0,"attachmentStep":false},{"name":"喊单者订单号校验","time":{"start":1758709355886,"stop":1758709355891,"duration":5},"status":"failed","statusMessage":"Failed: 校验失败: 订单号数据正确\n\n实际: 86689193\n操作: ==\n预期: 86689354\n\n","statusTrace":"  File \"D:\\Practice\\QA-autoTest\\template_model\\test_cloudTrader\\test_oac_number.py\", line 1953, in test_query_follow_id\n    self.verify_data(\n  File \"D:\\Practice\\QA-autoTest\\template_model\\commons\\api_base.py\", line 1362, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\Practice\\pythonProject\\venv\\Lib\\site-packages\\_pytest\\outcomes.py\", line 177, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"校验: 订单号数据正确","time":{"start":1758709355891,"stop":1758709355891,"duration":0},"status":"failed","statusMessage":"Failed: 校验失败: 订单号数据正确\n\n实际: 86689193\n操作: ==\n预期: 86689354\n\n","statusTrace":"  File \"D:\\Practice\\QA-autoTest\\template_model\\commons\\api_base.py\", line 1362, in verify_data\n    pytest.fail(f\"校验失败: {message}\\n{detail_msg}\")\n  File \"D:\\Practice\\pythonProject\\venv\\Lib\\site-packages\\_pytest\\outcomes.py\", line 177, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[{"uid":"480393831a397b79","name":"订单号详情","source":"480393831a397b79.attach","type":"text/plain","size":46}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"stepsCount":0,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"hasContent":true,"stepsCount":1,"attachmentStep":false}],"attachments":[{"uid":"b4d56a4d0fed7d55","name":"账号ID:301390787查询结果","source":"b4d56a4d0fed7d55.attach","type":"text/plain","size":47}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":3,"hasContent":true,"stepsCount":3,"attachmentStep":false}],"attachments":[{"uid":"527987826ddb947c","name":"log","source":"527987826ddb947c.txt","type":"text/plain","size":927}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":14,"hasContent":true,"stepsCount":11,"attachmentStep":false},"afterStages":[],"labels":[{"name":"story","value":"场景2：跟随方式-按手数-0.5"},{"name":"feature","value":"跟随方式-按手数"},{"name":"parentSuite","value":"test_cloudTrader"},{"name":"suite","value":"test_oac_number"},{"name":"subSuite","value":"Test_openandclouseall > Test_orderseng2"},{"name":"host","value":"xujunhao"},{"name":"thread","value":"33444-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_cloudTrader.test_oac_number"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"440a98b59b89e6e0.json","parameterValues":[]}