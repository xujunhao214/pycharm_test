{
  "uid" : "caba684e9406570",
  "name" : "跟单管理-VPS管理-喊单者账号-开仓后",
  "fullName" : "test_cloudTrader.test_oac_proportion.Test_orderseng2#test_query_opentrader_getRecordList",
  "historyId" : "7c8f6fb64782e0da29f635220ef433b2",
  "time" : {
    "start" : 1758504337585,
    "stop" : 1758504341179,
    "duration" : 3594
  },
  "description" : "\n    ### 测试说明\n    - 前置条件：有喊单账号、跟单账号，跟单已经和喊单有订阅关系\n      1. MT4进行登录，然后进行开仓，总手数0.2\n      2. 账号管理-持仓订单-喊单和跟单数据校验\n      3. 跟单管理-开仓日志-喊单和跟单数据校验\n      4. 跟单管理-VPS管理-喊单和跟单数据校验\n      5. MT4进行平仓\n      6.账号管理-持仓订单-喊单和跟单数据校验\n      7.跟单管理-开仓日志-喊单和跟单数据校验\n      8.跟单管理-VPS管理-喊单和跟单数据校验\n    - 预期结果：喊单和跟单数据校验正确\n    ",
  "descriptionHtml" : "<pre><code>### 测试说明\n- 前置条件：有喊单账号、跟单账号，跟单已经和喊单有订阅关系\n  1. MT4进行登录，然后进行开仓，总手数0.2\n  2. 账号管理-持仓订单-喊单和跟单数据校验\n  3. 跟单管理-开仓日志-喊单和跟单数据校验\n  4. 跟单管理-VPS管理-喊单和跟单数据校验\n  5. MT4进行平仓\n  6.账号管理-持仓订单-喊单和跟单数据校验\n  7.跟单管理-开仓日志-喊单和跟单数据校验\n  8.跟单管理-VPS管理-喊单和跟单数据校验\n- 预期结果：喊单和跟单数据校验正确\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: Failed: 响应searchCount字段应为true（JSON断言失败）",
  "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Decodes the JSON response body (if any) as a Python object.\n    \n        This may return a dictionary, list, etc. depending on what is in the response.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n..\\venv\\lib\\site-packages\\requests\\models.py:976: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\python_tools\\python\\lib\\json\\__init__.py:357: in loads\n    return _default_decoder.decode(s)\nD:\\python_tools\\python\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x0000025C1913F640>\ns = '访问超时，请稍后再试!', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nD:\\python_tools\\python\\lib\\json\\decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <template_mt4.test_cloudTrader.test_oac_proportion.Test_openandclouseall.Test_orderseng2 object at 0x0000025C42B3F640>\nresponse = <Response [200]>, json_path = '$.searchCount'\n\n    def extract_jsonpath(self, response: requests.Response, json_path: str) -> Any:\n        \"\"\"使用jsonpath-ng解析JSON路径（分层提示优化）\"\"\"\n        try:\n>           json_data = response.json()\n\ncommons\\api_base.py:449: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Decodes the JSON response body (if any) as a Python object.\n    \n        This may return a dictionary, list, etc. depending on what is in the response.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n..\\venv\\lib\\site-packages\\requests\\models.py:980: JSONDecodeError\n\nThe above exception was the direct cause of the following exception:\n\nself = <template_mt4.test_cloudTrader.test_oac_proportion.Test_openandclouseall.Test_orderseng2 object at 0x0000025C42B3F640>\nresponse = <Response [200]>, json_path = '$.searchCount', expected_value = True\nerror_msg_prefix = '响应searchCount字段应为true'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n>           actual_value = self.extract_jsonpath(response, json_path)\n\ncommons\\api_base.py:464: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template_mt4.test_cloudTrader.test_oac_proportion.Test_openandclouseall.Test_orderseng2 object at 0x0000025C42B3F640>\nresponse = <Response [200]>, json_path = '$.searchCount'\n\n    def extract_jsonpath(self, response: requests.Response, json_path: str) -> Any:\n        \"\"\"使用jsonpath-ng解析JSON路径（分层提示优化）\"\"\"\n        try:\n            json_data = response.json()\n            jsonpath_expr = parse(json_path)\n            matches = jsonpath_expr.find(json_data)\n            return [match.value for match in matches] if matches else None\n        except Exception as e:\n            with allure.step(\"JSONPath解析异常\"):\n                allure.attach(json_path, \"解析路径\", allure.attachment_type.TEXT)\n                allure.attach(response.text[:500], \"响应内容\", allure.attachment_type.TEXT)\n                allure.attach(str(e), \"解析错误\", allure.attachment_type.TEXT)\n            logger.error(f\"JSONPath解析失败: {json_path} | 响应: {response.text[:500]}\")\n>           raise ValueError(f\"Failed: JSONPath解析失败（{json_path}）\") from e\nE           ValueError: Failed: JSONPath解析失败（$.searchCount）\n\ncommons\\api_base.py:459: ValueError\n\nThe above exception was the direct cause of the following exception:\n\nself = <template_mt4.test_cloudTrader.test_oac_proportion.Test_openandclouseall.Test_orderseng2 object at 0x0000025C42B3F640>\nvar_manager = <template_mt4.commons.variable_manager.VariableManager object at 0x0000025C42B47400>\nlogged_session = <template_mt4.commons.session.EnvironmentSession object at 0x0000025C42ABD940>\n\n    @pytest.mark.retry(n=3, delay=20)\n    @allure.title(\"跟单管理-VPS管理-喊单者账号-开仓后\")\n    def test_query_opentrader_getRecordList(self, var_manager, logged_session):\n        with allure.step(\"1. 发送请求\"):\n            trader_account = var_manager.get_variable(\"trader_account\")\n            vpsrunIpAddr = var_manager.get_variable(\"vpsrunIpAddr\")\n            params = {\n                \"_t\": current_timestamp_seconds,\n                \"pageNo\": \"1\",\n                \"pageSize\": \"50\",\n                \"accountLike\": trader_account,\n                \"serverNameLike\": \"\",\n                \"connectTraderLike\": \"\",\n                \"connected\": \"\",\n                \"runIpAddr\": vpsrunIpAddr\n            }\n            response = self.send_get_request(\n                logged_session,\n                '/blockchain/account/getRecordList',\n                params=params\n            )\n    \n        with allure.step(\"2. 返回校验\"):\n>           self.assert_json_value(\n                response,\n                \"$.searchCount\",\n                True,\n                \"响应searchCount字段应为true\"\n            )\n\ntest_cloudTrader\\test_oac_proportion.py:1884: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template_mt4.test_cloudTrader.test_oac_proportion.Test_openandclouseall.Test_orderseng2 object at 0x0000025C42B3F640>\nresponse = <Response [200]>, json_path = '$.searchCount', expected_value = True\nerror_msg_prefix = '响应searchCount字段应为true'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n    \n            assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\n        except Exception as e:\n            with allure.step(f\"JSON断言失败: {json_path}\"):\n                allure.attach(json_path, \"JSON路径\", allure.attachment_type.TEXT)\n                allure.attach(str(expected_value), \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(response.text[:500], \"响应内容\", allure.attachment_type.TEXT)\n            logger.error(\n                f\"[{self._get_current_time()}] JSON断言失败: {str(e)} | 路径: {json_path} | 响应: {response.text[:500]}\")\n>           raise AssertionError(f\"Failed: {error_msg_prefix}（JSON断言失败）\") from e\nE           AssertionError: Failed: 响应searchCount字段应为true（JSON断言失败）\n\ncommons\\api_base.py:482: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "\n    ### 测试说明\n    - 前置条件：有喊单账号、跟单账号，跟单已经和喊单有订阅关系\n      1. MT4进行登录，然后进行开仓，总手数0.2\n      2. 账号管理-持仓订单-喊单和跟单数据校验\n      3. 跟单管理-开仓日志-喊单和跟单数据校验\n      4. 跟单管理-VPS管理-喊单和跟单数据校验\n      5. MT4进行平仓\n      6.账号管理-持仓订单-喊单和跟单数据校验\n      7.跟单管理-开仓日志-喊单和跟单数据校验\n      8.跟单管理-VPS管理-喊单和跟单数据校验\n    - 预期结果：喊单和跟单数据校验正确\n    ",
    "status" : "failed",
    "statusMessage" : "AssertionError: Failed: 响应searchCount字段应为true（JSON断言失败）",
    "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Decodes the JSON response body (if any) as a Python object.\n    \n        This may return a dictionary, list, etc. depending on what is in the response.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n..\\venv\\lib\\site-packages\\requests\\models.py:976: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\python_tools\\python\\lib\\json\\__init__.py:357: in loads\n    return _default_decoder.decode(s)\nD:\\python_tools\\python\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x0000025C1913F640>\ns = '访问超时，请稍后再试!', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nD:\\python_tools\\python\\lib\\json\\decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <template_mt4.test_cloudTrader.test_oac_proportion.Test_openandclouseall.Test_orderseng2 object at 0x0000025C42B3F640>\nresponse = <Response [200]>, json_path = '$.searchCount'\n\n    def extract_jsonpath(self, response: requests.Response, json_path: str) -> Any:\n        \"\"\"使用jsonpath-ng解析JSON路径（分层提示优化）\"\"\"\n        try:\n>           json_data = response.json()\n\ncommons\\api_base.py:449: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Decodes the JSON response body (if any) as a Python object.\n    \n        This may return a dictionary, list, etc. depending on what is in the response.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n..\\venv\\lib\\site-packages\\requests\\models.py:980: JSONDecodeError\n\nThe above exception was the direct cause of the following exception:\n\nself = <template_mt4.test_cloudTrader.test_oac_proportion.Test_openandclouseall.Test_orderseng2 object at 0x0000025C42B3F640>\nresponse = <Response [200]>, json_path = '$.searchCount', expected_value = True\nerror_msg_prefix = '响应searchCount字段应为true'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n>           actual_value = self.extract_jsonpath(response, json_path)\n\ncommons\\api_base.py:464: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template_mt4.test_cloudTrader.test_oac_proportion.Test_openandclouseall.Test_orderseng2 object at 0x0000025C42B3F640>\nresponse = <Response [200]>, json_path = '$.searchCount'\n\n    def extract_jsonpath(self, response: requests.Response, json_path: str) -> Any:\n        \"\"\"使用jsonpath-ng解析JSON路径（分层提示优化）\"\"\"\n        try:\n            json_data = response.json()\n            jsonpath_expr = parse(json_path)\n            matches = jsonpath_expr.find(json_data)\n            return [match.value for match in matches] if matches else None\n        except Exception as e:\n            with allure.step(\"JSONPath解析异常\"):\n                allure.attach(json_path, \"解析路径\", allure.attachment_type.TEXT)\n                allure.attach(response.text[:500], \"响应内容\", allure.attachment_type.TEXT)\n                allure.attach(str(e), \"解析错误\", allure.attachment_type.TEXT)\n            logger.error(f\"JSONPath解析失败: {json_path} | 响应: {response.text[:500]}\")\n>           raise ValueError(f\"Failed: JSONPath解析失败（{json_path}）\") from e\nE           ValueError: Failed: JSONPath解析失败（$.searchCount）\n\ncommons\\api_base.py:459: ValueError\n\nThe above exception was the direct cause of the following exception:\n\nself = <template_mt4.test_cloudTrader.test_oac_proportion.Test_openandclouseall.Test_orderseng2 object at 0x0000025C42B3F640>\nvar_manager = <template_mt4.commons.variable_manager.VariableManager object at 0x0000025C42B47400>\nlogged_session = <template_mt4.commons.session.EnvironmentSession object at 0x0000025C42ABD940>\n\n    @pytest.mark.retry(n=3, delay=20)\n    @allure.title(\"跟单管理-VPS管理-喊单者账号-开仓后\")\n    def test_query_opentrader_getRecordList(self, var_manager, logged_session):\n        with allure.step(\"1. 发送请求\"):\n            trader_account = var_manager.get_variable(\"trader_account\")\n            vpsrunIpAddr = var_manager.get_variable(\"vpsrunIpAddr\")\n            params = {\n                \"_t\": current_timestamp_seconds,\n                \"pageNo\": \"1\",\n                \"pageSize\": \"50\",\n                \"accountLike\": trader_account,\n                \"serverNameLike\": \"\",\n                \"connectTraderLike\": \"\",\n                \"connected\": \"\",\n                \"runIpAddr\": vpsrunIpAddr\n            }\n            response = self.send_get_request(\n                logged_session,\n                '/blockchain/account/getRecordList',\n                params=params\n            )\n    \n        with allure.step(\"2. 返回校验\"):\n>           self.assert_json_value(\n                response,\n                \"$.searchCount\",\n                True,\n                \"响应searchCount字段应为true\"\n            )\n\ntest_cloudTrader\\test_oac_proportion.py:1884: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <template_mt4.test_cloudTrader.test_oac_proportion.Test_openandclouseall.Test_orderseng2 object at 0x0000025C42B3F640>\nresponse = <Response [200]>, json_path = '$.searchCount', expected_value = True\nerror_msg_prefix = '响应searchCount字段应为true'\n\n    def assert_json_value(self, response, json_path, expected_value, error_msg_prefix):\n        \"\"\"断言JSON路径对应的值（分层提示优化）\"\"\"\n        try:\n            actual_value = self.extract_jsonpath(response, json_path)\n            if isinstance(actual_value, list) and len(actual_value) == 1:\n                actual_value = actual_value[0]\n    \n            with allure.step(f\"断言JSON路径: {json_path}\"):\n                allure.attach(response.url, \"请求URL\", allure.attachment_type.TEXT)\n                allure.attach(f\"期望值: {self.serialize_data(expected_value)}\", \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(f\"实际值: {self.serialize_data(actual_value)}\", \"实际值\", allure.attachment_type.TEXT)\n    \n            assert actual_value == expected_value, \\\n                f\"Failed: {error_msg_prefix}（JSON路径值不匹配）\"\n        except Exception as e:\n            with allure.step(f\"JSON断言失败: {json_path}\"):\n                allure.attach(json_path, \"JSON路径\", allure.attachment_type.TEXT)\n                allure.attach(str(expected_value), \"预期值\", allure.attachment_type.TEXT)\n                allure.attach(response.text[:500], \"响应内容\", allure.attachment_type.TEXT)\n            logger.error(\n                f\"[{self._get_current_time()}] JSON断言失败: {str(e)} | 路径: {json_path} | 响应: {response.text[:500]}\")\n>           raise AssertionError(f\"Failed: {error_msg_prefix}（JSON断言失败）\") from e\nE           AssertionError: Failed: 响应searchCount字段应为true（JSON断言失败）\n\ncommons\\api_base.py:482: AssertionError",
    "steps" : [ {
      "name" : "1. 发送请求",
      "time" : {
        "start" : 1758504337586,
        "stop" : 1758504341173,
        "duration" : 3587
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "执行 GET 请求",
        "time" : {
          "start" : 1758504337586,
          "stop" : 1758504341173,
          "duration" : 3587
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "请求详情",
          "time" : {
            "start" : 1758504337586,
            "stop" : 1758504337587,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "4b094313055d3126",
            "name" : "请求URL",
            "source" : "4b094313055d3126.txt",
            "type" : "text/plain",
            "size" : 33
          }, {
            "uid" : "461ce5228adf68c8",
            "name" : "请求头",
            "source" : "461ce5228adf68c8.json",
            "type" : "application/json",
            "size" : 429
          }, {
            "uid" : "1d372962af532615",
            "name" : "请求体（表单/文件）",
            "source" : "1d372962af532615.txt",
            "type" : "text/plain",
            "size" : 173
          } ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "hasContent" : true,
          "attachmentsCount" : 3,
          "shouldDisplayMessage" : false
        }, {
          "name" : "响应详情",
          "time" : {
            "start" : 1758504338159,
            "stop" : 1758504338159,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "c416ed2d881c71bc",
            "name" : "响应状态码",
            "source" : "c416ed2d881c71bc.txt",
            "type" : "text/plain",
            "size" : 3
          }, {
            "uid" : "184937b27c976e73",
            "name" : "响应头",
            "source" : "184937b27c976e73.json",
            "type" : "application/json",
            "size" : 302
          }, {
            "uid" : "fce382a155877e66",
            "name" : "响应体（文本）",
            "source" : "fce382a155877e66.txt",
            "type" : "text/plain",
            "size" : 31
          } ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "hasContent" : true,
          "attachmentsCount" : 3,
          "shouldDisplayMessage" : false
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 2,
        "hasContent" : true,
        "attachmentsCount" : 6,
        "shouldDisplayMessage" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 3,
      "hasContent" : true,
      "attachmentsCount" : 6,
      "shouldDisplayMessage" : false
    }, {
      "name" : "2. 返回校验",
      "time" : {
        "start" : 1758504341173,
        "stop" : 1758504341177,
        "duration" : 4
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Failed: 响应searchCount字段应为true（JSON断言失败）\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\template_mt4\\test_cloudTrader\\test_oac_proportion.py\", line 1884, in test_query_opentrader_getRecordList\n    self.assert_json_value(\n  File \"D:\\pycharm_test\\template_mt4\\commons\\api_base.py\", line 482, in assert_json_value\n    raise AssertionError(f\"Failed: {error_msg_prefix}（JSON断言失败）\") from e\n",
      "steps" : [ {
        "name" : "JSONPath解析异常",
        "time" : {
          "start" : 1758504341173,
          "stop" : 1758504341176,
          "duration" : 3
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "bbbdcb3db2429c52",
          "name" : "解析路径",
          "source" : "bbbdcb3db2429c52.txt",
          "type" : "text/plain",
          "size" : 13
        }, {
          "uid" : "39fbc1ce838b3e59",
          "name" : "响应内容",
          "source" : "39fbc1ce838b3e59.txt",
          "type" : "text/plain",
          "size" : 31
        }, {
          "uid" : "52828da3371bc77e",
          "name" : "解析错误",
          "source" : "52828da3371bc77e.txt",
          "type" : "text/plain",
          "size" : 41
        } ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "hasContent" : true,
        "attachmentsCount" : 3,
        "shouldDisplayMessage" : false
      }, {
        "name" : "JSON断言失败: $.searchCount",
        "time" : {
          "start" : 1758504341176,
          "stop" : 1758504341177,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "97fa1a01e776a352",
          "name" : "JSON路径",
          "source" : "97fa1a01e776a352.txt",
          "type" : "text/plain",
          "size" : 13
        }, {
          "uid" : "7b222702af525078",
          "name" : "预期值",
          "source" : "7b222702af525078.txt",
          "type" : "text/plain",
          "size" : 4
        }, {
          "uid" : "8cf6822cf12f845b",
          "name" : "响应内容",
          "source" : "8cf6822cf12f845b.txt",
          "type" : "text/plain",
          "size" : 31
        } ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "hasContent" : true,
        "attachmentsCount" : 3,
        "shouldDisplayMessage" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 2,
      "hasContent" : true,
      "attachmentsCount" : 6,
      "shouldDisplayMessage" : true
    } ],
    "attachments" : [ {
      "uid" : "17682bffebf571a9",
      "name" : "log",
      "source" : "17682bffebf571a9.txt",
      "type" : "text/plain",
      "size" : 2723
    } ],
    "parameters" : [ ],
    "stepsCount" : 7,
    "hasContent" : true,
    "attachmentsCount" : 13,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "场景2：跟随方式-按比例-固定比例50%"
  }, {
    "name" : "feature",
    "value" : "跟随方式-按比例"
  }, {
    "name" : "tag",
    "value" : "retry(n=3, delay=20)"
  }, {
    "name" : "parentSuite",
    "value" : "test_cloudTrader"
  }, {
    "name" : "suite",
    "value" : "test_oac_proportion"
  }, {
    "name" : "subSuite",
    "value" : "Test_openandclouseall"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "4044-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_cloudTrader.test_oac_proportion"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "retry(n=3, delay=20)" ]
  },
  "source" : "caba684e9406570.json",
  "parameterValues" : [ ]
}