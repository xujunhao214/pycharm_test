{"name": "数据库校验-复制下单平仓数据-数据校验", "status": "broken", "statusDetails": {"message": "TimeoutError: 等待超时（30秒），未查询到任何数据。\nSQL: \n                           SELECT \n                               fod.size,\n                               fod.close_no,\n                               fod.magical,\n                               fod.open_price,\n                               fod.symbol,\n                               fod.order_no,\n                               foi.true_total_lots,\n                               foi.order_no,\n                               foi.operation_type,\n                               foi.create_time,\n                               foi.status,\n                               foi.min_lot_size,\n                               foi.max_lot_size,\n                               foi.total_lots,\n                               foi.master_order,\n                               foi.total_orders\n                           FROM \n                               follow_order_detail fod\n                           INNER JOIN \n                               follow_order_instruct foi \n                           ON \n                               foi.order_no = fod.close_no COLLATE utf8mb4_0900_ai_ci\n                           WHERE foi.operation_type = %s\n                               AND fod.account = %s\n                               AND fod.trader_id = %s\n                       \n参数: ('1', '300162', 6348)", "trace": "self = <lingkuan_refine.test_cloudTrader.test_cloudOrderClose.TestCloudOrderType.TestMasOrderSend6 object at 0x00000203D3F7C340>\nvar_manager = <lingkuan_refine.commons.variable_manager.VariableManager object at 0x00000203D3FDC760>\ndb_transaction = <pymysql.connections.Connection object at 0x00000203D3ED7D60>\n\n    @allure.title(\"数据库校验-复制下单平仓数据-数据校验\")\n    def test_copy_verify_close_db2(self, var_manager, db_transaction):\n        \"\"\"验证复制下单平仓后数据库中的订单数据正确性\"\"\"\n        with allure.step(\"查询复制平仓订单数据\"):\n            cloudTrader_user_accounts_4 = var_manager.get_variable(\"cloudTrader_user_accounts_4\")\n            cloudTrader_vps_ids_3 = var_manager.get_variable(\"cloudTrader_vps_ids_3\")\n    \n            sql = \"\"\"\n                       SELECT\n                           fod.size,\n                           fod.close_no,\n                           fod.magical,\n                           fod.open_price,\n                           fod.symbol,\n                           fod.order_no,\n                           foi.true_total_lots,\n                           foi.order_no,\n                           foi.operation_type,\n                           foi.create_time,\n                           foi.status,\n                           foi.min_lot_size,\n                           foi.max_lot_size,\n                           foi.total_lots,\n                           foi.master_order,\n                           foi.total_orders\n                       FROM\n                           follow_order_detail fod\n                       INNER JOIN\n                           follow_order_instruct foi\n                       ON\n                           foi.order_no = fod.close_no COLLATE utf8mb4_0900_ai_ci\n                       WHERE foi.operation_type = %s\n                           AND fod.account = %s\n                           AND fod.trader_id = %s\n                   \"\"\"\n            params = ('1', cloudTrader_user_accounts_4, cloudTrader_vps_ids_3)\n    \n            # 轮询等待数据库记录\n>           db_data = self.wait_for_database_record_with_timezone(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"fod.close_time\"\n            )\n\ntest_cloudTrader\\test_cloudOrderClose.py:1390: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_refine.test_cloudTrader.test_cloudOrderClose.TestCloudOrderType.TestMasOrderSend6 object at 0x00000203D3F7C340>\ndb_transaction = <pymysql.connections.Connection object at 0x00000203D3ED7D60>\nsql = '\\n                           SELECT \\n                               fod.size,\\n                               fod.cl...                  AND fod.account = %s\\n                               AND fod.trader_id = %s\\n                       '\nparams = ('1', '300162', 6348), time_field = 'fod.close_time', time_range = 1\norder_by = 'create_time DESC', timeout = 30, poll_interval = 2\nstable_period = 3, timezone_offset = 5\n\n    def wait_for_database_record_with_timezone(\n            self,\n            db_transaction: pymysql.connections.Connection,\n            sql: str,\n            params: tuple = (),\n            time_field: Optional[str] = None,\n            time_range: int = MYSQL_TIME,\n            order_by: str = \"create_time DESC\",\n            timeout: int = WAIT_TIMEOUT,\n            poll_interval: int = POLL_INTERVAL,\n            stable_period: int = STBLE_PERIOD,\n            timezone_offset: int = TIMEZONE_OFFSET\n    ) -> List[Dict[str, Any]]:\n        \"\"\"轮询等待数据库记录出现（等待数据稳定），支持时区转换\"\"\"\n        import time\n        start_time = time.time()\n        last_result = None\n        stable_start_time = None\n        has_data = False  # 标记是否查询到过数据\n        final_result = None  # 存储最终稳定结果\n    \n        # 生成时区偏移字符串（如 \"+08:00\"）\n        offset_str = f\"{timezone_offset:+03d}:00\"\n    \n        logger.info(\n            f\"[{self._get_current_time()}] 开始等待数据库记录稳定（时区偏移: {offset_str}）| \"\n            f\"SQL: {sql[:200]} | \"\n            f\"超时: {timeout}秒 | \"\n            f\"稳定期: {stable_period}秒\"\n        )\n        with allure.step(f\"等待数据库记录稳定（时区: {offset_str}，超时: {timeout}秒）\"):\n            pass\n    \n        while time.time() - start_time < timeout:\n            try:\n                db_transaction.commit()  # 刷新事务\n                # 轮询过程中不附加到报告\n                result = self._execute_query_with_timezone(\n                    db_transaction, sql, params, time_field, order_by, time_range, offset_str,\n                    attach_to_allure=False\n                )\n    \n                # 检查是否有数据\n                if len(result) > 0:\n                    has_data = True\n                    # 判断结果是否稳定（数量和内容都不变）\n                    if self._is_result_stable(result, last_result):\n                        if stable_start_time is None:\n                            stable_start_time = time.time()\n                            logger.debug(f\"[{self._get_current_time()}] 数据首次稳定，开始计时\")\n                        elif time.time() - stable_start_time >= stable_period:\n                            final_result = result  # 记录最终稳定结果\n                            logger.info(\n                                f\"[{self._get_current_time()}] 数据已稳定{stable_period}秒（耗时{time.time() - start_time:.1f}秒）| \"\n                                f\"结果数: {len(result)}\"\n                            )\n                            allure.attach(\n                                f\"数据已稳定{stable_period}秒（总耗时{time.time() - start_time:.1f}秒）\",\n                                \"等待结果\",\n                                allure.attachment_type.TEXT\n                            )\n                            break  # 数据稳定，跳出轮询\n                    else:\n                        stable_start_time = None  # 结果变化，重置稳定计时器\n                        logger.debug(f\"[{self._get_current_time()}] 数据仍在变化，重置稳定计时器\")\n                else:\n                    # 结果为空，重置稳定计时器\n                    stable_start_time = None\n                    has_data = False\n                    logger.debug(f\"[{self._get_current_time()}] 查询结果为空，继续等待\")\n    \n                last_result = result\n                elapsed = time.time() - start_time\n                logger.debug(\n                    f\"[{self._get_current_time()}] 等待数据稳定（已等待{elapsed:.1f}秒）| \"\n                    f\"当前结果数: {len(result)} | \"\n                    f\"稳定时间: {time.time() - stable_start_time if stable_start_time else 0:.1f}/{stable_period}秒\"\n                )\n                time.sleep(poll_interval)\n    \n            except Exception as e:\n                logger.warning(f\"[{self._get_current_time()}] 轮询查询异常: {str(e)} | 继续等待...\")\n                time.sleep(poll_interval)\n    \n        # 超时处理 - 获取最终结果\n        if final_result is None:\n            # 最后一次查询附加到报告\n            final_result = self._execute_query_with_timezone(\n                db_transaction, sql, params, time_field, order_by, time_range, offset_str\n            )\n    \n        # 轮询结束后附加最终结果到报告\n        display_count = min(len(final_result), 50)\n        with allure.step(\"数据库查询结果（最终稳定结果）\"):\n            allure.attach(sql, \"执行SQL\", allure.attachment_type.TEXT)\n            allure.attach(str(params), \"SQL参数\", allure.attachment_type.TEXT)\n            allure.attach(\n                self.serialize_data(final_result[:display_count]),\n                f\"查询结果（共{len(final_result)}条，显示前50条）\",\n                allure.attachment_type.JSON\n            )\n    \n        # 判断是否超时\n        if len(final_result) == 0:\n            error_msg = (\n                f\"等待超时（{timeout}秒），未查询到任何数据。\\n\"\n                f\"SQL: {sql}\\n\"\n                f\"参数: {params}\"\n            )\n>           raise TimeoutError(error_msg)\nE           TimeoutError: 等待超时（30秒），未查询到任何数据。\nE           SQL: \nE                                      SELECT \nE                                          fod.size,\nE                                          fod.close_no,\nE                                          fod.magical,\nE                                          fod.open_price,\nE                                          fod.symbol,\nE                                          fod.order_no,\nE                                          foi.true_total_lots,\nE                                          foi.order_no,\nE                                          foi.operation_type,\nE                                          foi.create_time,\nE                                          foi.status,\nE                                          foi.min_lot_size,\nE                                          foi.max_lot_size,\nE                                          foi.total_lots,\nE                                          foi.master_order,\nE                                          foi.total_orders\nE                                      FROM \nE                                          follow_order_detail fod\nE                                      INNER JOIN \nE                                          follow_order_instruct foi \nE                                      ON \nE                                          foi.order_no = fod.close_no COLLATE utf8mb4_0900_ai_ci\nE                                      WHERE foi.operation_type = %s\nE                                          AND fod.account = %s\nE                                          AND fod.trader_id = %s\nE                                  \nE           参数: ('1', '300162', 6348)\n\ncommons\\api_base.py:835: TimeoutError"}, "description": "\n    ### 测试说明\n    - 前置条件：有云策略和云跟单\n      1. 进行开仓，手数范围0.1-1，总订单数量2\n      2. 平仓-平仓订单数量-1，订单类型-内部订单\n      3. 校验数据库是否有未平仓订单-应该没有\n      4. 平仓-平仓订单数量-1，订单类型-外部订单\n      5. 校验订单数据是否正确\n    - 预期结果：平仓的订单类型功能正确\n    ", "steps": [{"name": "查询复制平仓订单数据", "status": "broken", "statusDetails": {"message": "TimeoutError: 等待超时（30秒），未查询到任何数据。\nSQL: \n                           SELECT \n                               fod.size,\n                               fod.close_no,\n                               fod.magical,\n                               fod.open_price,\n                               fod.symbol,\n                               fod.order_no,\n                               foi.true_total_lots,\n                               foi.order_no,\n                               foi.operation_type,\n                               foi.create_time,\n                               foi.status,\n                               foi.min_lot_size,\n                               foi.max_lot_size,\n                               foi.total_lots,\n                               foi.master_order,\n                               foi.total_orders\n                           FROM \n                               follow_order_detail fod\n                           INNER JOIN \n                               follow_order_instruct foi \n                           ON \n                               foi.order_no = fod.close_no COLLATE utf8mb4_0900_ai_ci\n                           WHERE foi.operation_type = %s\n                               AND fod.account = %s\n                               AND fod.trader_id = %s\n                       \n参数: ('1', '300162', 6348)\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_refine\\test_cloudTrader\\test_cloudOrderClose.py\", line 1390, in test_copy_verify_close_db2\n    db_data = self.wait_for_database_record_with_timezone(\n  File \"D:\\pycharm_test\\lingkuan_refine\\commons\\api_base.py\", line 835, in wait_for_database_record_with_timezone\n    raise TimeoutError(error_msg)\n"}, "steps": [{"name": "等待数据库记录稳定（时区: +05:00，超时: 30秒）", "status": "passed", "start": 1755682433700, "stop": 1755682433700}, {"name": "数据库查询结果", "status": "passed", "attachments": [{"name": "执行SQL", "source": "166511bb-2286-4d28-829b-9461077ee2a2-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "74365313-498e-4e83-ae0e-31b15888f509-attachment.txt", "type": "text/plain"}, {"name": "查询结果（共0条，显示前50条）", "source": "9296cfb0-65a4-433e-9274-944aa2a3539d-attachment.json", "type": "application/json"}], "start": 1755682465556, "stop": 1755682465558}, {"name": "数据库查询结果（最终稳定结果）", "status": "passed", "attachments": [{"name": "执行SQL", "source": "18fd828c-14c6-4ceb-9377-5914a15345bc-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "d47d5de3-3c51-43c6-8b99-8e840cd3b850-attachment.txt", "type": "text/plain"}, {"name": "查询结果（共0条，显示前50条）", "source": "39cd0783-92e3-4913-afd8-3f42f29e8a99-attachment.json", "type": "application/json"}], "start": 1755682465558, "stop": 1755682465559}], "start": 1755682433700, "stop": 1755682465559}], "attachments": [{"name": "log", "source": "ca899407-dd50-41b2-9087-ea6dd69f54bf-attachment.txt", "type": "text/plain"}], "start": 1755682433700, "stop": 1755682465559, "uuid": "04f78db6-6dd5-4594-b7e1-7fbb94ccdc4d", "historyId": "95b0965b80cd88aadd4e895e58dbac97", "testCaseId": "95b0965b80cd88aadd4e895e58dbac97", "fullName": "test_cloudTrader.test_cloudOrderClose.TestMasOrderSend6#test_copy_verify_close_db2", "labels": [{"name": "feature", "value": "云策略复制下单-平仓的功能校验"}, {"name": "story", "value": "场景6：平仓的订单类型功能校验-外部订单"}, {"name": "tag", "value": "retry(n=3, delay=5)"}, {"name": "parentSuite", "value": "test_cloudTrader"}, {"name": "suite", "value": "test_cloudOrderClose"}, {"name": "subSuite", "value": "TestCloudOrderType"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "46924-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cloudTrader.test_cloudOrderClose"}]}