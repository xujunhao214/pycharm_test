{
  "uid" : "3a756c6e7d5b9b7c",
  "name" : "出现漏平-redis数据和数据库的数据做比对",
  "fullName" : "test_vps.test_vpsOrder_open_level.TestLeakagelevel#test_dbquery_redis",
  "historyId" : "c90ae9479c1ad71426afbb0eb6bde40b",
  "time" : {
    "start" : 1756184267011,
    "stop" : 1756184281502,
    "duration" : 14491
  },
  "description" : "\n        ### 用例说明\n        - 前置条件：有vps策略和vps跟单\n        - 操作步骤：\n          1. 修改vps跟单账号平仓-关闭\n          2. 进行开仓\n          3. 进行平仓\n          4. 跟单账号平仓失败，有漏单数据，把redis数据和MySQL数据进行校验\n          5. 修改vps跟单账号平仓-开启\n        - 预期结果：vps跟单账号平仓-关闭，有漏单数据\n        ",
  "descriptionHtml" : "<pre><code>    ### 用例说明\n    - 前置条件：有vps策略和vps跟单\n    - 操作步骤：\n      1. 修改vps跟单账号平仓-关闭\n      2. 进行开仓\n      3. 进行平仓\n      4. 跟单账号平仓失败，有漏单数据，把redis数据和MySQL数据进行校验\n      5. 修改vps跟单账号平仓-开启\n    - 预期结果：vps跟单账号平仓-关闭，有漏单数据\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: Failed: 数据列表不匹配（长度不匹配）",
  "statusTrace" : "self = <lingkuan_refine.test_vps.test_vpsOrder_open_level.TestLeakageopen_level.TestLeakagelevel object at 0x00000170333B9130>\nvar_manager = <lingkuan_refine.commons.variable_manager.VariableManager object at 0x0000017033595160>\ndb_transaction = <pymysql.connections.Connection object at 0x00000170335AEA30>\nredis_order_data_close = [{'lots': 0.77, 'magic': 11085, 'openPrice': 3372.58, 'symbol': 'XAUUSD', ...}, {'lots': 0.71, 'magic': 74453, 'openPr... 3378.23, 'symbol': 'XAUUSD', ...}, {'lots': 0.73, 'magic': 34094, 'openPrice': 3378.23, 'symbol': 'XAUUSD', ...}, ...]\n\n    @allure.title(\"出现漏平-redis数据和数据库的数据做比对\")\n    def test_dbquery_redis(self, var_manager, db_transaction, redis_order_data_close):\n        with allure.step(\"1. 获取订单详情界面跟单账号数据\"):\n            trader_ordersend = var_manager.get_variable(\"trader_ordersend\")\n            new_user = var_manager.get_variable(\"new_user\")\n            symbol = trader_ordersend[\"symbol\"]\n    \n            sql = f\"\"\"\n                       SELECT *\n                       FROM follow_order_detail\n                       WHERE symbol LIKE %s\n                         AND source_user = %s\n                         AND account = %s\n                       \"\"\"\n            params = (\n                f\"%{symbol}%\",\n                new_user[\"account\"],\n                new_user[\"account\"],\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n            db_data = self.query_database_with_time(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"create_time\"\n            )\n    \n        with allure.step(\"2. 转换Redis数据为可比较格式\"):\n            if not redis_order_data_close:\n                pytest.fail(\"Redis中未查询到订单数据\")\n    \n            # 转换Redis数据为与数据库一致的格式\n            vps_redis_comparable_list_level = convert_redis_orders_to_comparable_list(redis_order_data_close)\n            logging.info(f\"转换后的Redis数据: {vps_redis_comparable_list_level}\")\n    \n            # 将转换后的数据存入变量管理器\n            var_manager.set_runtime_variable(\"vps_redis_comparable_list_level\", vps_redis_comparable_list_level)\n    \n        with allure.step(\"3. 比较Redis与数据库数据\"):\n            # 假设db_data是之前从数据库查询的结果\n            if not db_data:\n                pytest.fail(\"数据库中未查询到订单数据\")\n    \n            # 提取数据库中的关键字段（根据实际数据库表结构调整）\n            db_comparable_list = [\n                {\n                    \"order_no\": record[\"order_no\"],  # 数据库order_no → 统一字段order_no\n                    \"magical\": record[\"magical\"],  # 数据库magical → 统一字段magical\n                    \"size\": float(record[\"size\"]),  # 数据库size → 统一字段size\n                    \"open_price\": float(record[\"open_price\"]),\n                    \"symbol\": record[\"symbol\"]\n                }\n                for record in db_data\n            ]\n            logging.info(f\"数据库转换后: {db_comparable_list}\")\n            # 比较两个列表（可根据需要调整比较逻辑）\n>           self.assert_data_lists_equal(\n                actual=vps_redis_comparable_list_level,\n                expected=db_comparable_list,\n                fields_to_compare=[\"order_no\", \"magical\", \"size\", \"open_price\", \"symbol\"],\n                tolerance=1e-6  # 浮点数比较容差\n            )\n\ntest_vps\\test_vpsOrder_open_level.py:1115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_refine.test_vps.test_vpsOrder_open_level.TestLeakageopen_level.TestLeakagelevel object at 0x00000170333B9130>\nactual = [{'magical': 11085, 'open_price': 3372.58, 'order_no': 363592, 'size': 0.77, ...}, {'magical': 74453, 'open_price': 33...no': 363736, 'size': 0.55, ...}, {'magical': 34094, 'open_price': 3378.23, 'order_no': 363725, 'size': 0.73, ...}, ...]\nexpected = [{'magical': 34576, 'open_price': 3378.77, 'order_no': 363759, 'size': 1.0, ...}]\nfields_to_compare = ['order_no', 'magical', 'size', 'open_price', 'symbol']\ntolerance = 1e-06, error_msg_prefix = '数据列表不匹配'\n\n    def assert_data_lists_equal(self, actual, expected, fields_to_compare, tolerance=1e-9,\n                                error_msg_prefix=\"数据列表不匹配\"):\n        \"\"\"断言两个数据列表的指定字段相等（带Allure分层提示）\"\"\"\n        actual_sorted = sorted(actual, key=lambda x: x[\"order_no\"])\n        expected_sorted = sorted(expected, key=lambda x: x[\"order_no\"])\n    \n        with allure.step(\"断言数据列表相等\"):\n            allure.attach(f\"比较字段: {fields_to_compare}\", \"比较维度\", allure.attachment_type.TEXT)\n            allure.attach(f\"浮点数容差: {tolerance}\", \"精度设置\", allure.attachment_type.TEXT)\n            allure.attach(self.serialize_data(actual_sorted), \"实际列表\", allure.attachment_type.JSON)\n            allure.attach(self.serialize_data(expected_sorted), \"预期列表\", allure.attachment_type.JSON)\n    \n>       assert len(actual_sorted) == len(expected_sorted), \\\n            f\"Failed: {error_msg_prefix}（长度不匹配）\"\nE       AssertionError: Failed: 数据列表不匹配（长度不匹配）\n\ncommons\\api_base.py:1144: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "environment",
    "time" : {
      "start" : 1756184119581,
      "stop" : 1756184119581,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "test_group",
    "time" : {
      "start" : 1756184119582,
      "stop" : 1756184119582,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "redis_order_data_close",
    "time" : {
      "start" : 1756184266355,
      "stop" : 1756184267011,
      "duration" : 656
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db_config",
    "time" : {
      "start" : 1756184121196,
      "stop" : 1756184121196,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db_transaction",
    "time" : {
      "start" : 1756184266355,
      "stop" : 1756184266355,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "redis_client",
    "time" : {
      "start" : 1756184266355,
      "stop" : 1756184266355,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db",
    "time" : {
      "start" : 1756184266120,
      "stop" : 1756184266355,
      "duration" : 235
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "var_manager",
    "time" : {
      "start" : 1756184119582,
      "stop" : 1756184119582,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "description" : "\n        ### 用例说明\n        - 前置条件：有vps策略和vps跟单\n        - 操作步骤：\n          1. 修改vps跟单账号平仓-关闭\n          2. 进行开仓\n          3. 进行平仓\n          4. 跟单账号平仓失败，有漏单数据，把redis数据和MySQL数据进行校验\n          5. 修改vps跟单账号平仓-开启\n        - 预期结果：vps跟单账号平仓-关闭，有漏单数据\n        ",
    "status" : "failed",
    "statusMessage" : "AssertionError: Failed: 数据列表不匹配（长度不匹配）",
    "statusTrace" : "self = <lingkuan_refine.test_vps.test_vpsOrder_open_level.TestLeakageopen_level.TestLeakagelevel object at 0x00000170333B9130>\nvar_manager = <lingkuan_refine.commons.variable_manager.VariableManager object at 0x0000017033595160>\ndb_transaction = <pymysql.connections.Connection object at 0x00000170335AEA30>\nredis_order_data_close = [{'lots': 0.77, 'magic': 11085, 'openPrice': 3372.58, 'symbol': 'XAUUSD', ...}, {'lots': 0.71, 'magic': 74453, 'openPr... 3378.23, 'symbol': 'XAUUSD', ...}, {'lots': 0.73, 'magic': 34094, 'openPrice': 3378.23, 'symbol': 'XAUUSD', ...}, ...]\n\n    @allure.title(\"出现漏平-redis数据和数据库的数据做比对\")\n    def test_dbquery_redis(self, var_manager, db_transaction, redis_order_data_close):\n        with allure.step(\"1. 获取订单详情界面跟单账号数据\"):\n            trader_ordersend = var_manager.get_variable(\"trader_ordersend\")\n            new_user = var_manager.get_variable(\"new_user\")\n            symbol = trader_ordersend[\"symbol\"]\n    \n            sql = f\"\"\"\n                       SELECT *\n                       FROM follow_order_detail\n                       WHERE symbol LIKE %s\n                         AND source_user = %s\n                         AND account = %s\n                       \"\"\"\n            params = (\n                f\"%{symbol}%\",\n                new_user[\"account\"],\n                new_user[\"account\"],\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n            db_data = self.query_database_with_time(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"create_time\"\n            )\n    \n        with allure.step(\"2. 转换Redis数据为可比较格式\"):\n            if not redis_order_data_close:\n                pytest.fail(\"Redis中未查询到订单数据\")\n    \n            # 转换Redis数据为与数据库一致的格式\n            vps_redis_comparable_list_level = convert_redis_orders_to_comparable_list(redis_order_data_close)\n            logging.info(f\"转换后的Redis数据: {vps_redis_comparable_list_level}\")\n    \n            # 将转换后的数据存入变量管理器\n            var_manager.set_runtime_variable(\"vps_redis_comparable_list_level\", vps_redis_comparable_list_level)\n    \n        with allure.step(\"3. 比较Redis与数据库数据\"):\n            # 假设db_data是之前从数据库查询的结果\n            if not db_data:\n                pytest.fail(\"数据库中未查询到订单数据\")\n    \n            # 提取数据库中的关键字段（根据实际数据库表结构调整）\n            db_comparable_list = [\n                {\n                    \"order_no\": record[\"order_no\"],  # 数据库order_no → 统一字段order_no\n                    \"magical\": record[\"magical\"],  # 数据库magical → 统一字段magical\n                    \"size\": float(record[\"size\"]),  # 数据库size → 统一字段size\n                    \"open_price\": float(record[\"open_price\"]),\n                    \"symbol\": record[\"symbol\"]\n                }\n                for record in db_data\n            ]\n            logging.info(f\"数据库转换后: {db_comparable_list}\")\n            # 比较两个列表（可根据需要调整比较逻辑）\n>           self.assert_data_lists_equal(\n                actual=vps_redis_comparable_list_level,\n                expected=db_comparable_list,\n                fields_to_compare=[\"order_no\", \"magical\", \"size\", \"open_price\", \"symbol\"],\n                tolerance=1e-6  # 浮点数比较容差\n            )\n\ntest_vps\\test_vpsOrder_open_level.py:1115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_refine.test_vps.test_vpsOrder_open_level.TestLeakageopen_level.TestLeakagelevel object at 0x00000170333B9130>\nactual = [{'magical': 11085, 'open_price': 3372.58, 'order_no': 363592, 'size': 0.77, ...}, {'magical': 74453, 'open_price': 33...no': 363736, 'size': 0.55, ...}, {'magical': 34094, 'open_price': 3378.23, 'order_no': 363725, 'size': 0.73, ...}, ...]\nexpected = [{'magical': 34576, 'open_price': 3378.77, 'order_no': 363759, 'size': 1.0, ...}]\nfields_to_compare = ['order_no', 'magical', 'size', 'open_price', 'symbol']\ntolerance = 1e-06, error_msg_prefix = '数据列表不匹配'\n\n    def assert_data_lists_equal(self, actual, expected, fields_to_compare, tolerance=1e-9,\n                                error_msg_prefix=\"数据列表不匹配\"):\n        \"\"\"断言两个数据列表的指定字段相等（带Allure分层提示）\"\"\"\n        actual_sorted = sorted(actual, key=lambda x: x[\"order_no\"])\n        expected_sorted = sorted(expected, key=lambda x: x[\"order_no\"])\n    \n        with allure.step(\"断言数据列表相等\"):\n            allure.attach(f\"比较字段: {fields_to_compare}\", \"比较维度\", allure.attachment_type.TEXT)\n            allure.attach(f\"浮点数容差: {tolerance}\", \"精度设置\", allure.attachment_type.TEXT)\n            allure.attach(self.serialize_data(actual_sorted), \"实际列表\", allure.attachment_type.JSON)\n            allure.attach(self.serialize_data(expected_sorted), \"预期列表\", allure.attachment_type.JSON)\n    \n>       assert len(actual_sorted) == len(expected_sorted), \\\n            f\"Failed: {error_msg_prefix}（长度不匹配）\"\nE       AssertionError: Failed: 数据列表不匹配（长度不匹配）\n\ncommons\\api_base.py:1144: AssertionError",
    "steps" : [ {
      "name" : "1. 获取订单详情界面跟单账号数据",
      "time" : {
        "start" : 1756184267011,
        "stop" : 1756184281493,
        "duration" : 14482
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "轮询等待数据稳定（超时: 30秒，稳定期: 2秒）",
        "time" : {
          "start" : 1756184267011,
          "stop" : 1756184281493,
          "duration" : 14482
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "执行单次数据库查询",
          "time" : {
            "start" : 1756184267062,
            "stop" : 1756184270649,
            "duration" : 3587
          },
          "status" : "passed",
          "steps" : [ {
            "name" : "执行数据库查询",
            "time" : {
              "start" : 1756184267063,
              "stop" : 1756184270649,
              "duration" : 3586
            },
            "status" : "passed",
            "steps" : [ ],
            "attachments" : [ {
              "uid" : "b77f7ffb90d52762",
              "name" : "执行SQL",
              "source" : "b77f7ffb90d52762.txt",
              "type" : "text/plain",
              "size" : 373
            }, {
              "uid" : "d0716aa34a55d02b",
              "name" : "SQL参数",
              "source" : "d0716aa34a55d02b.txt",
              "type" : "text/plain",
              "size" : 38
            } ],
            "parameters" : [ ],
            "stepsCount" : 0,
            "hasContent" : true,
            "shouldDisplayMessage" : false,
            "attachmentsCount" : 2
          } ],
          "attachments" : [ {
            "uid" : "1312f58898b84322",
            "name" : "查询条件",
            "source" : "1312f58898b84322.txt",
            "type" : "text/plain",
            "size" : 43
          } ],
          "parameters" : [ ],
          "stepsCount" : 1,
          "hasContent" : true,
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 3
        }, {
          "name" : "轮询中（已等待3.6秒）",
          "time" : {
            "start" : 1756184270649,
            "stop" : 1756184270650,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "5a76edc3d8cef0f5",
            "name" : "当前状态",
            "source" : "5a76edc3d8cef0f5.txt",
            "type" : "text/plain",
            "size" : 15
          }, {
            "uid" : "db011123a2753255",
            "name" : "超时倒计时",
            "source" : "db011123a2753255.txt",
            "type" : "text/plain",
            "size" : 21
          } ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "hasContent" : true,
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 2
        }, {
          "name" : "判断结果稳定性",
          "time" : {
            "start" : 1756184270650,
            "stop" : 1756184270650,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "b29fe0ce9ab4a151",
            "name" : "判断结果",
            "source" : "b29fe0ce9ab4a151.txt",
            "type" : "text/plain",
            "size" : 36
          } ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "hasContent" : true,
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 1
        }, {
          "name" : "数据发生变化",
          "time" : {
            "start" : 1756184270650,
            "stop" : 1756184270650,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "a11e1e0eccb25b14",
            "name" : "状态说明",
            "source" : "a11e1e0eccb25b14.txt",
            "type" : "text/plain",
            "size" : 24
          } ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "hasContent" : true,
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 1
        }, {
          "name" : "执行单次数据库查询",
          "time" : {
            "start" : 1756184272708,
            "stop" : 1756184276177,
            "duration" : 3469
          },
          "status" : "passed",
          "steps" : [ {
            "name" : "执行数据库查询",
            "time" : {
              "start" : 1756184272709,
              "stop" : 1756184276177,
              "duration" : 3468
            },
            "status" : "passed",
            "steps" : [ ],
            "attachments" : [ {
              "uid" : "5cdddc8046f04729",
              "name" : "执行SQL",
              "source" : "5cdddc8046f04729.txt",
              "type" : "text/plain",
              "size" : 373
            }, {
              "uid" : "e092850b9f232e80",
              "name" : "SQL参数",
              "source" : "e092850b9f232e80.txt",
              "type" : "text/plain",
              "size" : 38
            } ],
            "parameters" : [ ],
            "stepsCount" : 0,
            "hasContent" : true,
            "shouldDisplayMessage" : false,
            "attachmentsCount" : 2
          } ],
          "attachments" : [ {
            "uid" : "35999c67706a019c",
            "name" : "查询条件",
            "source" : "35999c67706a019c.txt",
            "type" : "text/plain",
            "size" : 43
          } ],
          "parameters" : [ ],
          "stepsCount" : 1,
          "hasContent" : true,
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 3
        }, {
          "name" : "轮询中（已等待9.2秒）",
          "time" : {
            "start" : 1756184276177,
            "stop" : 1756184276179,
            "duration" : 2
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "5951f0283cf218e5",
            "name" : "当前状态",
            "source" : "5951f0283cf218e5.txt",
            "type" : "text/plain",
            "size" : 15
          }, {
            "uid" : "77e4158b5260030d",
            "name" : "超时倒计时",
            "source" : "77e4158b5260030d.txt",
            "type" : "text/plain",
            "size" : 21
          } ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "hasContent" : true,
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 2
        }, {
          "name" : "判断结果稳定性",
          "time" : {
            "start" : 1756184276179,
            "stop" : 1756184276179,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "747cba813261b805",
            "name" : "判断结果",
            "source" : "747cba813261b805.txt",
            "type" : "text/plain",
            "size" : 42
          } ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "hasContent" : true,
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 1
        }, {
          "name" : "数据首次稳定",
          "time" : {
            "start" : 1756184276179,
            "stop" : 1756184276180,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "1e7dddd5576d90b6",
            "name" : "状态说明",
            "source" : "1e7dddd5576d90b6.txt",
            "type" : "text/plain",
            "size" : 40
          } ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "hasContent" : true,
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 1
        }, {
          "name" : "执行单次数据库查询",
          "time" : {
            "start" : 1756184278240,
            "stop" : 1756184281490,
            "duration" : 3250
          },
          "status" : "passed",
          "steps" : [ {
            "name" : "执行数据库查询",
            "time" : {
              "start" : 1756184278240,
              "stop" : 1756184281490,
              "duration" : 3250
            },
            "status" : "passed",
            "steps" : [ ],
            "attachments" : [ {
              "uid" : "498c6952ec2d2bb6",
              "name" : "执行SQL",
              "source" : "498c6952ec2d2bb6.txt",
              "type" : "text/plain",
              "size" : 373
            }, {
              "uid" : "8e3274fb1efc1186",
              "name" : "SQL参数",
              "source" : "8e3274fb1efc1186.txt",
              "type" : "text/plain",
              "size" : 38
            } ],
            "parameters" : [ ],
            "stepsCount" : 0,
            "hasContent" : true,
            "shouldDisplayMessage" : false,
            "attachmentsCount" : 2
          } ],
          "attachments" : [ {
            "uid" : "e8d45d73f775f51f",
            "name" : "查询条件",
            "source" : "e8d45d73f775f51f.txt",
            "type" : "text/plain",
            "size" : 43
          } ],
          "parameters" : [ ],
          "stepsCount" : 1,
          "hasContent" : true,
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 3
        }, {
          "name" : "轮询中（已等待14.5秒）",
          "time" : {
            "start" : 1756184281490,
            "stop" : 1756184281491,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "68ba833e541904b5",
            "name" : "当前状态",
            "source" : "68ba833e541904b5.txt",
            "type" : "text/plain",
            "size" : 15
          }, {
            "uid" : "ac2f0c5ce805841a",
            "name" : "超时倒计时",
            "source" : "ac2f0c5ce805841a.txt",
            "type" : "text/plain",
            "size" : 21
          } ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "hasContent" : true,
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 2
        }, {
          "name" : "判断结果稳定性",
          "time" : {
            "start" : 1756184281491,
            "stop" : 1756184281491,
            "duration" : 0
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "f2f3eca5d84d9ccb",
            "name" : "判断结果",
            "source" : "f2f3eca5d84d9ccb.txt",
            "type" : "text/plain",
            "size" : 42
          } ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "hasContent" : true,
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 1
        }, {
          "name" : "数据稳定达标",
          "time" : {
            "start" : 1756184281491,
            "stop" : 1756184281492,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "7a763047b94afad9",
            "name" : "结果说明",
            "source" : "7a763047b94afad9.txt",
            "type" : "text/plain",
            "size" : 35
          } ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "hasContent" : true,
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 1
        }, {
          "name" : "数据库查询结果（最终稳定结果）",
          "time" : {
            "start" : 1756184281492,
            "stop" : 1756184281493,
            "duration" : 1
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ {
            "uid" : "6497ac1a91d1da2e",
            "name" : "查询结果（共1条，显示前50条）",
            "source" : "6497ac1a91d1da2e.json",
            "type" : "application/json",
            "size" : 1777
          } ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "hasContent" : true,
          "shouldDisplayMessage" : false,
          "attachmentsCount" : 1
        } ],
        "attachments" : [ {
          "uid" : "74270f9b2beb7439",
          "name" : "执行SQL",
          "source" : "74270f9b2beb7439.txt",
          "type" : "text/plain",
          "size" : 263
        }, {
          "uid" : "f1ed3ecc4efccef",
          "name" : "SQL参数",
          "source" : "f1ed3ecc4efccef.txt",
          "type" : "text/plain",
          "size" : 32
        }, {
          "uid" : "dc60acdf5ff7ddb",
          "name" : "时间范围",
          "source" : "dc60acdf5ff7ddb.txt",
          "type" : "text/plain",
          "size" : 7
        } ],
        "parameters" : [ ],
        "stepsCount" : 16,
        "hasContent" : true,
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 25
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 17,
      "hasContent" : true,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 25
    }, {
      "name" : "2. 转换Redis数据为可比较格式",
      "time" : {
        "start" : 1756184281493,
        "stop" : 1756184281495,
        "duration" : 2
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0
    }, {
      "name" : "3. 比较Redis与数据库数据",
      "time" : {
        "start" : 1756184281495,
        "stop" : 1756184281499,
        "duration" : 4
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Failed: 数据列表不匹配（长度不匹配）\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\lingkuan_refine\\test_vps\\test_vpsOrder_open_level.py\", line 1115, in test_dbquery_redis\n    self.assert_data_lists_equal(\n  File \"D:\\pycharm_test\\lingkuan_refine\\commons\\api_base.py\", line 1144, in assert_data_lists_equal\n    assert len(actual_sorted) == len(expected_sorted), \\\n",
      "steps" : [ {
        "name" : "断言数据列表相等",
        "time" : {
          "start" : 1756184281496,
          "stop" : 1756184281499,
          "duration" : 3
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "e9dc430c47d76649",
          "name" : "比较维度",
          "source" : "e9dc430c47d76649.txt",
          "type" : "text/plain",
          "size" : 69
        }, {
          "uid" : "762748b219da699f",
          "name" : "精度设置",
          "source" : "762748b219da699f.txt",
          "type" : "text/plain",
          "size" : 22
        }, {
          "uid" : "1fefb3f220fcb28a",
          "name" : "实际列表",
          "source" : "1fefb3f220fcb28a.json",
          "type" : "application/json",
          "size" : 6741
        }, {
          "uid" : "a93011d2c5cb9ed7",
          "name" : "预期列表",
          "source" : "a93011d2c5cb9ed7.json",
          "type" : "application/json",
          "size" : 124
        } ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "hasContent" : true,
        "shouldDisplayMessage" : false,
        "attachmentsCount" : 4
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 1,
      "hasContent" : true,
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 4
    } ],
    "attachments" : [ {
      "uid" : "f79123a66e4c5f15",
      "name" : "log",
      "source" : "f79123a66e4c5f15.txt",
      "type" : "text/plain",
      "size" : 11962
    } ],
    "parameters" : [ ],
    "stepsCount" : 21,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 30
  },
  "afterStages" : [ {
    "name" : "db_transaction::0",
    "time" : {
      "start" : 1756184281923,
      "stop" : 1756184281923,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "redis_client::0",
    "time" : {
      "start" : 1756184281921,
      "stop" : 1756184281922,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db::0",
    "time" : {
      "start" : 1756184281923,
      "stop" : 1756184281924,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "var_manager::0",
    "time" : {
      "start" : 1756184330325,
      "stop" : 1756184330326,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "VPS策略下单-漏单场景"
  }, {
    "name" : "story",
    "value" : "场景2：VPS策略下单-漏平"
  }, {
    "name" : "parentSuite",
    "value" : "test_vps"
  }, {
    "name" : "suite",
    "value" : "test_vpsOrder_open_level"
  }, {
    "name" : "subSuite",
    "value" : "TestLeakageopen_level"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "34900-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_vps.test_vpsOrder_open_level"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "3a756c6e7d5b9b7c.json",
  "parameterValues" : [ ]
}