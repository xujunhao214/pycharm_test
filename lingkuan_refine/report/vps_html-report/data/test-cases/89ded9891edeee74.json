{
  "uid" : "89ded9891edeee74",
  "name" : "数据库校验-交易平仓-主指令及订单详情数据检查-有1个订单",
  "fullName" : "test_vps.test_vps_masOrderClose.TestVPStradingOrders9#test_dbquery_orderSendclose2",
  "historyId" : "d01b0f8645efe9eea9de0c1a2cf7d24d",
  "time" : {
    "start" : 1756112279747,
    "stop" : 1756112311493,
    "duration" : 31746
  },
  "description" : "\n    ### 测试说明\n    - 前置条件：有vps策略和vps跟单\n      1. MT4登录，然后进行开仓\n      2. 进行平仓-订单类型-内部订单\n      3. 校验平仓的订单数，应该没有平仓订单\n      4. 进行平仓-订单类型-外部订单\n      5. 校验平仓的订单数,等于1\n    - 预期结果：平仓的订单类型功能正确\n    ",
  "descriptionHtml" : "<pre><code>### 测试说明\n- 前置条件：有vps策略和vps跟单\n  1. MT4登录，然后进行开仓\n  2. 进行平仓-订单类型-内部订单\n  3. 校验平仓的订单数，应该没有平仓订单\n  4. 进行平仓-订单类型-外部订单\n  5. 校验平仓的订单数,等于1\n- 预期结果：平仓的订单类型功能正确\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "TimeoutError: Failed: 时区查询超时（30秒）",
  "statusTrace" : "self = <lingkuan_refine.test_vps.test_vps_masOrderClose.TestVPSMasOrderclose.TestVPStradingOrders9 object at 0x0000014712FC7430>\nvar_manager = <lingkuan_refine.commons.variable_manager.VariableManager object at 0x0000014712FE88B0>\ndb_transaction = <pymysql.connections.Connection object at 0x00000147131F2B50>\n\n    @allure.title(\"数据库校验-交易平仓-主指令及订单详情数据检查-有1个订单\")\n    def test_dbquery_orderSendclose2(self, var_manager, db_transaction):\n        with allure.step(\"1. 获取订单详情界面跟单账号数据\"):\n            new_user = var_manager.get_variable(\"new_user\")\n            sql = f\"\"\"\n                    SELECT\n                        fod.size,\n                        fod.close_no,\n                        fod.magical,\n                        fod.open_price,\n                        fod.symbol,\n                        fod.order_no,\n                        fod.close_time,\n                        foi.true_total_lots,\n                        foi.order_no,\n                        foi.operation_type,\n                        foi.create_time,\n                        foi.status\n                    FROM\n                        follow_order_detail fod\n                    INNER JOIN\n                        follow_order_instruct foi\n                    ON\n                        foi.order_no = fod.close_no COLLATE utf8mb4_0900_ai_ci\n                    WHERE foi.operation_type = %s\n                        AND fod.account = %s\n                        \"\"\"\n            params = (\n                '1',\n                new_user[\"account\"],\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n>           db_data = self.query_database_with_time_with_timezone(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"fod.close_time\"\n            )\n\ntest_vps\\test_vps_masOrderClose.py:2554: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_refine.test_vps.test_vps_masOrderClose.TestVPSMasOrderclose.TestVPStradingOrders9 object at 0x0000014712FC7430>\ndb_transaction = <pymysql.connections.Connection object at 0x00000147131F2B50>\nsql = '\\n                        SELECT \\n                            fod.size,\\n                            fod.close_no,\\n...         WHERE foi.operation_type = %s\\n                            AND fod.account = %s\\n                            '\nparams = ('1', '300151'), time_field = 'fod.close_time', time_range = 1\norder_by = 'create_time DESC', timeout = 30, poll_interval = 2\nstable_period = 2, timezone_offset = 5\n\n    def query_database_with_time_with_timezone(\n            self,\n            db_transaction: pymysql.connections.Connection,\n            sql: str,\n            params: tuple = (),\n            time_field: Optional[str] = None,\n            time_range: int = MYSQL_TIME,\n            order_by: str = \"create_time DESC\",\n            timeout: int = WAIT_TIMEOUT,\n            poll_interval: int = POLL_INTERVAL,\n            stable_period: int = STBLE_PERIOD,\n            timezone_offset: int = TIMEZONE_OFFSET\n    ) -> List[Dict[str, Any]]:\n        \"\"\"带时区转换的轮询查询（兼容原有用例）\"\"\"\n        offset_str = f\"{timezone_offset:+03d}:00\"  # 转换为时区字符串（如+08:00）\n        start_time = time.time()\n        last_result = None\n        stable_start_time = None\n        final_result = None\n    \n        logger.info(\n            f\"[{self._get_current_time()}] 开始轮询（时区{offset_str}）| \"\n            f\"SQL: {sql[:200]} | 超时: {timeout}秒\"\n        )\n        with allure.step(f\"轮询等待数据稳定（时区{offset_str}，超时{timeout}秒）\"):\n            allure.attach(sql, \"执行SQL\", allure.attachment_type.TEXT)\n            allure.attach(str(params), \"SQL参数\", allure.attachment_type.TEXT)\n    \n        while time.time() - start_time < timeout:\n            try:\n                db_transaction.commit()\n                # 执行带时区转换的单次查询\n                result = self._execute_query_with_timezone(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params,\n                    time_field=time_field,\n                    order_by=order_by,\n                    time_range=time_range,\n                    timezone_offset=offset_str,\n                    attach_to_allure=False\n                )\n    \n                # 复用数据稳定判断逻辑\n                if len(result) > 0 and self._is_result_stable(result, last_result):\n                    if stable_start_time is None:\n                        stable_start_time = time.time()\n                    elif time.time() - stable_start_time >= stable_period:\n                        final_result = result\n                        logger.info(f\"[{self._get_current_time()}] 数据稳定，轮询结束\")\n                        break\n                else:\n                    stable_start_time = None\n    \n                last_result = result\n                time.sleep(poll_interval)\n    \n            except Exception as e:\n                logger.warning(f\"[{self._get_current_time()}] 轮询异常: {str(e)} | 继续等待\")\n                time.sleep(poll_interval)\n    \n        # 超时处理\n        if final_result is None:\n            final_result = self._execute_query_with_timezone(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=time_field,\n                order_by=order_by,\n                time_range=time_range,\n                timezone_offset=offset_str,\n                attach_to_allure=True\n            )\n    \n        # 附加结果到报告\n        if final_result:\n            with allure.step(\"带时区查询最终结果\"):\n                allure.attach(self.serialize_data(final_result[:50]), \"结果预览\", allure.attachment_type.JSON)\n    \n>       if not final_result:\nE       TimeoutError: Failed: 时区查询超时（30秒）\n\ncommons\\api_base.py:914: TimeoutError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "db_transaction",
    "time" : {
      "start" : 1756112279747,
      "stop" : 1756112279747,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "db",
    "time" : {
      "start" : 1756112279333,
      "stop" : 1756112279747,
      "duration" : 414
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "description" : "\n    ### 测试说明\n    - 前置条件：有vps策略和vps跟单\n      1. MT4登录，然后进行开仓\n      2. 进行平仓-订单类型-内部订单\n      3. 校验平仓的订单数，应该没有平仓订单\n      4. 进行平仓-订单类型-外部订单\n      5. 校验平仓的订单数,等于1\n    - 预期结果：平仓的订单类型功能正确\n    ",
    "status" : "broken",
    "statusMessage" : "TimeoutError: Failed: 时区查询超时（30秒）",
    "statusTrace" : "self = <lingkuan_refine.test_vps.test_vps_masOrderClose.TestVPSMasOrderclose.TestVPStradingOrders9 object at 0x0000014712FC7430>\nvar_manager = <lingkuan_refine.commons.variable_manager.VariableManager object at 0x0000014712FE88B0>\ndb_transaction = <pymysql.connections.Connection object at 0x00000147131F2B50>\n\n    @allure.title(\"数据库校验-交易平仓-主指令及订单详情数据检查-有1个订单\")\n    def test_dbquery_orderSendclose2(self, var_manager, db_transaction):\n        with allure.step(\"1. 获取订单详情界面跟单账号数据\"):\n            new_user = var_manager.get_variable(\"new_user\")\n            sql = f\"\"\"\n                    SELECT\n                        fod.size,\n                        fod.close_no,\n                        fod.magical,\n                        fod.open_price,\n                        fod.symbol,\n                        fod.order_no,\n                        fod.close_time,\n                        foi.true_total_lots,\n                        foi.order_no,\n                        foi.operation_type,\n                        foi.create_time,\n                        foi.status\n                    FROM\n                        follow_order_detail fod\n                    INNER JOIN\n                        follow_order_instruct foi\n                    ON\n                        foi.order_no = fod.close_no COLLATE utf8mb4_0900_ai_ci\n                    WHERE foi.operation_type = %s\n                        AND fod.account = %s\n                        \"\"\"\n            params = (\n                '1',\n                new_user[\"account\"],\n            )\n    \n            # 调用轮询等待方法（带时间范围过滤）\n>           db_data = self.query_database_with_time_with_timezone(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"fod.close_time\"\n            )\n\ntest_vps\\test_vps_masOrderClose.py:2554: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_refine.test_vps.test_vps_masOrderClose.TestVPSMasOrderclose.TestVPStradingOrders9 object at 0x0000014712FC7430>\ndb_transaction = <pymysql.connections.Connection object at 0x00000147131F2B50>\nsql = '\\n                        SELECT \\n                            fod.size,\\n                            fod.close_no,\\n...         WHERE foi.operation_type = %s\\n                            AND fod.account = %s\\n                            '\nparams = ('1', '300151'), time_field = 'fod.close_time', time_range = 1\norder_by = 'create_time DESC', timeout = 30, poll_interval = 2\nstable_period = 2, timezone_offset = 5\n\n    def query_database_with_time_with_timezone(\n            self,\n            db_transaction: pymysql.connections.Connection,\n            sql: str,\n            params: tuple = (),\n            time_field: Optional[str] = None,\n            time_range: int = MYSQL_TIME,\n            order_by: str = \"create_time DESC\",\n            timeout: int = WAIT_TIMEOUT,\n            poll_interval: int = POLL_INTERVAL,\n            stable_period: int = STBLE_PERIOD,\n            timezone_offset: int = TIMEZONE_OFFSET\n    ) -> List[Dict[str, Any]]:\n        \"\"\"带时区转换的轮询查询（兼容原有用例）\"\"\"\n        offset_str = f\"{timezone_offset:+03d}:00\"  # 转换为时区字符串（如+08:00）\n        start_time = time.time()\n        last_result = None\n        stable_start_time = None\n        final_result = None\n    \n        logger.info(\n            f\"[{self._get_current_time()}] 开始轮询（时区{offset_str}）| \"\n            f\"SQL: {sql[:200]} | 超时: {timeout}秒\"\n        )\n        with allure.step(f\"轮询等待数据稳定（时区{offset_str}，超时{timeout}秒）\"):\n            allure.attach(sql, \"执行SQL\", allure.attachment_type.TEXT)\n            allure.attach(str(params), \"SQL参数\", allure.attachment_type.TEXT)\n    \n        while time.time() - start_time < timeout:\n            try:\n                db_transaction.commit()\n                # 执行带时区转换的单次查询\n                result = self._execute_query_with_timezone(\n                    db_transaction=db_transaction,\n                    sql=sql,\n                    params=params,\n                    time_field=time_field,\n                    order_by=order_by,\n                    time_range=time_range,\n                    timezone_offset=offset_str,\n                    attach_to_allure=False\n                )\n    \n                # 复用数据稳定判断逻辑\n                if len(result) > 0 and self._is_result_stable(result, last_result):\n                    if stable_start_time is None:\n                        stable_start_time = time.time()\n                    elif time.time() - stable_start_time >= stable_period:\n                        final_result = result\n                        logger.info(f\"[{self._get_current_time()}] 数据稳定，轮询结束\")\n                        break\n                else:\n                    stable_start_time = None\n    \n                last_result = result\n                time.sleep(poll_interval)\n    \n            except Exception as e:\n                logger.warning(f\"[{self._get_current_time()}] 轮询异常: {str(e)} | 继续等待\")\n                time.sleep(poll_interval)\n    \n        # 超时处理\n        if final_result is None:\n            final_result = self._execute_query_with_timezone(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=time_field,\n                order_by=order_by,\n                time_range=time_range,\n                timezone_offset=offset_str,\n                attach_to_allure=True\n            )\n    \n        # 附加结果到报告\n        if final_result:\n            with allure.step(\"带时区查询最终结果\"):\n                allure.attach(self.serialize_data(final_result[:50]), \"结果预览\", allure.attachment_type.JSON)\n    \n>       if not final_result:\nE       TimeoutError: Failed: 时区查询超时（30秒）\n\ncommons\\api_base.py:914: TimeoutError",
    "steps" : [ {
      "name" : "1. 获取订单详情界面跟单账号数据",
      "time" : {
        "start" : 1756112279747,
        "stop" : 1756112311493,
        "duration" : 31746
      },
      "status" : "broken",
      "statusMessage" : "TimeoutError: Failed: 时区查询超时（30秒）\n",
      "statusTrace" : "  File \"D:\\pycharm_test\\lingkuan_refine\\test_vps\\test_vps_masOrderClose.py\", line 2554, in test_dbquery_orderSendclose2\n    db_data = self.query_database_with_time_with_timezone(\n  File \"D:\\pycharm_test\\lingkuan_refine\\commons\\api_base.py\", line 914, in query_database_with_time_with_timezone\n    if not final_result:\n",
      "steps" : [ {
        "name" : "轮询等待数据稳定（时区+05:00，超时30秒）",
        "time" : {
          "start" : 1756112279747,
          "stop" : 1756112279748,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "83c216f8be4e78f",
          "name" : "SQL模板",
          "source" : "83c216f8be4e78f.txt",
          "type" : "text/plain",
          "size" : 962
        } ],
        "parameters" : [ ],
        "hasContent" : true,
        "stepsCount" : 0,
        "attachmentsCount" : 1,
        "shouldDisplayMessage" : false
      }, {
        "name" : "数据库查询结果",
        "time" : {
          "start" : 1756112311492,
          "stop" : 1756112311493,
          "duration" : 1
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "94c9bc1c26c0f508",
          "name" : "执行SQL",
          "source" : "94c9bc1c26c0f508.txt",
          "type" : "text/plain",
          "size" : 1107
        }, {
          "uid" : "4cab0a40d0c14358",
          "name" : "SQL参数",
          "source" : "4cab0a40d0c14358.txt",
          "type" : "text/plain",
          "size" : 21
        }, {
          "uid" : "3c4645495ec419e3",
          "name" : "查询结果（共0条，显示前50条）",
          "source" : "3c4645495ec419e3.json",
          "type" : "application/json",
          "size" : 2
        } ],
        "parameters" : [ ],
        "hasContent" : true,
        "stepsCount" : 0,
        "attachmentsCount" : 3,
        "shouldDisplayMessage" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 2,
      "attachmentsCount" : 4,
      "shouldDisplayMessage" : true
    } ],
    "attachments" : [ {
      "uid" : "116e6da45c29bfef",
      "name" : "log",
      "source" : "116e6da45c29bfef.txt",
      "type" : "text/plain",
      "size" : 36697
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 3,
    "attachmentsCount" : 5,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "db_transaction::0",
    "time" : {
      "start" : 1756112311513,
      "stop" : 1756112311513,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "db::0",
    "time" : {
      "start" : 1756112311514,
      "stop" : 1756112311514,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "VPS策略账号交易下单-平仓的功能校验"
  }, {
    "name" : "story",
    "value" : "场景9：平仓的订单类型功能校验-外部订单"
  }, {
    "name" : "parentSuite",
    "value" : "test_vps"
  }, {
    "name" : "suite",
    "value" : "test_vps_masOrderClose"
  }, {
    "name" : "subSuite",
    "value" : "TestVPSMasOrderclose"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4S9CU1E"
  }, {
    "name" : "thread",
    "value" : "32884-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_vps.test_vps_masOrderClose"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "89ded9891edeee74.json",
  "parameterValues" : [ ]
}