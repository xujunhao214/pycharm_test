{"name": "数据库校验-跟单指令开仓数据", "status": "failed", "statusDetails": {"message": "AssertionError: 总手数不符: 预期5, 指令4.960000000000001, 详情4.960000000000001\nassert (False)\n +  where False = <built-in function isclose>(5.0, 4.960000000000001, rel_tol=1e-09)\n +    where <built-in function isclose> = math.isclose\n +    and   5.0 = float('5')\n +    and   4.960000000000001 = float(4.960000000000001)", "trace": "self = <lingkuan_refine.test_vps.test_vps_ordersend.TestVPSOrderSend_AllScenarios object at 0x000001DFD461A310>\nvar_manager = <lingkuan_refine.commons.variable_manager.VariableManager object at 0x000001DFD4923670>\ndb_transaction = <pymysql.connections.Connection object at 0x000001DFD4712040>\n\n    @allure.story(\"场景3：手数范围0.1-1，总手数5\")\n    @allure.title(\"数据库校验-跟单指令开仓数据\")\n    def test_scenario3_dbquery_slave_open(self, var_manager, db_transaction):\n        test_params = {\n            \"totalNum\": \"\",\n            \"totalSzie\": \"5\",\n            \"startSize\": \"0.1\",\n            \"endSize\": \"1\",\n            \"intervalTime\": \"100\"\n        }\n>       self._verify_open_order_slave(var_manager, db_transaction, test_params)\n\ntest_vps\\test_vps_ordersend.py:604: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <lingkuan_refine.test_vps.test_vps_ordersend.TestVPSOrderSend_AllScenarios object at 0x000001DFD461A310>\nvar_manager = <lingkuan_refine.commons.variable_manager.VariableManager object at 0x000001DFD4923670>\ndb_transaction = <pymysql.connections.Connection object at 0x000001DFD4712040>\ntest_params = {'endSize': '1', 'intervalTime': '100', 'startSize': '0.1', 'totalNum': '', ...}\n\n    def _verify_open_order_slave(self, var_manager, db_transaction, test_params):\n        \"\"\"验证跟单指令开仓数据（公共方法）\"\"\"\n        vps_user_accounts_1 = var_manager.get_variable(\"vps_user_accounts_1\")\n    \n        # 1. 获取订单数据\n        with allure.step(\"1. 获取跟单指令开仓数据\"):\n            sql = \"\"\"\n                SELECT\n                    fod.size,\n                    fod.send_no,\n                    fod.magical,\n                    fod.open_price,\n                    fod.symbol,\n                    fod.order_no,\n                    foi.true_total_lots,\n                    foi.order_no,\n                    foi.operation_type,\n                    foi.create_time,\n                    foi.status,\n                    foi.total_lots,\n                    foi.total_orders\n                FROM\n                    follow_order_detail fod\n                INNER JOIN\n                    follow_order_instruct foi\n                ON\n                    foi.order_no = fod.send_no COLLATE utf8mb4_0900_ai_ci\n                WHERE foi.operation_type = %s\n                    AND fod.account = %s\n            \"\"\"\n            params = ('0', vps_user_accounts_1)\n    \n            db_data = self.query_database_with_time_with_timezone(\n                db_transaction=db_transaction,\n                sql=sql,\n                params=params,\n                time_field=\"fod.open_time\"\n            )\n    \n        # 2. 数据校验\n        with allure.step(\"2. 验证跟单指令开仓数据\"):\n            if not db_data:\n                pytest.fail(\"数据库查询结果为空，无法提取数据\")\n    \n            # 验证订单状态\n            status = db_data[0][\"status\"]\n            assert status in (0, 1), f\"订单状态应为0或1，实际为: {status}\"\n            logger.info(f\"订单状态验证通过: {status}\")\n    \n            # 验证手数一致性\n            size = [record[\"size\"] for record in db_data]\n            total_lots = [record[\"total_lots\"] for record in db_data]\n            self.assert_list_equal_ignore_order(\n                size,\n                total_lots,\n                f\"手数不一致: 详情{size}, 指令{total_lots}\"\n            )\n            logger.info(\"手数一致性验证通过\")\n    \n            # 验证总手数\n            if test_params[\"totalSzie\"]:\n                total_sumlots = sum(total_lots)\n                total = sum(size)\n>               assert math.isclose(\n                    float(test_params[\"totalSzie\"]),\n                    float(total_sumlots),\n                    rel_tol=1e-9\n                ) and math.isclose(\n                    float(test_params[\"totalSzie\"]),\n                    float(total),\n                    rel_tol=1e-9\n                ), f'总手数不符: 预期{test_params[\"totalSzie\"]}, 指令{total_sumlots}, 详情{total}'\nE               AssertionError: 总手数不符: 预期5, 指令4.960000000000001, 详情4.960000000000001\nE               assert (False)\nE                +  where False = <built-in function isclose>(5.0, 4.960000000000001, rel_tol=1e-09)\nE                +    where <built-in function isclose> = math.isclose\nE                +    and   5.0 = float('5')\nE                +    and   4.960000000000001 = float(4.960000000000001)\n\ntest_vps\\test_vps_ordersend.py:262: AssertionError"}, "description": "\n### 用例说明\n- 前置条件：有vps策略和vps跟单\n- 包含五种开仓场景，验证不同参数组合下的订单数据正确性\n- 场景1：手数范围0.1-1，总订单3，总手数1\n- 场景2：手数范围0.01-0.01，总手数0.01\n- 场景3：场景3：手数范围0.1-1，总手数5\n- 场景4：场景4：手数范围0.01-1，总订单10\n- 场景5：场景5：手数范围0.1-1，总手数1-停止功能\n", "steps": [{"name": "1. 获取跟单指令开仓数据", "status": "passed", "steps": [{"name": "等待数据库记录稳定（时区: +05:00，超时: 30秒）", "status": "passed", "start": 1755512331193, "stop": 1755512331193}, {"name": "数据库查询结果（最终稳定结果）", "status": "passed", "attachments": [{"name": "执行SQL", "source": "1780828d-fc3c-4d28-9c02-0ceb185987a6-attachment.txt", "type": "text/plain"}, {"name": "SQL参数", "source": "8876c3a1-b18a-4e1d-8d2d-243cb0a4bf43-attachment.txt", "type": "text/plain"}, {"name": "查询结果（共9条，显示前9条）", "source": "d3ad7efe-bf7d-445c-8b56-5878a82aae13-attachment.json", "type": "application/json"}], "start": 1755512340462, "stop": 1755512340463}], "attachments": [{"name": "等待结果", "source": "d0577ca1-45db-43d8-b417-a740a43fe35b-attachment.txt", "type": "text/plain"}], "start": 1755512331193, "stop": 1755512340463}, {"name": "2. 验证跟单指令开仓数据", "status": "failed", "statusDetails": {"message": "AssertionError: 总手数不符: 预期5, 指令4.960000000000001, 详情4.960000000000001\nassert (False)\n +  where False = <built-in function isclose>(5.0, 4.960000000000001, rel_tol=1e-09)\n +    where <built-in function isclose> = math.isclose\n +    and   5.0 = float('5')\n +    and   4.960000000000001 = float(4.960000000000001)\n", "trace": "  File \"D:\\pycharm_test\\lingkuan_refine\\test_vps\\test_vps_ordersend.py\", line 262, in _verify_open_order_slave\n    assert math.isclose(\n"}, "start": 1755512340463, "stop": 1755512340463}], "attachments": [{"name": "log", "source": "f8339973-7eab-4ea3-8cb9-837ebaa63305-attachment.txt", "type": "text/plain"}], "start": 1755512331193, "stop": 1755512340463, "uuid": "0ebeed3b-a803-4e9d-9e19-b4e1465aef6e", "historyId": "1685c2d6f9715d38483fa3ff97fb1189", "testCaseId": "1685c2d6f9715d38483fa3ff97fb1189", "fullName": "test_vps.test_vps_ordersend.TestVPSOrderSend_AllScenarios#test_scenario3_dbquery_slave_open", "labels": [{"name": "feature", "value": "VPS策略下单-正常开仓平仓"}, {"name": "story", "value": "场景3：手数范围0.1-1，总手数5"}, {"name": "parentSuite", "value": "test_vps"}, {"name": "suite", "value": "test_vps_ordersend"}, {"name": "subSuite", "value": "TestVPSOrderSend_AllScenarios"}, {"name": "host", "value": "DESKTOP-4S9CU1E"}, {"name": "thread", "value": "6824-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_vps.test_vps_ordersend"}]}